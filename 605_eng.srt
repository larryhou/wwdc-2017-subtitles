1
00:00:23,236 --> 00:00:25,986
>> Thank you.

2
00:00:26,176 --> 00:00:27,606
Good morning everybody, and

3
00:00:27,606 --> 00:00:29,186
welcome to SceneKit in Swift

4
00:00:29,186 --> 00:00:29,796
Playgrounds.

5
00:00:30,496 --> 00:00:31,926
My name's Michael DeWitt and I'm

6
00:00:31,926 --> 00:00:33,536
really excited today to give you

7
00:00:33,536 --> 00:00:35,396
an inside look into how we use

8
00:00:35,396 --> 00:00:36,866
SceneKit to make the Learn to

9
00:00:36,866 --> 00:00:37,616
Code content.

10
00:00:38,026 --> 00:00:39,366
So hopefully many of you are

11
00:00:39,366 --> 00:00:40,416
already familiar with Swift

12
00:00:40,416 --> 00:00:42,036
Playgrounds, but let me show you

13
00:00:42,036 --> 00:00:43,286
Learn to Code.

14
00:00:44,576 --> 00:00:46,296
So this is an example lesson

15
00:00:46,296 --> 00:00:47,826
from the Learn to Code content

16
00:00:47,856 --> 00:00:48,916
that lives inside Swift

17
00:00:48,916 --> 00:00:49,426
Playgrounds.

18
00:00:49,556 --> 00:00:51,716
On the left-hand side we have

19
00:00:51,716 --> 00:00:53,246
the lesson and the user's code.

20
00:00:53,246 --> 00:00:55,326
But for this talk we're really

21
00:00:55,326 --> 00:00:56,636
going to focus on the right-hand

22
00:00:56,636 --> 00:00:56,996
side.

23
00:00:57,096 --> 00:00:58,076
Notice the live view.

24
00:00:58,366 --> 00:00:59,816
If we could actually take that

25
00:00:59,816 --> 00:01:01,256
full screen to get a little

26
00:01:01,256 --> 00:01:02,246
better view of it.

27
00:01:03,056 --> 00:01:05,126
This character, Byte, that is

28
00:01:05,126 --> 00:01:06,676
now literally sprinting around

29
00:01:06,676 --> 00:01:09,076
this map to collect the gems, is

30
00:01:09,076 --> 00:01:11,666
moving up and down stairs and

31
00:01:11,666 --> 00:01:13,446
after Byte has collected all the

32
00:01:13,446 --> 00:01:16,136
gems, we get a congratulations

33
00:01:16,136 --> 00:01:17,796
sequence that lets the learner

34
00:01:17,796 --> 00:01:18,726
know they've done something

35
00:01:18,726 --> 00:01:20,676
great, and Byte even has a few

36
00:01:20,676 --> 00:01:22,756
dance moves to let people know

37
00:01:22,756 --> 00:01:23,316
it's really good.

38
00:01:24,106 --> 00:01:25,856
So this is our case study today.

39
00:01:26,506 --> 00:01:28,186
We're going to work through this

40
00:01:28,186 --> 00:01:30,656
scene on how to use SceneKit

41
00:01:30,656 --> 00:01:32,606
effectively and really bring the

42
00:01:32,606 --> 00:01:34,016
richness of 3D to your

43
00:01:34,016 --> 00:01:34,906
applications.

44
00:01:36,096 --> 00:01:39,476
So if you're interested in 3D

45
00:01:39,676 --> 00:01:41,246
but are maybe pretty new to it,

46
00:01:41,776 --> 00:01:42,766
you've come to the right place

47
00:01:42,766 --> 00:01:44,436
because we actually started with

48
00:01:44,436 --> 00:01:46,656
something very different than

49
00:01:47,476 --> 00:01:47,576
this.

50
00:01:47,796 --> 00:01:49,646
We started with a simple 2D

51
00:01:49,736 --> 00:01:50,096
scene.

52
00:01:50,666 --> 00:01:52,206
And one of the best parts about

53
00:01:52,206 --> 00:01:54,206
SceneKit is it allowed a couple

54
00:01:54,206 --> 00:01:56,546
of 2D programmers to take this

55
00:01:56,546 --> 00:01:59,096
scene on an existing timeline

56
00:01:59,456 --> 00:02:01,776
and make the rich 3D content

57
00:02:01,776 --> 00:02:02,976
that we shift in Learn to Code.

58
00:02:04,326 --> 00:02:05,196
So that's what we're going to

59
00:02:05,196 --> 00:02:05,906
talk about today.

60
00:02:06,426 --> 00:02:07,956
We've got 40 minutes and we've

61
00:02:07,956 --> 00:02:09,036
broken it down into three

62
00:02:09,036 --> 00:02:09,626
sections.

63
00:02:10,716 --> 00:02:12,146
First, I'll talk about

64
00:02:12,146 --> 00:02:14,226
prototyping and how we refined

65
00:02:14,226 --> 00:02:15,626
the idea to make sure it was

66
00:02:15,626 --> 00:02:16,806
really good.

67
00:02:17,296 --> 00:02:19,356
In iterating I want to go over

68
00:02:19,356 --> 00:02:20,086
when you're actually getting

69
00:02:20,086 --> 00:02:21,156
some real assets from your

70
00:02:21,156 --> 00:02:22,836
vendor, how you can establish an

71
00:02:22,836 --> 00:02:23,806
effective pipeline.

72
00:02:23,806 --> 00:02:25,776
And then Lamont will come on

73
00:02:25,776 --> 00:02:27,386
stage to talk about tuning and

74
00:02:27,386 --> 00:02:28,856
getting your scene ready to

75
00:02:29,376 --> 00:02:29,486
ship.

76
00:02:30,276 --> 00:02:32,646
First up is prototyping.

77
00:02:33,466 --> 00:02:36,706
This is coming at a phase right

78
00:02:36,706 --> 00:02:38,876
after we decided on the idea for

79
00:02:38,876 --> 00:02:40,066
Learn to Code and we're really

80
00:02:40,066 --> 00:02:41,026
ready to start building

81
00:02:41,026 --> 00:02:41,426
something.

82
00:02:41,936 --> 00:02:43,616
So you saw this graphic before,

83
00:02:43,616 --> 00:02:44,826
but here it is in context.

84
00:02:45,896 --> 00:02:48,796
We started off with gems that

85
00:02:48,796 --> 00:02:50,236
came from the emoji tray and

86
00:02:50,366 --> 00:02:51,586
assets we had lying around

87
00:02:51,766 --> 00:02:52,806
because we just needed to get

88
00:02:52,806 --> 00:02:53,946
something up and running as

89
00:02:53,946 --> 00:02:55,956
quickly as possible to test the

90
00:02:55,956 --> 00:02:57,336
interaction model in this new

91
00:02:58,236 --> 00:02:58,346
app.

92
00:02:58,346 --> 00:02:59,476
So we learned a lot from this.

93
00:02:59,476 --> 00:03:00,566
It didn't matter what the assets

94
00:03:00,566 --> 00:03:03,166
looked like, but through this

95
00:03:03,166 --> 00:03:04,496
prototyping process we started

96
00:03:04,496 --> 00:03:05,426
to get some early feedback.

97
00:03:06,456 --> 00:03:08,116
Some of those comments were

98
00:03:08,116 --> 00:03:09,016
about the graphics.

99
00:03:09,496 --> 00:03:11,126
It was requests like could we

100
00:03:11,126 --> 00:03:12,886
change the gem color, could we

101
00:03:12,886 --> 00:03:14,606
add a border around the scene,

102
00:03:14,726 --> 00:03:16,046
or could we pivot the camera at

103
00:03:16,146 --> 00:03:16,996
the end to give a little bit of

104
00:03:16,996 --> 00:03:17,826
visual interest.

105
00:03:18,946 --> 00:03:21,636
While this is good feedback, it

106
00:03:21,636 --> 00:03:23,936
really is very iterative, and

107
00:03:23,936 --> 00:03:25,046
when you're prototyping, you

108
00:03:25,046 --> 00:03:26,166
shouldn't be afraid to throw the

109
00:03:26,166 --> 00:03:26,876
whole thing away.

110
00:03:27,376 --> 00:03:28,956
And so if we go back and look at

111
00:03:28,956 --> 00:03:30,856
the scene in context, you can

112
00:03:30,856 --> 00:03:32,496
see it just is very flat on this

113
00:03:32,496 --> 00:03:33,036
page.

114
00:03:33,396 --> 00:03:34,636
So all of the feedback we're

115
00:03:34,636 --> 00:03:35,926
getting is about the visual

116
00:03:35,926 --> 00:03:36,116
look.

117
00:03:36,436 --> 00:03:38,126
We need to just re-evaluate our

118
00:03:38,126 --> 00:03:38,606
strategy.

119
00:03:40,396 --> 00:03:41,796
So we had been working the

120
00:03:41,796 --> 00:03:43,786
SpriteKit and now we started

121
00:03:43,786 --> 00:03:44,656
exploring SceneKit.

122
00:03:45,316 --> 00:03:46,376
And for many of you who are

123
00:03:46,376 --> 00:03:48,336
familiar with SpriteKit, you'll

124
00:03:48,336 --> 00:03:49,916
know that it has these concepts;

125
00:03:50,606 --> 00:03:52,206
basically a scene to do your

126
00:03:52,206 --> 00:03:54,356
update logic, a node to place

127
00:03:54,356 --> 00:03:56,546
things in view, and actions to

128
00:03:56,546 --> 00:03:57,676
move those objects around.

129
00:03:58,686 --> 00:04:00,166
Now, the benefit of having

130
00:04:00,166 --> 00:04:01,676
SceneKit also developed at Apple

131
00:04:02,096 --> 00:04:03,386
is that it has a lot of those

132
00:04:03,386 --> 00:04:04,226
same concepts.

133
00:04:05,396 --> 00:04:07,286
So this gave us enough

134
00:04:07,286 --> 00:04:08,976
confidence, a simple prefix

135
00:04:08,976 --> 00:04:10,366
switch, to get started with

136
00:04:10,366 --> 00:04:11,766
SceneKit and start diving in.

137
00:04:12,396 --> 00:04:13,796
So like many of you out there,

138
00:04:14,106 --> 00:04:16,076
we watched a WWDC presentation

139
00:04:16,486 --> 00:04:17,866
from 2015.

140
00:04:17,866 --> 00:04:19,125
It's a great talk given by the

141
00:04:19,125 --> 00:04:21,046
SceneKit Team on how to build a

142
00:04:21,046 --> 00:04:23,186
simple scene like the one you

143
00:04:23,436 --> 00:04:26,486
see here, and not only that, but

144
00:04:26,486 --> 00:04:27,876
we got to use some of the assets

145
00:04:27,876 --> 00:04:30,276
from the sample and recreate our

146
00:04:30,276 --> 00:04:30,706
scene.

147
00:04:32,066 --> 00:04:33,626
So now we got to this stage and

148
00:04:33,626 --> 00:04:35,196
immediately we could tell this

149
00:04:35,196 --> 00:04:36,226
is just way better.

150
00:04:36,306 --> 00:04:37,986
I mean, it's far more immersive,

151
00:04:38,176 --> 00:04:39,736
you can freely pan the camera

152
00:04:39,736 --> 00:04:41,326
and it actually helps you solve

153
00:04:41,326 --> 00:04:41,916
the levels.

154
00:04:42,446 --> 00:04:45,616
But the point of this slide is

155
00:04:45,616 --> 00:04:46,426
that even though we've

156
00:04:46,426 --> 00:04:47,946
definitely bumped up the visual

157
00:04:47,946 --> 00:04:49,766
quality, when you're

158
00:04:49,766 --> 00:04:51,316
prototyping, you still want to

159
00:04:51,316 --> 00:04:52,826
keep that visual fidelity low.

160
00:04:52,986 --> 00:04:54,446
So when we're adding new game

161
00:04:54,446 --> 00:04:55,956
mechanics like these portals,

162
00:04:57,066 --> 00:04:58,116
we're doing it with SceneKit

163
00:04:58,146 --> 00:04:59,776
primitives because we don't want

164
00:04:59,776 --> 00:05:01,006
to get too hung up on making

165
00:05:01,006 --> 00:05:02,566
sure the scene looks absolutely

166
00:05:02,566 --> 00:05:02,926
great.

167
00:05:03,196 --> 00:05:04,036
We want to make sure it's a good

168
00:05:04,036 --> 00:05:04,736
idea first.

169
00:05:05,616 --> 00:05:08,056
So if I had to throw this up on

170
00:05:08,056 --> 00:05:10,766
a Business Tool 101 chart, you

171
00:05:10,766 --> 00:05:11,856
basically look at the whole

172
00:05:11,856 --> 00:05:13,026
timeline of your project.

173
00:05:13,976 --> 00:05:15,396
You want to allocate a large

174
00:05:15,396 --> 00:05:16,566
chunk of that to prototyping

175
00:05:17,136 --> 00:05:18,426
because it's the phase with

176
00:05:18,426 --> 00:05:20,206
which you can make the biggest

177
00:05:20,206 --> 00:05:21,876
changes and the effort to change

178
00:05:21,876 --> 00:05:24,386
is low, especially when you're

179
00:05:24,386 --> 00:05:25,426
working in 3D.

180
00:05:26,076 --> 00:05:27,176
When you start to get real

181
00:05:27,276 --> 00:05:28,546
assets, and in this next section

182
00:05:28,546 --> 00:05:29,396
that we're going to talk about,

183
00:05:29,926 --> 00:05:31,396
the effort to change goes way

184
00:05:31,396 --> 00:05:31,626
up.

185
00:05:32,446 --> 00:05:33,476
So be mindful of that when

186
00:05:33,476 --> 00:05:34,146
you're prototyping.

187
00:05:35,566 --> 00:05:38,086
So in summary, really, you want

188
00:05:38,086 --> 00:05:38,936
to work on testing your

189
00:05:38,936 --> 00:05:39,916
interaction model when you're

190
00:05:39,916 --> 00:05:40,436
prototyping.

191
00:05:40,526 --> 00:05:41,736
It's not about the assets.

192
00:05:42,126 --> 00:05:43,126
You want to interpret the

193
00:05:43,126 --> 00:05:45,186
feedback you receive, but don't

194
00:05:45,186 --> 00:05:46,476
look for incremental changes.

195
00:05:46,686 --> 00:05:47,836
Look to make sure the idea is

196
00:05:47,836 --> 00:05:48,196
valid.

197
00:05:48,856 --> 00:05:50,546
And then finally, take the

198
00:05:50,546 --> 00:05:51,826
insights from this section,

199
00:05:52,016 --> 00:05:52,796
believe the code.

200
00:05:52,886 --> 00:05:53,936
I think one of the best

201
00:05:53,936 --> 00:05:55,066
decisions we made was to

202
00:05:55,096 --> 00:05:56,896
actually start file-new-project

203
00:05:56,966 --> 00:05:58,086
when moving forward past this

204
00:05:58,086 --> 00:06:00,746
point, which brings us to

205
00:06:00,746 --> 00:06:00,956
iterating.

206
00:06:04,246 --> 00:06:06,036
So now we've got the idea and

207
00:06:06,036 --> 00:06:07,036
we're ready to get some real

208
00:06:07,036 --> 00:06:08,456
art, so we started working with

209
00:06:08,456 --> 00:06:10,116
an artist and we received this

210
00:06:10,116 --> 00:06:11,316
early 2D comp.

211
00:06:11,316 --> 00:06:14,476
So you can start to see it

212
00:06:14,476 --> 00:06:15,996
resembles Byte's world now.

213
00:06:16,406 --> 00:06:17,366
It looks way better.

214
00:06:17,806 --> 00:06:19,156
And I want to break down this

215
00:06:19,156 --> 00:06:20,716
world into four parts.

216
00:06:21,666 --> 00:06:22,846
The first thing we'll talk about

217
00:06:23,026 --> 00:06:24,936
is how it's constructed and some

218
00:06:24,936 --> 00:06:25,986
strategies to do that

219
00:06:25,986 --> 00:06:26,506
effectively.

220
00:06:27,476 --> 00:06:30,296
Next, we'll look at how you can

221
00:06:30,296 --> 00:06:32,916
accomplish complex animations in

222
00:06:32,916 --> 00:06:34,486
your app by looking at how we

223
00:06:34,486 --> 00:06:35,976
made Byte move up the stairs.

224
00:06:37,136 --> 00:06:38,686
We'll look at how you can add

225
00:06:38,686 --> 00:06:40,266
visual interests with water and

226
00:06:40,266 --> 00:06:41,406
other scenery elements.

227
00:06:42,616 --> 00:06:44,426
And then we're really focused on

228
00:06:44,426 --> 00:06:46,006
the visuals in this talk, but

229
00:06:46,006 --> 00:06:47,226
there's a whole other area of

230
00:06:47,226 --> 00:06:48,686
your users that actually won't

231
00:06:48,686 --> 00:06:49,816
be able to benefit from the

232
00:06:49,816 --> 00:06:51,256
visuals of a 3D scene, so we're

233
00:06:51,426 --> 00:06:53,046
going to spend some time talking

234
00:06:53,046 --> 00:06:54,476
about accessibility support, and

235
00:06:54,476 --> 00:06:55,496
VoiceOver specifically.

236
00:06:56,686 --> 00:06:57,006
All right.

237
00:06:57,996 --> 00:07:00,406
First up, modeling this world.

238
00:07:00,976 --> 00:07:02,376
So as you can sort of see by the

239
00:07:02,376 --> 00:07:04,116
stencil we built this out of

240
00:07:04,326 --> 00:07:04,876
blocks.

241
00:07:05,016 --> 00:07:06,136
We had individual assets.

242
00:07:06,346 --> 00:07:07,856
There was a couple reasons to do

243
00:07:08,776 --> 00:07:08,926
this.

244
00:07:09,376 --> 00:07:11,146
We needed to not only iterate on

245
00:07:11,146 --> 00:07:12,846
the asset design, but also on

246
00:07:12,846 --> 00:07:13,666
the lesson design.

247
00:07:14,046 --> 00:07:15,506
So we were putting together very

248
00:07:15,506 --> 00:07:17,926
simple puzzles like this to make

249
00:07:17,926 --> 00:07:19,306
sure that learners had a smooth

250
00:07:19,306 --> 00:07:20,386
path through the curriculum.

251
00:07:21,916 --> 00:07:23,466
But rather than placing these

252
00:07:23,466 --> 00:07:25,066
individual blocks in a Scene

253
00:07:25,066 --> 00:07:26,406
Editor, which would be pretty

254
00:07:26,486 --> 00:07:28,196
tedious, we actually wrote some

255
00:07:28,196 --> 00:07:29,146
code to do this.

256
00:07:29,546 --> 00:07:31,196
So much like learners use in

257
00:07:31,196 --> 00:07:32,186
Learn to Code 2 when they're

258
00:07:32,186 --> 00:07:34,216
building their own worlds, we

259
00:07:34,216 --> 00:07:35,666
wrote some code to generate this

260
00:07:35,746 --> 00:07:36,816
and it looks like this.

261
00:07:37,686 --> 00:07:39,846
So to build that world you first

262
00:07:39,846 --> 00:07:41,566
give it a size, 5 by 5.

263
00:07:42,266 --> 00:07:43,976
You place items into it, like

264
00:07:44,026 --> 00:07:45,736
actor, or Byte in the scene you

265
00:07:45,736 --> 00:07:46,286
saw before.

266
00:07:46,606 --> 00:07:48,176
And then you can add additional

267
00:07:48,176 --> 00:07:50,106
elements, such as gems or the

268
00:07:50,106 --> 00:07:51,086
water that you saw in the

269
00:07:51,086 --> 00:07:51,456
center.

270
00:07:51,496 --> 00:07:53,696
But the reason I'm showing you

271
00:07:53,696 --> 00:07:55,636
this code is not because, wow,

272
00:07:55,636 --> 00:07:56,596
we wrote an API to build a

273
00:07:56,596 --> 00:07:58,166
world, that's cool, but it's

274
00:07:58,166 --> 00:08:00,326
really because this is totally

275
00:08:00,326 --> 00:08:01,756
independent from the graphics.

276
00:08:02,006 --> 00:08:03,116
Right. This code will be just as

277
00:08:03,116 --> 00:08:05,286
valid in 2D as it is in 3D.

278
00:08:06,456 --> 00:08:08,636
And let me show you actually

279
00:08:08,636 --> 00:08:09,096
what I mean by that.

280
00:08:09,096 --> 00:08:09,916
I have a short video here for

281
00:08:09,916 --> 00:08:09,983
you.

282
00:08:15,416 --> 00:08:17,016
So here we have Byte moving

283
00:08:17,016 --> 00:08:18,316
around this world and we're

284
00:08:18,316 --> 00:08:19,776
going to add in a few nodes.

285
00:08:19,986 --> 00:08:21,366
The green and red nodes you see

286
00:08:21,366 --> 00:08:23,096
in the scene actually represent

287
00:08:23,096 --> 00:08:23,846
the data that we're

288
00:08:23,846 --> 00:08:24,976
reconstructing gameplay with.

289
00:08:29,346 --> 00:08:31,856
And then really, that data is

290
00:08:31,856 --> 00:08:32,476
all we need.

291
00:08:33,176 --> 00:08:34,956
We've actually separated the

292
00:08:34,956 --> 00:08:36,436
visuals of the scene from the

293
00:08:36,436 --> 00:08:38,006
data that's used to reconstruct

294
00:08:38,006 --> 00:08:38,436
gameplay.

295
00:08:39,336 --> 00:08:40,246
There are a couple of big

296
00:08:40,246 --> 00:08:41,466
benefits to this, and I want you

297
00:08:41,466 --> 00:08:42,256
to think about it when you're

298
00:08:42,256 --> 00:08:43,436
modeling a 3D world.

299
00:08:44,716 --> 00:08:46,286
So separate the data from

300
00:08:46,286 --> 00:08:46,826
visuals.

301
00:08:47,186 --> 00:08:48,876
First is it allows you to swap

302
00:08:48,876 --> 00:08:49,856
out assets easily.

303
00:08:50,256 --> 00:08:51,596
Remember, we're still iterating

304
00:08:51,596 --> 00:08:52,036
on this stuff.

305
00:08:52,036 --> 00:08:53,836
We will get a new version of the

306
00:08:53,836 --> 00:08:55,446
block any day, and we don't want

307
00:08:55,446 --> 00:08:56,796
to have to rebuild those maps,

308
00:08:56,996 --> 00:08:58,376
so we're dynamically generating

309
00:08:58,376 --> 00:08:58,576
them.

310
00:08:59,956 --> 00:09:01,466
It also allows you to take that

311
00:09:01,466 --> 00:09:02,776
data and send it elsewhere.

312
00:09:03,006 --> 00:09:04,046
Maybe you need to send it across

313
00:09:04,046 --> 00:09:06,066
a network or send some gameplay

314
00:09:06,066 --> 00:09:07,656
logic across process, like we

315
00:09:07,656 --> 00:09:08,876
were doing in some playgrounds.

316
00:09:09,606 --> 00:09:11,376
And later on down the road it

317
00:09:11,376 --> 00:09:13,206
will also allow you to optimize

318
00:09:13,206 --> 00:09:13,876
the geometry.

319
00:09:14,506 --> 00:09:15,796
And Lamont will get into that in

320
00:09:15,796 --> 00:09:17,636
more detail, but it's really key

321
00:09:17,636 --> 00:09:18,886
that you're not dependent on the

322
00:09:18,886 --> 00:09:20,646
actual nodes and scene for this

323
00:09:20,646 --> 00:09:21,126
to work well.

324
00:09:21,126 --> 00:09:23,326
And I have one caveat.

325
00:09:24,306 --> 00:09:26,896
You need some debugging tools to

326
00:09:26,896 --> 00:09:27,826
make this work really well.

327
00:09:27,946 --> 00:09:29,106
We found that out early on.

328
00:09:29,106 --> 00:09:30,886
You can't just look at the world

329
00:09:30,886 --> 00:09:32,526
anymore and see how gameplay

330
00:09:32,526 --> 00:09:34,416
will be reconstructed, and so we

331
00:09:34,416 --> 00:09:36,096
actually built a pretty simple

332
00:09:36,096 --> 00:09:36,586
Mac app.

333
00:09:37,676 --> 00:09:39,396
This app can actually load in

334
00:09:39,396 --> 00:09:41,646
all the levels that we have, and

335
00:09:41,646 --> 00:09:42,986
more than that, it has

336
00:09:43,196 --> 00:09:44,746
scene-specific knowledge.

337
00:09:45,536 --> 00:09:47,896
So in this case this is the tool

338
00:09:47,896 --> 00:09:49,166
that allows us to show those

339
00:09:49,166 --> 00:09:50,616
debugging nodes you saw before,

340
00:09:51,466 --> 00:09:54,026
and it also can run hard-to-hit

341
00:09:54,096 --> 00:09:56,176
cases in our game, like rotating

342
00:09:56,176 --> 00:09:57,336
around the world when you hit

343
00:09:57,336 --> 00:09:58,686
the congratulations sequence.

344
00:09:58,866 --> 00:09:59,836
We want to make sure that works

345
00:09:59,836 --> 00:10:01,436
on every map, but we don't want

346
00:10:01,436 --> 00:10:02,826
to test every map all the way to

347
00:10:02,826 --> 00:10:04,866
the end just to see that work.

348
00:10:05,376 --> 00:10:07,446
So that's our first stop.

349
00:10:07,806 --> 00:10:08,656
That's how we put the world

350
00:10:08,656 --> 00:10:09,066
together.

351
00:10:09,356 --> 00:10:10,526
We separated the data from

352
00:10:10,526 --> 00:10:12,106
visuals and we used tools.

353
00:10:13,346 --> 00:10:15,826
Now on to animations.

354
00:10:16,696 --> 00:10:17,996
So if we look closely at the

355
00:10:17,996 --> 00:10:21,546
stairs, you can see this is

356
00:10:21,546 --> 00:10:23,056
actually a fairly complicated

357
00:10:23,056 --> 00:10:23,866
piece of geometry.

358
00:10:24,046 --> 00:10:24,966
Right. Not only are there

359
00:10:24,966 --> 00:10:26,656
individual steps, but there are

360
00:10:26,656 --> 00:10:28,246
little cutouts from the step.

361
00:10:28,556 --> 00:10:29,886
So we want to be super precise

362
00:10:29,886 --> 00:10:31,386
about where our character's foot

363
00:10:31,386 --> 00:10:32,526
lands on each step.

364
00:10:33,306 --> 00:10:34,476
So we considered a couple

365
00:10:34,476 --> 00:10:36,166
different strategies, and one

366
00:10:36,166 --> 00:10:37,846
thing that's pretty common for

367
00:10:38,056 --> 00:10:40,056
3D scenes to use is just swap

368
00:10:40,056 --> 00:10:42,206
this out for a ramp because

369
00:10:42,206 --> 00:10:42,906
ramps are easy.

370
00:10:43,346 --> 00:10:45,166
You have a character, you move

371
00:10:45,166 --> 00:10:46,526
that character forward, you

372
00:10:46,526 --> 00:10:47,696
figure out how far up they need

373
00:10:47,696 --> 00:10:49,306
to move, and you just translate

374
00:10:49,306 --> 00:10:50,666
them from point A to point B

375
00:10:50,736 --> 00:10:51,796
while running the walk cycle.

376
00:10:52,976 --> 00:10:55,166
For stairs, not so great.

377
00:10:55,646 --> 00:10:57,476
So here's Byte trying to walk up

378
00:10:57,476 --> 00:10:59,246
the stairs, and if you look

379
00:10:59,246 --> 00:11:01,736
closely, Byte hasn't even gotten

380
00:11:01,736 --> 00:11:02,926
to the first step and he's

381
00:11:02,926 --> 00:11:03,816
already floating in midair.

382
00:11:03,876 --> 00:11:05,206
So we need to do something a

383
00:11:05,206 --> 00:11:05,976
little bit better.

384
00:11:10,296 --> 00:11:11,396
The second thing we considered

385
00:11:11,396 --> 00:11:13,986
is using a built-in type in

386
00:11:13,986 --> 00:11:14,516
SceneKit.

387
00:11:14,516 --> 00:11:15,576
It's actually part of SceneKit's

388
00:11:15,576 --> 00:11:17,116
constraint system to be able to

389
00:11:17,116 --> 00:11:18,306
do inverse kinematics.

390
00:11:18,796 --> 00:11:20,336
Now, inverse kinematics allow

391
00:11:20,336 --> 00:11:21,806
you to be super precise about

392
00:11:21,806 --> 00:11:22,856
where you want the character's

393
00:11:22,856 --> 00:11:23,686
foot to land.

394
00:11:24,106 --> 00:11:26,076
So we would specify each step

395
00:11:26,076 --> 00:11:27,166
where we wanted the character to

396
00:11:27,166 --> 00:11:29,266
take, but it comes with a

397
00:11:29,266 --> 00:11:30,936
sacrifice of some personality in

398
00:11:30,936 --> 00:11:31,476
the character.

399
00:11:31,546 --> 00:11:33,546
Right. We're not able to control

400
00:11:33,546 --> 00:11:34,866
the eye movement or the upper

401
00:11:34,866 --> 00:11:36,576
body as detailed as we'd like.

402
00:11:37,176 --> 00:11:38,066
So we actually went with a third

403
00:11:38,066 --> 00:11:40,266
option, and that's to bake the

404
00:11:40,266 --> 00:11:42,066
displacement into the animation.

405
00:11:42,406 --> 00:11:43,686
And so because this is the one

406
00:11:43,686 --> 00:11:44,806
we went with, let me break it

407
00:11:44,806 --> 00:11:46,086
down for you in a little bit

408
00:11:46,606 --> 00:11:47,716
more detail.

409
00:11:47,856 --> 00:11:50,346
Usually, most games you have a

410
00:11:50,346 --> 00:11:51,556
node, which represents a

411
00:11:51,556 --> 00:11:53,766
position, and you have geometry,

412
00:11:53,956 --> 00:11:54,946
which is what you're actually

413
00:11:54,946 --> 00:11:56,026
seeing in the scene.

414
00:11:57,126 --> 00:11:59,066
Now, it's common for these two

415
00:11:59,066 --> 00:12:00,536
things to move together, so you

416
00:12:00,536 --> 00:12:02,066
translate the node and the

417
00:12:02,066 --> 00:12:03,696
geometry, while playing the walk

418
00:12:03,696 --> 00:12:05,016
cycle, it moves the character

419
00:12:05,016 --> 00:12:06,046
from point A to point B.

420
00:12:06,926 --> 00:12:08,136
But for the stairs we did

421
00:12:08,136 --> 00:12:10,416
something different.

422
00:12:10,456 --> 00:12:12,676
We leave the node alone and we

423
00:12:12,676 --> 00:12:14,106
apply an animation, which

424
00:12:14,106 --> 00:12:15,736
actually has displacement in it.

425
00:12:16,056 --> 00:12:18,406
So this moves the geometry away

426
00:12:18,406 --> 00:12:20,616
from the node and then when that

427
00:12:20,616 --> 00:12:22,656
animation is complete, we

428
00:12:22,656 --> 00:12:24,116
synchronize the node's position

429
00:12:24,756 --> 00:12:25,866
and remove the animation.

430
00:12:26,876 --> 00:12:28,406
We do that with a type in

431
00:12:28,406 --> 00:12:29,356
SceneKit called an

432
00:12:29,356 --> 00:12:30,456
SCNTransaction.

433
00:12:31,006 --> 00:12:33,566
And SCNTransactions allow you to

434
00:12:33,566 --> 00:12:35,006
make sure that update happens in

435
00:12:35,006 --> 00:12:35,656
one frame.

436
00:12:35,656 --> 00:12:36,686
So let me show you what that

437
00:12:36,686 --> 00:12:37,176
looks like.

438
00:12:38,306 --> 00:12:40,066
You set up the transaction with

439
00:12:40,066 --> 00:12:42,286
the begin and commit calls, and

440
00:12:42,286 --> 00:12:43,686
in our case we want an animation

441
00:12:43,686 --> 00:12:45,896
duration of zero because we need

442
00:12:45,896 --> 00:12:47,946
it to happen in the exact same

443
00:12:48,076 --> 00:12:48,196
frame.

444
00:12:48,196 --> 00:12:49,716
We move the character to the new

445
00:12:49,716 --> 00:12:51,776
position and we remove the

446
00:12:51,776 --> 00:12:54,056
animations, making Byte ready

447
00:12:54,056 --> 00:12:55,276
for the next round of

448
00:12:55,276 --> 00:12:55,956
animations.

449
00:12:56,816 --> 00:12:57,806
So let's see this in action.

450
00:12:58,646 --> 00:13:00,276
Got to stretch it out first,

451
00:13:01,616 --> 00:13:04,286
walks up the stairs, and you can

452
00:13:04,286 --> 00:13:05,806
see now, because we're allowing

453
00:13:05,806 --> 00:13:07,496
our animator the freedom to put

454
00:13:07,496 --> 00:13:08,386
the displacement in the

455
00:13:08,386 --> 00:13:10,106
animation, we can be far more

456
00:13:10,106 --> 00:13:11,696
precise about Byte's movements.

457
00:13:12,026 --> 00:13:14,636
Byte's head turns while it walks

458
00:13:14,636 --> 00:13:15,766
up and down the stairs.

459
00:13:16,216 --> 00:13:17,206
So this is a much better

460
00:13:17,206 --> 00:13:18,606
solution and something you

461
00:13:18,606 --> 00:13:19,796
should consider for complex

462
00:13:19,796 --> 00:13:21,146
animations in your scenes.

463
00:13:21,646 --> 00:13:25,196
On to train stop number three,

464
00:13:26,416 --> 00:13:27,556
and that's to look at how we did

465
00:13:27,556 --> 00:13:28,586
the scenery elements, because

466
00:13:28,586 --> 00:13:29,486
it's not all about the

467
00:13:29,486 --> 00:13:30,016
character.

468
00:13:30,276 --> 00:13:31,186
You also need to make sure the

469
00:13:31,186 --> 00:13:32,136
world feels alive.

470
00:13:32,136 --> 00:13:34,506
So let's take a close look at

471
00:13:34,506 --> 00:13:34,956
the water.

472
00:13:34,956 --> 00:13:39,166
Now, you saw before we have been

473
00:13:39,166 --> 00:13:40,996
using maps like this, right,

474
00:13:40,996 --> 00:13:43,166
fairly basic, just enough to

475
00:13:43,166 --> 00:13:44,566
reconstruct the puzzle with, but

476
00:13:45,316 --> 00:13:46,686
we want to get to a point where

477
00:13:46,686 --> 00:13:47,686
our maps look like this.

478
00:13:48,276 --> 00:13:51,286
And the way we did that is to

479
00:13:51,286 --> 00:13:53,326
actually save the original map

480
00:13:53,326 --> 00:13:55,806
out to an SCN file so we can add

481
00:13:55,806 --> 00:13:56,986
in those additional elements.

482
00:13:57,266 --> 00:13:58,136
Right. So instead of writing

483
00:13:58,136 --> 00:13:59,716
code to place each scenery

484
00:13:59,716 --> 00:14:00,876
element, we can do it in the

485
00:14:00,876 --> 00:14:01,966
Scene Editor now because it

486
00:14:01,966 --> 00:14:03,046
makes much more sense.

487
00:14:03,606 --> 00:14:04,856
So if we look at that in the

488
00:14:04,856 --> 00:14:07,326
SceneKit Scene Editor, it looks

489
00:14:07,326 --> 00:14:10,046
great, but now we're investing a

490
00:14:10,046 --> 00:14:11,716
ton of time and effort into each

491
00:14:11,716 --> 00:14:12,366
individual map.

492
00:14:12,876 --> 00:14:14,626
You can see that by the node

493
00:14:14,626 --> 00:14:17,416
hierarchy on the left there.

494
00:14:17,516 --> 00:14:19,626
So the problem is you still want

495
00:14:19,626 --> 00:14:20,606
to keep some amount of

496
00:14:20,606 --> 00:14:21,246
flexibility.

497
00:14:21,246 --> 00:14:22,536
Make sure if the artist comes in

498
00:14:22,536 --> 00:14:23,486
next week and says I have a new

499
00:14:23,486 --> 00:14:24,476
waterfall that would look so

500
00:14:24,476 --> 00:14:25,916
much better, you're not changing

501
00:14:25,916 --> 00:14:27,226
out at 81 maps.

502
00:14:27,566 --> 00:14:29,516
And the way to do that, if we

503
00:14:29,516 --> 00:14:30,656
look closely at the waterfall,

504
00:14:30,656 --> 00:14:32,736
is to use a technique called

505
00:14:32,736 --> 00:14:33,596
reference nodes.

506
00:14:34,156 --> 00:14:36,256
So these are the water nodes in

507
00:14:36,256 --> 00:14:37,916
our scene and the arrow

508
00:14:37,916 --> 00:14:39,316
indicates that they're being

509
00:14:39,316 --> 00:14:41,126
referenced out to a single SCN

510
00:14:41,126 --> 00:14:41,466
file.

511
00:14:41,786 --> 00:14:43,056
So you update that file in one

512
00:14:43,056 --> 00:14:44,476
place and it propagates through

513
00:14:44,476 --> 00:14:45,236
all your maps.

514
00:14:45,756 --> 00:14:48,876
Now, that's not all there is to

515
00:14:48,876 --> 00:14:49,286
water.

516
00:14:49,836 --> 00:14:51,046
If we take a closer look at that

517
00:14:51,046 --> 00:14:54,076
SCN file, water kind of also has

518
00:14:54,076 --> 00:14:55,236
to move for it to be

519
00:14:55,236 --> 00:14:55,676
interesting.

520
00:14:55,766 --> 00:14:56,806
Right. The artist did a great

521
00:14:56,806 --> 00:14:57,866
job here, the texture looks

522
00:14:57,866 --> 00:14:59,906
amazing, but it's not real.

523
00:15:01,326 --> 00:15:02,896
So in order to accomplish moving

524
00:15:02,896 --> 00:15:04,046
the water, we're using a

525
00:15:04,046 --> 00:15:05,976
technique, a geometry modifier,

526
00:15:06,026 --> 00:15:08,236
actually writing a shader, and

527
00:15:08,306 --> 00:15:09,966
you access that by the button

528
00:15:09,966 --> 00:15:11,416
down in the lower right here.

529
00:15:12,486 --> 00:15:13,406
I'll zoom in on it for you a

530
00:15:13,406 --> 00:15:13,856
little bit.

531
00:15:13,856 --> 00:15:15,426
It's going to be hard to see.

532
00:15:15,426 --> 00:15:16,616
And that will bring up a tray,

533
00:15:16,836 --> 00:15:19,096
new in Xcode 9, where you can

534
00:15:19,096 --> 00:15:20,786
modify -- or you can specify

535
00:15:20,786 --> 00:15:22,766
your geometry modifier built off

536
00:15:22,766 --> 00:15:24,646
this SCN shader geometry type

537
00:15:24,816 --> 00:15:25,856
provided to you by SceneKit.

538
00:15:26,636 --> 00:15:28,466
Now, all this is doing is moving

539
00:15:28,466 --> 00:15:29,306
the texture around the

540
00:15:29,306 --> 00:15:31,376
waterfall, but it adds a great

541
00:15:31,376 --> 00:15:31,726
effect.

542
00:15:31,856 --> 00:15:32,976
So let's check it out in action.

543
00:15:39,046 --> 00:15:39,416
There we go.

544
00:15:40,016 --> 00:15:41,256
So now the water actually is

545
00:15:41,256 --> 00:15:42,556
flowing, you can just see the

546
00:15:42,556 --> 00:15:43,906
textures moving around and it

547
00:15:44,046 --> 00:15:44,836
adds this great effect.

548
00:15:45,206 --> 00:15:46,846
And we use that same technique

549
00:15:46,876 --> 00:15:48,536
for the vines that sway in the

550
00:15:48,626 --> 00:15:49,926
scene and for the grass that

551
00:15:49,966 --> 00:15:51,176
blows in the breeze.

552
00:15:51,506 --> 00:15:52,986
So this can add a lot of life to

553
00:15:53,026 --> 00:15:54,996
your scene and it's a great

554
00:15:54,996 --> 00:15:56,566
technique for you to try out.

555
00:15:57,156 --> 00:15:58,026
That's three.

556
00:15:58,936 --> 00:16:00,316
And we've really been focused on

557
00:16:00,316 --> 00:16:00,986
the visuals.

558
00:16:01,186 --> 00:16:03,046
We've taken a number of stops to

559
00:16:03,046 --> 00:16:04,046
figure out how you can make that

560
00:16:04,046 --> 00:16:05,556
great, but there's a whole other

561
00:16:05,556 --> 00:16:07,616
aspect you have to consider and

562
00:16:07,616 --> 00:16:09,156
that's what the scene would look

563
00:16:09,156 --> 00:16:10,276
like to a visually-impaired

564
00:16:10,276 --> 00:16:10,586
user.

565
00:16:11,856 --> 00:16:13,566
So when you're trying to design

566
00:16:13,566 --> 00:16:15,636
a great experience in VoiceOver,

567
00:16:16,516 --> 00:16:17,676
you want to focus on things

568
00:16:17,786 --> 00:16:18,666
other than the visuals

569
00:16:18,666 --> 00:16:20,766
obviously, but without

570
00:16:20,766 --> 00:16:22,156
describing everything we did, I

571
00:16:22,156 --> 00:16:23,536
first want you to just listen to

572
00:16:23,536 --> 00:16:23,976
the experience.

573
00:16:24,516 --> 00:16:28,756
[ Music ]

574
00:16:29,256 --> 00:16:30,266
>> VoiceOver on.

575
00:16:30,556 --> 00:16:31,526
Landscape.

576
00:16:31,526 --> 00:16:33,876
The world is five columns by

577
00:16:33,876 --> 00:16:35,926
five rows.

578
00:16:35,926 --> 00:16:37,716
Column 0, row 0, [inaudible] at

579
00:16:37,806 --> 00:16:39,816
height 0 facing north.

580
00:16:39,886 --> 00:16:41,416
Double attach to switch

581
00:16:41,416 --> 00:16:42,156
characters.

582
00:16:42,216 --> 00:16:44,846
Column 0, row 1, gem at height

583
00:16:44,846 --> 00:16:44,976
0.

584
00:16:45,508 --> 00:16:47,508
[ Music ]

585
00:16:52,046 --> 00:16:55,216
>> So we did a number of things

586
00:16:55,216 --> 00:16:56,646
to support VoiceOver in Learn to

587
00:16:56,646 --> 00:16:58,856
Code, but the first thing I want

588
00:16:58,856 --> 00:17:01,046
you to notice is we're actually

589
00:17:01,046 --> 00:17:02,656
focusing on a great nonvisual

590
00:17:02,656 --> 00:17:03,276
experience.

591
00:17:03,306 --> 00:17:05,046
By adding music, by adding

592
00:17:05,046 --> 00:17:07,136
character noises, you make the

593
00:17:07,136 --> 00:17:10,006
scene auditorily rich.

594
00:17:11,536 --> 00:17:14,636
There's other things we added to

595
00:17:14,636 --> 00:17:16,236
VoiceOver, and to go for a deep

596
00:17:16,236 --> 00:17:17,826
dive on those techniques, you

597
00:17:17,826 --> 00:17:19,156
can check out a great talk this

598
00:17:19,156 --> 00:17:20,425
year about how to make your

599
00:17:20,425 --> 00:17:21,746
media and games accessible.

600
00:17:21,746 --> 00:17:24,006
The one that was really

601
00:17:24,006 --> 00:17:25,726
important for us is actually

602
00:17:25,726 --> 00:17:26,925
describing the important

603
00:17:26,925 --> 00:17:29,066
locations using VoiceOver, and

604
00:17:29,066 --> 00:17:30,576
the reason I want to show you

605
00:17:30,576 --> 00:17:31,906
this in more detail is because

606
00:17:31,906 --> 00:17:33,486
it's surprisingly easy to do.

607
00:17:34,406 --> 00:17:36,176
So just like in your UIKit apps

608
00:17:36,866 --> 00:17:37,796
we're overriding an

609
00:17:37,796 --> 00:17:40,796
accessibility element so that we

610
00:17:40,796 --> 00:17:42,236
can provide a custom label.

611
00:17:42,826 --> 00:17:44,796
In this case we're providing a

612
00:17:44,796 --> 00:17:46,856
label which is updated with the

613
00:17:46,856 --> 00:17:48,146
current contents of the world.

614
00:17:48,496 --> 00:17:51,086
So this is basically the same

615
00:17:51,086 --> 00:17:52,416
technique you're already used to

616
00:17:52,616 --> 00:17:54,256
in UIKit, and it really is that

617
00:17:54,256 --> 00:17:54,596
simple.

618
00:17:54,706 --> 00:17:55,636
You create one of those

619
00:17:55,636 --> 00:17:59,276
elements, you specify its frame,

620
00:17:59,696 --> 00:18:00,876
we're using projectPoint from

621
00:18:00,876 --> 00:18:03,006
SceneKit to get from 3D to 2D,

622
00:18:03,606 --> 00:18:04,856
and you add that element to the

623
00:18:04,856 --> 00:18:05,166
view.

624
00:18:06,556 --> 00:18:08,236
So my point is even though 3D

625
00:18:08,306 --> 00:18:09,426
seems really tough to make

626
00:18:09,426 --> 00:18:11,606
accessible, it's quite easy and

627
00:18:11,606 --> 00:18:12,556
it's already techniques you're

628
00:18:12,556 --> 00:18:13,326
familiar with.

629
00:18:14,036 --> 00:18:15,296
So there are really three main

630
00:18:15,296 --> 00:18:16,706
reasons to support it.

631
00:18:17,546 --> 00:18:19,366
One, it's great for your users.

632
00:18:19,436 --> 00:18:20,396
It's probably one of the most

633
00:18:20,396 --> 00:18:22,156
rewarding aspects, that I

634
00:18:22,156 --> 00:18:23,126
thought, of working on this

635
00:18:23,126 --> 00:18:23,536
project.

636
00:18:24,716 --> 00:18:25,486
One of the aspects that I

637
00:18:25,486 --> 00:18:26,296
thought was most rewarding.

638
00:18:26,296 --> 00:18:26,676
Excuse me.

639
00:18:26,786 --> 00:18:28,936
Two, is that it's just easy to

640
00:18:28,936 --> 00:18:29,266
do.

641
00:18:29,966 --> 00:18:31,926
It's many of the familiar things

642
00:18:31,926 --> 00:18:32,856
you're used to from UIKit

643
00:18:32,856 --> 00:18:33,386
development.

644
00:18:33,636 --> 00:18:34,976
And three, just like there are

645
00:18:34,976 --> 00:18:36,806
no excuses for not making your

646
00:18:36,806 --> 00:18:39,266
apps in UIKit accessible, there

647
00:18:39,266 --> 00:18:40,596
really should be no excuses for

648
00:18:40,596 --> 00:18:41,436
doing so in 3D.

649
00:18:42,406 --> 00:18:43,946
So if you want to see this code

650
00:18:43,946 --> 00:18:46,356
in full detail, you can always

651
00:18:46,356 --> 00:18:47,706
check out the source for Learn

652
00:18:47,706 --> 00:18:49,616
to Code by diving into the

653
00:18:49,616 --> 00:18:51,546
auxiliary sources in the

654
00:18:51,546 --> 00:18:53,016
Playground book, and this file

655
00:18:53,016 --> 00:18:54,096
actually sits in

656
00:18:54,096 --> 00:18:56,246
Accessibilityextensions.swift.

657
00:18:57,196 --> 00:18:58,996
So that is iterating.

658
00:18:59,566 --> 00:19:01,186
We talked about how you should

659
00:19:01,186 --> 00:19:02,696
separate your data from the

660
00:19:02,696 --> 00:19:03,746
visuals of your scene.

661
00:19:03,966 --> 00:19:05,486
Right. We did that for modeling

662
00:19:05,486 --> 00:19:06,876
the world, but also how we did

663
00:19:06,876 --> 00:19:07,856
the stair animation.

664
00:19:08,376 --> 00:19:11,376
You should value flexibility

665
00:19:11,376 --> 00:19:12,196
even at this phase.

666
00:19:12,196 --> 00:19:13,246
So when you're putting all that

667
00:19:13,246 --> 00:19:14,286
time and effort into your

668
00:19:14,286 --> 00:19:15,376
levels, make sure you're doing

669
00:19:15,376 --> 00:19:16,626
things like using reference

670
00:19:16,626 --> 00:19:18,076
nodes so that you still have

671
00:19:18,076 --> 00:19:18,956
some flexibility.

672
00:19:19,906 --> 00:19:21,816
And then finally, make sure you

673
00:19:21,816 --> 00:19:23,366
audit that accessibility support

674
00:19:23,366 --> 00:19:23,746
early.

675
00:19:24,056 --> 00:19:25,046
It's not something that can be

676
00:19:25,046 --> 00:19:26,576
bolted on at the end, and it's

677
00:19:26,576 --> 00:19:28,396
surprisingly easy to do if you

678
00:19:28,396 --> 00:19:30,446
plan for it.

679
00:19:30,706 --> 00:19:32,626
Now to talk about how we took

680
00:19:32,626 --> 00:19:34,736
these design time assets and

681
00:19:34,736 --> 00:19:35,866
really tuned them up to make

682
00:19:35,866 --> 00:19:36,996
them super performant, I'm going

683
00:19:36,996 --> 00:19:37,736
to invite Lamont up to the

684
00:19:37,736 --> 00:19:37,886
stage.

685
00:19:38,516 --> 00:19:41,116
[ Applause ]

686
00:19:41,616 --> 00:19:42,236
>> Thank you, Michael.

687
00:19:42,676 --> 00:19:44,586
That's great [applause].

688
00:19:45,046 --> 00:19:46,156
Hello everyone.

689
00:19:46,706 --> 00:19:47,326
I'm Lamont.

690
00:19:47,326 --> 00:19:48,396
I'm an engineer on the Swift

691
00:19:48,396 --> 00:19:50,736
Playgrounds' Content Team, and

692
00:19:50,736 --> 00:19:51,826
today I'm going to talk to you

693
00:19:51,826 --> 00:19:52,906
about how you can improve the

694
00:19:52,906 --> 00:19:53,916
performance of your SceneKit

695
00:19:53,916 --> 00:19:56,696
apps in terms of frame rate and

696
00:19:56,696 --> 00:19:57,466
user experience.

697
00:19:59,776 --> 00:20:02,626
When we first started developing

698
00:20:02,626 --> 00:20:04,306
Learn to Code, one of the things

699
00:20:04,306 --> 00:20:05,596
that was critical for us was to

700
00:20:05,596 --> 00:20:07,136
have a really rich and detailed

701
00:20:07,136 --> 00:20:09,026
world, and as you can see here,

702
00:20:09,026 --> 00:20:10,256
that's exactly what we have.

703
00:20:11,006 --> 00:20:13,806
The waterfalls look realistic,

704
00:20:13,806 --> 00:20:15,496
the shadows behind the

705
00:20:15,746 --> 00:20:17,356
staircases look pretty good, the

706
00:20:17,356 --> 00:20:19,306
colors are rich and vivid.

707
00:20:19,306 --> 00:20:21,066
We even have nice statues hidden

708
00:20:21,066 --> 00:20:22,046
in the waterfalls there.

709
00:20:23,546 --> 00:20:25,896
But as you know, a good-looking

710
00:20:25,896 --> 00:20:28,966
application isn't the only

711
00:20:28,966 --> 00:20:31,866
aspect of a great experience.

712
00:20:31,986 --> 00:20:32,946
It's also performance.

713
00:20:34,126 --> 00:20:35,236
So what does that actually mean?

714
00:20:35,236 --> 00:20:38,156
To have a good experience we

715
00:20:38,156 --> 00:20:40,056
actually want to have a really

716
00:20:40,056 --> 00:20:41,026
responsive frame rate.

717
00:20:41,196 --> 00:20:42,326
Your users are interacting with

718
00:20:42,326 --> 00:20:43,236
your application, they're

719
00:20:43,306 --> 00:20:44,606
pinching, they're gesturing,

720
00:20:45,006 --> 00:20:45,876
they're adding things to the

721
00:20:45,876 --> 00:20:46,916
scene, removing things.

722
00:20:47,306 --> 00:20:48,386
You want this to be really fast

723
00:20:48,386 --> 00:20:49,046
and very fluid.

724
00:20:49,096 --> 00:20:51,836
So I'm going to show you how we

725
00:20:51,836 --> 00:20:52,806
actually increased the

726
00:20:52,806 --> 00:20:53,586
performance of our application

727
00:20:53,586 --> 00:20:53,976
in Learn to Code.

728
00:20:58,046 --> 00:20:59,546
Let's take a look at one of our

729
00:20:59,546 --> 00:21:01,136
geometrically complex scenes.

730
00:21:01,416 --> 00:21:02,396
And when I say geometrically

731
00:21:02,396 --> 00:21:05,116
complex, what I mean is this

732
00:21:05,116 --> 00:21:06,836
scene is comprised of thousands

733
00:21:06,836 --> 00:21:09,796
of individual geometry parts.

734
00:21:11,176 --> 00:21:12,696
Now, each of these parts have to

735
00:21:12,696 --> 00:21:14,326
be rendered separately by the

736
00:21:14,326 --> 00:21:14,886
GPU.

737
00:21:16,336 --> 00:21:18,316
So let's take a look at what the

738
00:21:18,316 --> 00:21:19,436
performance of our application

739
00:21:19,436 --> 00:21:19,716
is.

740
00:21:20,636 --> 00:21:22,156
SceneKit has a really useful

741
00:21:22,156 --> 00:21:24,056
tool called the Debug Statistics

742
00:21:24,056 --> 00:21:26,946
View and I want to zoom in on it

743
00:21:26,946 --> 00:21:28,996
now and take a look at it.

744
00:21:29,646 --> 00:21:30,686
Now, you can enable this in your

745
00:21:30,686 --> 00:21:32,966
applications by simply setting

746
00:21:32,966 --> 00:21:35,236
the showStatistics property on

747
00:21:35,236 --> 00:21:36,306
your view to true.

748
00:21:36,336 --> 00:21:39,936
If we take a look at some of the

749
00:21:39,936 --> 00:21:41,926
more interesting numbers on this

750
00:21:42,196 --> 00:21:44,166
debug view, you'll notice we

751
00:21:44,166 --> 00:21:46,106
have a low frame rate, 29 frames

752
00:21:46,106 --> 00:21:46,566
per second.

753
00:21:47,346 --> 00:21:48,606
That's not very great.

754
00:21:49,006 --> 00:21:50,346
What we actually really want is

755
00:21:50,346 --> 00:21:51,726
60 frames per second minimum.

756
00:21:52,326 --> 00:21:54,626
This allows us to get that fluid

757
00:21:54,626 --> 00:21:55,736
interaction as the users are

758
00:21:55,736 --> 00:21:57,186
pinching and gesturing around.

759
00:21:59,686 --> 00:22:00,926
Well, what contributes to this

760
00:22:00,926 --> 00:22:01,546
low frame rate?

761
00:22:02,256 --> 00:22:03,366
Well, let's break it down.

762
00:22:03,366 --> 00:22:05,576
What are we doing on each frame?

763
00:22:06,976 --> 00:22:08,376
This number here, the rendering

764
00:22:08,376 --> 00:22:10,106
number, is the amount of time

765
00:22:10,106 --> 00:22:11,786
we're taking to render one

766
00:22:11,786 --> 00:22:13,156
complete frame.

767
00:22:13,156 --> 00:22:16,676
It looks like we're taking 20.4

768
00:22:16,676 --> 00:22:17,316
milliseconds.

769
00:22:18,426 --> 00:22:19,646
That's pretty slow.

770
00:22:19,946 --> 00:22:21,446
If you do the math, if you want

771
00:22:21,446 --> 00:22:22,766
to hit 60 frames per second, you

772
00:22:22,766 --> 00:22:23,916
have to be under 16

773
00:22:23,916 --> 00:22:24,516
milliseconds.

774
00:22:25,916 --> 00:22:27,016
So what are we doing that's

775
00:22:27,046 --> 00:22:28,226
taking 20 milliseconds?

776
00:22:29,436 --> 00:22:31,526
Well, to aid in that, one thing

777
00:22:31,526 --> 00:22:32,526
we can look at is the number of

778
00:22:32,526 --> 00:22:33,796
draw calls, as you can see

779
00:22:33,796 --> 00:22:37,096
highlighted by this diamond.

780
00:22:37,096 --> 00:22:38,906
Now, what's a draw call?

781
00:22:39,666 --> 00:22:40,956
A quick refresher.

782
00:22:41,736 --> 00:22:42,906
When you want to draw objects in

783
00:22:42,906 --> 00:22:44,446
a scene, the CPU has to tell

784
00:22:44,446 --> 00:22:46,286
GPU, hey, draw this mesh.

785
00:22:47,226 --> 00:22:48,696
The CPU draws this mesh or a

786
00:22:48,696 --> 00:22:50,736
geometry object, and that's one

787
00:22:50,736 --> 00:22:51,416
draw call.

788
00:22:51,886 --> 00:22:54,136
It looks like we have 877 of

789
00:22:54,136 --> 00:22:54,356
them.

790
00:22:55,376 --> 00:22:56,346
That's quite a bit of draw

791
00:22:56,346 --> 00:22:56,656
calls.

792
00:22:56,886 --> 00:22:58,616
So what are some of the things

793
00:22:58,616 --> 00:22:59,656
we could do to actually increase

794
00:22:59,656 --> 00:23:01,426
the performance of our app?

795
00:23:02,016 --> 00:23:03,566
Well, I'm going to share with

796
00:23:03,566 --> 00:23:04,156
you one tip.

797
00:23:05,526 --> 00:23:06,476
The theme throughout the rest of

798
00:23:06,476 --> 00:23:08,376
the talk is how do we reduce our

799
00:23:08,376 --> 00:23:09,146
draw call count.

800
00:23:09,836 --> 00:23:13,766
I'm going to talk to you about

801
00:23:13,766 --> 00:23:17,856
that in three distinct phases;

802
00:23:18,016 --> 00:23:19,906
geometry, which are those meshes

803
00:23:19,906 --> 00:23:21,006
that comprise the scene;

804
00:23:22,216 --> 00:23:23,946
materials, which give our scene

805
00:23:23,946 --> 00:23:27,126
a nice look; and lighting, which

806
00:23:27,126 --> 00:23:27,836
kind of brings our scene to

807
00:23:27,836 --> 00:23:27,936
life.

808
00:23:31,046 --> 00:23:33,696
Let's take a look at an example

809
00:23:33,696 --> 00:23:34,796
level that we showed earlier.

810
00:23:36,016 --> 00:23:38,796
Now, this scene has lots of

811
00:23:38,796 --> 00:23:39,646
individual parts.

812
00:23:39,646 --> 00:23:42,806
I want to focus in on one type,

813
00:23:43,736 --> 00:23:45,296
the grass.

814
00:23:45,406 --> 00:23:49,146
Now, if you look closely, and

815
00:23:49,146 --> 00:23:50,116
you're good at math, you can

816
00:23:50,116 --> 00:23:51,786
count, there are roughly 30

817
00:23:51,786 --> 00:23:53,136
individual tiles in this screen,

818
00:23:54,226 --> 00:23:57,106
each have their own mesh, so the

819
00:23:57,106 --> 00:23:58,636
CPU has to tell the GPU to

820
00:23:58,636 --> 00:24:01,726
render these things one-by-one,

821
00:24:01,956 --> 00:24:03,396
so we get 30 draw calls.

822
00:24:03,396 --> 00:24:05,286
Now, this is a small scene.

823
00:24:05,286 --> 00:24:06,446
Imagine if you wanted to have

824
00:24:06,446 --> 00:24:08,576
like a huge expansive world with

825
00:24:08,636 --> 00:24:09,646
thousands of these tiles.

826
00:24:09,646 --> 00:24:10,646
Now we're going to have

827
00:24:10,646 --> 00:24:11,646
thousands of draw calls.

828
00:24:11,906 --> 00:24:12,756
Imagine what happens to our

829
00:24:12,756 --> 00:24:15,296
frame rate then.

830
00:24:16,136 --> 00:24:18,496
One thing you might notice is

831
00:24:19,266 --> 00:24:20,356
these grass tiles may not

832
00:24:20,356 --> 00:24:25,006
actually move, so if they don't

833
00:24:25,306 --> 00:24:26,816
move, why are we drawing so many

834
00:24:26,916 --> 00:24:27,376
of them?

835
00:24:27,656 --> 00:24:29,656
Could we draw perhaps one big

836
00:24:29,656 --> 00:24:30,006
mesh?

837
00:24:30,566 --> 00:24:33,166
That's possible.

838
00:24:33,746 --> 00:24:36,706
There's one rule I want you to

839
00:24:36,706 --> 00:24:38,676
remember, is when you're talking

840
00:24:38,676 --> 00:24:41,466
to the GPU, there's one draw

841
00:24:41,466 --> 00:24:42,246
call per mesh.

842
00:24:42,766 --> 00:24:43,876
You have a thousand meshes, you

843
00:24:43,876 --> 00:24:44,886
have a thousand draw calls.

844
00:24:46,066 --> 00:24:47,736
So if we look at our grass tile

845
00:24:47,736 --> 00:24:49,486
and we want to actually combine

846
00:24:49,486 --> 00:24:51,506
them somehow, that sounds like a

847
00:24:51,506 --> 00:24:52,256
reasonable technique.

848
00:24:53,166 --> 00:24:54,516
I'm going to show you how we can

849
00:24:55,006 --> 00:24:56,896
do that.

850
00:24:57,646 --> 00:24:59,546
Let's say we have two geometry

851
00:24:59,546 --> 00:25:00,496
objects in our scene.

852
00:25:00,786 --> 00:25:03,096
On our left we have a grass

853
00:25:03,096 --> 00:25:03,636
tile.

854
00:25:04,246 --> 00:25:05,426
On our right we have another

855
00:25:05,426 --> 00:25:07,626
grass tile.

856
00:25:07,846 --> 00:25:08,926
They both reference the same

857
00:25:08,926 --> 00:25:09,876
material, they have the same

858
00:25:09,876 --> 00:25:11,876
look, they're just displaced and

859
00:25:11,876 --> 00:25:13,236
they have different locations in

860
00:25:13,236 --> 00:25:13,906
3D space.

861
00:25:14,846 --> 00:25:16,416
When you send this to the GPU,

862
00:25:16,466 --> 00:25:17,856
you're going to get two draw

863
00:25:17,856 --> 00:25:17,976
calls.

864
00:25:22,556 --> 00:25:24,426
If we merge the two together

865
00:25:24,426 --> 00:25:25,336
through a process called

866
00:25:25,336 --> 00:25:27,456
flattening, what we're doing is

867
00:25:27,456 --> 00:25:28,966
saying let's take all the points

868
00:25:28,966 --> 00:25:31,226
out of mesh A and combine them

869
00:25:31,226 --> 00:25:32,906
with the points in mesh B into

870
00:25:32,906 --> 00:25:35,146
one super-Godzilla mesh.

871
00:25:37,136 --> 00:25:40,546
The beauty of this is now all

872
00:25:40,546 --> 00:25:41,896
these points reference just that

873
00:25:41,896 --> 00:25:43,866
one material and when the CPU

874
00:25:43,866 --> 00:25:45,216
talks to the GPU, all it has to

875
00:25:45,216 --> 00:25:46,716
do is say, hey, draw this one

876
00:25:46,716 --> 00:25:46,996
thing.

877
00:25:48,426 --> 00:25:50,266
Done. Now, this sounds pretty

878
00:25:50,266 --> 00:25:52,786
trivial and it's really easy to

879
00:25:52,786 --> 00:25:53,186
use.

880
00:25:53,786 --> 00:25:55,416
You can use it in your

881
00:25:55,416 --> 00:25:58,946
applications by a method on

882
00:25:59,076 --> 00:26:01,136
SCNNode called flattenedClone,

883
00:26:01,926 --> 00:26:03,036
and what you want to do here is

884
00:26:03,036 --> 00:26:04,106
just make sure that there's a

885
00:26:04,106 --> 00:26:06,656
parent node that contains the

886
00:26:06,656 --> 00:26:09,416
nodes that you want to flatten,

887
00:26:09,416 --> 00:26:11,336
and the return of this is a new

888
00:26:11,336 --> 00:26:12,656
flattened mesh that you can

889
00:26:12,656 --> 00:26:14,056
composite in your scene and

890
00:26:14,056 --> 00:26:15,086
replace the other nodes.

891
00:26:17,016 --> 00:26:18,636
Now, this simple technique was

892
00:26:18,636 --> 00:26:20,086
used throughout Learn to Code.

893
00:26:20,086 --> 00:26:22,766
So if we take our level that I

894
00:26:22,766 --> 00:26:24,646
showed you earlier, I'm going to

895
00:26:24,646 --> 00:26:26,556
break down the sections at which

896
00:26:26,556 --> 00:26:27,516
we were able to run this

897
00:26:27,516 --> 00:26:28,386
flattening logic.

898
00:26:28,386 --> 00:26:30,516
I'm going to highlight in red

899
00:26:30,516 --> 00:26:32,326
the areas that were flattened

900
00:26:32,326 --> 00:26:32,806
together.

901
00:26:32,966 --> 00:26:34,146
So you can see here, our water

902
00:26:34,146 --> 00:26:36,226
now -- the grass tile is much

903
00:26:36,226 --> 00:26:39,506
fewer draw calls.

904
00:26:39,906 --> 00:26:41,116
And each of these red sections

905
00:26:41,116 --> 00:26:42,456
equates to one draw call,

906
00:26:42,456 --> 00:26:43,746
instead of an individual draw

907
00:26:43,746 --> 00:26:43,976
call.

908
00:26:46,046 --> 00:26:47,116
So we were able to greatly

909
00:26:47,116 --> 00:26:48,616
reduce the number of draw calls

910
00:26:48,616 --> 00:26:49,176
in our scene.

911
00:26:50,556 --> 00:26:53,266
We went from over 550 draw calls

912
00:26:53,796 --> 00:26:54,876
to less than 16.

913
00:26:54,966 --> 00:26:55,916
This is huge.

914
00:26:58,016 --> 00:26:59,056
[ Applause ]

915
00:26:59,056 --> 00:26:59,646
Thank you.

916
00:26:59,646 --> 00:27:04,156
Now, you have to use a bit of

917
00:27:04,156 --> 00:27:05,916
discretion here because you

918
00:27:05,916 --> 00:27:06,836
don't want to just go all

919
00:27:06,836 --> 00:27:08,176
willy-nilly and, you know,

920
00:27:08,176 --> 00:27:09,496
flatten all the things.

921
00:27:10,546 --> 00:27:12,616
The reason why is, as Michael

922
00:27:12,616 --> 00:27:14,976
showed you earlier, he made the

923
00:27:14,976 --> 00:27:16,376
water look really realistic by

924
00:27:16,376 --> 00:27:17,786
adding that simple shader

925
00:27:17,786 --> 00:27:18,786
modifier that gave us this

926
00:27:18,936 --> 00:27:19,936
really great effect.

927
00:27:21,176 --> 00:27:24,856
So if we were to flatten

928
00:27:24,856 --> 00:27:26,596
everything, the whole world

929
00:27:26,596 --> 00:27:27,576
would kind of drip away.

930
00:27:27,576 --> 00:27:28,926
That's not what we want.

931
00:27:29,856 --> 00:27:33,126
So we were selective in choosing

932
00:27:33,126 --> 00:27:34,716
what things to flatten.

933
00:27:35,096 --> 00:27:36,306
So we flattened the waterfalls

934
00:27:36,306 --> 00:27:36,846
altogether.

935
00:27:37,676 --> 00:27:39,406
In your worlds or games that you

936
00:27:39,406 --> 00:27:42,036
create you may choose to have an

937
00:27:42,036 --> 00:27:44,256
object that disappears or moves

938
00:27:44,256 --> 00:27:46,096
or scales or rotates, or somehow

939
00:27:46,096 --> 00:27:46,876
it gets modified.

940
00:27:47,546 --> 00:27:50,226
So I think the takeaway here is

941
00:27:51,396 --> 00:27:52,416
based on how you want to use

942
00:27:52,416 --> 00:27:53,366
your geometry, if there's

943
00:27:53,366 --> 00:27:54,936
something dynamic about it, you

944
00:27:54,936 --> 00:27:56,656
may want to keep flattening it

945
00:27:56,656 --> 00:27:58,296
with other things that move in

946
00:27:58,296 --> 00:27:58,976
the exact same way.

947
00:28:04,256 --> 00:28:05,036
So I'm going to give you a

948
00:28:05,036 --> 00:28:07,466
couple of tips on working with

949
00:28:07,466 --> 00:28:07,996
flattening.

950
00:28:08,686 --> 00:28:09,846
One is you want to store your

951
00:28:09,846 --> 00:28:11,386
nodes that you want to flatten

952
00:28:11,436 --> 00:28:13,256
in the same group, parent group,

953
00:28:13,256 --> 00:28:13,826
parent node.

954
00:28:14,136 --> 00:28:14,946
And it doesn't have to be the

955
00:28:14,946 --> 00:28:16,916
same type of geometry like we're

956
00:28:16,916 --> 00:28:18,196
using grass tiles here, but

957
00:28:18,416 --> 00:28:19,926
let's say you're modeling a

958
00:28:19,926 --> 00:28:21,836
living room and you have a sofa

959
00:28:21,836 --> 00:28:23,166
and a chair and a table, and

960
00:28:23,166 --> 00:28:24,336
they don't move relative to each

961
00:28:24,336 --> 00:28:24,576
other.

962
00:28:25,366 --> 00:28:26,506
They're all good candidates to

963
00:28:26,506 --> 00:28:28,736
put in one node group and

964
00:28:28,816 --> 00:28:29,906
flatten by itself.

965
00:28:30,296 --> 00:28:31,046
So you want to be really

966
00:28:31,046 --> 00:28:32,466
aggressive here and anything

967
00:28:32,466 --> 00:28:33,806
that doesn't move relative to

968
00:28:33,806 --> 00:28:37,266
something else, flatten it and

969
00:28:37,546 --> 00:28:38,566
you'll reduce your draw call

970
00:28:38,566 --> 00:28:39,516
count significantly.

971
00:28:40,146 --> 00:28:42,996
Now, there is a caveat here.

972
00:28:44,476 --> 00:28:46,206
Learn to Code's world is pretty

973
00:28:47,596 --> 00:28:49,266
static in terms of it's a small

974
00:28:49,266 --> 00:28:50,706
world that's always visible on

975
00:28:50,706 --> 00:28:52,416
the screen, but for your world,

976
00:28:52,416 --> 00:28:53,356
you may do something really

977
00:28:53,356 --> 00:28:54,376
expansive where you have to go

978
00:28:54,376 --> 00:28:56,946
into a building or you're on a

979
00:28:56,946 --> 00:28:58,476
large terrain or you have

980
00:28:58,476 --> 00:28:58,896
levels.

981
00:28:59,766 --> 00:29:00,926
So what you want to do here --

982
00:29:01,936 --> 00:29:03,076
what you don't want to do is

983
00:29:03,146 --> 00:29:04,626
atlas everything all willy-nilly

984
00:29:04,626 --> 00:29:05,506
because what's going to happen

985
00:29:05,506 --> 00:29:07,446
is if you have an atlas of this

986
00:29:07,446 --> 00:29:09,616
entire world, of which only a

987
00:29:09,616 --> 00:29:11,026
portion is visible in the scene

988
00:29:11,026 --> 00:29:12,636
at any one time, you're going to

989
00:29:12,636 --> 00:29:13,846
pay the performance cost of

990
00:29:13,946 --> 00:29:15,566
rendering all these points and

991
00:29:15,566 --> 00:29:17,486
all the meshes, and that's not

992
00:29:17,486 --> 00:29:17,976
what you want.

993
00:29:19,466 --> 00:29:21,056
A simple technique here is to

994
00:29:21,176 --> 00:29:22,556
simply subdivide your world into

995
00:29:22,556 --> 00:29:25,266
discrete chunks and then run

996
00:29:25,266 --> 00:29:26,786
this process on each of those

997
00:29:26,786 --> 00:29:28,386
chunks, and as you move from

998
00:29:28,386 --> 00:29:29,986
chunk-to-chunk, as the camera

999
00:29:29,986 --> 00:29:31,356
moves from chunk-to-chunk,

1000
00:29:31,356 --> 00:29:32,016
you're actually getting the

1001
00:29:32,016 --> 00:29:33,566
benefits of flattening without

1002
00:29:33,566 --> 00:29:35,976
paying the overhead of rendering

1003
00:29:36,066 --> 00:29:38,226
everything in your scene at

1004
00:29:38,976 --> 00:29:39,146
once.

1005
00:29:39,716 --> 00:29:40,726
Next I'd like to talk to you

1006
00:29:40,726 --> 00:29:41,526
about materials.

1007
00:29:42,556 --> 00:29:44,276
Now, materials have an even

1008
00:29:44,276 --> 00:29:46,066
bigger impact on your draw call

1009
00:29:46,066 --> 00:29:49,376
count, and I'll get into why.

1010
00:29:50,286 --> 00:29:52,106
Here's a still frame from that

1011
00:29:52,226 --> 00:29:54,056
movie I showed earlier, where we

1012
00:29:54,056 --> 00:29:56,266
show that we flattened this

1013
00:29:56,266 --> 00:29:58,386
aspect of the scene, the top of

1014
00:29:58,446 --> 00:30:02,006
the world mostly, into one mesh.

1015
00:30:03,006 --> 00:30:04,616
So this is one draw call.

1016
00:30:05,236 --> 00:30:07,536
But the astute observers of you

1017
00:30:07,536 --> 00:30:09,326
out there that may notice, hey,

1018
00:30:10,026 --> 00:30:11,286
there are multiple materials

1019
00:30:11,286 --> 00:30:12,996
here, like obviously those

1020
00:30:13,556 --> 00:30:15,366
stonehenges don't have the same

1021
00:30:15,366 --> 00:30:17,196
materials as the staircase, and

1022
00:30:17,196 --> 00:30:18,466
surely not the stones

1023
00:30:18,766 --> 00:30:19,326
themselves.

1024
00:30:19,326 --> 00:30:21,316
So what's going on here?

1025
00:30:22,046 --> 00:30:24,346
Let's talk about reducing

1026
00:30:24,346 --> 00:30:26,006
materials because that's what we

1027
00:30:26,006 --> 00:30:27,956
did to get this down to one draw

1028
00:30:27,956 --> 00:30:28,196
call.

1029
00:30:30,016 --> 00:30:31,416
So again, we have our two

1030
00:30:31,416 --> 00:30:33,016
geometry objects on the screen;

1031
00:30:34,156 --> 00:30:36,016
one on the left, one on the

1032
00:30:36,016 --> 00:30:36,276
right.

1033
00:30:37,316 --> 00:30:40,506
One uses the sand texture, one

1034
00:30:40,506 --> 00:30:42,486
uses this more sand/grass

1035
00:30:42,486 --> 00:30:43,176
looking texture.

1036
00:30:44,596 --> 00:30:46,026
If we run the logic that I

1037
00:30:46,026 --> 00:30:47,206
showed you before, flattening,

1038
00:30:48,076 --> 00:30:50,516
we actually get that one

1039
00:30:50,516 --> 00:30:53,466
combined, Godzilla mesh, but

1040
00:30:53,786 --> 00:30:54,796
we're still referencing two

1041
00:30:54,796 --> 00:30:55,206
materials.

1042
00:30:55,356 --> 00:30:56,946
So when the CPU has to talk to

1043
00:30:56,946 --> 00:30:58,946
the GPU, it's going to say, hey,

1044
00:30:59,386 --> 00:31:01,066
take this mesh and draw the sand

1045
00:31:01,066 --> 00:31:01,766
material with it.

1046
00:31:02,336 --> 00:31:03,356
Great. Okay.

1047
00:31:03,356 --> 00:31:04,706
Now, take this mesh again and

1048
00:31:04,706 --> 00:31:05,996
draw the parts of it that uses

1049
00:31:05,996 --> 00:31:06,996
the grass material again.

1050
00:31:07,146 --> 00:31:08,316
You still get two draw calls.

1051
00:31:09,456 --> 00:31:11,706
There's an opportunity here to

1052
00:31:12,276 --> 00:31:14,006
reduce this.

1053
00:31:15,466 --> 00:31:16,746
And you may have heard of

1054
00:31:16,746 --> 00:31:19,006
texture atlasing, but maybe you

1055
00:31:19,006 --> 00:31:20,146
don't understand exactly what

1056
00:31:20,146 --> 00:31:20,456
that is.

1057
00:31:20,456 --> 00:31:22,176
It's a very simple process.

1058
00:31:23,206 --> 00:31:25,466
Your artist, and their 3D tools,

1059
00:31:26,086 --> 00:31:28,056
would take your materials and

1060
00:31:28,056 --> 00:31:30,936
combine them into one texture

1061
00:31:30,936 --> 00:31:34,566
atlas and under the covers

1062
00:31:34,726 --> 00:31:36,126
they'll update your geometry so

1063
00:31:36,126 --> 00:31:37,096
that it's pointing to the right

1064
00:31:37,096 --> 00:31:39,346
bits inside your textures, but

1065
00:31:39,346 --> 00:31:41,376
the net result is you have one

1066
00:31:41,376 --> 00:31:41,976
draw call.

1067
00:31:44,136 --> 00:31:49,196
Now, this works if you have a

1068
00:31:49,196 --> 00:31:50,886
few objects or thousands of

1069
00:31:50,886 --> 00:31:51,386
objects.

1070
00:31:52,486 --> 00:31:53,386
In Learn to Code I'll give you

1071
00:31:53,386 --> 00:31:54,826
an example of one of the atlases

1072
00:31:54,826 --> 00:31:56,056
for the world that I just showed

1073
00:31:56,056 --> 00:31:56,236
you.

1074
00:31:56,346 --> 00:31:57,816
This is what our atlas looked

1075
00:31:57,816 --> 00:31:57,976
like.

1076
00:32:00,216 --> 00:32:03,296
We had over 70 materials that we

1077
00:32:03,296 --> 00:32:04,926
were able to condense down into

1078
00:32:04,926 --> 00:32:05,246
one.

1079
00:32:05,906 --> 00:32:08,066
That's a huge savings.

1080
00:32:09,636 --> 00:32:11,296
There's another benefit here

1081
00:32:11,296 --> 00:32:14,176
that you may not be aware of.

1082
00:32:14,386 --> 00:32:15,786
When you have a material in your

1083
00:32:15,786 --> 00:32:17,176
scene, when your scene loads,

1084
00:32:17,826 --> 00:32:20,406
there's a shader that has to be

1085
00:32:20,456 --> 00:32:23,786
generated behind the scenes and

1086
00:32:24,146 --> 00:32:25,236
you can't start your scene until

1087
00:32:25,236 --> 00:32:26,296
that shader's actually finished

1088
00:32:26,296 --> 00:32:26,756
compiling.

1089
00:32:26,936 --> 00:32:28,376
If you have 70 materials, you

1090
00:32:28,376 --> 00:32:29,336
have 70 shaders.

1091
00:32:29,726 --> 00:32:30,796
You have a really rich level

1092
00:32:30,796 --> 00:32:31,906
with hundreds of objects,

1093
00:32:32,316 --> 00:32:34,146
hundreds of materials, now all

1094
00:32:34,146 --> 00:32:35,656
of a sudden your load time --

1095
00:32:35,686 --> 00:32:36,676
you're stuck waiting for the

1096
00:32:36,676 --> 00:32:37,556
scene to load.

1097
00:32:38,436 --> 00:32:40,146
By combining it into one

1098
00:32:40,616 --> 00:32:42,236
material, or fewer materials,

1099
00:32:42,536 --> 00:32:43,656
you're reducing the number of

1100
00:32:43,656 --> 00:32:44,446
shaders that need to get

1101
00:32:44,446 --> 00:32:46,176
compiled, boosting your startup

1102
00:32:46,176 --> 00:32:49,606
time, not to mention lesser I/O

1103
00:32:49,606 --> 00:32:50,936
in terms of hitting a disk.

1104
00:32:55,536 --> 00:32:56,686
So next I want to talk about

1105
00:32:56,686 --> 00:32:57,056
lighting.

1106
00:32:57,766 --> 00:32:59,466
Now, lighting's very interesting

1107
00:32:59,466 --> 00:33:02,336
because lighting is what allows

1108
00:33:02,336 --> 00:33:05,666
you to add rich, vivid detail to

1109
00:33:05,666 --> 00:33:06,136
your world.

1110
00:33:07,006 --> 00:33:07,866
You can take a scene and it

1111
00:33:07,866 --> 00:33:08,936
looks kind of static, kind of

1112
00:33:08,936 --> 00:33:09,326
boring.

1113
00:33:09,776 --> 00:33:11,706
You add lights, now it gets a

1114
00:33:11,706 --> 00:33:12,296
little interesting.

1115
00:33:13,216 --> 00:33:17,356
So we let our artists put a few

1116
00:33:17,356 --> 00:33:18,346
lights in the scene and give us

1117
00:33:18,386 --> 00:33:19,316
this visual effect.

1118
00:33:19,996 --> 00:33:22,396
We add a spotlight so that when

1119
00:33:22,396 --> 00:33:23,316
the characters went around the

1120
00:33:23,316 --> 00:33:24,676
world, they're casting shadows

1121
00:33:24,676 --> 00:33:27,326
as they move along the water or

1122
00:33:27,666 --> 00:33:28,166
the grass.

1123
00:33:28,556 --> 00:33:30,816
It's a nice effect.

1124
00:33:30,856 --> 00:33:32,376
We added omni-directional lights

1125
00:33:32,626 --> 00:33:33,836
scattered throughout the scene

1126
00:33:34,886 --> 00:33:36,416
to add a little visual pop.

1127
00:33:36,416 --> 00:33:38,086
So you can see the staircases in

1128
00:33:38,086 --> 00:33:39,526
the foreground are highlighted a

1129
00:33:39,526 --> 00:33:40,506
little bit more than the

1130
00:33:40,556 --> 00:33:41,786
staircases in the background.

1131
00:33:44,386 --> 00:33:46,006
And lastly, we added an ambient

1132
00:33:46,006 --> 00:33:49,036
light, which makes sure that

1133
00:33:49,036 --> 00:33:50,056
everything in the scene is

1134
00:33:50,136 --> 00:33:51,216
visible; otherwise, you'd have

1135
00:33:51,316 --> 00:33:53,586
really super dark areas where

1136
00:33:53,586 --> 00:33:54,866
the other lights don't hit.

1137
00:33:54,926 --> 00:33:57,246
And you can see this sort of

1138
00:33:57,246 --> 00:33:58,156
great effect if you look in the

1139
00:33:58,156 --> 00:34:00,496
shadows of where the water is.

1140
00:34:00,496 --> 00:34:01,206
It's really neat.

1141
00:34:02,686 --> 00:34:04,506
Now, there's a performance cost

1142
00:34:04,506 --> 00:34:04,906
to this.

1143
00:34:04,906 --> 00:34:05,966
Lights are not free.

1144
00:34:07,276 --> 00:34:08,606
Remember I told you that draw

1145
00:34:08,606 --> 00:34:10,116
calls, the more you have the

1146
00:34:10,116 --> 00:34:11,726
less performant you are, your

1147
00:34:11,726 --> 00:34:12,295
application is?

1148
00:34:12,996 --> 00:34:15,116
Well, whenever you have a light

1149
00:34:15,116 --> 00:34:19,176
that hits a mesh, that's an

1150
00:34:19,366 --> 00:34:20,446
extra draw call.

1151
00:34:21,206 --> 00:34:22,286
So you have five lights in your

1152
00:34:22,286 --> 00:34:24,366
scene, you just increased your

1153
00:34:24,366 --> 00:34:26,266
draw call count by five.

1154
00:34:27,516 --> 00:34:29,386
There's a way to get around

1155
00:34:29,386 --> 00:34:32,186
this, and it's called a light

1156
00:34:32,186 --> 00:34:32,856
map.

1157
00:34:34,065 --> 00:34:36,416
Now, what this is, is your

1158
00:34:36,416 --> 00:34:38,275
artist, and their 3D tool, will

1159
00:34:38,275 --> 00:34:41,166
basically run a process that

1160
00:34:41,166 --> 00:34:43,096
calculates where the lights are.

1161
00:34:43,096 --> 00:34:44,636
They can go to town, put all the

1162
00:34:44,636 --> 00:34:45,876
lights they want in there, light

1163
00:34:45,876 --> 00:34:47,556
all the things, and it would

1164
00:34:47,556 --> 00:34:49,676
actually precompute the

1165
00:34:49,786 --> 00:34:51,226
intensity of the light hitting

1166
00:34:51,226 --> 00:34:53,045
your scene and it would store it

1167
00:34:53,045 --> 00:34:54,876
in a material, not unlike the

1168
00:34:54,876 --> 00:34:56,065
textures we showed you earlier.

1169
00:34:57,406 --> 00:35:01,356
The beauty of this is that this

1170
00:35:01,696 --> 00:35:03,726
process is not CPU or GPU

1171
00:35:03,726 --> 00:35:04,216
intensive.

1172
00:35:04,446 --> 00:35:05,666
As a matter of fact, it's free.

1173
00:35:05,666 --> 00:35:06,656
It's taking me more energy to

1174
00:35:06,656 --> 00:35:08,336
talk about it than the CPU would

1175
00:35:08,336 --> 00:35:12,346
actually spend applying this.

1176
00:35:12,536 --> 00:35:13,506
So we are able to take our light

1177
00:35:13,506 --> 00:35:15,146
count down to zero if we wanted.

1178
00:35:16,196 --> 00:35:16,806
Now, we didn't.

1179
00:35:17,846 --> 00:35:19,276
We left one spotlight in there

1180
00:35:20,026 --> 00:35:21,436
because we distinguished between

1181
00:35:21,436 --> 00:35:23,036
lights that don't change every

1182
00:35:23,036 --> 00:35:24,156
frame, why should we render

1183
00:35:24,156 --> 00:35:25,136
these lights again, we did it

1184
00:35:25,136 --> 00:35:26,136
the last frame and nothing

1185
00:35:26,136 --> 00:35:29,086
changed, but the spotlight does

1186
00:35:29,086 --> 00:35:29,476
change.

1187
00:35:29,926 --> 00:35:31,416
As you rotate the world the

1188
00:35:31,416 --> 00:35:32,926
spotlight's going to hit the

1189
00:35:32,926 --> 00:35:34,036
objects in a different way.

1190
00:35:35,016 --> 00:35:36,046
When you have your character

1191
00:35:36,046 --> 00:35:37,626
walking around the world, its

1192
00:35:37,626 --> 00:35:39,316
shadow is going to cast on the

1193
00:35:39,316 --> 00:35:40,726
rest of the world in a different

1194
00:35:40,726 --> 00:35:40,886
way.

1195
00:35:41,796 --> 00:35:43,786
So we kept it, but we made sure

1196
00:35:43,786 --> 00:35:46,216
that we were specific as to what

1197
00:35:46,216 --> 00:35:48,796
it would apply to, the

1198
00:35:49,386 --> 00:35:51,336
characters or certain parts of

1199
00:35:51,336 --> 00:35:51,846
the scene.

1200
00:35:53,316 --> 00:35:55,126
And the good thing about this is

1201
00:35:55,126 --> 00:35:57,536
it works in tandem with all the

1202
00:35:57,536 --> 00:35:58,566
flattening that I showed you

1203
00:35:58,566 --> 00:35:59,966
earlier, because obviously

1204
00:35:59,966 --> 00:36:01,496
lights act like a multiplier in

1205
00:36:01,496 --> 00:36:02,406
terms of your draw calls.

1206
00:36:02,816 --> 00:36:03,646
Well, guess what.

1207
00:36:04,306 --> 00:36:05,496
We reduced the first term.

1208
00:36:05,496 --> 00:36:09,146
We reduced the number of meshes

1209
00:36:09,186 --> 00:36:11,696
that have to be lit.

1210
00:36:11,806 --> 00:36:12,916
So if we actually really wanted

1211
00:36:12,916 --> 00:36:13,626
to put another light in there,

1212
00:36:13,626 --> 00:36:15,226
the effect wouldn't be as bad as

1213
00:36:15,226 --> 00:36:15,876
when we started.

1214
00:36:17,216 --> 00:36:19,266
So after making all of these

1215
00:36:19,266 --> 00:36:21,466
changes, let's take a look at

1216
00:36:21,466 --> 00:36:22,386
our performance and see where we

1217
00:36:22,386 --> 00:36:22,906
are now.

1218
00:36:23,546 --> 00:36:25,436
Let's zoom in.

1219
00:36:25,436 --> 00:36:27,006
Actually, I want to take a

1220
00:36:27,006 --> 00:36:28,906
moment to just appreciate how

1221
00:36:28,906 --> 00:36:30,476
good the light maps look.

1222
00:36:31,716 --> 00:36:32,746
If you take a look behind the

1223
00:36:32,746 --> 00:36:33,766
first staircase, you see that

1224
00:36:33,766 --> 00:36:34,886
little dark shadow and the

1225
00:36:34,886 --> 00:36:37,036
crevices and even behind the

1226
00:36:37,036 --> 00:36:38,106
waterfall slightly is a little

1227
00:36:38,106 --> 00:36:40,796
darker, around the rocks and the

1228
00:36:40,796 --> 00:36:42,856
curved areas in the stonehenge,

1229
00:36:42,856 --> 00:36:43,796
it looks really great.

1230
00:36:44,286 --> 00:36:45,266
And you know what, you're not

1231
00:36:45,266 --> 00:36:46,256
paying anything for it.

1232
00:36:46,256 --> 00:36:48,366
It was done all offline using

1233
00:36:48,366 --> 00:36:48,846
material.

1234
00:36:48,846 --> 00:36:50,536
Our artist went crazy with

1235
00:36:50,536 --> 00:36:51,856
lights and their 3D tool.

1236
00:36:51,856 --> 00:36:54,196
Now I'll zoom in on the

1237
00:36:54,196 --> 00:36:54,826
performance.

1238
00:36:57,176 --> 00:36:58,516
Wow, we're hitting 60 fps now.

1239
00:36:58,516 --> 00:36:59,676
Our users won't be closing our

1240
00:36:59,676 --> 00:37:00,736
app and going to go do something

1241
00:37:00,736 --> 00:37:01,196
else.

1242
00:37:01,796 --> 00:37:05,346
Let's look at our rendering

1243
00:37:05,346 --> 00:37:05,626
time.

1244
00:37:05,706 --> 00:37:08,656
We're at 2.3 milliseconds.

1245
00:37:09,416 --> 00:37:10,536
Now, that's fantastic, for a

1246
00:37:10,536 --> 00:37:11,346
number of reasons.

1247
00:37:12,066 --> 00:37:13,556
Number one, remember we said you

1248
00:37:13,556 --> 00:37:14,556
have to get under 16

1249
00:37:14,556 --> 00:37:17,316
milliseconds to be able to

1250
00:37:17,466 --> 00:37:22,896
actually render at 60 fps?

1251
00:37:23,886 --> 00:37:25,136
Well, that new iPad that just

1252
00:37:25,136 --> 00:37:27,106
came out, if you want to take

1253
00:37:27,106 --> 00:37:28,346
advantage of 120 hertz

1254
00:37:28,566 --> 00:37:30,826
technology refresh rate, you

1255
00:37:30,826 --> 00:37:31,946
want to get that number under 7.

1256
00:37:32,406 --> 00:37:33,416
We're under 2, so we're good.

1257
00:37:34,286 --> 00:37:36,906
Crank it up.

1258
00:37:37,456 --> 00:37:41,156
So let's talk about headroom.

1259
00:37:42,296 --> 00:37:44,746
The beauty of this low number is

1260
00:37:44,746 --> 00:37:46,206
if you want to add more things

1261
00:37:46,206 --> 00:37:47,156
to your scene, maybe you want to

1262
00:37:47,156 --> 00:37:48,176
add a little bit more gameplay

1263
00:37:48,176 --> 00:37:50,176
logic using GameplayKit, or you

1264
00:37:50,176 --> 00:37:53,216
wanted to do some networking or

1265
00:37:53,216 --> 00:37:54,456
you wanted to just make your

1266
00:37:54,456 --> 00:37:56,926
scene rich, tell your artist,

1267
00:37:56,926 --> 00:37:58,236
hey, crank it up, let's make

1268
00:37:58,236 --> 00:37:59,976
some more objects in our scene,

1269
00:37:59,976 --> 00:38:02,136
make it more detailed, or you

1270
00:38:02,136 --> 00:38:03,486
just want to enjoy your better

1271
00:38:03,486 --> 00:38:06,556
battery life, you can do that.

1272
00:38:06,656 --> 00:38:07,646
Finally, let's look at that draw

1273
00:38:07,646 --> 00:38:08,186
call count.

1274
00:38:09,576 --> 00:38:12,116
Wow, 73. If you remember, the

1275
00:38:12,116 --> 00:38:13,686
earlier number was over 700.

1276
00:38:14,156 --> 00:38:16,586
We're using less than a tenth of

1277
00:38:16,586 --> 00:38:19,816
the draw call amount than we had

1278
00:38:19,816 --> 00:38:20,276
before.

1279
00:38:20,926 --> 00:38:22,556
We're sipping power instead of

1280
00:38:22,556 --> 00:38:24,266
guzzling it like we were before.

1281
00:38:24,846 --> 00:38:25,396
This is great.

1282
00:38:26,186 --> 00:38:27,526
Our app is very fluid.

1283
00:38:28,206 --> 00:38:29,916
And when I talk about headroom

1284
00:38:29,916 --> 00:38:31,726
again, you have to remember

1285
00:38:31,726 --> 00:38:33,026
you're going to be doing other

1286
00:38:33,026 --> 00:38:33,916
things in your app other than

1287
00:38:33,916 --> 00:38:34,516
just rendering.

1288
00:38:34,836 --> 00:38:36,106
In our case, we have the Swift

1289
00:38:36,106 --> 00:38:37,636
Compiler running on the left,

1290
00:38:38,076 --> 00:38:38,716
potentially.

1291
00:38:39,406 --> 00:38:42,656
The users were editing code and

1292
00:38:42,656 --> 00:38:44,106
clicking on menu items, and

1293
00:38:44,106 --> 00:38:44,756
things like that.

1294
00:38:44,756 --> 00:38:47,346
And in your application maybe

1295
00:38:47,346 --> 00:38:48,426
the user's doing something like

1296
00:38:48,426 --> 00:38:50,416
pinching or doing some selection

1297
00:38:50,416 --> 00:38:53,556
or, you know, anything that

1298
00:38:53,556 --> 00:38:54,316
would actually take more

1299
00:38:54,316 --> 00:38:55,646
processing time in terms of

1300
00:38:55,646 --> 00:38:56,716
logic in your application.

1301
00:38:58,186 --> 00:39:00,756
So that's great.

1302
00:39:00,936 --> 00:39:04,106
So to recap, we've talked about

1303
00:39:04,106 --> 00:39:05,546
flattening geometry, how this is

1304
00:39:05,546 --> 00:39:07,336
the low-hanging fruit of

1305
00:39:07,396 --> 00:39:08,646
performance optimizations in

1306
00:39:08,646 --> 00:39:09,806
terms of reducing your draw call

1307
00:39:09,806 --> 00:39:10,136
count.

1308
00:39:11,726 --> 00:39:13,366
We talked about using a texture

1309
00:39:13,366 --> 00:39:14,826
atlas, which is something that

1310
00:39:14,826 --> 00:39:15,936
you get your artist to do and

1311
00:39:15,936 --> 00:39:17,236
you just take advantage of that

1312
00:39:17,236 --> 00:39:18,136
will reduce the number of

1313
00:39:18,136 --> 00:39:20,136
materials that you use, which

1314
00:39:20,136 --> 00:39:21,876
has an impact on loading time,

1315
00:39:21,956 --> 00:39:23,286
making your app start up much

1316
00:39:23,286 --> 00:39:26,306
faster, and also an impact on

1317
00:39:26,306 --> 00:39:28,796
disk I/O, making it less objects

1318
00:39:28,796 --> 00:39:29,176
to load.

1319
00:39:30,286 --> 00:39:32,636
And lastly, it works in tandem

1320
00:39:32,806 --> 00:39:34,626
with the geometry flattening to

1321
00:39:34,626 --> 00:39:35,336
make sure that you have the

1322
00:39:35,336 --> 00:39:36,426
fewest amount of draw calls

1323
00:39:36,476 --> 00:39:36,896
possible.

1324
00:39:38,306 --> 00:39:42,116
And lastly, using light maps to

1325
00:39:42,116 --> 00:39:43,876
add that rich visual detail to

1326
00:39:43,876 --> 00:39:47,036
your scene and not pay any

1327
00:39:47,096 --> 00:39:49,366
performance penalty for it on

1328
00:39:49,366 --> 00:39:49,846
the GPU.

1329
00:39:50,016 --> 00:39:50,816
Let your artist go crazy.

1330
00:39:51,396 --> 00:39:54,586
We have a few related sessions

1331
00:39:54,586 --> 00:39:54,956
for you.

1332
00:39:55,846 --> 00:39:56,966
Thanks, and have a great WWDC.

1333
00:39:57,516 --> 00:40:07,980
[ Applause ]

