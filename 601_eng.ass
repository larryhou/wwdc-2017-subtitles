[Script Info]
; Script generated by FFmpeg/Lavc57.89.100
ScriptType: v4.00+
PlayResX: 384
PlayResY: 288

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,16,&Hffffff,&Hffffff,&H0,&H0,0,0,0,0,100,100,0,0,1,1,0,2,10,10,10,0

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:28.41,0:00:28.85,Default,,0,0,0,,>> Welcome.
Dialogue: 0,0:00:29.37,0:00:30.94,Default,,0,0,0,,We introduced the host of new
Dialogue: 0,0:00:30.94,0:00:32.50,Default,,0,0,0,,technologies with Metal 2 to
Dialogue: 0,0:00:32.80,0:00:34.42,Default,,0,0,0,,allow you to make better,
Dialogue: 0,0:00:34.42,0:00:36.88,Default,,0,0,0,,faster, and more efficient
Dialogue: 0,0:00:36.88,0:00:37.65,Default,,0,0,0,,applications.
Dialogue: 0,0:00:38.15,0:00:39.34,Default,,0,0,0,,My name is Michal and together
Dialogue: 0,0:00:39.34,0:00:40.79,Default,,0,0,0,,with my colleague Richard we'll
Dialogue: 0,0:00:40.79,0:00:42.70,Default,,0,0,0,,explore three main themes today.
Dialogue: 0,0:00:44.48,0:00:46.49,Default,,0,0,0,,With Metal 2 we are continuing
Dialogue: 0,0:00:46.70,0:00:48.58,Default,,0,0,0,,our direction of moving the
Dialogue: 0,0:00:48.58,0:00:50.47,Default,,0,0,0,,expensive things to happen less
Dialogue: 0,0:00:50.47,0:00:52.10,Default,,0,0,0,,frequently and to making sure
Dialogue: 0,0:00:52.10,0:00:53.64,Default,,0,0,0,,that the frequent things are
Dialogue: 0,0:00:53.68,0:00:55.12,Default,,0,0,0,,really, really cheap.
Dialogue: 0,0:00:55.60,0:00:57.34,Default,,0,0,0,,Over the years we introduced
Dialogue: 0,0:00:57.59,0:01:00.17,Default,,0,0,0,,precompiled shaders, render
Dialogue: 0,0:01:00.17,0:01:02.23,Default,,0,0,0,,state objects, Metal Heap last
Dialogue: 0,0:01:02.23,0:01:04.51,Default,,0,0,0,,year all to make sure that you
Dialogue: 0,0:01:04.51,0:01:06.37,Default,,0,0,0,,can move the costly operations
Dialogue: 0,0:01:06.52,0:01:08.73,Default,,0,0,0,,outside of your main application
Dialogue: 0,0:01:09.29,0:01:09.39,Default,,0,0,0,,loop.
Dialogue: 0,0:01:10.02,0:01:13.78,Default,,0,0,0,,We gave you 10 times more draw
Dialogue: 0,0:01:13.78,0:01:15.83,Default,,0,0,0,,calls by switching from open GL
Dialogue: 0,0:01:16.14,0:01:16.64,Default,,0,0,0,,to Metal.
Dialogue: 0,0:01:17.54,0:01:18.93,Default,,0,0,0,,And this year we are introducing
Dialogue: 0,0:01:18.93,0:01:21.44,Default,,0,0,0,,our new binding API that gives
Dialogue: 0,0:01:21.44,0:01:22.80,Default,,0,0,0,,you some more.
Dialogue: 0,0:01:22.80,0:01:24.37,Default,,0,0,0,,And so we will talk about it a
Dialogue: 0,0:01:24.37,0:01:24.89,Default,,0,0,0,,bit further.
Dialogue: 0,0:01:26.38,0:01:28.95,Default,,0,0,0,,We are also putting GPU more in
Dialogue: 0,0:01:28.95,0:01:31.96,Default,,0,0,0,,a driving seat with GPU driven
Dialogue: 0,0:01:31.96,0:01:32.80,Default,,0,0,0,,pipelines.
Dialogue: 0,0:01:33.36,0:01:35.27,Default,,0,0,0,,And you will be able to create
Dialogue: 0,0:01:35.27,0:01:37.91,Default,,0,0,0,,new, novel algorithms, new
Dialogue: 0,0:01:37.91,0:01:40.26,Default,,0,0,0,,rendering techniques, and whole
Dialogue: 0,0:01:40.86,0:01:43.22,Default,,0,0,0,,unique experiences utilizing
Dialogue: 0,0:01:43.22,0:01:45.12,Default,,0,0,0,,Metal 2 on modern GPUs.
Dialogue: 0,0:01:45.49,0:01:46.30,Default,,0,0,0,,Well, speaking of the
Dialogue: 0,0:01:46.30,0:01:49.03,Default,,0,0,0,,experiences, we have a lot of
Dialogue: 0,0:01:49.03,0:01:50.25,Default,,0,0,0,,new features in Metal and we
Dialogue: 0,0:01:50.25,0:01:51.67,Default,,0,0,0,,have three other sessions that I
Dialogue: 0,0:01:51.67,0:01:52.69,Default,,0,0,0,,would love you to attend.
Dialogue: 0,0:01:53.53,0:01:56.72,Default,,0,0,0,,VR is coming to Mac this year
Dialogue: 0,0:01:56.72,0:01:58.92,Default,,0,0,0,,and with the new iMacs we are
Dialogue: 0,0:01:58.92,0:02:01.43,Default,,0,0,0,,giving you really powerful GPUs.
Dialogue: 0,0:02:01.91,0:02:04.00,Default,,0,0,0,,The external GPU is coming to
Dialogue: 0,0:02:04.05,0:02:05.59,Default,,0,0,0,,MacBook Pro to give you the same
Dialogue: 0,0:02:05.59,0:02:05.95,Default,,0,0,0,,power.
Dialogue: 0,0:02:06.67,0:02:09.11,Default,,0,0,0,,And this all enables your users
Dialogue: 0,0:02:09.46,0:02:11.50,Default,,0,0,0,,and your content creators to
Dialogue: 0,0:02:11.50,0:02:14.10,Default,,0,0,0,,experience VR in ways not
Dialogue: 0,0:02:14.10,0:02:14.88,Default,,0,0,0,,possible before.
Dialogue: 0,0:02:15.51,0:02:17.68,Default,,0,0,0,,Tomorrow's session will show you
Dialogue: 0,0:02:18.43,0:02:22.08,Default,,0,0,0,,how to use our display -- direct
Dialogue: 0,0:02:22.08,0:02:23.82,Default,,0,0,0,,display technology -- to get
Dialogue: 0,0:02:23.82,0:02:25.94,Default,,0,0,0,,your content to HMD quick and
Dialogue: 0,0:02:25.94,0:02:26.78,Default,,0,0,0,,with low latency.
Dialogue: 0,0:02:28.12,0:02:29.85,Default,,0,0,0,,You'll learn about the new Metal
Dialogue: 0,0:02:29.85,0:02:32.01,Default,,0,0,0,,API editions for VR and our new
Dialogue: 0,0:02:32.01,0:02:33.01,Default,,0,0,0,,Tools editions.
Dialogue: 0,0:02:35.80,0:02:38.21,Default,,0,0,0,,Machine learning is quickly
Dialogue: 0,0:02:38.21,0:02:40.24,Default,,0,0,0,,becoming a key feature of our
Dialogue: 0,0:02:40.24,0:02:42.02,Default,,0,0,0,,devices in many, many
Dialogue: 0,0:02:42.02,0:02:42.91,Default,,0,0,0,,applications.
Dialogue: 0,0:02:42.91,0:02:44.98,Default,,0,0,0,,And with Metal 2 you can use
Dialogue: 0,0:02:44.98,0:02:47.73,Default,,0,0,0,,Metal performance shaders to
Dialogue: 0,0:02:47.82,0:02:49.66,Default,,0,0,0,,utilize the power of the GPU for
Dialogue: 0,0:02:49.66,0:02:53.38,Default,,0,0,0,,machine learning on both test up
Dialogue: 0,0:02:53.49,0:02:54.47,Default,,0,0,0,,and mobile devices.
Dialogue: 0,0:02:55.31,0:02:56.79,Default,,0,0,0,,And you're probably staring at
Dialogue: 0,0:02:56.85,0:02:58.19,Default,,0,0,0,,that picture behind me and
Dialogue: 0,0:02:58.19,0:02:59.44,Default,,0,0,0,,thinking, "How's that done?"
Dialogue: 0,0:02:59.72,0:03:01.27,Default,,0,0,0,,Well, we have a session for you
Dialogue: 0,0:03:01.27,0:03:03.71,Default,,0,0,0,,on Thursday where you will learn
Dialogue: 0,0:03:03.71,0:03:05.35,Default,,0,0,0,,about this and about the machine
Dialogue: 0,0:03:05.35,0:03:07.20,Default,,0,0,0,,learning primitives -- the image
Dialogue: 0,0:03:07.20,0:03:08.74,Default,,0,0,0,,processing primitives -- we have
Dialogue: 0,0:03:08.98,0:03:10.91,Default,,0,0,0,,in our Metal performance
Dialogue: 0,0:03:10.91,0:03:11.45,Default,,0,0,0,,shaders.
Dialogue: 0,0:03:12.98,0:03:15.51,Default,,0,0,0,,Lastly, our tools have seen the
Dialogue: 0,0:03:15.51,0:03:17.51,Default,,0,0,0,,biggest advancement yet with
Dialogue: 0,0:03:17.51,0:03:18.08,Default,,0,0,0,,Metal 2.
Dialogue: 0,0:03:18.20,0:03:19.80,Default,,0,0,0,,You'll be able to debug your
Dialogue: 0,0:03:19.80,0:03:20.95,Default,,0,0,0,,applications quicker.
Dialogue: 0,0:03:21.50,0:03:23.21,Default,,0,0,0,,You can drill down to problems
Dialogue: 0,0:03:23.63,0:03:26.74,Default,,0,0,0,,easier and we are exposing, for
Dialogue: 0,0:03:26.74,0:03:28.16,Default,,0,0,0,,example GPU performance
Dialogue: 0,0:03:28.16,0:03:29.82,Default,,0,0,0,,counters, to make sure that you
Dialogue: 0,0:03:29.82,0:03:33.51,Default,,0,0,0,,can find your hotspots and your
Dialogue: 0,0:03:33.51,0:03:36.06,Default,,0,0,0,,application fast pass quicker.
Dialogue: 0,0:03:37.35,0:03:39.73,Default,,0,0,0,,So I hope I got you excited
Dialogue: 0,0:03:39.99,0:03:41.89,Default,,0,0,0,,about the few days ahead and
Dialogue: 0,0:03:41.89,0:03:44.01,Default,,0,0,0,,let's get back to the present
Dialogue: 0,0:03:44.01,0:03:45.34,Default,,0,0,0,,with the content of today's
Dialogue: 0,0:03:45.34,0:03:45.68,Default,,0,0,0,,session.
Dialogue: 0,0:03:51.29,0:03:53.42,Default,,0,0,0,,So we'll start with argument
Dialogue: 0,0:03:53.42,0:03:55.74,Default,,0,0,0,,buffers, probably our biggest
Dialogue: 0,0:03:55.83,0:03:57.52,Default,,0,0,0,,core framework addition this
Dialogue: 0,0:03:57.52,0:03:57.74,Default,,0,0,0,,year.
Dialogue: 0,0:03:58.54,0:04:00.59,Default,,0,0,0,,argument buffers provide an
Dialogue: 0,0:04:00.59,0:04:03.27,Default,,0,0,0,,efficient new way of configuring
Dialogue: 0,0:04:03.27,0:04:05.78,Default,,0,0,0,,which buffers, textures, and
Dialogue: 0,0:04:06.26,0:04:07.83,Default,,0,0,0,,samplers your application can
Dialogue: 0,0:04:07.83,0:04:11.19,Default,,0,0,0,,use freeing up considerable
Dialogue: 0,0:04:11.19,0:04:13.08,Default,,0,0,0,,amount of CPU resources and
Dialogue: 0,0:04:13.08,0:04:14.86,Default,,0,0,0,,actually enabling completely new
Dialogue: 0,0:04:14.86,0:04:16.21,Default,,0,0,0,,schedules for the GPU at the
Dialogue: 0,0:04:16.21,0:04:16.92,Default,,0,0,0,,same time.
Dialogue: 0,0:04:19.25,0:04:20.57,Default,,0,0,0,,Then we'll talk about Raster
Dialogue: 0,0:04:20.57,0:04:22.82,Default,,0,0,0,,Order Groups, a new fragment
Dialogue: 0,0:04:22.82,0:04:24.36,Default,,0,0,0,,shader synchronization primitive
Dialogue: 0,0:04:24.85,0:04:26.70,Default,,0,0,0,,that allows you to precisely
Dialogue: 0,0:04:26.70,0:04:28.40,Default,,0,0,0,,control the order in which
Dialogue: 0,0:04:28.62,0:04:30.30,Default,,0,0,0,,fragment shaders access common
Dialogue: 0,0:04:30.30,0:04:32.87,Default,,0,0,0,,memory, enabling you new use
Dialogue: 0,0:04:32.87,0:04:34.57,Default,,0,0,0,,cases for example of
Dialogue: 0,0:04:35.13,0:04:37.03,Default,,0,0,0,,programmable blending on MacOS
Dialogue: 0,0:04:37.08,0:04:41.31,Default,,0,0,0,,or voxelization [phonetic] order
Dialogue: 0,0:04:41.35,0:04:42.45,Default,,0,0,0,,independent transparency.
Dialogue: 0,0:04:43.31,0:04:44.71,Default,,0,0,0,,And then we'll switch to the
Dialogue: 0,0:04:44.71,0:04:46.50,Default,,0,0,0,,topic of display and we talk
Dialogue: 0,0:04:46.50,0:04:48.23,Default,,0,0,0,,about the new ProMotion Displays
Dialogue: 0,0:04:48.23,0:04:50.34,Default,,0,0,0,,on iPads and how to best drive
Dialogue: 0,0:04:50.34,0:04:51.36,Default,,0,0,0,,them using Metal.
Dialogue: 0,0:04:51.36,0:04:54.24,Default,,0,0,0,,And we'll also give you a recap
Dialogue: 0,0:04:54.29,0:04:57.22,Default,,0,0,0,,of our best practices of getting
Dialogue: 0,0:04:57.22,0:04:58.72,Default,,0,0,0,,your content from your render
Dialogue: 0,0:04:58.72,0:05:02.45,Default,,0,0,0,,targets to the glass as quickly
Dialogue: 0,0:05:02.45,0:05:03.89,Default,,0,0,0,,as possible and with the least
Dialogue: 0,0:05:03.89,0:05:04.83,Default,,0,0,0,,amount of latency.
Dialogue: 0,0:05:05.41,0:05:07.55,Default,,0,0,0,,And finally we'll finish with a
Dialogue: 0,0:05:07.95,0:05:09.88,Default,,0,0,0,,survey of all the other Metal
Dialogue: 0,0:05:09.88,0:05:12.16,Default,,0,0,0,,features that we added to align
Dialogue: 0,0:05:12.40,0:05:15.28,Default,,0,0,0,,iOS and MacOS platforms into one
Dialogue: 0,0:05:15.63,0:05:16.98,Default,,0,0,0,,big, common Metal ecosystem.
Dialogue: 0,0:05:22.16,0:05:26.01,Default,,0,0,0,,So the argument buffers.
Dialogue: 0,0:05:26.37,0:05:28.39,Default,,0,0,0,,Let's look at what they are and
Dialogue: 0,0:05:28.55,0:05:29.10,Default,,0,0,0,,how they work.
Dialogue: 0,0:05:29.15,0:05:30.64,Default,,0,0,0,,And I will need an example for
Dialogue: 0,0:05:30.64,0:05:33.61,Default,,0,0,0,,that so let's think of a simple
Dialogue: 0,0:05:33.61,0:05:36.00,Default,,0,0,0,,material that those who actually
Dialogue: 0,0:05:36.00,0:05:39.28,Default,,0,0,0,,wrote any sort of 3D render
Dialogue: 0,0:05:39.28,0:05:39.88,Default,,0,0,0,,program would know.
Dialogue: 0,0:05:40.30,0:05:42.16,Default,,0,0,0,,In your material you have a
Dialogue: 0,0:05:42.16,0:05:44.96,Default,,0,0,0,,bunch of numerical constants, a
Dialogue: 0,0:05:44.96,0:05:46.07,Default,,0,0,0,,bunch of textures -- probably
Dialogue: 0,0:05:46.07,0:05:47.25,Default,,0,0,0,,more than two now a days --
Dialogue: 0,0:05:47.31,0:05:47.84,Default,,0,0,0,,assembler.
Dialogue: 0,0:05:48.52,0:05:53.03,Default,,0,0,0,,And this is what you need to
Dialogue: 0,0:05:53.03,0:05:54.56,Default,,0,0,0,,send to the GPU to be able to
Dialogue: 0,0:05:54.56,0:05:55.89,Default,,0,0,0,,render your primitive.
Dialogue: 0,0:05:56.35,0:05:58.40,Default,,0,0,0,,Now the texture objects are
Dialogue: 0,0:05:59.28,0:06:00.86,Default,,0,0,0,,interesting because they contain
Dialogue: 0,0:06:01.01,0:06:03.34,Default,,0,0,0,,both texture properties such as
Dialogue: 0,0:06:03.34,0:06:06.46,Default,,0,0,0,,width, height, pixel format
Dialogue: 0,0:06:06.46,0:06:08.70,Default,,0,0,0,,perhaps, and then a pointer to a
Dialogue: 0,0:06:08.70,0:06:10.00,Default,,0,0,0,,blob of memory which contains
Dialogue: 0,0:06:10.00,0:06:11.04,Default,,0,0,0,,all the pretty pixels.
Dialogue: 0,0:06:11.04,0:06:13.73,Default,,0,0,0,,Well, unfortunately we are not
Dialogue: 0,0:06:13.73,0:06:14.60,Default,,0,0,0,,really interested in those
Dialogue: 0,0:06:14.63,0:06:15.77,Default,,0,0,0,,pixels in this presentation.
Dialogue: 0,0:06:15.77,0:06:18.46,Default,,0,0,0,,So off it goes and we'll only be
Dialogue: 0,0:06:18.46,0:06:20.26,Default,,0,0,0,,talking about boring texture
Dialogue: 0,0:06:20.26,0:06:20.76,Default,,0,0,0,,states.
Dialogue: 0,0:06:21.99,0:06:24.33,Default,,0,0,0,,So with traditional argument
Dialogue: 0,0:06:24.33,0:06:26.40,Default,,0,0,0,,model we allow you to put all
Dialogue: 0,0:06:26.40,0:06:28.93,Default,,0,0,0,,the constants into a Metal
Dialogue: 0,0:06:28.93,0:06:30.05,Default,,0,0,0,,buffer and we created this
Dialogue: 0,0:06:30.05,0:06:31.96,Default,,0,0,0,,indirection so that it's easy
Dialogue: 0,0:06:31.96,0:06:33.68,Default,,0,0,0,,for you to use and also it gives
Dialogue: 0,0:06:33.68,0:06:35.97,Default,,0,0,0,,GPU the unfiltered, direct
Dialogue: 0,0:06:35.97,0:06:37.77,Default,,0,0,0,,access to all the data.
Dialogue: 0,0:06:38.96,0:06:41.00,Default,,0,0,0,,However, when it comes to things
Dialogue: 0,0:06:41.00,0:06:43.22,Default,,0,0,0,,like textures or samplers you
Dialogue: 0,0:06:43.22,0:06:44.28,Default,,0,0,0,,still need to go through quite
Dialogue: 0,0:06:44.28,0:06:46.10,Default,,0,0,0,,about of an API and in your
Dialogue: 0,0:06:46.10,0:06:47.52,Default,,0,0,0,,rendering loop you'll set the
Dialogue: 0,0:06:47.52,0:06:49.89,Default,,0,0,0,,buffer, set all the textures,
Dialogue: 0,0:06:50.51,0:06:51.98,Default,,0,0,0,,samplers, and only after that
Dialogue: 0,0:06:51.98,0:06:53.23,Default,,0,0,0,,you can finally draw.
Dialogue: 0,0:06:53.27,0:06:55.51,Default,,0,0,0,,And even though Metal is really
Dialogue: 0,0:06:55.51,0:06:57.51,Default,,0,0,0,,optimized this is quite a few
Dialogue: 0,0:06:57.51,0:06:59.17,Default,,0,0,0,,API codes and if you multiply it
Dialogue: 0,0:06:59.17,0:07:00.12,Default,,0,0,0,,with the number of objects you
Dialogue: 0,0:07:00.12,0:07:02.60,Default,,0,0,0,,need to render, every frame, and
Dialogue: 0,0:07:02.60,0:07:03.88,Default,,0,0,0,,the fact that you need to do all
Dialogue: 0,0:07:03.88,0:07:05.99,Default,,0,0,0,,this work every frame, it
Dialogue: 0,0:07:05.99,0:07:08.86,Default,,0,0,0,,actually at some point limits
Dialogue: 0,0:07:08.86,0:07:09.97,Default,,0,0,0,,the amount of objects that you
Dialogue: 0,0:07:09.97,0:07:13.66,Default,,0,0,0,,can put on the screen.
Dialogue: 0,0:07:13.66,0:07:16.97,Default,,0,0,0,,With argument buffers we decided
Dialogue: 0,0:07:16.97,0:07:18.91,Default,,0,0,0,,that we would like to extend
Dialogue: 0,0:07:19.32,0:07:21.31,Default,,0,0,0,,this very convenient indirection
Dialogue: 0,0:07:21.61,0:07:22.87,Default,,0,0,0,,that we have for constants to
Dialogue: 0,0:07:22.87,0:07:23.46,Default,,0,0,0,,everything.
Dialogue: 0,0:07:23.46,0:07:25.89,Default,,0,0,0,,So you can actually put texture
Dialogue: 0,0:07:25.89,0:07:28.05,Default,,0,0,0,,state, samplers, pointers to
Dialogue: 0,0:07:28.05,0:07:29.54,Default,,0,0,0,,another buffer into an argument
Dialogue: 0,0:07:29.54,0:07:31.28,Default,,0,0,0,,buffer and this really
Dialogue: 0,0:07:31.28,0:07:33.87,Default,,0,0,0,,simplifies your rendering
Dialogue: 0,0:07:33.87,0:07:35.49,Default,,0,0,0,,pipeline because -- well,
Dialogue: 0,0:07:35.49,0:07:37.79,Default,,0,0,0,,suddenly the only thing you need
Dialogue: 0,0:07:37.79,0:07:40.23,Default,,0,0,0,,to do is set the buffer and
Dialogue: 0,0:07:40.94,0:07:41.64,Default,,0,0,0,,draw.
Dialogue: 0,0:07:41.85,0:07:43.15,Default,,0,0,0,,And you probably figured out
Dialogue: 0,0:07:43.15,0:07:46.03,Default,,0,0,0,,that with this few API calls you
Dialogue: 0,0:07:46.03,0:07:46.95,Default,,0,0,0,,can put more objects on the
Dialogue: 0,0:07:46.95,0:07:49.82,Default,,0,0,0,,screen, and as you'll see later,
Dialogue: 0,0:07:50.07,0:07:51.53,Default,,0,0,0,,you can do actually even better
Dialogue: 0,0:07:51.57,0:07:53.84,Default,,0,0,0,,with argument buffers.
Dialogue: 0,0:07:54.48,0:07:55.36,Default,,0,0,0,,So we've done a bunch of
Dialogue: 0,0:07:55.36,0:07:58.58,Default,,0,0,0,,benchmarks and run argument
Dialogue: 0,0:07:58.58,0:07:59.98,Default,,0,0,0,,buffers on our devices.
Dialogue: 0,0:08:04.25,0:08:05.72,Default,,0,0,0,,And this is for example what you
Dialogue: 0,0:08:05.72,0:08:07.44,Default,,0,0,0,,get on iPhone 7.
Dialogue: 0,0:08:08.03,0:08:10.03,Default,,0,0,0,,While with traditional model,
Dialogue: 0,0:08:10.36,0:08:13.51,Default,,0,0,0,,quite unsurprisingly, the cost
Dialogue: 0,0:08:13.51,0:08:16.20,Default,,0,0,0,,of your draw call scales, with
Dialogue: 0,0:08:16.20,0:08:17.58,Default,,0,0,0,,the amount of resources you use
Dialogue: 0,0:08:18.08,0:08:21.85,Default,,0,0,0,,in a draw call, with argument
Dialogue: 0,0:08:21.85,0:08:24.93,Default,,0,0,0,,buffers the cost stays pretty
Dialogue: 0,0:08:24.93,0:08:26.57,Default,,0,0,0,,low and almost flat.
Dialogue: 0,0:08:26.57,0:08:29.81,Default,,0,0,0,,So this already shows that for
Dialogue: 0,0:08:29.81,0:08:31.28,Default,,0,0,0,,example with a very simple
Dialogue: 0,0:08:31.28,0:08:33.33,Default,,0,0,0,,shader, with just two resources,
Dialogue: 0,0:08:33.33,0:08:35.79,Default,,0,0,0,,with texture and a buffer, or
Dialogue: 0,0:08:35.94,0:08:37.62,Default,,0,0,0,,two textures, you're getting
Dialogue: 0,0:08:37.62,0:08:39.37,Default,,0,0,0,,seven times the performance
Dialogue: 0,0:08:39.37,0:08:39.97,Default,,0,0,0,,improvement.
Dialogue: 0,0:08:39.97,0:08:42.02,Default,,0,0,0,,With eight textures or eight
Dialogue: 0,0:08:42.02,0:08:45.08,Default,,0,0,0,,resources, however you want to
Dialogue: 0,0:08:45.08,0:08:47.12,Default,,0,0,0,,mix it up, you are getting 18
Dialogue: 0,0:08:47.12,0:08:48.83,Default,,0,0,0,,times performance improvement on
Dialogue: 0,0:08:48.83,0:08:50.80,Default,,0,0,0,,iPhone 7 and it goes even better
Dialogue: 0,0:08:50.80,0:08:52.52,Default,,0,0,0,,with 16 resources, obviously.
Dialogue: 0,0:08:55.04,0:08:57.95,Default,,0,0,0,,So I already talked about the
Dialogue: 0,0:08:57.95,0:08:58.73,Default,,0,0,0,,performance.
Dialogue: 0,0:08:58.81,0:09:01.15,Default,,0,0,0,,I hinted toward a new use -- new
Dialogue: 0,0:09:01.15,0:09:01.74,Default,,0,0,0,,use schedules.
Dialogue: 0,0:09:01.74,0:09:04.32,Default,,0,0,0,,And we'll talk about this in a
Dialogue: 0,0:09:04.32,0:09:04.70,Default,,0,0,0,,minute.
Dialogue: 0,0:09:04.89,0:09:06.29,Default,,0,0,0,,And the last point -- the last
Dialogue: 0,0:09:06.29,0:09:07.99,Default,,0,0,0,,benefit of argument buffers I
Dialogue: 0,0:09:07.99,0:09:09.45,Default,,0,0,0,,would like to bring up is the
Dialogue: 0,0:09:09.45,0:09:10.21,Default,,0,0,0,,ease of use.
Dialogue: 0,0:09:10.81,0:09:13.69,Default,,0,0,0,,And it comes from the fact that
Dialogue: 0,0:09:13.69,0:09:15.38,Default,,0,0,0,,argument buffers are ultimately
Dialogue: 0,0:09:15.54,0:09:16.52,Default,,0,0,0,,an extension of buffers.
Dialogue: 0,0:09:16.52,0:09:17.80,Default,,0,0,0,,So you can, for example go ahead
Dialogue: 0,0:09:17.80,0:09:19.25,Default,,0,0,0,,and prepare them ahead of the
Dialogue: 0,0:09:19.25,0:09:20.94,Default,,0,0,0,,time, let's say when your game
Dialogue: 0,0:09:20.94,0:09:23.25,Default,,0,0,0,,is loading, and then don't have
Dialogue: 0,0:09:23.30,0:09:25.06,Default,,0,0,0,,to worry about it anymore during
Dialogue: 0,0:09:25.06,0:09:26.22,Default,,0,0,0,,your rendering loop, further
Dialogue: 0,0:09:26.39,0:09:27.68,Default,,0,0,0,,improving your performance.
Dialogue: 0,0:09:28.62,0:09:30.19,Default,,0,0,0,,Or you can mix them with a
Dialogue: 0,0:09:30.19,0:09:31.45,Default,,0,0,0,,traditional binding model, for
Dialogue: 0,0:09:31.45,0:09:33.70,Default,,0,0,0,,example even within a single
Dialogue: 0,0:09:33.90,0:09:36.21,Default,,0,0,0,,draw call, which means that your
Dialogue: 0,0:09:36.21,0:09:38.01,Default,,0,0,0,,adoption can be as simple as
Dialogue: 0,0:09:38.20,0:09:39.58,Default,,0,0,0,,using our new tools to figure
Dialogue: 0,0:09:39.58,0:09:40.82,Default,,0,0,0,,out what is your most expensive
Dialogue: 0,0:09:41.09,0:09:43.46,Default,,0,0,0,,loop in our application and
Dialogue: 0,0:09:43.46,0:09:44.78,Default,,0,0,0,,optimizing that and then maybe
Dialogue: 0,0:09:44.78,0:09:46.48,Default,,0,0,0,,return to the rest in a year
Dialogue: 0,0:09:46.74,0:09:49.45,Default,,0,0,0,,when you have time.
Dialogue: 0,0:09:49.58,0:09:52.77,Default,,0,0,0,,And lastly, the argument buffers
Dialogue: 0,0:09:52.77,0:09:55.08,Default,,0,0,0,,are supported across all Metal
Dialogue: 0,0:09:55.08,0:09:55.62,Default,,0,0,0,,devices.
Dialogue: 0,0:09:55.62,0:09:57.82,Default,,0,0,0,,So once you take this adoption
Dialogue: 0,0:09:57.82,0:09:59.20,Default,,0,0,0,,step and you get all the
Dialogue: 0,0:09:59.20,0:10:00.79,Default,,0,0,0,,performance you can keep using
Dialogue: 0,0:10:00.79,0:10:02.39,Default,,0,0,0,,it on all Metal devices.
Dialogue: 0,0:10:02.82,0:10:03.91,Default,,0,0,0,,The ease of use actually
Dialogue: 0,0:10:03.91,0:10:05.63,Default,,0,0,0,,translates really well to the
Dialogue: 0,0:10:05.63,0:10:06.26,Default,,0,0,0,,shaders.
Dialogue: 0,0:10:06.26,0:10:07.67,Default,,0,0,0,,And since we will be looking at
Dialogue: 0,0:10:07.67,0:10:10.51,Default,,0,0,0,,the shaders quite a bit during
Dialogue: 0,0:10:10.51,0:10:12.41,Default,,0,0,0,,this section -- this is an
Dialogue: 0,0:10:12.41,0:10:14.64,Default,,0,0,0,,example of the material I gave
Dialogue: 0,0:10:14.64,0:10:15.51,Default,,0,0,0,,you in the beginning.
Dialogue: 0,0:10:16.50,0:10:19.10,Default,,0,0,0,,And as you can see, the textures
Dialogue: 0,0:10:19.10,0:10:21.43,Default,,0,0,0,,in the sampler are part of the
Dialogue: 0,0:10:21.43,0:10:23.20,Default,,0,0,0,,structure, and that's the main
Dialogue: 0,0:10:23.20,0:10:24.58,Default,,0,0,0,,thing to take away from this is
Dialogue: 0,0:10:25.13,0:10:28.41,Default,,0,0,0,,that your argument buffer is
Dialogue: 0,0:10:28.44,0:10:29.81,Default,,0,0,0,,just a structure in a shader and
Dialogue: 0,0:10:29.81,0:10:31.16,Default,,0,0,0,,you can use all the language
Dialogue: 0,0:10:31.52,0:10:32.84,Default,,0,0,0,,that you have at your disposal
Dialogue: 0,0:10:32.84,0:10:35.10,Default,,0,0,0,,to make embedded structures, to
Dialogue: 0,0:10:35.10,0:10:38.69,Default,,0,0,0,,organize your data, or use erase
Dialogue: 0,0:10:38.69,0:10:39.39,Default,,0,0,0,,or pointers.
Dialogue: 0,0:10:39.60,0:10:40.81,Default,,0,0,0,,It just really works.
Dialogue: 0,0:10:42.05,0:10:44.31,Default,,0,0,0,,So let's now look at the three
Dialogue: 0,0:10:44.60,0:10:46.05,Default,,0,0,0,,main new features of argument
Dialogue: 0,0:10:46.05,0:10:47.43,Default,,0,0,0,,buffers, the first one being
Dialogue: 0,0:10:47.52,0:10:48.74,Default,,0,0,0,,dynamic indexing.
Dialogue: 0,0:10:50.11,0:10:53.18,Default,,0,0,0,,And great example of it is crowd
Dialogue: 0,0:10:53.18,0:10:53.66,Default,,0,0,0,,rendering.
Dialogue: 0,0:10:53.66,0:10:55.89,Default,,0,0,0,,If you played some of the recent
Dialogue: 0,0:10:55.89,0:10:57.27,Default,,0,0,0,,Open World games you've seen
Dialogue: 0,0:10:57.27,0:11:00.52,Default,,0,0,0,,that games try to render large
Dialogue: 0,0:11:00.52,0:11:02.34,Default,,0,0,0,,crowds full of unique, varying
Dialogue: 0,0:11:02.82,0:11:04.86,Default,,0,0,0,,characters in order to make
Dialogue: 0,0:11:04.86,0:11:07.38,Default,,0,0,0,,these beautiful, immersive
Dialogue: 0,0:11:07.44,0:11:08.00,Default,,0,0,0,,worlds.
Dialogue: 0,0:11:08.53,0:11:09.95,Default,,0,0,0,,Well, actually that's quite a
Dialogue: 0,0:11:09.95,0:11:12.08,Default,,0,0,0,,costly thing to do if you need
Dialogue: 0,0:11:12.08,0:11:13.56,Default,,0,0,0,,to create so many draw calls.
Dialogue: 0,0:11:14.91,0:11:16.76,Default,,0,0,0,,With argument buffers we already
Dialogue: 0,0:11:16.76,0:11:19.25,Default,,0,0,0,,said that we could put all the
Dialogue: 0,0:11:19.25,0:11:20.71,Default,,0,0,0,,properties required for let's
Dialogue: 0,0:11:20.71,0:11:21.93,Default,,0,0,0,,say a character into a single
Dialogue: 0,0:11:21.93,0:11:23.84,Default,,0,0,0,,argument buffer, bind it, and
Dialogue: 0,0:11:23.84,0:11:25.40,Default,,0,0,0,,save all that performance on the
Dialogue: 0,0:11:25.40,0:11:27.52,Default,,0,0,0,,CPU, but actually we can do
Dialogue: 0,0:11:27.52,0:11:27.80,Default,,0,0,0,,better.
Dialogue: 0,0:11:27.80,0:11:30.08,Default,,0,0,0,,We can for example create an
Dialogue: 0,0:11:30.25,0:11:32.03,Default,,0,0,0,,array of argument buffers where
Dialogue: 0,0:11:32.37,0:11:35.10,Default,,0,0,0,,each element represents single
Dialogue: 0,0:11:35.10,0:11:35.56,Default,,0,0,0,,character.
Dialogue: 0,0:11:36.14,0:11:37.31,Default,,0,0,0,,And then it suddenly becomes
Dialogue: 0,0:11:37.31,0:11:38.53,Default,,0,0,0,,very, very simple because what
Dialogue: 0,0:11:38.53,0:11:40.68,Default,,0,0,0,,you need to do is set this big
Dialogue: 0,0:11:40.68,0:11:43.84,Default,,0,0,0,,buffer, this one API call, issue
Dialogue: 0,0:11:43.96,0:11:45.88,Default,,0,0,0,,single instance draw call, let's
Dialogue: 0,0:11:45.88,0:11:47.48,Default,,0,0,0,,say with 1,000 instances because
Dialogue: 0,0:11:47.48,0:11:48.96,Default,,0,0,0,,I would like 1,000 characters on
Dialogue: 0,0:11:48.96,0:11:49.33,Default,,0,0,0,,screen.
Dialogue: 0,0:11:49.93,0:11:51.03,Default,,0,0,0,,That's second API call.
Dialogue: 0,0:11:51.09,0:11:53.46,Default,,0,0,0,,And after that it's all on the
Dialogue: 0,0:11:53.46,0:11:54.01,Default,,0,0,0,,GPU.
Dialogue: 0,0:11:54.01,0:11:55.41,Default,,0,0,0,,In a vertex shader you use
Dialogue: 0,0:11:55.41,0:11:57.26,Default,,0,0,0,,instance ID to pick the right
Dialogue: 0,0:11:57.26,0:12:00.76,Default,,0,0,0,,element from the array, get the
Dialogue: 0,0:12:00.76,0:12:02.09,Default,,0,0,0,,character, put it somewhere
Dialogue: 0,0:12:02.09,0:12:02.87,Default,,0,0,0,,where it needs to be in the
Dialogue: 0,0:12:02.87,0:12:04.33,Default,,0,0,0,,world, give it the right pose,
Dialogue: 0,0:12:04.33,0:12:05.49,Default,,0,0,0,,if it's for example mid-walk
Dialogue: 0,0:12:05.49,0:12:07.60,Default,,0,0,0,,cycle, and then in the fragment
Dialogue: 0,0:12:07.60,0:12:10.01,Default,,0,0,0,,shader again you use the
Dialogue: 0,0:12:10.01,0:12:11.98,Default,,0,0,0,,instance ID and pick the right
Dialogue: 0,0:12:11.98,0:12:13.34,Default,,0,0,0,,materials, the right hair color
Dialogue: 0,0:12:13.34,0:12:14.27,Default,,0,0,0,,to finalize the look.
Dialogue: 0,0:12:14.55,0:12:16.89,Default,,0,0,0,,So we are suddenly getting from
Dialogue: 0,0:12:17.41,0:12:19.75,Default,,0,0,0,,tens, hundreds, maybe thousands
Dialogue: 0,0:12:19.75,0:12:22.15,Default,,0,0,0,,of draw calls to a single one.
Dialogue: 0,0:12:22.43,0:12:24.25,Default,,0,0,0,,And it's faster on the CPU.
Dialogue: 0,0:12:24.25,0:12:25.26,Default,,0,0,0,,It's faster on the GPU.
Dialogue: 0,0:12:25.87,0:12:29.30,Default,,0,0,0,,And this is how simple it looks
Dialogue: 0,0:12:29.30,0:12:29.87,Default,,0,0,0,,in a shader.
Dialogue: 0,0:12:31.00,0:12:32.90,Default,,0,0,0,,Pretty much your argument buffer
Dialogue: 0,0:12:32.90,0:12:35.97,Default,,0,0,0,,becomes an array of structures.
Dialogue: 0,0:12:36.80,0:12:39.98,Default,,0,0,0,,You pick the right element using
Dialogue: 0,0:12:39.98,0:12:41.34,Default,,0,0,0,,instance ID referenced within
Dialogue: 0,0:12:41.34,0:12:42.69,Default,,0,0,0,,and you can, for example take
Dialogue: 0,0:12:42.69,0:12:44.36,Default,,0,0,0,,the pointer and pass it to your
Dialogue: 0,0:12:44.36,0:12:45.86,Default,,0,0,0,,helper methods or whatever you
Dialogue: 0,0:12:45.86,0:12:47.08,Default,,0,0,0,,need to do to process data.
Dialogue: 0,0:12:48.76,0:12:51.33,Default,,0,0,0,,The second great feature of
Dialogue: 0,0:12:51.37,0:12:53.16,Default,,0,0,0,,argument buffers is the ability
Dialogue: 0,0:12:53.64,0:12:56.28,Default,,0,0,0,,of the GPU to set resources.
Dialogue: 0,0:12:56.28,0:12:57.49,Default,,0,0,0,,And we actually created an
Dialogue: 0,0:12:57.49,0:12:58.38,Default,,0,0,0,,example for this.
Dialogue: 0,0:12:59.32,0:13:01.42,Default,,0,0,0,,We created a particle simulation
Dialogue: 0,0:13:01.42,0:13:03.71,Default,,0,0,0,,running completely on the GPU.
Dialogue: 0,0:13:04.30,0:13:05.87,Default,,0,0,0,,And I'll tell you how we done
Dialogue: 0,0:13:05.87,0:13:08.05,Default,,0,0,0,,that and we'll see the -- we'll
Dialogue: 0,0:13:08.05,0:13:09.33,Default,,0,0,0,,see it in action later.
Dialogue: 0,0:13:10.09,0:13:11.67,Default,,0,0,0,,So we created an array of
Dialogue: 0,0:13:11.93,0:13:13.16,Default,,0,0,0,,argument buffers where each
Dialogue: 0,0:13:13.20,0:13:16.13,Default,,0,0,0,,element is single particle --
Dialogue: 0,0:13:16.13,0:13:17.59,Default,,0,0,0,,and I guess you already spotted
Dialogue: 0,0:13:17.59,0:13:18.93,Default,,0,0,0,,a trend here.
Dialogue: 0,0:13:19.60,0:13:23.55,Default,,0,0,0,,Our simulation kernel then
Dialogue: 0,0:13:24.43,0:13:26.53,Default,,0,0,0,,treats and simulates one
Dialogue: 0,0:13:26.53,0:13:28.62,Default,,0,0,0,,particle per thread, but we want
Dialogue: 0,0:13:28.62,0:13:29.81,Default,,0,0,0,,to actually go further and we
Dialogue: 0,0:13:29.81,0:13:32.74,Default,,0,0,0,,want it to be able to create the
Dialogue: 0,0:13:32.74,0:13:36.24,Default,,0,0,0,,particles in the kernel as well,
Dialogue: 0,0:13:36.24,0:13:36.85,Default,,0,0,0,,on the GPU.
Dialogue: 0,0:13:36.85,0:13:38.94,Default,,0,0,0,,So in order to do that, and to
Dialogue: 0,0:13:38.94,0:13:41.14,Default,,0,0,0,,give it the right materials, we
Dialogue: 0,0:13:41.14,0:13:42.86,Default,,0,0,0,,also have argument buffer with
Dialogue: 0,0:13:42.90,0:13:44.52,Default,,0,0,0,,all the different materials that
Dialogue: 0,0:13:44.52,0:13:45.64,Default,,0,0,0,,we would like our particles to
Dialogue: 0,0:13:45.64,0:13:46.01,Default,,0,0,0,,have.
Dialogue: 0,0:13:46.74,0:13:48.72,Default,,0,0,0,,And our simulation kernel then,
Dialogue: 0,0:13:49.22,0:13:50.70,Default,,0,0,0,,every time you do an action in
Dialogue: 0,0:13:50.98,0:13:53.65,Default,,0,0,0,,our little demo, the simulation
Dialogue: 0,0:13:53.65,0:13:54.61,Default,,0,0,0,,kernel looks into the
Dialogue: 0,0:13:54.61,0:13:56.91,Default,,0,0,0,,environment and sees what's the
Dialogue: 0,0:13:57.65,0:13:59.28,Default,,0,0,0,,correct, most appropriate
Dialogue: 0,0:13:59.28,0:13:59.74,Default,,0,0,0,,material.
Dialogue: 0,0:13:59.84,0:14:01.43,Default,,0,0,0,,And let's say if you are in the
Dialogue: 0,0:14:01.43,0:14:03.96,Default,,0,0,0,,forest, we pick moss as the
Dialogue: 0,0:14:04.12,0:14:05.62,Default,,0,0,0,,right, appropriate material for
Dialogue: 0,0:14:05.62,0:14:08.67,Default,,0,0,0,,a rock and copy it to the
Dialogue: 0,0:14:08.96,0:14:09.97,Default,,0,0,0,,particle itself.
Dialogue: 0,0:14:10.75,0:14:13.06,Default,,0,0,0,,If you're on the rocks we pick
Dialogue: 0,0:14:13.06,0:14:13.94,Default,,0,0,0,,the rock material.
Dialogue: 0,0:14:13.94,0:14:15.78,Default,,0,0,0,,On the hill we pick grass.
Dialogue: 0,0:14:16.66,0:14:18.37,Default,,0,0,0,,So this way everything stays on
Dialogue: 0,0:14:18.37,0:14:22.63,Default,,0,0,0,,the GPU and it actually looks in
Dialogue: 0,0:14:22.63,0:14:23.93,Default,,0,0,0,,the shader just as simple as I
Dialogue: 0,0:14:24.01,0:14:24.78,Default,,0,0,0,,describe it.
Dialogue: 0,0:14:25.17,0:14:26.59,Default,,0,0,0,,If you want to modify data on
Dialogue: 0,0:14:26.59,0:14:29.99,Default,,0,0,0,,your GPU you bind it as a device
Dialogue: 0,0:14:29.99,0:14:31.32,Default,,0,0,0,,buffer and start assigning
Dialogue: 0,0:14:31.32,0:14:33.70,Default,,0,0,0,,values as you are used to, but
Dialogue: 0,0:14:33.70,0:14:34.82,Default,,0,0,0,,also this time around you can
Dialogue: 0,0:14:34.82,0:14:36.96,Default,,0,0,0,,copy textures or copy the whole
Dialogue: 0,0:14:36.96,0:14:38.50,Default,,0,0,0,,structure and it's really this
Dialogue: 0,0:14:38.50,0:14:38.80,Default,,0,0,0,,simple.
Dialogue: 0,0:14:39.94,0:14:42.17,Default,,0,0,0,,And the last great feature I
Dialogue: 0,0:14:42.17,0:14:44.41,Default,,0,0,0,,would like to mention is ability
Dialogue: 0,0:14:44.41,0:14:46.95,Default,,0,0,0,,of argument buffers to reference
Dialogue: 0,0:14:46.95,0:14:47.96,Default,,0,0,0,,another argument buffer.
Dialogue: 0,0:14:47.96,0:14:49.94,Default,,0,0,0,,So this way you can actually go
Dialogue: 0,0:14:49.94,0:14:52.78,Default,,0,0,0,,ahead and create a reusable and
Dialogue: 0,0:14:52.86,0:14:55.64,Default,,0,0,0,,complex object hierarchy just as
Dialogue: 0,0:14:55.64,0:14:58.91,Default,,0,0,0,,you are used to from C++ Swift,
Dialogue: 0,0:14:59.13,0:14:59.88,Default,,0,0,0,,Objective-C.
Dialogue: 0,0:15:01.70,0:15:03.52,Default,,0,0,0,,Let's say in the example of our
Dialogue: 0,0:15:04.20,0:15:06.39,Default,,0,0,0,,renderer, if you have a ton of
Dialogue: 0,0:15:06.39,0:15:08.91,Default,,0,0,0,,objects, but you probably have
Dialogue: 0,0:15:09.57,0:15:10.87,Default,,0,0,0,,very few materials, so what you
Dialogue: 0,0:15:10.87,0:15:14.39,Default,,0,0,0,,can do is reference the material
Dialogue: 0,0:15:14.39,0:15:15.70,Default,,0,0,0,,from each object and save some
Dialogue: 0,0:15:15.70,0:15:18.17,Default,,0,0,0,,memory or you can build your
Dialogue: 0,0:15:18.17,0:15:19.56,Default,,0,0,0,,scene graph as a binary tree
Dialogue: 0,0:15:19.56,0:15:21.40,Default,,0,0,0,,where actually you point to the
Dialogue: 0,0:15:21.40,0:15:25.02,Default,,0,0,0,,objects and the tree nodes as
Dialogue: 0,0:15:25.02,0:15:26.27,Default,,0,0,0,,you need them, as you would be
Dialogue: 0,0:15:26.27,0:15:27.36,Default,,0,0,0,,used to from the CPU.
Dialogue: 0,0:15:27.75,0:15:29.23,Default,,0,0,0,,And you can share this data with
Dialogue: 0,0:15:29.23,0:15:29.92,Default,,0,0,0,,the CPU as well.
Dialogue: 0,0:15:31.39,0:15:32.68,Default,,0,0,0,,So these are the main features.
Dialogue: 0,0:15:32.68,0:15:34.37,Default,,0,0,0,,And let's look at the support
Dialogue: 0,0:15:34.37,0:15:34.85,Default,,0,0,0,,matrix.
Dialogue: 0,0:15:35.43,0:15:36.86,Default,,0,0,0,,We have two tiers.
Dialogue: 0,0:15:37.10,0:15:39.63,Default,,0,0,0,,The tier one is supported across
Dialogue: 0,0:15:39.63,0:15:42.30,Default,,0,0,0,,all Metal devices and you get
Dialogue: 0,0:15:42.30,0:15:43.22,Default,,0,0,0,,the CPU performance
Dialogue: 0,0:15:43.22,0:15:43.76,Default,,0,0,0,,improvements.
Dialogue: 0,0:15:43.76,0:15:44.70,Default,,0,0,0,,You get the new schedule
Dialogue: 0,0:15:44.70,0:15:45.11,Default,,0,0,0,,language.
Dialogue: 0,0:15:45.60,0:15:48.93,Default,,0,0,0,,But because of the limitations
Dialogue: 0,0:15:48.93,0:15:52.13,Default,,0,0,0,,of the GPUs this tier does not
Dialogue: 0,0:15:52.71,0:15:54.35,Default,,0,0,0,,-- is not able to utilize the
Dialogue: 0,0:15:54.85,0:15:56.32,Default,,0,0,0,,GPU driven use cases that I
Dialogue: 0,0:15:56.32,0:15:57.18,Default,,0,0,0,,mentioned earlier.
Dialogue: 0,0:15:57.61,0:15:58.75,Default,,0,0,0,,With tier two however you are
Dialogue: 0,0:15:58.75,0:16:00.42,Default,,0,0,0,,getting all of this -- so you
Dialogue: 0,0:16:00.42,0:16:02.23,Default,,0,0,0,,get all the new use cases -- and
Dialogue: 0,0:16:02.23,0:16:03.95,Default,,0,0,0,,we are also really increasing
Dialogue: 0,0:16:03.95,0:16:05.57,Default,,0,0,0,,the amount of resources you can
Dialogue: 0,0:16:05.57,0:16:06.01,Default,,0,0,0,,access.
Dialogue: 0,0:16:06.01,0:16:07.24,Default,,0,0,0,,Your shaders can access half a
Dialogue: 0,0:16:07.29,0:16:10.24,Default,,0,0,0,,million textures and buffers to
Dialogue: 0,0:16:10.24,0:16:11.52,Default,,0,0,0,,-- for you to do this -- do
Dialogue: 0,0:16:11.52,0:16:12.63,Default,,0,0,0,,these new algorithms.
Dialogue: 0,0:16:13.62,0:16:15.53,Default,,0,0,0,,While tier one is supported on
Dialogue: 0,0:16:15.69,0:16:18.35,Default,,0,0,0,,all Metal devices, tier two is
Dialogue: 0,0:16:18.35,0:16:19.66,Default,,0,0,0,,something you need to query for.
Dialogue: 0,0:16:20.14,0:16:22.05,Default,,0,0,0,,But don't worry, the support is
Dialogue: 0,0:16:22.05,0:16:22.69,Default,,0,0,0,,really wide.
Dialogue: 0,0:16:23.39,0:16:24.65,Default,,0,0,0,,All the Macs with these three
Dialogue: 0,0:16:24.65,0:16:26.00,Default,,0,0,0,,GPUs are tier two.
Dialogue: 0,0:16:26.46,0:16:28.28,Default,,0,0,0,,All the new MacBook Pros, the
Dialogue: 0,0:16:28.28,0:16:29.51,Default,,0,0,0,,latest MacBook, the last tier
Dialogue: 0,0:16:29.51,0:16:31.43,Default,,0,0,0,,MacBooks Pros are tier two.
Dialogue: 0,0:16:31.43,0:16:32.90,Default,,0,0,0,,So you can go ahead and have
Dialogue: 0,0:16:32.90,0:16:33.16,Default,,0,0,0,,fun.
Dialogue: 0,0:16:33.94,0:16:35.38,Default,,0,0,0,,Now let's look at the demo I
Dialogue: 0,0:16:35.38,0:16:35.97,Default,,0,0,0,,promised you.
Dialogue: 0,0:16:36.06,0:16:38.95,Default,,0,0,0,,We will be showing three videos
Dialogue: 0,0:16:39.26,0:16:41.24,Default,,0,0,0,,with three different features.
Dialogue: 0,0:16:41.82,0:16:43.77,Default,,0,0,0,,The real time rendered terrain,
Dialogue: 0,0:16:43.97,0:16:45.68,Default,,0,0,0,,with material that changes
Dialogue: 0,0:16:45.68,0:16:48.18,Default,,0,0,0,,dynamically, we place some
Dialogue: 0,0:16:48.18,0:16:50.44,Default,,0,0,0,,vegetation by the GPU on the
Dialogue: 0,0:16:50.44,0:16:51.55,Default,,0,0,0,,terrain to make it interesting,
Dialogue: 0,0:16:51.95,0:16:53.14,Default,,0,0,0,,and we have all these nice
Dialogue: 0,0:16:53.14,0:16:55.91,Default,,0,0,0,,particles that I mentioned
Dialogue: 0,0:16:55.91,0:16:56.28,Default,,0,0,0,,before.
Dialogue: 0,0:16:56.55,0:16:59.35,Default,,0,0,0,,So, as you see, we are painting
Dialogue: 0,0:16:59.84,0:17:01.08,Default,,0,0,0,,high on the terrain.
Dialogue: 0,0:17:01.08,0:17:02.33,Default,,0,0,0,,We can changing sculpting the
Dialogue: 0,0:17:02.33,0:17:03.30,Default,,0,0,0,,terrain and the material
Dialogue: 0,0:17:03.30,0:17:04.17,Default,,0,0,0,,actually follows.
Dialogue: 0,0:17:04.46,0:17:05.63,Default,,0,0,0,,And this is a great thing about
Dialogue: 0,0:17:05.63,0:17:08.26,Default,,0,0,0,,argument buffers because they
Dialogue: 0,0:17:08.26,0:17:10.80,Default,,0,0,0,,allowed us to create a one big
Dialogue: 0,0:17:11.50,0:17:13.26,Default,,0,0,0,,argument buffer with all the
Dialogue: 0,0:17:13.26,0:17:16.24,Default,,0,0,0,,possible materials as layers in
Dialogue: 0,0:17:16.24,0:17:18.28,Default,,0,0,0,,there and when we are rendering
Dialogue: 0,0:17:18.28,0:17:20.41,Default,,0,0,0,,the terrain in a pixel shader we
Dialogue: 0,0:17:20.41,0:17:21.57,Default,,0,0,0,,are looking at things like
Dialogue: 0,0:17:21.91,0:17:24.78,Default,,0,0,0,,terrain height, slope, the
Dialogue: 0,0:17:24.95,0:17:27.24,Default,,0,0,0,,amount of sun that reaches
Dialogue: 0,0:17:27.44,0:17:29.00,Default,,0,0,0,,certain pixels, and based on
Dialogue: 0,0:17:29.00,0:17:30.81,Default,,0,0,0,,these properties and some others
Dialogue: 0,0:17:30.81,0:17:33.70,Default,,0,0,0,,we do decide what are the best
Dialogue: 0,0:17:33.86,0:17:35.28,Default,,0,0,0,,and most appropriate materials
Dialogue: 0,0:17:35.28,0:17:36.31,Default,,0,0,0,,for that given pixel.
Dialogue: 0,0:17:36.74,0:17:37.88,Default,,0,0,0,,And this is all happening in
Dialogue: 0,0:17:37.88,0:17:40.58,Default,,0,0,0,,real time, whereas previously we
Dialogue: 0,0:17:40.58,0:17:42.27,Default,,0,0,0,,would have to go ahead and split
Dialogue: 0,0:17:42.27,0:17:44.18,Default,,0,0,0,,the terrain in small pieces
Dialogue: 0,0:17:44.59,0:17:47.32,Default,,0,0,0,,offline, analyze which pieces
Dialogue: 0,0:17:47.32,0:17:49.04,Default,,0,0,0,,need which textures in order to
Dialogue: 0,0:17:49.04,0:17:50.52,Default,,0,0,0,,make it as optimal as possible,
Dialogue: 0,0:17:51.07,0:17:52.99,Default,,0,0,0,,and only then render it.
Dialogue: 0,0:17:52.99,0:17:55.22,Default,,0,0,0,,So we are going from a
Dialogue: 0,0:17:55.29,0:17:56.37,Default,,0,0,0,,pre-processing step, which is
Dialogue: 0,0:17:56.37,0:17:58.20,Default,,0,0,0,,heavy and prevents real time
Dialogue: 0,0:17:58.20,0:18:00.33,Default,,0,0,0,,modification, to something that
Dialogue: 0,0:18:00.33,0:18:02.02,Default,,0,0,0,,is real time, without -- sorry
Dialogue: 0,0:18:02.11,0:18:04.56,Default,,0,0,0,,-- without preprocessing and
Dialogue: 0,0:18:04.56,0:18:05.46,Default,,0,0,0,,completely dynamic.
Dialogue: 0,0:18:08.81,0:18:11.82,Default,,0,0,0,,And we added vegetation on it
Dialogue: 0,0:18:12.12,0:18:13.90,Default,,0,0,0,,and as you see the vegetation is
Dialogue: 0,0:18:13.90,0:18:16.03,Default,,0,0,0,,also context sensitive.
Dialogue: 0,0:18:16.86,0:18:18.60,Default,,0,0,0,,You see the palm trees on the
Dialogue: 0,0:18:18.60,0:18:18.97,Default,,0,0,0,,sand.
Dialogue: 0,0:18:18.97,0:18:20.65,Default,,0,0,0,,You see the little tiny apple
Dialogue: 0,0:18:20.65,0:18:21.65,Default,,0,0,0,,trees on the hills.
Dialogue: 0,0:18:23.28,0:18:25.37,Default,,0,0,0,,And while the vegetation itself
Dialogue: 0,0:18:25.37,0:18:28.01,Default,,0,0,0,,is fairly traditional instance
Dialogue: 0,0:18:28.01,0:18:29.65,Default,,0,0,0,,rendering, the power of the
Dialogue: 0,0:18:29.65,0:18:32.22,Default,,0,0,0,,argument buffers here is that it
Dialogue: 0,0:18:32.22,0:18:33.92,Default,,0,0,0,,allows us to share the same
Dialogue: 0,0:18:34.25,0:18:35.84,Default,,0,0,0,,terrain material with all the
Dialogue: 0,0:18:35.84,0:18:37.68,Default,,0,0,0,,same properties and the same
Dialogue: 0,0:18:37.68,0:18:39.48,Default,,0,0,0,,terrain analysis function
Dialogue: 0,0:18:39.96,0:18:41.31,Default,,0,0,0,,between two completely separate
Dialogue: 0,0:18:41.31,0:18:43.28,Default,,0,0,0,,pieces of code.
Dialogue: 0,0:18:43.48,0:18:45.08,Default,,0,0,0,,While terrain rendering uses all
Dialogue: 0,0:18:45.08,0:18:47.16,Default,,0,0,0,,this data to render pixels, the
Dialogue: 0,0:18:47.16,0:18:48.63,Default,,0,0,0,,computer that places the
Dialogue: 0,0:18:48.63,0:18:50.15,Default,,0,0,0,,geometry, the vegetation,
Dialogue: 0,0:18:50.51,0:18:51.79,Default,,0,0,0,,actually analyzes the same
Dialogue: 0,0:18:51.79,0:18:53.61,Default,,0,0,0,,materials to figure out what is
Dialogue: 0,0:18:53.61,0:18:56.10,Default,,0,0,0,,the best type of tree to place
Dialogue: 0,0:18:56.10,0:18:56.86,Default,,0,0,0,,in the given spot.
Dialogue: 0,0:18:57.31,0:18:58.45,Default,,0,0,0,,And this is very easy because
Dialogue: 0,0:18:58.45,0:18:59.66,Default,,0,0,0,,every time we make a change
Dialogue: 0,0:19:00.00,0:19:01.40,Default,,0,0,0,,nothing actually changes in our
Dialogue: 0,0:19:01.40,0:19:02.53,Default,,0,0,0,,code because we just add new
Dialogue: 0,0:19:02.53,0:19:04.35,Default,,0,0,0,,layers or change our analysis
Dialogue: 0,0:19:04.35,0:19:06.64,Default,,0,0,0,,function, whereas previously we
Dialogue: 0,0:19:06.64,0:19:08.35,Default,,0,0,0,,would have to maybe juggle 70
Dialogue: 0,0:19:08.35,0:19:10.07,Default,,0,0,0,,textures between two completely
Dialogue: 0,0:19:10.07,0:19:11.65,Default,,0,0,0,,separate code basis in order to
Dialogue: 0,0:19:11.65,0:19:16.87,Default,,0,0,0,,make them run in sync.
Dialogue: 0,0:19:17.05,0:19:19.24,Default,,0,0,0,,Lastly, we have the particles.
Dialogue: 0,0:19:19.24,0:19:22.07,Default,,0,0,0,,I hope you can see that they
Dialogue: 0,0:19:22.07,0:19:24.98,Default,,0,0,0,,nicely get the material of the
Dialogue: 0,0:19:24.98,0:19:25.75,Default,,0,0,0,,terrain there.
Dialogue: 0,0:19:26.71,0:19:28.44,Default,,0,0,0,,Now what I did not mention is
Dialogue: 0,0:19:28.44,0:19:30.70,Default,,0,0,0,,that this all is rendered with
Dialogue: 0,0:19:30.96,0:19:32.64,Default,,0,0,0,,again a single draw call.
Dialogue: 0,0:19:32.64,0:19:34.59,Default,,0,0,0,,We are rendering 16,000
Dialogue: 0,0:19:34.93,0:19:37.84,Default,,0,0,0,,particles here with single draw
Dialogue: 0,0:19:37.84,0:19:39.47,Default,,0,0,0,,call, with absolutely no
Dialogue: 0,0:19:39.65,0:19:41.42,Default,,0,0,0,,involvement on the CPU.
Dialogue: 0,0:19:42.24,0:19:44.32,Default,,0,0,0,,And not only do particles have
Dialogue: 0,0:19:44.66,0:19:46.15,Default,,0,0,0,,unique materials, they actually
Dialogue: 0,0:19:46.15,0:19:47.33,Default,,0,0,0,,have unique shapes because
Dialogue: 0,0:19:47.61,0:19:48.77,Default,,0,0,0,,argument buffers allow --
Dialogue: 0,0:19:48.77,0:19:50.01,Default,,0,0,0,,actually allow you to change
Dialogue: 0,0:19:50.01,0:19:52.00,Default,,0,0,0,,your vertex buffer per draw
Dialogue: 0,0:19:52.00,0:19:52.25,Default,,0,0,0,,call.
Dialogue: 0,0:19:53.36,0:19:55.92,Default,,0,0,0,,This is something where if you
Dialogue: 0,0:19:55.92,0:19:58.30,Default,,0,0,0,,try to do that without argument
Dialogue: 0,0:19:58.30,0:20:01.79,Default,,0,0,0,,buffers, we had to create a
Dialogue: 0,0:20:01.79,0:20:04.33,Default,,0,0,0,,complicated control hand over
Dialogue: 0,0:20:04.33,0:20:06.69,Default,,0,0,0,,between GPU that simulates and
Dialogue: 0,0:20:06.69,0:20:07.87,Default,,0,0,0,,the CPU that tries to come up
Dialogue: 0,0:20:07.87,0:20:09.69,Default,,0,0,0,,with the best set of draw calls
Dialogue: 0,0:20:09.69,0:20:11.19,Default,,0,0,0,,to represent all this variety.
Dialogue: 0,0:20:11.61,0:20:13.23,Default,,0,0,0,,So with argument buffers this
Dialogue: 0,0:20:13.23,0:20:16.98,Default,,0,0,0,,became just very, very simple.
Dialogue: 0,0:20:18.18,0:20:21.54,Default,,0,0,0,,Okay, so enough pretty pictures.
Dialogue: 0,0:20:22.15,0:20:25.06,Default,,0,0,0,,And let's wrap my portion of the
Dialogue: 0,0:20:25.06,0:20:28.24,Default,,0,0,0,,session with a look at some APIs
Dialogue: 0,0:20:28.24,0:20:29.55,Default,,0,0,0,,and some best practices.
Dialogue: 0,0:20:29.84,0:20:33.26,Default,,0,0,0,,As I mentioned before, argument
Dialogue: 0,0:20:33.26,0:20:34.76,Default,,0,0,0,,buffers are an extension of
Dialogue: 0,0:20:34.76,0:20:37.25,Default,,0,0,0,,Metal buffers and that means all
Dialogue: 0,0:20:37.25,0:20:39.12,Default,,0,0,0,,of our API related to buffers
Dialogue: 0,0:20:39.12,0:20:39.61,Default,,0,0,0,,just works.
Dialogue: 0,0:20:39.61,0:20:40.78,Default,,0,0,0,,You can go ahead and take
Dialogue: 0,0:20:40.78,0:20:42.03,Default,,0,0,0,,argument buffer, copy it
Dialogue: 0,0:20:42.03,0:20:43.29,Default,,0,0,0,,somewhere else; you can blitz it
Dialogue: 0,0:20:43.29,0:20:44.82,Default,,0,0,0,,between CPU and GPU.
Dialogue: 0,0:20:45.63,0:20:47.94,Default,,0,0,0,,And while argument buffers look
Dialogue: 0,0:20:47.94,0:20:51.10,Default,,0,0,0,,like structures on the GPU for
Dialogue: 0,0:20:51.10,0:20:54.63,Default,,0,0,0,,shaders, on the CPU you will use
Dialogue: 0,0:20:54.63,0:20:56.65,Default,,0,0,0,,MTLArgumentEncoder objects to
Dialogue: 0,0:20:56.65,0:20:57.55,Default,,0,0,0,,fill up the content.
Dialogue: 0,0:20:58.51,0:21:02.03,Default,,0,0,0,,This abstraction allows Metal to
Dialogue: 0,0:21:02.03,0:21:04.53,Default,,0,0,0,,create the most optimal memory
Dialogue: 0,0:21:05.02,0:21:06.50,Default,,0,0,0,,representation for any given
Dialogue: 0,0:21:06.50,0:21:08.03,Default,,0,0,0,,argument buffer on that specific
Dialogue: 0,0:21:08.03,0:21:09.21,Default,,0,0,0,,GPU that you are actually
Dialogue: 0,0:21:09.21,0:21:09.54,Default,,0,0,0,,running.
Dialogue: 0,0:21:10.03,0:21:11.33,Default,,0,0,0,,So you get the best performance.
Dialogue: 0,0:21:11.73,0:21:13.11,Default,,0,0,0,,It also frees you, as the
Dialogue: 0,0:21:13.11,0:21:14.53,Default,,0,0,0,,developer, from all these
Dialogue: 0,0:21:15.48,0:21:19.78,Default,,0,0,0,,details and worries about, for
Dialogue: 0,0:21:19.78,0:21:21.79,Default,,0,0,0,,example how each GPU represents
Dialogue: 0,0:21:21.93,0:21:22.80,Default,,0,0,0,,what the texture is.
Dialogue: 0,0:21:22.80,0:21:23.82,Default,,0,0,0,,Where does it live in memory?
Dialogue: 0,0:21:24.44,0:21:26.58,Default,,0,0,0,,All of this changes from
Dialogue: 0,0:21:26.72,0:21:28.61,Default,,0,0,0,,platform to platform and we hide
Dialogue: 0,0:21:28.61,0:21:31.19,Default,,0,0,0,,it between a simple interface so
Dialogue: 0,0:21:31.19,0:21:32.45,Default,,0,0,0,,that you can write very simple
Dialogue: 0,0:21:32.45,0:21:33.66,Default,,0,0,0,,and effective applications.
Dialogue: 0,0:21:34.35,0:21:36.94,Default,,0,0,0,,So I hope you're not worried
Dialogue: 0,0:21:36.94,0:21:37.84,Default,,0,0,0,,about the encoder that I
Dialogue: 0,0:21:37.84,0:21:38.20,Default,,0,0,0,,mentioned.
Dialogue: 0,0:21:38.20,0:21:39.72,Default,,0,0,0,,It's really, really simple to
Dialogue: 0,0:21:39.72,0:21:40.12,Default,,0,0,0,,use.
Dialogue: 0,0:21:41.18,0:21:42.16,Default,,0,0,0,,For example, if you want to
Dialogue: 0,0:21:42.16,0:21:43.69,Default,,0,0,0,,create an argument encoder for
Dialogue: 0,0:21:43.69,0:21:46.22,Default,,0,0,0,,this argument buffer all you
Dialogue: 0,0:21:46.22,0:21:49.72,Default,,0,0,0,,need to do is get your Metal
Dialogue: 0,0:21:49.72,0:21:51.22,Default,,0,0,0,,function that uses the argument
Dialogue: 0,0:21:51.22,0:21:53.57,Default,,0,0,0,,buffer and ask the Metal
Dialogue: 0,0:21:53.57,0:21:55.22,Default,,0,0,0,,function for the encoder and
Dialogue: 0,0:21:55.22,0:21:55.95,Default,,0,0,0,,that's about this.
Dialogue: 0,0:21:55.95,0:21:57.22,Default,,0,0,0,,This is all you needed to do.
Dialogue: 0,0:21:57.22,0:21:59.36,Default,,0,0,0,,You get an object and you start
Dialogue: 0,0:21:59.36,0:22:01.90,Default,,0,0,0,,using a familiar set texture or
Dialogue: 0,0:22:02.29,0:22:04.42,Default,,0,0,0,,filling constant API that is
Dialogue: 0,0:22:04.42,0:22:05.75,Default,,0,0,0,,very, very similar to how you've
Dialogue: 0,0:22:05.75,0:22:08.50,Default,,0,0,0,,been using Metal with command
Dialogue: 0,0:22:08.50,0:22:08.85,Default,,0,0,0,,encoder.
Dialogue: 0,0:22:08.85,0:22:11.75,Default,,0,0,0,,So this also plays into what I
Dialogue: 0,0:22:11.75,0:22:14.95,Default,,0,0,0,,said about ease of use and
Dialogue: 0,0:22:14.95,0:22:15.68,Default,,0,0,0,,transition.
Dialogue: 0,0:22:16.69,0:22:18.57,Default,,0,0,0,,There are multiple other ways of
Dialogue: 0,0:22:18.57,0:22:20.33,Default,,0,0,0,,creating the encoder.
Dialogue: 0,0:22:20.33,0:22:21.62,Default,,0,0,0,,You can go more explicit with
Dialogue: 0,0:22:21.62,0:22:22.52,Default,,0,0,0,,the descriptor, but that's
Dialogue: 0,0:22:22.52,0:22:24.53,Default,,0,0,0,,something you should look into
Dialogue: 0,0:22:24.73,0:22:25.87,Default,,0,0,0,,in documentation if you need
Dialogue: 0,0:22:25.87,0:22:26.51,Default,,0,0,0,,such thing.
Dialogue: 0,0:22:26.71,0:22:28.79,Default,,0,0,0,,We advise you to actually go and
Dialogue: 0,0:22:29.40,0:22:30.70,Default,,0,0,0,,get argument encoders from the
Dialogue: 0,0:22:30.70,0:22:31.21,Default,,0,0,0,,shaders.
Dialogue: 0,0:22:33.68,0:22:36.50,Default,,0,0,0,,Now with all those interactions,
Dialogue: 0,0:22:36.50,0:22:38.23,Default,,0,0,0,,GPU being able to step in and
Dialogue: 0,0:22:38.23,0:22:40.27,Default,,0,0,0,,modify the argument buffers or
Dialogue: 0,0:22:40.87,0:22:42.12,Default,,0,0,0,,you know dynamic indexing and
Dialogue: 0,0:22:42.12,0:22:44.19,Default,,0,0,0,,half a million textures, all
Dialogue: 0,0:22:44.19,0:22:47.35,Default,,0,0,0,,that in a mix, it's not really
Dialogue: 0,0:22:47.74,0:22:49.20,Default,,0,0,0,,possible for Metal to figure out
Dialogue: 0,0:22:49.20,0:22:50.30,Default,,0,0,0,,what -- for example what
Dialogue: 0,0:22:50.30,0:22:52.05,Default,,0,0,0,,textures or buffers do actually
Dialogue: 0,0:22:52.05,0:22:55.23,Default,,0,0,0,,intend to use in your rendering,
Dialogue: 0,0:22:55.23,0:22:56.84,Default,,0,0,0,,but luckily you as a developer
Dialogue: 0,0:22:56.84,0:22:58.75,Default,,0,0,0,,have pretty good idea about
Dialogue: 0,0:22:58.75,0:22:58.96,Default,,0,0,0,,that.
Dialogue: 0,0:22:58.96,0:23:01.11,Default,,0,0,0,,So we ask you with argument
Dialogue: 0,0:23:01.11,0:23:02.55,Default,,0,0,0,,buffers to be quite explicit
Dialogue: 0,0:23:02.55,0:23:02.90,Default,,0,0,0,,about it.
Dialogue: 0,0:23:04.10,0:23:05.61,Default,,0,0,0,,If you are using Heaps, and
Dialogue: 0,0:23:06.48,0:23:08.17,Default,,0,0,0,,absolutely you should use Heaps
Dialogue: 0,0:23:08.17,0:23:09.73,Default,,0,0,0,,to get the best performance out
Dialogue: 0,0:23:09.73,0:23:12.35,Default,,0,0,0,,of your platform and the best
Dialogue: 0,0:23:12.35,0:23:13.60,Default,,0,0,0,,way of organizing your data, the
Dialogue: 0,0:23:14.20,0:23:15.42,Default,,0,0,0,,only thing you need to do is
Dialogue: 0,0:23:15.42,0:23:16.77,Default,,0,0,0,,tell Metal that you intend to
Dialogue: 0,0:23:16.77,0:23:18.72,Default,,0,0,0,,use a Heap , or multiple Heaps,
Dialogue: 0,0:23:18.72,0:23:19.65,Default,,0,0,0,,it's up to you.
Dialogue: 0,0:23:19.65,0:23:22.18,Default,,0,0,0,,And -- this is -- this makes
Dialogue: 0,0:23:22.18,0:23:24.03,Default,,0,0,0,,sure that the textures are
Dialogue: 0,0:23:24.03,0:23:25.38,Default,,0,0,0,,available for you in the
Dialogue: 0,0:23:25.38,0:23:25.97,Default,,0,0,0,,rendering loop.
Dialogue: 0,0:23:26.23,0:23:28.90,Default,,0,0,0,,If you want to do something more
Dialogue: 0,0:23:28.90,0:23:29.91,Default,,0,0,0,,specific, let's say you would
Dialogue: 0,0:23:29.91,0:23:32.42,Default,,0,0,0,,like to write to a render target
Dialogue: 0,0:23:32.42,0:23:34.39,Default,,0,0,0,,from inside a shader, or you
Dialogue: 0,0:23:34.39,0:23:35.46,Default,,0,0,0,,would like to read from a dev
Dialogue: 0,0:23:35.46,0:23:38.30,Default,,0,0,0,,buffer, you use a more specific
Dialogue: 0,0:23:38.30,0:23:40.30,Default,,0,0,0,,API and tell Metal that you
Dialogue: 0,0:23:40.30,0:23:42.31,Default,,0,0,0,,intend to change resource and --
Dialogue: 0,0:23:43.31,0:23:44.35,Default,,0,0,0,,with a specific way.
Dialogue: 0,0:23:44.35,0:23:45.91,Default,,0,0,0,,And again, it's as simple as
Dialogue: 0,0:23:45.91,0:23:46.00,Default,,0,0,0,,this.
Dialogue: 0,0:23:46.00,0:23:46.85,Default,,0,0,0,,You don't need to do anything
Dialogue: 0,0:23:46.85,0:23:46.98,Default,,0,0,0,,else.
Dialogue: 0,0:23:50.34,0:23:52.03,Default,,0,0,0,,So let's start out with a couple
Dialogue: 0,0:23:52.03,0:23:52.94,Default,,0,0,0,,of best practices.
Dialogue: 0,0:23:52.94,0:23:55.82,Default,,0,0,0,,I think if you know Metal they
Dialogue: 0,0:23:55.82,0:23:57.91,Default,,0,0,0,,are very, very similar to what
Dialogue: 0,0:23:57.91,0:23:59.91,Default,,0,0,0,,we are telling you about using
Dialogue: 0,0:23:59.91,0:24:00.56,Default,,0,0,0,,Metal buffers.
Dialogue: 0,0:24:00.99,0:24:02.42,Default,,0,0,0,,The best way to organize your
Dialogue: 0,0:24:02.42,0:24:04.54,Default,,0,0,0,,data is by usage pattern.
Dialogue: 0,0:24:04.54,0:24:05.69,Default,,0,0,0,,And you probably have a ton of
Dialogue: 0,0:24:05.69,0:24:08.24,Default,,0,0,0,,properties that do not change
Dialogue: 0,0:24:08.52,0:24:09.19,Default,,0,0,0,,per frame.
Dialogue: 0,0:24:09.24,0:24:10.37,Default,,0,0,0,,So put them into an argument
Dialogue: 0,0:24:10.37,0:24:11.79,Default,,0,0,0,,buffer and share it with all the
Dialogue: 0,0:24:11.79,0:24:13.00,Default,,0,0,0,,objects so you will save memory
Dialogue: 0,0:24:13.00,0:24:13.37,Default,,0,0,0,,this way.
Dialogue: 0,0:24:14.12,0:24:15.91,Default,,0,0,0,,The same -- on the same -- on
Dialogue: 0,0:24:15.91,0:24:17.59,Default,,0,0,0,,the other hand you will probably
Dialogue: 0,0:24:17.59,0:24:19.40,Default,,0,0,0,,have a lot of properties that
Dialogue: 0,0:24:19.40,0:24:20.93,Default,,0,0,0,,actually do change for every
Dialogue: 0,0:24:20.93,0:24:23.33,Default,,0,0,0,,object and you need to manage
Dialogue: 0,0:24:23.33,0:24:24.18,Default,,0,0,0,,them every frame.
Dialogue: 0,0:24:24.18,0:24:26.78,Default,,0,0,0,,And for these I think the best
Dialogue: 0,0:24:26.78,0:24:27.90,Default,,0,0,0,,way is to put those into
Dialogue: 0,0:24:27.90,0:24:29.07,Default,,0,0,0,,separate argument buffers so
Dialogue: 0,0:24:29.07,0:24:30.23,Default,,0,0,0,,that you can double buffer it or
Dialogue: 0,0:24:30.23,0:24:31.90,Default,,0,0,0,,whatever is your management
Dialogue: 0,0:24:31.90,0:24:34.64,Default,,0,0,0,,scheme and you don't need to do
Dialogue: 0,0:24:34.64,0:24:36.41,Default,,0,0,0,,all the other copies to keep all
Dialogue: 0,0:24:36.41,0:24:37.09,Default,,0,0,0,,the data in there.
Dialogue: 0,0:24:37.54,0:24:39.02,Default,,0,0,0,,And then you will likely have a
Dialogue: 0,0:24:39.02,0:24:41.11,Default,,0,0,0,,ton of argument buffers that
Dialogue: 0,0:24:41.62,0:24:43.12,Default,,0,0,0,,just don't change at all.
Dialogue: 0,0:24:43.12,0:24:44.28,Default,,0,0,0,,Let's say the materials, or
Dialogue: 0,0:24:44.86,0:24:46.64,Default,,0,0,0,,maybe some other properties, and
Dialogue: 0,0:24:46.79,0:24:49.13,Default,,0,0,0,,for these just create them at
Dialogue: 0,0:24:49.13,0:24:50.13,Default,,0,0,0,,the initialization of your
Dialogue: 0,0:24:50.13,0:24:53.64,Default,,0,0,0,,application and keep using them.
Dialogue: 0,0:24:53.85,0:24:57.41,Default,,0,0,0,,Similar to Metal buffers, think
Dialogue: 0,0:24:57.41,0:24:59.65,Default,,0,0,0,,about your data locality and how
Dialogue: 0,0:24:59.65,0:25:01.40,Default,,0,0,0,,you actually use your argument
Dialogue: 0,0:25:01.40,0:25:01.75,Default,,0,0,0,,buffers.
Dialogue: 0,0:25:02.08,0:25:03.64,Default,,0,0,0,,If, for example you have three
Dialogue: 0,0:25:03.64,0:25:05.91,Default,,0,0,0,,textures that are accessed in a
Dialogue: 0,0:25:05.91,0:25:08.61,Default,,0,0,0,,shader, one after another, then
Dialogue: 0,0:25:09.14,0:25:10.67,Default,,0,0,0,,the best thing you can do is
Dialogue: 0,0:25:10.67,0:25:11.88,Default,,0,0,0,,actually put those textures
Dialogue: 0,0:25:11.88,0:25:13.06,Default,,0,0,0,,close to each other in argument
Dialogue: 0,0:25:13.06,0:25:14.41,Default,,0,0,0,,buffers so that you maximize the
Dialogue: 0,0:25:14.41,0:25:16.30,Default,,0,0,0,,use of GPU caches.
Dialogue: 0,0:25:17.21,0:25:17.98,Default,,0,0,0,,And as I mentioned at the
Dialogue: 0,0:25:17.98,0:25:20.57,Default,,0,0,0,,beginning, traditional argument
Dialogue: 0,0:25:20.57,0:25:23.54,Default,,0,0,0,,model is not going anywhere and
Dialogue: 0,0:25:23.54,0:25:25.41,Default,,0,0,0,,you should take advantage of it
Dialogue: 0,0:25:25.41,0:25:26.61,Default,,0,0,0,,and mix it with the argument
Dialogue: 0,0:25:26.61,0:25:27.94,Default,,0,0,0,,buffers whenever it's more
Dialogue: 0,0:25:27.94,0:25:28.62,Default,,0,0,0,,convenient.
Dialogue: 0,0:25:29.14,0:25:30.46,Default,,0,0,0,,So let's say if you need to
Dialogue: 0,0:25:30.46,0:25:32.09,Default,,0,0,0,,change a single texture for
Dialogue: 0,0:25:33.22,0:25:35.62,Default,,0,0,0,,every object, for example a cube
Dialogue: 0,0:25:35.62,0:25:37.45,Default,,0,0,0,,reflection, it probably would be
Dialogue: 0,0:25:37.45,0:25:38.62,Default,,0,0,0,,an overhead to create argument
Dialogue: 0,0:25:38.62,0:25:39.93,Default,,0,0,0,,buffer just for that and upload
Dialogue: 0,0:25:39.93,0:25:40.73,Default,,0,0,0,,it every frame.
Dialogue: 0,0:25:40.73,0:25:42.65,Default,,0,0,0,,So just use the traditional
Dialogue: 0,0:25:42.65,0:25:43.36,Default,,0,0,0,,model for this.
Dialogue: 0,0:25:43.50,0:25:46.05,Default,,0,0,0,,That's it about argument
Dialogue: 0,0:25:46.05,0:25:46.41,Default,,0,0,0,,buffers.
Dialogue: 0,0:25:46.41,0:25:50.09,Default,,0,0,0,,I really hope you will adopt our
Dialogue: 0,0:25:50.09,0:25:52.36,Default,,0,0,0,,new API and get some creative
Dialogue: 0,0:25:52.64,0:25:53.45,Default,,0,0,0,,use cases out of it.
Dialogue: 0,0:25:53.97,0:25:57.29,Default,,0,0,0,,And please welcome Richard, who
Dialogue: 0,0:25:57.40,0:25:58.98,Default,,0,0,0,,will talk about the Raster Order
Dialogue: 0,0:25:58.98,0:25:59.34,Default,,0,0,0,,Groups.
Dialogue: 0,0:26:00.52,0:26:02.44,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:26:02.44,0:26:02.86,Default,,0,0,0,,>> Thank you.
Dialogue: 0,0:26:04.87,0:26:06.54,Default,,0,0,0,,Hello. So thank you Michal.
Dialogue: 0,0:26:06.66,0:26:07.61,Default,,0,0,0,,So I'm going to take you through
Dialogue: 0,0:26:07.61,0:26:08.27,Default,,0,0,0,,the rest of the day's
Dialogue: 0,0:26:08.27,0:26:09.84,Default,,0,0,0,,presentation, starting with
Dialogue: 0,0:26:09.88,0:26:10.77,Default,,0,0,0,,Raster Order Groups.
Dialogue: 0,0:26:12.32,0:26:14.02,Default,,0,0,0,,So this is a new feature that
Dialogue: 0,0:26:14.02,0:26:16.49,Default,,0,0,0,,gives you control over the GPU's
Dialogue: 0,0:26:16.56,0:26:17.70,Default,,0,0,0,,thread scheduling to run
Dialogue: 0,0:26:18.03,0:26:19.52,Default,,0,0,0,,fragment shooter threads, in
Dialogue: 0,0:26:19.58,0:26:19.92,Default,,0,0,0,,order.
Dialogue: 0,0:26:20.52,0:26:21.93,Default,,0,0,0,,This allows overlapping fragment
Dialogue: 0,0:26:21.93,0:26:23.10,Default,,0,0,0,,shooter threads to communicate
Dialogue: 0,0:26:23.16,0:26:24.71,Default,,0,0,0,,through memory, where before it
Dialogue: 0,0:26:24.71,0:26:27.23,Default,,0,0,0,,wasn't always really possible to
Dialogue: 0,0:26:27.23,0:26:28.11,Default,,0,0,0,,do in most cases.
Dialogue: 0,0:26:28.49,0:26:30.08,Default,,0,0,0,,So this opens up a whole new set
Dialogue: 0,0:26:30.08,0:26:31.09,Default,,0,0,0,,of graphics algorithms that were
Dialogue: 0,0:26:31.09,0:26:32.80,Default,,0,0,0,,not practically achievable with
Dialogue: 0,0:26:32.99,0:26:34.04,Default,,0,0,0,,just write only access to your
Dialogue: 0,0:26:34.04,0:26:36.03,Default,,0,0,0,,frame buffers or onward access
Dialogue: 0,0:26:36.03,0:26:37.05,Default,,0,0,0,,memory to device memory.
Dialogue: 0,0:26:38.30,0:26:40.83,Default,,0,0,0,,For example, one of our key --
Dialogue: 0,0:26:40.83,0:26:42.00,Default,,0,0,0,,one of the key applications for
Dialogue: 0,0:26:42.00,0:26:42.99,Default,,0,0,0,,this is Order-independent
Dialogue: 0,0:26:42.99,0:26:43.76,Default,,0,0,0,,transparency.
Dialogue: 0,0:26:44.58,0:26:45.94,Default,,0,0,0,,We've been -- already talked a
Dialogue: 0,0:26:45.94,0:26:47.29,Default,,0,0,0,,lot today about how to reduce
Dialogue: 0,0:26:47.29,0:26:48.43,Default,,0,0,0,,the CP usage of your Metal
Dialogue: 0,0:26:48.43,0:26:50.19,Default,,0,0,0,,application and this feature
Dialogue: 0,0:26:50.19,0:26:51.85,Default,,0,0,0,,lets you build or an algorithm
Dialogue: 0,0:26:52.31,0:26:54.29,Default,,0,0,0,,to include blending back to
Dialogue: 0,0:26:54.29,0:26:55.95,Default,,0,0,0,,front without having to pay the
Dialogue: 0,0:26:55.95,0:26:57.36,Default,,0,0,0,,CPU cost of triangle level
Dialogue: 0,0:26:57.36,0:26:57.73,Default,,0,0,0,,sorting.
Dialogue: 0,0:26:59.37,0:27:00.57,Default,,0,0,0,,There's also been lots of
Dialogue: 0,0:27:00.57,0:27:01.67,Default,,0,0,0,,investigations into advanced
Dialogue: 0,0:27:01.67,0:27:03.01,Default,,0,0,0,,techniques such as dual layer
Dialogue: 0,0:27:03.23,0:27:04.07,Default,,0,0,0,,G-buffers, which can
Dialogue: 0,0:27:04.07,0:27:05.78,Default,,0,0,0,,substantially improve post
Dialogue: 0,0:27:05.78,0:27:07.43,Default,,0,0,0,,processing results, or using the
Dialogue: 0,0:27:07.43,0:27:08.70,Default,,0,0,0,,GPU rasterizer to sort of
Dialogue: 0,0:27:08.70,0:27:10.03,Default,,0,0,0,,voxelize triangle meshes.
Dialogue: 0,0:27:10.89,0:27:12.55,Default,,0,0,0,,For both of these onward
Dialogue: 0,0:27:12.55,0:27:13.56,Default,,0,0,0,,accesses to memory has been a
Dialogue: 0,0:27:13.56,0:27:15.16,Default,,0,0,0,,really large barrier to
Dialogue: 0,0:27:15.16,0:27:16.36,Default,,0,0,0,,efficient implementations.
Dialogue: 0,0:27:17.13,0:27:18.81,Default,,0,0,0,,But probably the simplest and
Dialogue: 0,0:27:18.81,0:27:20.40,Default,,0,0,0,,most common application for this
Dialogue: 0,0:27:20.40,0:27:21.67,Default,,0,0,0,,feature is just implementing
Dialogue: 0,0:27:21.67,0:27:22.61,Default,,0,0,0,,custom blend equations.
Dialogue: 0,0:27:23.36,0:27:24.92,Default,,0,0,0,,iOS's hardware could always do
Dialogue: 0,0:27:24.92,0:27:27.18,Default,,0,0,0,,this pretty natively, but this
Dialogue: 0,0:27:27.18,0:27:29.24,Default,,0,0,0,,is not something that desktop
Dialogue: 0,0:27:29.24,0:27:30.90,Default,,0,0,0,,hardware has traditionally been
Dialogue: 0,0:27:30.90,0:27:31.52,Default,,0,0,0,,able to do.
Dialogue: 0,0:27:32.50,0:27:33.74,Default,,0,0,0,,So I'm going to use custom
Dialogue: 0,0:27:33.74,0:27:34.82,Default,,0,0,0,,blending as an example
Dialogue: 0,0:27:34.82,0:27:35.91,Default,,0,0,0,,application to introduce this
Dialogue: 0,0:27:35.91,0:27:36.18,Default,,0,0,0,,feature.
Dialogue: 0,0:27:37.91,0:27:39.92,Default,,0,0,0,,Okay, so pretty typical case of
Dialogue: 0,0:27:39.92,0:27:41.15,Default,,0,0,0,,triangle blending; one triangle
Dialogue: 0,0:27:41.15,0:27:41.67,Default,,0,0,0,,over another.
Dialogue: 0,0:27:42.60,0:27:44.87,Default,,0,0,0,,Pretty much all modern GPU APIs
Dialogue: 0,0:27:44.91,0:27:46.22,Default,,0,0,0,,guarantee that blending happens
Dialogue: 0,0:27:46.22,0:27:47.26,Default,,0,0,0,,in draw call order.
Dialogue: 0,0:27:47.40,0:27:48.69,Default,,0,0,0,,It provides this nice,
Dialogue: 0,0:27:48.76,0:27:50.25,Default,,0,0,0,,convenient illusion of serial
Dialogue: 0,0:27:50.25,0:27:50.78,Default,,0,0,0,,execution.
Dialogue: 0,0:27:51.63,0:27:53.21,Default,,0,0,0,,But of course what's really
Dialogue: 0,0:27:53.21,0:27:54.42,Default,,0,0,0,,going on behind the scenes is
Dialogue: 0,0:27:54.52,0:27:55.85,Default,,0,0,0,,GPU hardware's highly parallel.
Dialogue: 0,0:27:55.85,0:27:56.92,Default,,0,0,0,,It's going to be running
Dialogue: 0,0:27:56.92,0:27:58.09,Default,,0,0,0,,multiple threads concurrently.
Dialogue: 0,0:27:58.67,0:28:00.13,Default,,0,0,0,,And only this fixed-function
Dialogue: 0,0:28:00.13,0:28:01.62,Default,,0,0,0,,blend step at the end is going
Dialogue: 0,0:28:01.62,0:28:02.88,Default,,0,0,0,,to be delayed until everything
Dialogue: 0,0:28:02.88,0:28:05.60,Default,,0,0,0,,gets put back in order again.
Dialogue: 0,0:28:05.60,0:28:06.72,Default,,0,0,0,,There's this implicit wait that
Dialogue: 0,0:28:06.72,0:28:08.73,Default,,0,0,0,,happens before that blend step.
Dialogue: 0,0:28:10.30,0:28:12.52,Default,,0,0,0,,Things change however if the
Dialogue: 0,0:28:12.52,0:28:13.45,Default,,0,0,0,,ordering -- if we need to put
Dialogue: 0,0:28:13.45,0:28:14.60,Default,,0,0,0,,things in order not at the end
Dialogue: 0,0:28:14.60,0:28:16.15,Default,,0,0,0,,of our fragment shooter, but
Dialogue: 0,0:28:16.25,0:28:17.90,Default,,0,0,0,,right in the middle because in
Dialogue: 0,0:28:17.90,0:28:20.00,Default,,0,0,0,,this case triangle one wants to
Dialogue: 0,0:28:20.00,0:28:21.14,Default,,0,0,0,,write something to memory that
Dialogue: 0,0:28:21.14,0:28:22.43,Default,,0,0,0,,triangle two's threads want to
Dialogue: 0,0:28:22.43,0:28:22.86,Default,,0,0,0,,read from.
Dialogue: 0,0:28:23.08,0:28:24.85,Default,,0,0,0,,If we want triangle two to be
Dialogue: 0,0:28:24.85,0:28:26.07,Default,,0,0,0,,able to build upon and consume
Dialogue: 0,0:28:26.07,0:28:27.86,Default,,0,0,0,,triangle one's data we need to
Dialogue: 0,0:28:27.86,0:28:28.73,Default,,0,0,0,,get that ordering back.
Dialogue: 0,0:28:29.47,0:28:32.20,Default,,0,0,0,,And so that's pretty much what
Dialogue: 0,0:28:32.20,0:28:33.41,Default,,0,0,0,,Raster Order Groups provides.
Dialogue: 0,0:28:34.54,0:28:36.86,Default,,0,0,0,,So I'm going to jump over to a
Dialogue: 0,0:28:37.04,0:28:37.99,Default,,0,0,0,,shader code example.
Dialogue: 0,0:28:38.59,0:28:40.95,Default,,0,0,0,,So if I want to implement custom
Dialogue: 0,0:28:40.95,0:28:42.30,Default,,0,0,0,,blending, an initial attempt
Dialogue: 0,0:28:42.47,0:28:43.90,Default,,0,0,0,,that does not work is going to
Dialogue: 0,0:28:44.08,0:28:45.56,Default,,0,0,0,,be to replace my classic
Dialogue: 0,0:28:45.56,0:28:46.53,Default,,0,0,0,,graphics frame buffer with a
Dialogue: 0,0:28:46.53,0:28:47.83,Default,,0,0,0,,read to write texture and
Dialogue: 0,0:28:47.83,0:28:49.54,Default,,0,0,0,,perform all of my rendering and
Dialogue: 0,0:28:49.54,0:28:50.47,Default,,0,0,0,,blending directly to this
Dialogue: 0,0:28:50.47,0:28:50.79,Default,,0,0,0,,texture.
Dialogue: 0,0:28:51.61,0:28:53.81,Default,,0,0,0,,But of course if the threads
Dialogue: 0,0:28:53.81,0:28:55.06,Default,,0,0,0,,that I'm blending over have yet
Dialogue: 0,0:28:55.06,0:28:56.25,Default,,0,0,0,,to execute, or concurrently
Dialogue: 0,0:28:56.25,0:28:58.90,Default,,0,0,0,,executing, this is -- this whole
Dialogue: 0,0:28:59.00,0:29:00.43,Default,,0,0,0,,remodify/write sequence is going
Dialogue: 0,0:29:00.43,0:29:01.43,Default,,0,0,0,,to create a race condition.
Dialogue: 0,0:29:02.71,0:29:03.81,Default,,0,0,0,,So how do we use Raster Order
Dialogue: 0,0:29:03.81,0:29:04.98,Default,,0,0,0,,Groups to fix this?
Dialogue: 0,0:29:05.14,0:29:07.25,Default,,0,0,0,,It's really, really easy.
Dialogue: 0,0:29:08.46,0:29:09.98,Default,,0,0,0,,All I have to do is add a new
Dialogue: 0,0:29:10.11,0:29:12.83,Default,,0,0,0,,attribute to the memory that has
Dialogue: 0,0:29:12.83,0:29:13.92,Default,,0,0,0,,conflicting accesses.
Dialogue: 0,0:29:14.72,0:29:16.74,Default,,0,0,0,,At this point the compiler and
Dialogue: 0,0:29:16.74,0:29:17.53,Default,,0,0,0,,the hardware are going to
Dialogue: 0,0:29:17.53,0:29:18.71,Default,,0,0,0,,cooperate to be able to
Dialogue: 0,0:29:18.71,0:29:20.45,Default,,0,0,0,,implicitly take the entire range
Dialogue: 0,0:29:20.70,0:29:21.64,Default,,0,0,0,,of [inaudible] shader that
Dialogue: 0,0:29:21.64,0:29:22.83,Default,,0,0,0,,accesses that memory from the
Dialogue: 0,0:29:22.83,0:29:24.00,Default,,0,0,0,,very first to the very last
Dialogue: 0,0:29:24.00,0:29:25.22,Default,,0,0,0,,access and turn it into a
Dialogue: 0,0:29:25.22,0:29:26.20,Default,,0,0,0,,critical section behind the
Dialogue: 0,0:29:26.20,0:29:26.67,Default,,0,0,0,,scenes.
Dialogue: 0,0:29:28.64,0:29:29.66,Default,,0,0,0,,You can also apply this
Dialogue: 0,0:29:29.66,0:29:31.13,Default,,0,0,0,,attribute to normal device
Dialogue: 0,0:29:31.13,0:29:33.69,Default,,0,0,0,,memory pointers, not just
Dialogue: 0,0:29:34.38,0:29:34.71,Default,,0,0,0,,textures.
Dialogue: 0,0:29:34.71,0:29:37.45,Default,,0,0,0,,So with that we get the thread
Dialogue: 0,0:29:37.45,0:29:38.37,Default,,0,0,0,,schedule that we want.
Dialogue: 0,0:29:39.05,0:29:40.24,Default,,0,0,0,,Thread one will proceed and
Dialogue: 0,0:29:40.24,0:29:41.95,Default,,0,0,0,,write to memory and thread two
Dialogue: 0,0:29:41.95,0:29:43.36,Default,,0,0,0,,is going to stop and wait until
Dialogue: 0,0:29:43.36,0:29:45.88,Default,,0,0,0,,thread one's write's complete
Dialogue: 0,0:29:45.88,0:29:47.75,Default,,0,0,0,,giving us basically race free
Dialogue: 0,0:29:47.75,0:29:50.27,Default,,0,0,0,,access to this memory.
Dialogue: 0,0:29:51.75,0:29:52.92,Default,,0,0,0,,Oh, there's one other really
Dialogue: 0,0:29:52.92,0:29:53.94,Default,,0,0,0,,important topic and that's
Dialogue: 0,0:29:53.94,0:29:55.85,Default,,0,0,0,,talking about which threads are
Dialogue: 0,0:29:55.85,0:29:57.10,Default,,0,0,0,,synchronizing with each other.
Dialogue: 0,0:29:57.54,0:29:59.49,Default,,0,0,0,,So of course GPU hardware's
Dialogue: 0,0:29:59.49,0:30:00.32,Default,,0,0,0,,going to be running not just
Dialogue: 0,0:30:00.32,0:30:02.13,Default,,0,0,0,,two, but tens of thousands of
Dialogue: 0,0:30:02.13,0:30:04.96,Default,,0,0,0,,threads at the same time and in
Dialogue: 0,0:30:05.07,0:30:06.27,Default,,0,0,0,,fact it's probably executing
Dialogue: 0,0:30:06.27,0:30:07.58,Default,,0,0,0,,every single thread from both of
Dialogue: 0,0:30:07.58,0:30:08.96,Default,,0,0,0,,these triangles simultaneously.
Dialogue: 0,0:30:09.45,0:30:11.88,Default,,0,0,0,,So of all of these thousands --
Dialogue: 0,0:30:11.88,0:30:12.64,Default,,0,0,0,,tens of thousands -- of threads,
Dialogue: 0,0:30:12.64,0:30:13.80,Default,,0,0,0,,which one synchronizes with each
Dialogue: 0,0:30:13.80,0:30:14.00,Default,,0,0,0,,other?
Dialogue: 0,0:30:15.67,0:30:17.63,Default,,0,0,0,,So I've highlighted one pixel
Dialogue: 0,0:30:17.63,0:30:18.82,Default,,0,0,0,,here because that's the answer
Dialogue: 0,0:30:18.82,0:30:19.42,Default,,0,0,0,,to this question.
Dialogue: 0,0:30:20.19,0:30:21.71,Default,,0,0,0,,You -- this feature only
Dialogue: 0,0:30:21.71,0:30:22.68,Default,,0,0,0,,synchronizes against other
Dialogue: 0,0:30:22.68,0:30:23.81,Default,,0,0,0,,threads that your current
Dialogue: 0,0:30:23.81,0:30:25.36,Default,,0,0,0,,fragment shooter thread overlaps
Dialogue: 0,0:30:25.36,0:30:27.35,Default,,0,0,0,,with, those other threads that
Dialogue: 0,0:30:27.43,0:30:28.94,Default,,0,0,0,,are targeting the same frame
Dialogue: 0,0:30:28.94,0:30:30.98,Default,,0,0,0,,buffer xy location, targeting
Dialogue: 0,0:30:30.98,0:30:32.72,Default,,0,0,0,,the same multi-sample location,
Dialogue: 0,0:30:33.03,0:30:34.14,Default,,0,0,0,,targeting the same render target
Dialogue: 0,0:30:34.14,0:30:34.62,Default,,0,0,0,,index.
Dialogue: 0,0:30:36.56,0:30:37.61,Default,,0,0,0,,If I wanted -- and it
Dialogue: 0,0:30:37.61,0:30:38.92,Default,,0,0,0,,specifically does not provide
Dialogue: 0,0:30:38.97,0:30:40.59,Default,,0,0,0,,any guarantees at all against --
Dialogue: 0,0:30:40.59,0:30:41.68,Default,,0,0,0,,that you can safely access
Dialogue: 0,0:30:41.68,0:30:43.21,Default,,0,0,0,,memory that are written by any
Dialogue: 0,0:30:43.21,0:30:44.11,Default,,0,0,0,,neighboring pixels.
Dialogue: 0,0:30:45.20,0:30:46.65,Default,,0,0,0,,If you do need to have these
Dialogue: 0,0:30:46.65,0:30:48.33,Default,,0,0,0,,kind of area -- or region of
Dialogue: 0,0:30:48.33,0:30:49.57,Default,,0,0,0,,influence -- kind of algorithms
Dialogue: 0,0:30:49.93,0:30:50.99,Default,,0,0,0,,then you will need to go back to
Dialogue: 0,0:30:50.99,0:30:52.16,Default,,0,0,0,,using full memory barriers
Dialogue: 0,0:30:52.19,0:30:53.57,Default,,0,0,0,,between draw call -- or full API
Dialogue: 0,0:30:53.57,0:30:54.73,Default,,0,0,0,,barriers between draw calls or
Dialogue: 0,0:30:54.73,0:30:55.50,Default,,0,0,0,,render passes.
Dialogue: 0,0:30:56.21,0:30:57.68,Default,,0,0,0,,But this comes at a much higher
Dialogue: 0,0:30:57.68,0:30:59.49,Default,,0,0,0,,performance cost and it does not
Dialogue: 0,0:30:59.49,0:31:00.71,Default,,0,0,0,,work in the case where you have
Dialogue: 0,0:31:00.71,0:31:02.07,Default,,0,0,0,,triangle overlap within a single
Dialogue: 0,0:31:02.07,0:31:02.52,Default,,0,0,0,,draw call.
Dialogue: 0,0:31:02.82,0:31:05.08,Default,,0,0,0,,But for these common algorithms
Dialogue: 0,0:31:05.12,0:31:06.64,Default,,0,0,0,,that you do have only need
Dialogue: 0,0:31:06.64,0:31:08.04,Default,,0,0,0,,overlap only synchronization,
Dialogue: 0,0:31:08.67,0:31:09.81,Default,,0,0,0,,Raster Order Groups can get the
Dialogue: 0,0:31:09.81,0:31:11.10,Default,,0,0,0,,job done at a substantially
Dialogue: 0,0:31:11.10,0:31:12.79,Default,,0,0,0,,lower performance cost.
Dialogue: 0,0:31:13.58,0:31:15.32,Default,,0,0,0,,So this is a pretty actually
Dialogue: 0,0:31:15.51,0:31:16.55,Default,,0,0,0,,easy one and that's really all
Dialogue: 0,0:31:16.55,0:31:17.23,Default,,0,0,0,,I've got to say about it.
Dialogue: 0,0:31:17.23,0:31:19.38,Default,,0,0,0,,Raster Order Groups lets you
Dialogue: 0,0:31:19.38,0:31:21.08,Default,,0,0,0,,efficiently wait for overlapping
Dialogue: 0,0:31:21.35,0:31:23.88,Default,,0,0,0,,and only overlapping threads to
Dialogue: 0,0:31:23.88,0:31:24.96,Default,,0,0,0,,finish their access to memory,
Dialogue: 0,0:31:25.64,0:31:27.38,Default,,0,0,0,,which enables a collection of GP
Dialogue: 0,0:31:27.38,0:31:28.57,Default,,0,0,0,,algorithms that were previously
Dialogue: 0,0:31:28.57,0:31:29.86,Default,,0,0,0,,just too inefficient to use
Dialogue: 0,0:31:29.86,0:31:31.12,Default,,0,0,0,,practically in GPU hardware.
Dialogue: 0,0:31:33.34,0:31:35.60,Default,,0,0,0,,This middle of shader thread
Dialogue: 0,0:31:35.60,0:31:36.91,Default,,0,0,0,,summarization is a feature of
Dialogue: 0,0:31:36.91,0:31:38.39,Default,,0,0,0,,the latest GPU hardware, so it
Dialogue: 0,0:31:38.39,0:31:39.12,Default,,0,0,0,,is something you do need to
Dialogue: 0,0:31:39.12,0:31:40.26,Default,,0,0,0,,check for at run time.
Dialogue: 0,0:31:40.93,0:31:42.28,Default,,0,0,0,,In particular it's supported on
Dialogue: 0,0:31:42.28,0:31:43.73,Default,,0,0,0,,the newest AMD Vega GPUs
Dialogue: 0,0:31:43.73,0:31:45.09,Default,,0,0,0,,announced this week as well as
Dialogue: 0,0:31:45.09,0:31:46.19,Default,,0,0,0,,the past couple years' worth of
Dialogue: 0,0:31:46.19,0:31:47.04,Default,,0,0,0,,Intel GPUs.
Dialogue: 0,0:31:49.05,0:31:50.03,Default,,0,0,0,,And that brings us on to our
Dialogue: 0,0:31:50.03,0:31:51.12,Default,,0,0,0,,second feature and that is the
Dialogue: 0,0:31:51.12,0:31:52.75,Default,,0,0,0,,new iPad Pro's ProMotion
Dialogue: 0,0:31:52.75,0:31:52.96,Default,,0,0,0,,Display.
Dialogue: 0,0:32:01.08,0:32:02.32,Default,,0,0,0,,So ProMotion, this is a
Dialogue: 0,0:32:02.45,0:32:03.84,Default,,0,0,0,,particularly great feature for
Dialogue: 0,0:32:03.84,0:32:05.02,Default,,0,0,0,,graphics and game developers and
Dialogue: 0,0:32:05.02,0:32:06.07,Default,,0,0,0,,so I really want to show you
Dialogue: 0,0:32:06.07,0:32:07.46,Default,,0,0,0,,what you can do with it.
Dialogue: 0,0:32:07.81,0:32:10.30,Default,,0,0,0,,This is the first of a sequence
Dialogue: 0,0:32:10.30,0:32:11.44,Default,,0,0,0,,of timeline diagrams I'm going
Dialogue: 0,0:32:11.44,0:32:13.90,Default,,0,0,0,,to show you, showing us when the
Dialogue: 0,0:32:13.90,0:32:15.43,Default,,0,0,0,,GPU starts and finishes
Dialogue: 0,0:32:15.43,0:32:16.75,Default,,0,0,0,,producing a frame, and then when
Dialogue: 0,0:32:16.75,0:32:17.90,Default,,0,0,0,,that same frame finally gets
Dialogue: 0,0:32:17.90,0:32:19.09,Default,,0,0,0,,onto the glass for the user to
Dialogue: 0,0:32:19.09,0:32:19.32,Default,,0,0,0,,see.
Dialogue: 0,0:32:20.48,0:32:21.95,Default,,0,0,0,,The first and most obvious thing
Dialogue: 0,0:32:21.95,0:32:23.19,Default,,0,0,0,,that ProMotion does is we can
Dialogue: 0,0:32:23.19,0:32:24.98,Default,,0,0,0,,now render at 120 frames per
Dialogue: 0,0:32:24.98,0:32:25.38,Default,,0,0,0,,second.
Dialogue: 0,0:32:27.15,0:32:28.73,Default,,0,0,0,,This feels absolutely fantastic
Dialogue: 0,0:32:28.73,0:32:29.74,Default,,0,0,0,,for anything that has really
Dialogue: 0,0:32:29.74,0:32:31.44,Default,,0,0,0,,high speed animations, for
Dialogue: 0,0:32:31.44,0:32:32.63,Default,,0,0,0,,anything that's latency critical
Dialogue: 0,0:32:32.63,0:32:33.93,Default,,0,0,0,,such as tracking user touch or
Dialogue: 0,0:32:33.93,0:32:34.59,Default,,0,0,0,,pencil input.
Dialogue: 0,0:32:35.38,0:32:37.71,Default,,0,0,0,,And it does have some catches.
Dialogue: 0,0:32:37.71,0:32:40.18,Default,,0,0,0,,You of course only get half as
Dialogue: 0,0:32:40.18,0:32:41.98,Default,,0,0,0,,much CPU and GPU time available
Dialogue: 0,0:32:41.98,0:32:43.43,Default,,0,0,0,,per frame so you really have to
Dialogue: 0,0:32:43.43,0:32:44.19,Default,,0,0,0,,pay a lot of attention to
Dialogue: 0,0:32:44.19,0:32:46.03,Default,,0,0,0,,optimization and it does
Dialogue: 0,0:32:46.03,0:32:47.11,Default,,0,0,0,,increase overall system power
Dialogue: 0,0:32:47.11,0:32:47.65,Default,,0,0,0,,consumption.
Dialogue: 0,0:32:48.65,0:32:49.38,Default,,0,0,0,,But if you've got the right
Dialogue: 0,0:32:49.38,0:32:51.34,Default,,0,0,0,,content, where this matters, it
Dialogue: 0,0:32:51.34,0:32:52.56,Default,,0,0,0,,gets a really payoff for the
Dialogue: 0,0:32:52.56,0:32:53.41,Default,,0,0,0,,user experience.
Dialogue: 0,0:32:54.84,0:32:56.40,Default,,0,0,0,,But ProMotion goes a lot farther
Dialogue: 0,0:32:56.40,0:32:57.93,Default,,0,0,0,,than 120 frames per second
Dialogue: 0,0:32:57.93,0:32:58.23,Default,,0,0,0,,rendering.
Dialogue: 0,0:32:59.01,0:33:01.47,Default,,0,0,0,,It also provides much more
Dialogue: 0,0:33:01.47,0:33:03.33,Default,,0,0,0,,flexibility regarding when to
Dialogue: 0,0:33:03.33,0:33:04.38,Default,,0,0,0,,swap the next image onto the
Dialogue: 0,0:33:04.38,0:33:04.85,Default,,0,0,0,,glass.
Dialogue: 0,0:33:05.56,0:33:07.61,Default,,0,0,0,,We're not limited to just 120 or
Dialogue: 0,0:33:07.61,0:33:09.73,Default,,0,0,0,,30 or 60 frames per second.
Dialogue: 0,0:33:10.32,0:33:12.65,Default,,0,0,0,,ProMotion behaves much more
Dialogue: 0,0:33:12.65,0:33:13.89,Default,,0,0,0,,gracefully as your application's
Dialogue: 0,0:33:13.89,0:33:15.28,Default,,0,0,0,,performance moves up and down
Dialogue: 0,0:33:15.55,0:33:16.59,Default,,0,0,0,,compared to a fixed frame rate
Dialogue: 0,0:33:16.59,0:33:17.00,Default,,0,0,0,,display.
Dialogue: 0,0:33:18.21,0:33:21.02,Default,,0,0,0,,For example, here I have a
Dialogue: 0,0:33:21.06,0:33:22.41,Default,,0,0,0,,timeline diagram of a title
Dialogue: 0,0:33:22.41,0:33:23.76,Default,,0,0,0,,that, you know just -- is just
Dialogue: 0,0:33:23.76,0:33:24.82,Default,,0,0,0,,doing too much GPU work to
Dialogue: 0,0:33:24.82,0:33:26.20,Default,,0,0,0,,target 60 frames per second.
Dialogue: 0,0:33:26.35,0:33:27.06,Default,,0,0,0,,You know they're producing
Dialogue: 0,0:33:27.06,0:33:28.74,Default,,0,0,0,,frames every about 21
Dialogue: 0,0:33:28.74,0:33:30.20,Default,,0,0,0,,milliseconds or about 48 frames
Dialogue: 0,0:33:30.20,0:33:30.69,Default,,0,0,0,,per second.
Dialogue: 0,0:33:31.35,0:33:33.30,Default,,0,0,0,,The GPU is perfectly happy to do
Dialogue: 0,0:33:33.30,0:33:35.37,Default,,0,0,0,,that, but on the display side we
Dialogue: 0,0:33:35.37,0:33:36.91,Default,,0,0,0,,can only refresh once every 16
Dialogue: 0,0:33:36.91,0:33:38.01,Default,,0,0,0,,milliseconds and so we end up
Dialogue: 0,0:33:38.01,0:33:38.81,Default,,0,0,0,,with this beating pattern.
Dialogue: 0,0:33:38.88,0:33:39.97,Default,,0,0,0,,There's this stuttering that the
Dialogue: 0,0:33:39.97,0:33:41.70,Default,,0,0,0,,user feels where some frames are
Dialogue: 0,0:33:41.70,0:33:42.75,Default,,0,0,0,,on the glass a lot longer than
Dialogue: 0,0:33:42.75,0:33:43.19,Default,,0,0,0,,others.
Dialogue: 0,0:33:43.89,0:33:46.66,Default,,0,0,0,,And it's not nice at all.
Dialogue: 0,0:33:47.14,0:33:48.70,Default,,0,0,0,,And so pretty much universally
Dialogue: 0,0:33:48.70,0:33:49.68,Default,,0,0,0,,what applications do in this
Dialogue: 0,0:33:49.68,0:33:50.43,Default,,0,0,0,,case is they all have to
Dialogue: 0,0:33:50.43,0:33:51.81,Default,,0,0,0,,artificially constrain the frame
Dialogue: 0,0:33:51.81,0:33:53.61,Default,,0,0,0,,rate all the way down to 30
Dialogue: 0,0:33:53.61,0:33:56.17,Default,,0,0,0,,frames per second.
Dialogue: 0,0:33:56.17,0:33:57.52,Default,,0,0,0,,They're basically trading away
Dialogue: 0,0:33:57.52,0:33:58.83,Default,,0,0,0,,their peak frame rate in order
Dialogue: 0,0:33:58.83,0:33:59.76,Default,,0,0,0,,to get some level of
Dialogue: 0,0:33:59.76,0:34:00.39,Default,,0,0,0,,consistency.
Dialogue: 0,0:34:02.01,0:34:03.97,Default,,0,0,0,,ProMotion does much better here.
Dialogue: 0,0:34:04.45,0:34:05.46,Default,,0,0,0,,So if I just take the same
Dialogue: 0,0:34:05.46,0:34:06.43,Default,,0,0,0,,application, move it to a
Dialogue: 0,0:34:06.43,0:34:08.96,Default,,0,0,0,,ProMotion display, it does this
Dialogue: 0,0:34:08.96,0:34:09.59,Default,,0,0,0,,to our timeline.
Dialogue: 0,0:34:10.66,0:34:11.87,Default,,0,0,0,,We now have a refresh point
Dialogue: 0,0:34:11.87,0:34:13.43,Default,,0,0,0,,every four milliseconds rather
Dialogue: 0,0:34:13.43,0:34:14.18,Default,,0,0,0,,than every 16.
Dialogue: 0,0:34:15.10,0:34:16.49,Default,,0,0,0,,Our timeline gets pulled in,
Dialogue: 0,0:34:16.71,0:34:18.12,Default,,0,0,0,,even with the GPU doing exactly
Dialogue: 0,0:34:18.12,0:34:19.12,Default,,0,0,0,,the same work as before.
Dialogue: 0,0:34:19.74,0:34:21.93,Default,,0,0,0,,The display can now present at
Dialogue: 0,0:34:21.93,0:34:23.46,Default,,0,0,0,,an entirely consistent 48 frames
Dialogue: 0,0:34:23.46,0:34:23.97,Default,,0,0,0,,per second.
Dialogue: 0,0:34:24.82,0:34:26.30,Default,,0,0,0,,The user is now getting both the
Dialogue: 0,0:34:26.30,0:34:27.96,Default,,0,0,0,,best possible frame rate and
Dialogue: 0,0:34:27.96,0:34:29.99,Default,,0,0,0,,perfect consistency from frame
Dialogue: 0,0:34:29.99,0:34:30.39,Default,,0,0,0,,to frame.
Dialogue: 0,0:34:31.02,0:34:31.95,Default,,0,0,0,,This tradeoff that we had to
Dialogue: 0,0:34:31.95,0:34:32.89,Default,,0,0,0,,make is completely gone.
Dialogue: 0,0:34:34.08,0:34:36.93,Default,,0,0,0,,Furthermore -- so a second
Dialogue: 0,0:34:36.93,0:34:38.83,Default,,0,0,0,,example is that this time in
Dialogue: 0,0:34:38.83,0:34:41.13,Default,,0,0,0,,application that wanted to make
Dialogue: 0,0:34:41.13,0:34:42.78,Default,,0,0,0,,60 frames per second, but one
Dialogue: 0,0:34:42.78,0:34:44.50,Default,,0,0,0,,frame just ran a bit long and we
Dialogue: 0,0:34:44.50,0:34:48.13,Default,,0,0,0,,missed our deadline.
Dialogue: 0,0:34:48.13,0:34:49.72,Default,,0,0,0,,On a fixed frame rate display we
Dialogue: 0,0:34:49.72,0:34:50.66,Default,,0,0,0,,end up on the display side with
Dialogue: 0,0:34:50.66,0:34:51.70,Default,,0,0,0,,a pattern that looks very
Dialogue: 0,0:34:51.70,0:34:52.96,Default,,0,0,0,,similar to what we saw before.
Dialogue: 0,0:34:54.44,0:34:55.63,Default,,0,0,0,,ProMotion can fix this too.
Dialogue: 0,0:34:57.41,0:34:58.46,Default,,0,0,0,,So frame one's time on the
Dialogue: 0,0:34:58.46,0:34:59.71,Default,,0,0,0,,glass, rather than it being
Dialogue: 0,0:34:59.71,0:35:01.17,Default,,0,0,0,,extended by 16 milliseconds, is
Dialogue: 0,0:35:01.17,0:35:02.49,Default,,0,0,0,,now only extended by four.
Dialogue: 0,0:35:02.96,0:35:04.36,Default,,0,0,0,,The degree of stutter that the
Dialogue: 0,0:35:04.36,0:35:06.27,Default,,0,0,0,,user experiences is tremendously
Dialogue: 0,0:35:06.27,0:35:08.90,Default,,0,0,0,,reduced and then frame two and
Dialogue: 0,0:35:08.90,0:35:11.17,Default,,0,0,0,,three, their latency gets pulled
Dialogue: 0,0:35:11.17,0:35:12.12,Default,,0,0,0,,right back into where they were
Dialogue: 0,0:35:12.12,0:35:12.63,Default,,0,0,0,,before.
Dialogue: 0,0:35:13.26,0:35:14.57,Default,,0,0,0,,The system recovers right back
Dialogue: 0,0:35:14.57,0:35:15.72,Default,,0,0,0,,onto the timeline right away,
Dialogue: 0,0:35:16.17,0:35:18.97,Default,,0,0,0,,latency is improved, and your
Dialogue: 0,0:35:18.97,0:35:20.28,Default,,0,0,0,,application can proceed on.
Dialogue: 0,0:35:20.34,0:35:21.14,Default,,0,0,0,,We've just gotten right back to
Dialogue: 0,0:35:21.14,0:35:22.59,Default,,0,0,0,,where we wanted to be.
Dialogue: 0,0:35:23.25,0:35:25.96,Default,,0,0,0,,So put it all together, it just
Dialogue: 0,0:35:25.96,0:35:27.65,Default,,0,0,0,,makes animation just feel that
Dialogue: 0,0:35:27.65,0:35:28.97,Default,,0,0,0,,much more robust and solid no
Dialogue: 0,0:35:28.97,0:35:30.62,Default,,0,0,0,,matter what's going on.
Dialogue: 0,0:35:31.73,0:35:33.64,Default,,0,0,0,,So how do you actually go about
Dialogue: 0,0:35:33.64,0:35:34.56,Default,,0,0,0,,taking advantage of this?
Dialogue: 0,0:35:35.59,0:35:38.41,Default,,0,0,0,,For normal UIKit animation, such
Dialogue: 0,0:35:38.41,0:35:39.38,Default,,0,0,0,,as scrolling through lists or
Dialogue: 0,0:35:39.38,0:35:41.34,Default,,0,0,0,,views, iOS will do this entirely
Dialogue: 0,0:35:41.34,0:35:42.36,Default,,0,0,0,,for you out of the box.
Dialogue: 0,0:35:42.85,0:35:44.35,Default,,0,0,0,,It will render it 120 frames per
Dialogue: 0,0:35:44.35,0:35:45.28,Default,,0,0,0,,second when appropriate.
Dialogue: 0,0:35:45.31,0:35:47.44,Default,,0,0,0,,It will use the flexible display
Dialogue: 0,0:35:47.52,0:35:48.30,Default,,0,0,0,,times when appropriate.
Dialogue: 0,0:35:50.04,0:35:51.08,Default,,0,0,0,,Metal applications though tend
Dialogue: 0,0:35:51.08,0:35:52.12,Default,,0,0,0,,to be much more aware of their
Dialogue: 0,0:35:52.12,0:35:53.31,Default,,0,0,0,,timing and so for those we've
Dialogue: 0,0:35:53.31,0:35:54.28,Default,,0,0,0,,made this an opt in feature.
Dialogue: 0,0:35:56.12,0:35:57.72,Default,,0,0,0,,Opting in is done really easily
Dialogue: 0,0:35:57.72,0:35:59.00,Default,,0,0,0,,just by adding a new entry to
Dialogue: 0,0:35:59.00,0:35:59.94,Default,,0,0,0,,your application bundles
Dialogue: 0,0:35:59.94,0:36:00.70,Default,,0,0,0,,info.plist.
Dialogue: 0,0:36:01.48,0:36:03.04,Default,,0,0,0,,Once you do this the timing
Dialogue: 0,0:36:03.04,0:36:04.45,Default,,0,0,0,,behavior of our three Metal
Dialogue: 0,0:36:04.45,0:36:06.03,Default,,0,0,0,,presentation API changes a
Dialogue: 0,0:36:06.03,0:36:06.37,Default,,0,0,0,,little bit.
Dialogue: 0,0:36:06.37,0:36:07.37,Default,,0,0,0,,And so I'm going to walk you
Dialogue: 0,0:36:07.37,0:36:08.68,Default,,0,0,0,,through those three APIs and how
Dialogue: 0,0:36:08.68,0:36:09.29,Default,,0,0,0,,they change now.
Dialogue: 0,0:36:09.98,0:36:11.90,Default,,0,0,0,,So the first of our Metal
Dialogue: 0,0:36:11.90,0:36:13.88,Default,,0,0,0,,presentation APIs is just
Dialogue: 0,0:36:14.30,0:36:15.91,Default,,0,0,0,,present.
Dialogue: 0,0:36:16.73,0:36:18.56,Default,,0,0,0,,It's -- it says present
Dialogue: 0,0:36:18.56,0:36:19.99,Default,,0,0,0,,immediately; schedule my image
Dialogue: 0,0:36:19.99,0:36:20.83,Default,,0,0,0,,to be put on the glass at the
Dialogue: 0,0:36:20.83,0:36:22.50,Default,,0,0,0,,very next available refresh
Dialogue: 0,0:36:22.56,0:36:24.14,Default,,0,0,0,,point after the GPU finishes.
Dialogue: 0,0:36:25.21,0:36:26.44,Default,,0,0,0,,On fixed frame rate hardware
Dialogue: 0,0:36:26.44,0:36:28.40,Default,,0,0,0,,that's 16 milliseconds and on
Dialogue: 0,0:36:28.40,0:36:29.79,Default,,0,0,0,,iPad Pro that's now four
Dialogue: 0,0:36:29.79,0:36:30.46,Default,,0,0,0,,milliseconds.
Dialogue: 0,0:36:30.64,0:36:32.70,Default,,0,0,0,,This is the easiest API to use
Dialogue: 0,0:36:32.70,0:36:33.56,Default,,0,0,0,,because it takes no runs.
Dialogue: 0,0:36:33.56,0:36:34.88,Default,,0,0,0,,So it's the API that most of the
Dialogue: 0,0:36:34.88,0:36:35.81,Default,,0,0,0,,people in this room are already
Dialogue: 0,0:36:35.81,0:36:36.13,Default,,0,0,0,,using.
Dialogue: 0,0:36:37.25,0:36:38.38,Default,,0,0,0,,It's also the API that gives you
Dialogue: 0,0:36:38.38,0:36:39.89,Default,,0,0,0,,the lowest latency access to the
Dialogue: 0,0:36:39.89,0:36:40.29,Default,,0,0,0,,display.
Dialogue: 0,0:36:41.39,0:36:43.07,Default,,0,0,0,,It works identically on both our
Dialogue: 0,0:36:43.07,0:36:44.43,Default,,0,0,0,,fixed frame rate and ProMotion
Dialogue: 0,0:36:44.43,0:36:46.47,Default,,0,0,0,,hardware, but once you opt in it
Dialogue: 0,0:36:46.47,0:36:47.47,Default,,0,0,0,,starts working with much, much
Dialogue: 0,0:36:47.47,0:36:47.98,Default,,0,0,0,,better granularity.
Dialogue: 0,0:36:51.48,0:36:52.94,Default,,0,0,0,,The second of our Metal
Dialogue: 0,0:36:52.94,0:36:54.83,Default,,0,0,0,,presentation APIs is present
Dialogue: 0,0:36:54.83,0:36:55.87,Default,,0,0,0,,with minimum duration.
Dialogue: 0,0:36:56.67,0:36:59.07,Default,,0,0,0,,So this one says; whenever this
Dialogue: 0,0:36:59.07,0:37:00.60,Default,,0,0,0,,image lands on the glass, keep
Dialogue: 0,0:37:00.60,0:37:01.67,Default,,0,0,0,,it there for a certain fixed
Dialogue: 0,0:37:01.67,0:37:02.31,Default,,0,0,0,,amount of time.
Dialogue: 0,0:37:02.88,0:37:03.78,Default,,0,0,0,,So if my image lands on the
Dialogue: 0,0:37:03.78,0:37:04.80,Default,,0,0,0,,glass here, it's going to stay
Dialogue: 0,0:37:04.80,0:37:05.96,Default,,0,0,0,,for 33 milliseconds.
Dialogue: 0,0:37:05.96,0:37:08.01,Default,,0,0,0,,And if my start time shifts so
Dialogue: 0,0:37:08.01,0:37:08.73,Default,,0,0,0,,does the end time.
Dialogue: 0,0:37:09.41,0:37:10.95,Default,,0,0,0,,This is the API you'd use if you
Dialogue: 0,0:37:10.95,0:37:12.22,Default,,0,0,0,,want perfect consistency in
Dialogue: 0,0:37:12.22,0:37:13.63,Default,,0,0,0,,frame rate from frame to frame.
Dialogue: 0,0:37:14.25,0:37:15.98,Default,,0,0,0,,This is particularly useful in
Dialogue: 0,0:37:15.98,0:37:17.45,Default,,0,0,0,,30 frames per seconds -- on 60
Dialogue: 0,0:37:17.69,0:37:19.24,Default,,0,0,0,,rate per seconds displays,
Dialogue: 0,0:37:19.24,0:37:20.16,Default,,0,0,0,,although it's also sometimes
Dialogue: 0,0:37:20.16,0:37:21.28,Default,,0,0,0,,useful on ProMotion as well.
Dialogue: 0,0:37:22.25,0:37:24.54,Default,,0,0,0,,But our third presentation
Dialogue: 0,0:37:24.54,0:37:25.75,Default,,0,0,0,,varying is the most interesting
Dialogue: 0,0:37:25.75,0:37:26.22,Default,,0,0,0,,by far.
Dialogue: 0,0:37:26.41,0:37:28.25,Default,,0,0,0,,It's present at a specific time
Dialogue: 0,0:37:28.57,0:37:30.32,Default,,0,0,0,,and it does exactly what it
Dialogue: 0,0:37:30.32,0:37:30.83,Default,,0,0,0,,sounds like.
Dialogue: 0,0:37:31.57,0:37:32.94,Default,,0,0,0,,If the GPU's done well before
Dialogue: 0,0:37:32.94,0:37:34.26,Default,,0,0,0,,the designated time, the display
Dialogue: 0,0:37:34.26,0:37:34.67,Default,,0,0,0,,will wait.
Dialogue: 0,0:37:35.43,0:37:36.39,Default,,0,0,0,,If the GPU runs over your
Dialogue: 0,0:37:36.39,0:37:37.80,Default,,0,0,0,,deadline the display will pick
Dialogue: 0,0:37:37.80,0:37:39.44,Default,,0,0,0,,it up at the very next available
Dialogue: 0,0:37:39.44,0:37:40.37,Default,,0,0,0,,point afterwards.
Dialogue: 0,0:37:41.52,0:37:44.09,Default,,0,0,0,,This is the key API to use if
Dialogue: 0,0:37:44.09,0:37:45.21,Default,,0,0,0,,you want to build fully custom
Dialogue: 0,0:37:45.21,0:37:46.43,Default,,0,0,0,,animation and timing loops.
Dialogue: 0,0:37:47.12,0:37:48.87,Default,,0,0,0,,This API to present and time,
Dialogue: 0,0:37:48.95,0:37:50.49,Default,,0,0,0,,combined with ProMotion display
Dialogue: 0,0:37:50.93,0:37:52.12,Default,,0,0,0,,basically lets you leave behind
Dialogue: 0,0:37:52.12,0:37:53.28,Default,,0,0,0,,the concept of a fixed frame
Dialogue: 0,0:37:53.28,0:37:54.53,Default,,0,0,0,,rate entirely and render your
Dialogue: 0,0:37:54.53,0:37:56.04,Default,,0,0,0,,content exactly for the time the
Dialogue: 0,0:37:56.04,0:37:57.03,Default,,0,0,0,,user is going to see it.
Dialogue: 0,0:37:57.84,0:37:59.13,Default,,0,0,0,,If you want to keep your Metal
Dialogue: 0,0:37:59.13,0:38:00.35,Default,,0,0,0,,view perfectly in synch with
Dialogue: 0,0:38:00.35,0:38:01.25,Default,,0,0,0,,something else happening on the
Dialogue: 0,0:38:01.25,0:38:03.21,Default,,0,0,0,,system, such as audio, or if you
Dialogue: 0,0:38:03.21,0:38:04.07,Default,,0,0,0,,want to basically provide the
Dialogue: 0,0:38:04.07,0:38:05.30,Default,,0,0,0,,appearance of zero latency at
Dialogue: 0,0:38:05.30,0:38:06.44,Default,,0,0,0,,all and be able to forward
Dialogue: 0,0:38:06.44,0:38:07.61,Default,,0,0,0,,project your animation for
Dialogue: 0,0:38:07.61,0:38:09.01,Default,,0,0,0,,exactly when the user's going to
Dialogue: 0,0:38:09.01,0:38:10.87,Default,,0,0,0,,see your content this is what
Dialogue: 0,0:38:10.87,0:38:11.68,Default,,0,0,0,,lets you do that.
Dialogue: 0,0:38:13.10,0:38:13.95,Default,,0,0,0,,Now of course the trick is
Dialogue: 0,0:38:13.95,0:38:15.16,Default,,0,0,0,,implementing that project next
Dialogue: 0,0:38:15.16,0:38:15.73,Default,,0,0,0,,display time.
Dialogue: 0,0:38:15.73,0:38:16.43,Default,,0,0,0,,That's your function.
Dialogue: 0,0:38:17.46,0:38:18.60,Default,,0,0,0,,To make that work you do need
Dialogue: 0,0:38:18.60,0:38:19.82,Default,,0,0,0,,some feedback from the system to
Dialogue: 0,0:38:19.82,0:38:20.98,Default,,0,0,0,,help you determine what your
Dialogue: 0,0:38:20.98,0:38:22.00,Default,,0,0,0,,actual performance is.
Dialogue: 0,0:38:22.03,0:38:23.19,Default,,0,0,0,,And so we've added that as well.
Dialogue: 0,0:38:24.23,0:38:26.80,Default,,0,0,0,,So a Metal drawable object is a
Dialogue: 0,0:38:26.80,0:38:27.99,Default,,0,0,0,,transient object that tracks the
Dialogue: 0,0:38:27.99,0:38:29.33,Default,,0,0,0,,lifetime of one image you've
Dialogue: 0,0:38:29.33,0:38:30.58,Default,,0,0,0,,rendered all the way through the
Dialogue: 0,0:38:30.58,0:38:31.26,Default,,0,0,0,,display system.
Dialogue: 0,0:38:31.57,0:38:34.74,Default,,0,0,0,,It can now be queried for the
Dialogue: 0,0:38:34.74,0:38:36.26,Default,,0,0,0,,specific time that frame lands
Dialogue: 0,0:38:36.26,0:38:37.45,Default,,0,0,0,,on the glass and you can also
Dialogue: 0,0:38:37.45,0:38:38.18,Default,,0,0,0,,get a call back when that
Dialogue: 0,0:38:38.18,0:38:38.71,Default,,0,0,0,,happens.
Dialogue: 0,0:38:39.74,0:38:41.30,Default,,0,0,0,,So now you can know when your
Dialogue: 0,0:38:41.30,0:38:42.54,Default,,0,0,0,,image is landing on the glass,
Dialogue: 0,0:38:42.91,0:38:44.49,Default,,0,0,0,,when they're being removed, and
Dialogue: 0,0:38:44.49,0:38:45.53,Default,,0,0,0,,you have the key signal to know
Dialogue: 0,0:38:45.53,0:38:47.19,Default,,0,0,0,,when you are or are not making
Dialogue: 0,0:38:47.19,0:38:48.24,Default,,0,0,0,,the designated timing that you
Dialogue: 0,0:38:48.24,0:38:49.72,Default,,0,0,0,,intended and are giving you the
Dialogue: 0,0:38:49.72,0:38:50.98,Default,,0,0,0,,signal to adjust for future
Dialogue: 0,0:38:50.98,0:38:51.53,Default,,0,0,0,,frames.
Dialogue: 0,0:38:54.01,0:38:55.98,Default,,0,0,0,,So that's the story of ProMotion
Dialogue: 0,0:38:55.98,0:38:57.11,Default,,0,0,0,,and what you need to do to make
Dialogue: 0,0:38:57.11,0:38:58.13,Default,,0,0,0,,use of it on the future -- on
Dialogue: 0,0:38:58.13,0:38:59.16,Default,,0,0,0,,these new iPad Pros.
Dialogue: 0,0:38:59.77,0:39:01.40,Default,,0,0,0,,It's incredibly easy to get more
Dialogue: 0,0:39:01.40,0:39:02.54,Default,,0,0,0,,consistent and higher frame
Dialogue: 0,0:39:02.54,0:39:05.09,Default,,0,0,0,,rates with almost no code
Dialogue: 0,0:39:05.09,0:39:06.33,Default,,0,0,0,,changing at all in most
Dialogue: 0,0:39:06.33,0:39:07.07,Default,,0,0,0,,applications.
Dialogue: 0,0:39:08.50,0:39:10.14,Default,,0,0,0,,From there it gives you a menu
Dialogue: 0,0:39:10.14,0:39:11.44,Default,,0,0,0,,of options to decide what
Dialogue: 0,0:39:11.44,0:39:12.59,Default,,0,0,0,,display time model is going to
Dialogue: 0,0:39:12.59,0:39:13.74,Default,,0,0,0,,best benefit your particular
Dialogue: 0,0:39:13.74,0:39:13.96,Default,,0,0,0,,app.
Dialogue: 0,0:39:14.81,0:39:16.19,Default,,0,0,0,,A really, really fast paced
Dialogue: 0,0:39:16.26,0:39:18.05,Default,,0,0,0,,Twitch arcade game or something
Dialogue: 0,0:39:18.05,0:39:19.82,Default,,0,0,0,,tracking touch or pencil input
Dialogue: 0,0:39:19.82,0:39:21.12,Default,,0,0,0,,probably wants to go for 120
Dialogue: 0,0:39:21.12,0:39:21.87,Default,,0,0,0,,frames per second.
Dialogue: 0,0:39:22.48,0:39:24.21,Default,,0,0,0,,A really high end rendering
Dialogue: 0,0:39:24.21,0:39:25.60,Default,,0,0,0,,title might want to stick with
Dialogue: 0,0:39:25.66,0:39:26.99,Default,,0,0,0,,30 or 60 frames per second or
Dialogue: 0,0:39:26.99,0:39:28.01,Default,,0,0,0,,somewhere in between and just
Dialogue: 0,0:39:28.01,0:39:30.29,Default,,0,0,0,,enjoy the consistency benefits.
Dialogue: 0,0:39:30.97,0:39:32.09,Default,,0,0,0,,And applications that want to
Dialogue: 0,0:39:32.09,0:39:33.00,Default,,0,0,0,,really take control of their
Dialogue: 0,0:39:33.00,0:39:34.34,Default,,0,0,0,,timing loop have entirely new
Dialogue: 0,0:39:34.34,0:39:35.38,Default,,0,0,0,,capabilities here as well.
Dialogue: 0,0:39:36.14,0:39:37.79,Default,,0,0,0,,But regardless of what your app
Dialogue: 0,0:39:37.79,0:39:39.80,Default,,0,0,0,,actually is, ProMotion gives you
Dialogue: 0,0:39:39.80,0:39:41.02,Default,,0,0,0,,this powerful new tool to
Dialogue: 0,0:39:41.02,0:39:42.29,Default,,0,0,0,,support its specific animation
Dialogue: 0,0:39:42.29,0:39:42.56,Default,,0,0,0,,needs.
Dialogue: 0,0:39:42.56,0:39:45.14,Default,,0,0,0,,So that's ProMotion.
Dialogue: 0,0:39:45.85,0:39:48.68,Default,,0,0,0,,So moving on, I have a different
Dialogue: 0,0:39:48.77,0:39:50.18,Default,,0,0,0,,display topic to talk about and
Dialogue: 0,0:39:50.18,0:39:51.11,Default,,0,0,0,,that is a feature we're calling
Dialogue: 0,0:39:51.11,0:39:52.15,Default,,0,0,0,,Direct 2 Display.
Dialogue: 0,0:39:54.08,0:39:56.04,Default,,0,0,0,,So the story of what happens
Dialogue: 0,0:39:56.04,0:39:57.87,Default,,0,0,0,,after your GPU finishes
Dialogue: 0,0:39:57.87,0:39:59.14,Default,,0,0,0,,rendering your content and the
Dialogue: 0,0:39:59.14,0:40:00.26,Default,,0,0,0,,display is actually a little bit
Dialogue: 0,0:40:00.26,0:40:00.90,Default,,0,0,0,,more complicated.
Dialogue: 0,0:40:00.97,0:40:02.72,Default,,0,0,0,,And then your image can take two
Dialogue: 0,0:40:02.72,0:40:04.67,Default,,0,0,0,,paths to the display; GPU
Dialogue: 0,0:40:04.67,0:40:06.86,Default,,0,0,0,,composition and direct to
Dialogue: 0,0:40:07.96,0:40:08.15,Default,,0,0,0,,display.
Dialogue: 0,0:40:08.27,0:40:10.09,Default,,0,0,0,,The first of those is a -- your
Dialogue: 0,0:40:10.09,0:40:11.78,Default,,0,0,0,,typical user interface scenario
Dialogue: 0,0:40:12.37,0:40:13.31,Default,,0,0,0,,where I've got a collection of
Dialogue: 0,0:40:13.31,0:40:14.92,Default,,0,0,0,,views or layers or windows and
Dialogue: 0,0:40:14.92,0:40:17.26,Default,,0,0,0,,the like and at this point the
Dialogue: 0,0:40:17.26,0:40:18.21,Default,,0,0,0,,system is going to take all of
Dialogue: 0,0:40:18.21,0:40:18.97,Default,,0,0,0,,these and composite them
Dialogue: 0,0:40:18.97,0:40:19.33,Default,,0,0,0,,together.
Dialogue: 0,0:40:19.47,0:40:20.60,Default,,0,0,0,,It's going to scale any content
Dialogue: 0,0:40:20.60,0:40:21.24,Default,,0,0,0,,to fit the display.
Dialogue: 0,0:40:21.24,0:40:21.74,Default,,0,0,0,,It's going to perform
Dialogue: 0,0:40:21.74,0:40:22.63,Default,,0,0,0,,color/space conversion.
Dialogue: 0,0:40:22.63,0:40:23.58,Default,,0,0,0,,It's going to perform -- apply
Dialogue: 0,0:40:23.58,0:40:24.61,Default,,0,0,0,,any core image filters or
Dialogue: 0,0:40:24.61,0:40:25.89,Default,,0,0,0,,blending and it's going to
Dialogue: 0,0:40:25.89,0:40:27.35,Default,,0,0,0,,produce the one, final combined
Dialogue: 0,0:40:27.35,0:40:28.47,Default,,0,0,0,,image that the user sees.
Dialogue: 0,0:40:30.61,0:40:32.27,Default,,0,0,0,,This is really, really critical
Dialogue: 0,0:40:32.27,0:40:33.50,Default,,0,0,0,,abstraction for full-featured
Dialogue: 0,0:40:33.50,0:40:34.41,Default,,0,0,0,,user interfaces.
Dialogue: 0,0:40:35.90,0:40:37.85,Default,,0,0,0,,But it's also all done on the
Dialogue: 0,0:40:37.85,0:40:39.01,Default,,0,0,0,,GPU and it takes some time and
Dialogue: 0,0:40:39.01,0:40:39.54,Default,,0,0,0,,memory there.
Dialogue: 0,0:40:40.27,0:40:41.58,Default,,0,0,0,,And if we're basically building,
Dialogue: 0,0:40:41.58,0:40:42.48,Default,,0,0,0,,you know a full-screen
Dialogue: 0,0:40:42.48,0:40:43.89,Default,,0,0,0,,application, you know it's a
Dialogue: 0,0:40:43.89,0:40:44.96,Default,,0,0,0,,little bit overkill for that.
Dialogue: 0,0:40:45.43,0:40:46.14,Default,,0,0,0,,And so that's where direct
Dialogue: 0,0:40:46.14,0:40:47.94,Default,,0,0,0,,display mode comes in.
Dialogue: 0,0:40:48.09,0:40:49.07,Default,,0,0,0,,If none of these operations are
Dialogue: 0,0:40:49.07,0:40:51.33,Default,,0,0,0,,actually required, we can point
Dialogue: 0,0:40:51.33,0:40:52.77,Default,,0,0,0,,the display hardware directly at
Dialogue: 0,0:40:52.81,0:40:54.05,Default,,0,0,0,,the memory you just rendered to
Dialogue: 0,0:40:54.42,0:40:55.69,Default,,0,0,0,,and so without any middleman at
Dialogue: 0,0:40:55.69,0:40:55.82,Default,,0,0,0,,all.
Dialogue: 0,0:40:56.72,0:40:58.86,Default,,0,0,0,,So how do you enable this?
Dialogue: 0,0:40:59.24,0:41:01.03,Default,,0,0,0,,It turns out there is no single
Dialogue: 0,0:41:01.03,0:41:02.55,Default,,0,0,0,,turn it on API for direct to
Dialogue: 0,0:41:02.55,0:41:02.97,Default,,0,0,0,,display.
Dialogue: 0,0:41:03.74,0:41:05.40,Default,,0,0,0,,This mode is really an omission
Dialogue: 0,0:41:05.40,0:41:06.63,Default,,0,0,0,,of anything that requires the
Dialogue: 0,0:41:06.63,0:41:07.99,Default,,0,0,0,,GPU compositer to intervene.
Dialogue: 0,0:41:08.66,0:41:10.22,Default,,0,0,0,,When the compositer takes a look
Dialogue: 0,0:41:10.22,0:41:11.43,Default,,0,0,0,,at the set-up of your scene and
Dialogue: 0,0:41:11.43,0:41:12.86,Default,,0,0,0,,says there's nothing it needs to
Dialogue: 0,0:41:12.86,0:41:14.74,Default,,0,0,0,,do here it will just step out of
Dialogue: 0,0:41:15.41,0:41:16.30,Default,,0,0,0,,the way.
Dialogue: 0,0:41:16.30,0:41:18.01,Default,,0,0,0,,So how can you set up your scene
Dialogue: 0,0:41:18.01,0:41:20.56,Default,,0,0,0,,to get the compositer to step
Dialogue: 0,0:41:20.56,0:41:22.40,Default,,0,0,0,,out of the way?
Dialogue: 0,0:41:22.48,0:41:23.53,Default,,0,0,0,,So this is pretty
Dialogue: 0,0:41:23.53,0:41:24.75,Default,,0,0,0,,straightforward, an intuitive
Dialogue: 0,0:41:24.80,0:41:26.00,Default,,0,0,0,,feel of, does my content need
Dialogue: 0,0:41:26.00,0:41:26.94,Default,,0,0,0,,any kind of nontrurial
Dialogue: 0,0:41:26.94,0:41:27.68,Default,,0,0,0,,[phonetic] processing is a
Dialogue: 0,0:41:27.68,0:41:29.17,Default,,0,0,0,,pretty good intuitive start.
Dialogue: 0,0:41:29.90,0:41:30.98,Default,,0,0,0,,But more specifically you do
Dialogue: 0,0:41:30.98,0:41:31.99,Default,,0,0,0,,want your layer to be opaque.
Dialogue: 0,0:41:32.56,0:41:33.59,Default,,0,0,0,,I don't want to be blending over
Dialogue: 0,0:41:33.59,0:41:33.94,Default,,0,0,0,,anything.
Dialogue: 0,0:41:34.25,0:41:36.45,Default,,0,0,0,,We don't want to apply anything
Dialogue: 0,0:41:36.45,0:41:37.55,Default,,0,0,0,,that requires that core
Dialogue: 0,0:41:37.55,0:41:38.50,Default,,0,0,0,,animation or the window server
Dialogue: 0,0:41:38.77,0:41:39.78,Default,,0,0,0,,modify our pixels.
Dialogue: 0,0:41:39.78,0:41:40.68,Default,,0,0,0,,We don't want to put on rounded
Dialogue: 0,0:41:40.68,0:41:42.24,Default,,0,0,0,,corners in our view or masking
Dialogue: 0,0:41:42.24,0:41:44.21,Default,,0,0,0,,or filters or the like.
Dialogue: 0,0:41:45.50,0:41:46.73,Default,,0,0,0,,We do want to be full-screen.
Dialogue: 0,0:41:47.08,0:41:49.33,Default,,0,0,0,,If your content does not
Dialogue: 0,0:41:49.33,0:41:51.09,Default,,0,0,0,,actually match the aspect ratio
Dialogue: 0,0:41:51.09,0:41:52.27,Default,,0,0,0,,of the display it is okay to put
Dialogue: 0,0:41:52.27,0:41:53.73,Default,,0,0,0,,a full-screen, opaque, black
Dialogue: 0,0:41:53.73,0:41:55.17,Default,,0,0,0,,background layer to sort of give
Dialogue: 0,0:41:55.17,0:41:56.23,Default,,0,0,0,,a black bar kind of effect.
Dialogue: 0,0:41:56.23,0:41:57.05,Default,,0,0,0,,But in the end we want to
Dialogue: 0,0:41:57.05,0:41:58.35,Default,,0,0,0,,basically obscure everything.
Dialogue: 0,0:42:01.29,0:42:02.49,Default,,0,0,0,,We do want to pick render
Dialogue: 0,0:42:02.49,0:42:03.47,Default,,0,0,0,,resolutions that match the
Dialogue: 0,0:42:03.47,0:42:04.14,Default,,0,0,0,,native panel.
Dialogue: 0,0:42:05.02,0:42:06.25,Default,,0,0,0,,So this is actually a little bit
Dialogue: 0,0:42:06.25,0:42:07.45,Default,,0,0,0,,tricky because all of our --
Dialogue: 0,0:42:07.45,0:42:08.90,Default,,0,0,0,,both on macOS and iOS we ship
Dialogue: 0,0:42:08.90,0:42:10.40,Default,,0,0,0,,hardware that has a virtual
Dialogue: 0,0:42:10.40,0:42:12.34,Default,,0,0,0,,desktop modes or resolution
Dialogue: 0,0:42:12.34,0:42:13.53,Default,,0,0,0,,modes that are larger than the
Dialogue: 0,0:42:13.53,0:42:14.50,Default,,0,0,0,,actual physical panel.
Dialogue: 0,0:42:14.60,0:42:16.04,Default,,0,0,0,,And the last thing we want to do
Dialogue: 0,0:42:16.04,0:42:17.22,Default,,0,0,0,,is spend time rendering too many
Dialogue: 0,0:42:17.22,0:42:18.45,Default,,0,0,0,,pixels only to have to spend
Dialogue: 0,0:42:18.45,0:42:19.59,Default,,0,0,0,,time on the GPU to scale it all
Dialogue: 0,0:42:19.59,0:42:19.98,Default,,0,0,0,,back down again.
Dialogue: 0,0:42:24.30,0:42:25.68,Default,,0,0,0,,And finally, you want to pick a
Dialogue: 0,0:42:25.68,0:42:26.81,Default,,0,0,0,,color, space, and pixel format
Dialogue: 0,0:42:26.81,0:42:27.88,Default,,0,0,0,,that the display hardware is
Dialogue: 0,0:42:27.88,0:42:29.02,Default,,0,0,0,,happy to read from directly.
Dialogue: 0,0:42:29.90,0:42:30.96,Default,,0,0,0,,And so this one, there's any
Dialogue: 0,0:42:30.96,0:42:32.05,Default,,0,0,0,,infinite number of combinations
Dialogue: 0,0:42:32.05,0:42:33.82,Default,,0,0,0,,here so I want to help out by
Dialogue: 0,0:42:33.82,0:42:34.49,Default,,0,0,0,,giving you a little bit of a
Dialogue: 0,0:42:34.49,0:42:35.82,Default,,0,0,0,,white list of some particularly
Dialogue: 0,0:42:35.82,0:42:36.75,Default,,0,0,0,,common and efficient
Dialogue: 0,0:42:36.75,0:42:37.42,Default,,0,0,0,,combinations.
Dialogue: 0,0:42:39.77,0:42:41.43,Default,,0,0,0,,So right on the top is our good
Dialogue: 0,0:42:41.43,0:42:44.41,Default,,0,0,0,,old friend; SRGB8888.
Dialogue: 0,0:42:44.41,0:42:45.33,Default,,0,0,0,,This is pretty much the
Dialogue: 0,0:42:45.33,0:42:46.82,Default,,0,0,0,,universal pixel format that most
Dialogue: 0,0:42:46.82,0:42:48.64,Default,,0,0,0,,applications use and all
Dialogue: 0,0:42:48.64,0:42:50.45,Default,,0,0,0,,hardware is happy to read.
Dialogue: 0,0:42:50.45,0:42:51.61,Default,,0,0,0,,And so for most people that's
Dialogue: 0,0:42:51.61,0:42:52.03,Default,,0,0,0,,all they need.
Dialogue: 0,0:42:53.50,0:42:55.71,Default,,0,0,0,,But we've been shipping wide
Dialogue: 0,0:42:55.71,0:42:57.93,Default,,0,0,0,,color gamut P3 displays on both
Dialogue: 0,0:42:57.93,0:43:00.69,Default,,0,0,0,,our macOS and iOS hardware and
Dialogue: 0,0:43:00.94,0:43:02.08,Default,,0,0,0,,if your application does want to
Dialogue: 0,0:43:02.08,0:43:03.60,Default,,0,0,0,,start making use of this ability
Dialogue: 0,0:43:03.60,0:43:04.76,Default,,0,0,0,,to represent more colors, you
Dialogue: 0,0:43:04.76,0:43:05.84,Default,,0,0,0,,need to pay a bit more
Dialogue: 0,0:43:05.84,0:43:06.23,Default,,0,0,0,,attention.
Dialogue: 0,0:43:06.23,0:43:09.50,Default,,0,0,0,,In both the -- the concepts are
Dialogue: 0,0:43:09.50,0:43:10.92,Default,,0,0,0,,the same between iOS and macOS,
Dialogue: 0,0:43:10.92,0:43:11.83,Default,,0,0,0,,although the details differ a
Dialogue: 0,0:43:11.83,0:43:13.15,Default,,0,0,0,,little bit.
Dialogue: 0,0:43:13.15,0:43:14.52,Default,,0,0,0,,In both cases we do want to
Dialogue: 0,0:43:14.52,0:43:15.68,Default,,0,0,0,,render to attend the pixel
Dialogue: 0,0:43:17.10,0:43:19.94,Default,,0,0,0,,format, but note that if you
Dialogue: 0,0:43:19.94,0:43:21.40,Default,,0,0,0,,render P3 content onto a P3
Dialogue: 0,0:43:21.40,0:43:23.12,Default,,0,0,0,,display that's fine, but if you
Dialogue: 0,0:43:23.12,0:43:25.52,Default,,0,0,0,,render P3 content onto an SRGB
Dialogue: 0,0:43:25.52,0:43:28.00,Default,,0,0,0,,display the system -- the GP
Dialogue: 0,0:43:28.00,0:43:29.10,Default,,0,0,0,,compositer might have to get
Dialogue: 0,0:43:29.10,0:43:30.16,Default,,0,0,0,,involved to crush the color
Dialogue: 0,0:43:30.16,0:43:31.26,Default,,0,0,0,,space back down to fit the
Dialogue: 0,0:43:31.26,0:43:31.65,Default,,0,0,0,,display.
Dialogue: 0,0:43:32.54,0:43:34.04,Default,,0,0,0,,And so this is -- P3 is not
Dialogue: 0,0:43:34.04,0:43:34.65,Default,,0,0,0,,something you want to do
Dialogue: 0,0:43:34.65,0:43:35.83,Default,,0,0,0,,universally, all the time.
Dialogue: 0,0:43:35.94,0:43:37.01,Default,,0,0,0,,you do want to take a look at
Dialogue: 0,0:43:37.06,0:43:39.29,Default,,0,0,0,,the current display and make
Dialogue: 0,0:43:39.29,0:43:40.45,Default,,0,0,0,,this a conditional thing.
Dialogue: 0,0:43:40.82,0:43:43.19,Default,,0,0,0,,So finally, for completeness I'm
Dialogue: 0,0:43:43.19,0:43:44.56,Default,,0,0,0,,also going to list RGBA float
Dialogue: 0,0:43:44.56,0:43:45.70,Default,,0,0,0,,16, which is sort of the
Dialogue: 0,0:43:45.70,0:43:47.95,Default,,0,0,0,,universal, wide gamut, high
Dialogue: 0,0:43:47.95,0:43:49.24,Default,,0,0,0,,dynamic range pixel format.
Dialogue: 0,0:43:49.79,0:43:51.92,Default,,0,0,0,,Although, in -- I do -- it's
Dialogue: 0,0:43:51.92,0:43:53.10,Default,,0,0,0,,also necessary for MacOS's
Dialogue: 0,0:43:53.10,0:43:54.29,Default,,0,0,0,,extended data range feature.
Dialogue: 0,0:43:55.03,0:43:55.91,Default,,0,0,0,,Although it is worth noting that
Dialogue: 0,0:43:55.91,0:43:57.31,Default,,0,0,0,,it does require GPU compositing
Dialogue: 0,0:43:57.31,0:43:57.98,Default,,0,0,0,,in all cases.
Dialogue: 0,0:44:01.49,0:44:02.40,Default,,0,0,0,,So I mentioned, you do want to
Dialogue: 0,0:44:02.40,0:44:03.61,Default,,0,0,0,,be a little bit conditional if
Dialogue: 0,0:44:03.61,0:44:04.54,Default,,0,0,0,,you write an application that's
Dialogue: 0,0:44:04.54,0:44:05.42,Default,,0,0,0,,wide color aware.
Dialogue: 0,0:44:06.21,0:44:07.58,Default,,0,0,0,,Fortunately, both UIKit and
Dialogue: 0,0:44:07.62,0:44:08.61,Default,,0,0,0,,AppKit provide really convenient
Dialogue: 0,0:44:08.61,0:44:08.98,Default,,0,0,0,,APIs to check that.
Dialogue: 0,0:44:13.09,0:44:14.62,Default,,0,0,0,,So the last step is, how do you
Dialogue: 0,0:44:14.62,0:44:15.89,Default,,0,0,0,,know if you're actually on the
Dialogue: 0,0:44:15.89,0:44:17.48,Default,,0,0,0,,directed display path?
Dialogue: 0,0:44:17.48,0:44:18.51,Default,,0,0,0,,So this is a screen shot of our
Dialogue: 0,0:44:18.51,0:44:19.80,Default,,0,0,0,,Metal system trace tool and
Dialogue: 0,0:44:19.80,0:44:20.40,Default,,0,0,0,,instruments.
Dialogue: 0,0:44:20.65,0:44:23.19,Default,,0,0,0,,And Metal system trace is pretty
Dialogue: 0,0:44:23.19,0:44:24.84,Default,,0,0,0,,much a developer tool that will
Dialogue: 0,0:44:24.84,0:44:26.49,Default,,0,0,0,,give you a live timeline of the
Dialogue: 0,0:44:26.49,0:44:27.71,Default,,0,0,0,,CPU and the GPU in the display.
Dialogue: 0,0:44:28.05,0:44:29.94,Default,,0,0,0,,Pretty much a real-world version
Dialogue: 0,0:44:29.94,0:44:30.83,Default,,0,0,0,,of the diagrams I've been
Dialogue: 0,0:44:30.83,0:44:31.47,Default,,0,0,0,,showing you in this
Dialogue: 0,0:44:31.47,0:44:32.07,Default,,0,0,0,,presentation.
Dialogue: 0,0:44:33.23,0:44:35.05,Default,,0,0,0,,So in this case, I want to
Dialogue: 0,0:44:35.05,0:44:36.42,Default,,0,0,0,,highlight my three frames that
Dialogue: 0,0:44:36.42,0:44:36.85,Default,,0,0,0,,I've rendered.
Dialogue: 0,0:44:37.38,0:44:38.94,Default,,0,0,0,,The color-time intervals are my
Dialogue: 0,0:44:38.94,0:44:39.95,Default,,0,0,0,,own application's rendering.
Dialogue: 0,0:44:41.13,0:44:42.56,Default,,0,0,0,,And the gray time intervals are
Dialogue: 0,0:44:42.56,0:44:44.28,Default,,0,0,0,,some other processes in the GPU.
Dialogue: 0,0:44:45.55,0:44:46.64,Default,,0,0,0,,I can get more details down at
Dialogue: 0,0:44:46.64,0:44:47.51,Default,,0,0,0,,the bottom of the window or I
Dialogue: 0,0:44:47.51,0:44:48.14,Default,,0,0,0,,can see it's coming from
Dialogue: 0,0:44:48.14,0:44:50.67,Default,,0,0,0,,backboard D, our iOS composition
Dialogue: 0,0:44:50.67,0:44:51.24,Default,,0,0,0,,process.
Dialogue: 0,0:44:51.43,0:44:52.44,Default,,0,0,0,,So this is the case where my
Dialogue: 0,0:44:52.44,0:44:53.51,Default,,0,0,0,,application is going down the
Dialogue: 0,0:44:53.51,0:44:55.77,Default,,0,0,0,,GPU compositing path.
Dialogue: 0,0:44:55.77,0:44:56.73,Default,,0,0,0,,Going back and revisiting some
Dialogue: 0,0:44:56.73,0:44:59.00,Default,,0,0,0,,of our best practices can remove
Dialogue: 0,0:44:59.00,0:45:00.32,Default,,0,0,0,,that from the picture and now I
Dialogue: 0,0:45:00.32,0:45:01.95,Default,,0,0,0,,can rerun my Metal system trace
Dialogue: 0,0:45:02.39,0:45:03.81,Default,,0,0,0,,and see that I have a timeline
Dialogue: 0,0:45:03.81,0:45:05.46,Default,,0,0,0,,where, you know I've got the GPU
Dialogue: 0,0:45:05.55,0:45:06.45,Default,,0,0,0,,completely and entirely to
Dialogue: 0,0:45:06.45,0:45:06.94,Default,,0,0,0,,myself.
Dialogue: 0,0:45:10.16,0:45:11.85,Default,,0,0,0,,So that's it for direct to
Dialogue: 0,0:45:11.98,0:45:12.59,Default,,0,0,0,,display.
Dialogue: 0,0:45:12.59,0:45:13.92,Default,,0,0,0,,Our system compositors can make
Dialogue: 0,0:45:13.92,0:45:15.21,Default,,0,0,0,,a lot of magic happen behind the
Dialogue: 0,0:45:15.21,0:45:16.58,Default,,0,0,0,,scenes to make full-featured
Dialogue: 0,0:45:16.58,0:45:18.45,Default,,0,0,0,,user interfaces possible, but
Dialogue: 0,0:45:18.45,0:45:19.54,Default,,0,0,0,,that can come at a performance
Dialogue: 0,0:45:19.54,0:45:20.81,Default,,0,0,0,,cost because they use the GPU to
Dialogue: 0,0:45:20.81,0:45:21.26,Default,,0,0,0,,do it.
Dialogue: 0,0:45:22.22,0:45:23.29,Default,,0,0,0,,By being a little bit aware of
Dialogue: 0,0:45:23.29,0:45:23.87,Default,,0,0,0,,what you're asking the
Dialogue: 0,0:45:23.87,0:45:25.37,Default,,0,0,0,,compositer to do, or more
Dialogue: 0,0:45:25.37,0:45:26.73,Default,,0,0,0,,importantly by not asking what
Dialogue: 0,0:45:26.73,0:45:28.02,Default,,0,0,0,,you're not asking the compositer
Dialogue: 0,0:45:28.02,0:45:29.88,Default,,0,0,0,,to do, it can get out of the way
Dialogue: 0,0:45:29.88,0:45:31.65,Default,,0,0,0,,without using the GPU, returning
Dialogue: 0,0:45:31.65,0:45:32.59,Default,,0,0,0,,some of that time to you.
Dialogue: 0,0:45:33.33,0:45:35.36,Default,,0,0,0,,Direct to display is supported
Dialogue: 0,0:45:35.36,0:45:36.88,Default,,0,0,0,,on iOS and Tos and always has
Dialogue: 0,0:45:36.88,0:45:38.89,Default,,0,0,0,,been and its support is new to
Dialogue: 0,0:45:38.89,0:45:40.48,Default,,0,0,0,,macOS High Sierra for Metal
Dialogue: 0,0:45:40.48,0:45:40.97,Default,,0,0,0,,applications.
Dialogue: 0,0:45:45.20,0:45:46.37,Default,,0,0,0,,So with that I want to touch on
Dialogue: 0,0:45:46.37,0:45:47.96,Default,,0,0,0,,our last topic of the day and
Dialogue: 0,0:45:47.96,0:45:50.40,Default,,0,0,0,,that's everything else.
Dialogue: 0,0:45:50.45,0:45:51.55,Default,,0,0,0,,There's a lot more that we've
Dialogue: 0,0:45:51.55,0:45:52.66,Default,,0,0,0,,added to the core frameworks and
Dialogue: 0,0:45:52.66,0:45:53.85,Default,,0,0,0,,sheeting language for Metal 2.
Dialogue: 0,0:45:53.91,0:45:55.14,Default,,0,0,0,,And so I'm not going to dive
Dialogue: 0,0:45:55.14,0:45:56.06,Default,,0,0,0,,deep into any of these things,
Dialogue: 0,0:45:56.06,0:45:56.72,Default,,0,0,0,,but I do want to give you a
Dialogue: 0,0:45:56.72,0:45:57.01,Default,,0,0,0,,survey.
Dialogue: 0,0:45:57.01,0:46:00.08,Default,,0,0,0,,So right off the bat we've added
Dialogue: 0,0:46:00.37,0:46:01.77,Default,,0,0,0,,some new APIs to be able to
Dialogue: 0,0:46:01.77,0:46:03.75,Default,,0,0,0,,query how much GPU memory's
Dialogue: 0,0:46:03.75,0:46:05.15,Default,,0,0,0,,being allocated for each buffer,
Dialogue: 0,0:46:05.15,0:46:06.28,Default,,0,0,0,,for each texture, for each Heap.
Dialogue: 0,0:46:06.57,0:46:08.82,Default,,0,0,0,,This actually takes into account
Dialogue: 0,0:46:08.82,0:46:09.41,Default,,0,0,0,,things that just generally
Dialogue: 0,0:46:09.41,0:46:10.50,Default,,0,0,0,,happen behind the scenes, like
Dialogue: 0,0:46:10.50,0:46:12.33,Default,,0,0,0,,alignment and various padding.
Dialogue: 0,0:46:12.99,0:46:13.83,Default,,0,0,0,,So this can give you a more
Dialogue: 0,0:46:13.83,0:46:15.19,Default,,0,0,0,,accurate view of how much GPU
Dialogue: 0,0:46:15.19,0:46:16.42,Default,,0,0,0,,memory you're actually using.
Dialogue: 0,0:46:16.42,0:46:19.30,Default,,0,0,0,,We also have a roll-up query on
Dialogue: 0,0:46:19.30,0:46:21.84,Default,,0,0,0,,the Metal device, which is the
Dialogue: 0,0:46:21.84,0:46:23.60,Default,,0,0,0,,entire GPU memory usage for your
Dialogue: 0,0:46:23.60,0:46:24.61,Default,,0,0,0,,entire process.
Dialogue: 0,0:46:24.94,0:46:26.55,Default,,0,0,0,,And this is particularly notable
Dialogue: 0,0:46:26.55,0:46:28.44,Default,,0,0,0,,because that also counts all of
Dialogue: 0,0:46:28.44,0:46:29.45,Default,,0,0,0,,the memory that the driver needs
Dialogue: 0,0:46:29.45,0:46:30.79,Default,,0,0,0,,to allocate that's not otherwise
Dialogue: 0,0:46:30.79,0:46:32.99,Default,,0,0,0,,visible to you; things like
Dialogue: 0,0:46:32.99,0:46:34.51,Default,,0,0,0,,memory to put shader code in or
Dialogue: 0,0:46:34.51,0:46:35.52,Default,,0,0,0,,command buffers or anything
Dialogue: 0,0:46:35.52,0:46:35.91,Default,,0,0,0,,else.
Dialogue: 0,0:46:36.40,0:46:37.35,Default,,0,0,0,,So this can give you where
Dialogue: 0,0:46:37.35,0:46:38.33,Default,,0,0,0,,you're at relative -- you know
Dialogue: 0,0:46:38.38,0:46:39.41,Default,,0,0,0,,everything all in compared to
Dialogue: 0,0:46:39.41,0:46:39.98,Default,,0,0,0,,your memory usage target.
Dialogue: 0,0:46:43.57,0:46:44.50,Default,,0,0,0,,We have a couple compute
Dialogue: 0,0:46:44.50,0:46:45.42,Default,,0,0,0,,oriented additions.
Dialogue: 0,0:46:45.87,0:46:47.08,Default,,0,0,0,,The first of those is that we've
Dialogue: 0,0:46:47.08,0:46:48.11,Default,,0,0,0,,added a set of shading language
Dialogue: 0,0:46:48.11,0:46:49.47,Default,,0,0,0,,functions to help -- to allow
Dialogue: 0,0:46:49.47,0:46:50.66,Default,,0,0,0,,you to transfer data directly
Dialogue: 0,0:46:50.66,0:46:51.81,Default,,0,0,0,,between threads in a SIMD group.
Dialogue: 0,0:46:52.03,0:46:54.13,Default,,0,0,0,,If you're not familiar; GPU
Dialogue: 0,0:46:54.13,0:46:55.36,Default,,0,0,0,,hardware typically gains an
Dialogue: 0,0:46:55.58,0:46:57.44,Default,,0,0,0,,individual vertex fragment and
Dialogue: 0,0:46:57.44,0:46:59.43,Default,,0,0,0,,compute shader thread into SIMD
Dialogue: 0,0:46:59.43,0:47:00.59,Default,,0,0,0,,groups and executes them
Dialogue: 0,0:47:00.59,0:47:01.82,Default,,0,0,0,,together for greater efficiency.
Dialogue: 0,0:47:02.37,0:47:04.10,Default,,0,0,0,,This are also called wayfrencer
Dialogue: 0,0:47:04.10,0:47:04.58,Default,,0,0,0,,[phonetic] warps.
Dialogue: 0,0:47:05.60,0:47:07.22,Default,,0,0,0,,Within a group these threads do
Dialogue: 0,0:47:07.22,0:47:08.34,Default,,0,0,0,,have some ability to directly
Dialogue: 0,0:47:08.34,0:47:09.59,Default,,0,0,0,,communicate without having to
Dialogue: 0,0:47:09.59,0:47:10.63,Default,,0,0,0,,load and store through memory.
Dialogue: 0,0:47:11.24,0:47:12.96,Default,,0,0,0,,They can read values directly
Dialogue: 0,0:47:12.96,0:47:14.05,Default,,0,0,0,,out of one thread's register and
Dialogue: 0,0:47:14.05,0:47:14.93,Default,,0,0,0,,write them to another thread's
Dialogue: 0,0:47:14.93,0:47:15.50,Default,,0,0,0,,register.
Dialogue: 0,0:47:15.63,0:47:16.35,Default,,0,0,0,,And that's what these new
Dialogue: 0,0:47:16.35,0:47:17.34,Default,,0,0,0,,standard library functions
Dialogue: 0,0:47:17.34,0:47:17.64,Default,,0,0,0,,allow.
Dialogue: 0,0:47:18.63,0:47:21.35,Default,,0,0,0,,So in this case broadcast means
Dialogue: 0,0:47:21.35,0:47:22.58,Default,,0,0,0,,I can read a data directly --
Dialogue: 0,0:47:22.69,0:47:24.06,Default,,0,0,0,,read a field directly out of
Dialogue: 0,0:47:24.06,0:47:25.36,Default,,0,0,0,,thread zero's registers and
Dialogue: 0,0:47:25.36,0:47:26.24,Default,,0,0,0,,write it directly into the
Dialogue: 0,0:47:26.24,0:47:27.70,Default,,0,0,0,,registers of 16 other threads
Dialogue: 0,0:47:27.70,0:47:28.63,Default,,0,0,0,,that happen to be part of this
Dialogue: 0,0:47:28.63,0:47:28.86,Default,,0,0,0,,group.
Dialogue: 0,0:47:33.05,0:47:34.44,Default,,0,0,0,,Our second compute addition is
Dialogue: 0,0:47:34.44,0:47:35.61,Default,,0,0,0,,to give you more flexibility in
Dialogue: 0,0:47:35.61,0:47:36.91,Default,,0,0,0,,how big your thread groups are.
Dialogue: 0,0:47:37.79,0:47:39.40,Default,,0,0,0,,So for example if I have a pixel
Dialogue: 0,0:47:39.40,0:47:40.38,Default,,0,0,0,,bird here that I want to run
Dialogue: 0,0:47:40.38,0:47:41.75,Default,,0,0,0,,some pretty classic image
Dialogue: 0,0:47:41.75,0:47:44.70,Default,,0,0,0,,processing kernel over, but then
Dialogue: 0,0:47:44.70,0:47:45.77,Default,,0,0,0,,I've written my compute kernel
Dialogue: 0,0:47:45.77,0:47:47.49,Default,,0,0,0,,such that I'm using four by four
Dialogue: 0,0:47:47.49,0:47:48.34,Default,,0,0,0,,thread groups everywhere.
Dialogue: 0,0:47:49.74,0:47:50.77,Default,,0,0,0,,Well, this leads to some
Dialogue: 0,0:47:50.77,0:47:52.08,Default,,0,0,0,,problems because I've got -- if
Dialogue: 0,0:47:52.08,0:47:53.55,Default,,0,0,0,,my image is not a nice multiple
Dialogue: 0,0:47:53.55,0:47:54.89,Default,,0,0,0,,of my thread group size I've got
Dialogue: 0,0:47:54.89,0:47:55.90,Default,,0,0,0,,a bunch of stray threads on the
Dialogue: 0,0:47:55.90,0:47:56.23,Default,,0,0,0,,side.
Dialogue: 0,0:47:56.89,0:47:59.60,Default,,0,0,0,,I mean this means that I've got
Dialogue: 0,0:47:59.60,0:48:01.56,Default,,0,0,0,,to dive into those and say when
Dialogue: 0,0:48:01.56,0:48:02.38,Default,,0,0,0,,I actually write my code.
Dialogue: 0,0:48:02.38,0:48:03.30,Default,,0,0,0,,I have to be defensive.
Dialogue: 0,0:48:03.30,0:48:04.16,Default,,0,0,0,,Am I out of bounds?
Dialogue: 0,0:48:04.16,0:48:04.99,Default,,0,0,0,,I have to handle it in some
Dialogue: 0,0:48:04.99,0:48:05.57,Default,,0,0,0,,special way.
Dialogue: 0,0:48:05.57,0:48:06.98,Default,,0,0,0,,It's doable but annoying.
Dialogue: 0,0:48:07.81,0:48:08.75,Default,,0,0,0,,It also means that we're just
Dialogue: 0,0:48:08.75,0:48:09.97,Default,,0,0,0,,wasting GPU cycles.
Dialogue: 0,0:48:11.10,0:48:12.73,Default,,0,0,0,,So non-uniform thread group
Dialogue: 0,0:48:12.73,0:48:14.37,Default,,0,0,0,,sizes, unless you declare what
Dialogue: 0,0:48:14.37,0:48:15.31,Default,,0,0,0,,dimensions you want to run your
Dialogue: 0,0:48:15.31,0:48:16.73,Default,,0,0,0,,kernel over, without being
Dialogue: 0,0:48:16.73,0:48:17.96,Default,,0,0,0,,multiple thread group sizes.
Dialogue: 0,0:48:18.56,0:48:19.99,Default,,0,0,0,,So the hard working, smaller
Dialogue: 0,0:48:19.99,0:48:21.60,Default,,0,0,0,,thread groups along the edges of
Dialogue: 0,0:48:21.60,0:48:23.37,Default,,0,0,0,,my grid, in order to say -- in
Dialogue: 0,0:48:23.37,0:48:24.30,Default,,0,0,0,,order to just shave off that
Dialogue: 0,0:48:24.30,0:48:25.84,Default,,0,0,0,,unnecessary work it both
Dialogue: 0,0:48:25.94,0:48:28.29,Default,,0,0,0,,improves GPU performance and
Dialogue: 0,0:48:28.29,0:48:29.59,Default,,0,0,0,,just makes your kernels easier
Dialogue: 0,0:48:29.59,0:48:29.86,Default,,0,0,0,,to write.
Dialogue: 0,0:48:34.07,0:48:35.05,Default,,0,0,0,,We've added support for a view
Dialogue: 0,0:48:35.05,0:48:35.72,Default,,0,0,0,,port arrays.
Dialogue: 0,0:48:35.96,0:48:37.58,Default,,0,0,0,,You can now configure up to 16
Dialogue: 0,0:48:37.58,0:48:39.23,Default,,0,0,0,,simultaneous view ports and your
Dialogue: 0,0:48:39.23,0:48:40.97,Default,,0,0,0,,vertex shader can select, per
Dialogue: 0,0:48:40.97,0:48:42.60,Default,,0,0,0,,triangle, which view port that
Dialogue: 0,0:48:42.60,0:48:43.75,Default,,0,0,0,,triangle gets presented into.
Dialogue: 0,0:48:44.45,0:48:45.43,Default,,0,0,0,,I'm not going to go further into
Dialogue: 0,0:48:45.43,0:48:46.09,Default,,0,0,0,,this because it will be
Dialogue: 0,0:48:46.09,0:48:47.86,Default,,0,0,0,,discussed in detail tomorrow in
Dialogue: 0,0:48:47.86,0:48:49.01,Default,,0,0,0,,the VR with Metal 2 session.
Dialogue: 0,0:48:49.38,0:48:50.75,Default,,0,0,0,,It is particularly valuable for
Dialogue: 0,0:48:50.75,0:48:51.45,Default,,0,0,0,,efficiently rendering to the
Dialogue: 0,0:48:51.45,0:48:51.98,Default,,0,0,0,,left and right eyes.
Dialogue: 0,0:48:56.50,0:48:57.31,Default,,0,0,0,,We've added the ability to
Dialogue: 0,0:48:57.31,0:48:58.95,Default,,0,0,0,,choose where each pixel your
Dialogue: 0,0:48:58.95,0:48:59.91,Default,,0,0,0,,multi-sample locations are
Dialogue: 0,0:48:59.91,0:49:00.43,Default,,0,0,0,,supported.
Dialogue: 0,0:49:01.03,0:49:02.61,Default,,0,0,0,,This lets you do a few
Dialogue: 0,0:49:02.61,0:49:04.19,Default,,0,0,0,,interesting things including
Dialogue: 0,0:49:04.19,0:49:05.20,Default,,0,0,0,,maybe toggling your sample
Dialogue: 0,0:49:05.20,0:49:07.09,Default,,0,0,0,,positions every other frame and
Dialogue: 0,0:49:07.09,0:49:07.80,Default,,0,0,0,,giving you some new -- you know
Dialogue: 0,0:49:07.80,0:49:08.86,Default,,0,0,0,,valuable input into some
Dialogue: 0,0:49:08.86,0:49:09.70,Default,,0,0,0,,temporal anti-aliasing
Dialogue: 0,0:49:09.70,0:49:09.98,Default,,0,0,0,,algorithms.
Dialogue: 0,0:49:15.55,0:49:17.04,Default,,0,0,0,,In the vein of trying to keep --
Dialogue: 0,0:49:17.10,0:49:18.56,Default,,0,0,0,,of working to bring our
Dialogue: 0,0:49:18.56,0:49:19.59,Default,,0,0,0,,platforms up to date to have
Dialogue: 0,0:49:19.64,0:49:20.65,Default,,0,0,0,,them have the same feature set
Dialogue: 0,0:49:20.65,0:49:21.69,Default,,0,0,0,,wherever possible, we've brought
Dialogue: 0,0:49:21.69,0:49:23.19,Default,,0,0,0,,resource Heaps, shipped last
Dialogue: 0,0:49:23.19,0:49:25.42,Default,,0,0,0,,year in iOS 10 to macOS High
Dialogue: 0,0:49:25.42,0:49:26.20,Default,,0,0,0,,Sierra this year.
Dialogue: 0,0:49:26.47,0:49:28.65,Default,,0,0,0,,So I'm going to actually do a
Dialogue: 0,0:49:28.65,0:49:29.76,Default,,0,0,0,,little bit of a refresher on
Dialogue: 0,0:49:29.76,0:49:32.03,Default,,0,0,0,,this because good use of your
Dialogue: 0,0:49:32.03,0:49:33.72,Default,,0,0,0,,Heaps is really important to
Dialogue: 0,0:49:33.72,0:49:34.65,Default,,0,0,0,,getting the most out of argument
Dialogue: 0,0:49:34.65,0:49:35.07,Default,,0,0,0,,buffers.
Dialogue: 0,0:49:36.44,0:49:37.82,Default,,0,0,0,,So Heaps are of course where I
Dialogue: 0,0:49:37.82,0:49:38.72,Default,,0,0,0,,can allocate a big slab of
Dialogue: 0,0:49:38.72,0:49:40.62,Default,,0,0,0,,memory up front rather than
Dialogue: 0,0:49:40.62,0:49:42.25,Default,,0,0,0,,going to the kernel to -- I want
Dialogue: 0,0:49:42.35,0:49:43.76,Default,,0,0,0,,memory for texture a, and I want
Dialogue: 0,0:49:43.76,0:49:44.88,Default,,0,0,0,,memory for texture b and so
Dialogue: 0,0:49:44.88,0:49:45.25,Default,,0,0,0,,forth.
Dialogue: 0,0:49:45.66,0:49:46.72,Default,,0,0,0,,I can go to the kernel and get
Dialogue: 0,0:49:46.72,0:49:48.87,Default,,0,0,0,,memory right up front and of
Dialogue: 0,0:49:48.87,0:49:50.20,Default,,0,0,0,,course put textures -- you know
Dialogue: 0,0:49:50.23,0:49:51.39,Default,,0,0,0,,add and remove textures and
Dialogue: 0,0:49:51.39,0:49:52.74,Default,,0,0,0,,buffers to -- without having to
Dialogue: 0,0:49:52.81,0:49:55.23,Default,,0,0,0,,go back to the system.
Dialogue: 0,0:49:55.30,0:49:56.59,Default,,0,0,0,,This has a few advantages.
Dialogue: 0,0:49:56.78,0:49:58.04,Default,,0,0,0,,It means that I can bind
Dialogue: 0,0:49:58.04,0:49:58.95,Default,,0,0,0,,everything in that Heap much
Dialogue: 0,0:49:58.95,0:49:59.56,Default,,0,0,0,,more efficiently.
Dialogue: 0,0:49:59.74,0:50:00.50,Default,,0,0,0,,There's much less software
Dialogue: 0,0:50:00.50,0:50:00.86,Default,,0,0,0,,overhead.
Dialogue: 0,0:50:01.62,0:50:02.77,Default,,0,0,0,,It means that we can oftentimes
Dialogue: 0,0:50:02.77,0:50:03.72,Default,,0,0,0,,pack that memory a little bit
Dialogue: 0,0:50:03.76,0:50:04.31,Default,,0,0,0,,closer together.
Dialogue: 0,0:50:04.31,0:50:05.38,Default,,0,0,0,,We can save some padding and
Dialogue: 0,0:50:05.38,0:50:06.91,Default,,0,0,0,,alignment, save you a little bit
Dialogue: 0,0:50:07.40,0:50:08.55,Default,,0,0,0,,of memory.
Dialogue: 0,0:50:08.69,0:50:09.95,Default,,0,0,0,,It means when we delete memory
Dialogue: 0,0:50:10.26,0:50:11.65,Default,,0,0,0,,we don't give memory back to the
Dialogue: 0,0:50:11.65,0:50:12.06,Default,,0,0,0,,system.
Dialogue: 0,0:50:12.36,0:50:13.12,Default,,0,0,0,,That could be good or bad.
Dialogue: 0,0:50:13.83,0:50:15.50,Default,,0,0,0,,It means when we allocate new
Dialogue: 0,0:50:15.50,0:50:16.36,Default,,0,0,0,,memory -- when we allocate a new
Dialogue: 0,0:50:16.36,0:50:17.49,Default,,0,0,0,,texture it means we don't have
Dialogue: 0,0:50:17.49,0:50:18.53,Default,,0,0,0,,to go back to the system and get
Dialogue: 0,0:50:18.53,0:50:18.98,Default,,0,0,0,,new memory.
Dialogue: 0,0:50:22.31,0:50:23.23,Default,,0,0,0,,It also means that you can
Dialogue: 0,0:50:23.23,0:50:24.75,Default,,0,0,0,,choose to alias these textures
Dialogue: 0,0:50:24.75,0:50:25.30,Default,,0,0,0,,with each other.
Dialogue: 0,0:50:26.09,0:50:27.44,Default,,0,0,0,,If I have -- you typically
Dialogue: 0,0:50:27.44,0:50:29.29,Default,,0,0,0,,render targets or intermediate
Dialogue: 0,0:50:29.29,0:50:30.96,Default,,0,0,0,,render targets between different
Dialogue: 0,0:50:30.96,0:50:32.49,Default,,0,0,0,,passes in my render graph.
Dialogue: 0,0:50:32.91,0:50:34.01,Default,,0,0,0,,It means that if I have two
Dialogue: 0,0:50:34.01,0:50:34.72,Default,,0,0,0,,different intermediates that
Dialogue: 0,0:50:34.72,0:50:36.46,Default,,0,0,0,,just don't have to exist at the
Dialogue: 0,0:50:36.46,0:50:37.80,Default,,0,0,0,,same point in time I can alias
Dialogue: 0,0:50:37.80,0:50:38.76,Default,,0,0,0,,them over each other and I can
Dialogue: 0,0:50:38.76,0:50:43.24,Default,,0,0,0,,save tons of memory like this.
Dialogue: 0,0:50:43.93,0:50:45.91,Default,,0,0,0,,So that's it for a quick survey
Dialogue: 0,0:50:46.69,0:50:47.74,Default,,0,0,0,,of Heaps.
Dialogue: 0,0:50:47.82,0:50:50.03,Default,,0,0,0,,We've added linear textures from
Dialogue: 0,0:50:50.21,0:50:51.89,Default,,0,0,0,,iOS to macOS.
Dialogue: 0,0:50:52.13,0:50:53.20,Default,,0,0,0,,Linear textures allows you to
Dialogue: 0,0:50:53.20,0:50:54.98,Default,,0,0,0,,create a texture directly from a
Dialogue: 0,0:50:54.98,0:50:56.57,Default,,0,0,0,,Metal buffer without any copies
Dialogue: 0,0:50:56.62,0:50:57.05,Default,,0,0,0,,at all.
Dialogue: 0,0:50:59.14,0:51:00.11,Default,,0,0,0,,We've extended our function
Dialogue: 0,0:51:00.11,0:51:01.56,Default,,0,0,0,,constant feature a little bit.
Dialogue: 0,0:51:01.56,0:51:02.59,Default,,0,0,0,,A quick refresher, function
Dialogue: 0,0:51:02.59,0:51:03.49,Default,,0,0,0,,constants allow you to
Dialogue: 0,0:51:03.49,0:51:04.72,Default,,0,0,0,,specialize by codes.
Dialogue: 0,0:51:04.94,0:51:05.76,Default,,0,0,0,,When you've done all your front
Dialogue: 0,0:51:05.76,0:51:07.30,Default,,0,0,0,,end compilation offline you can
Dialogue: 0,0:51:07.30,0:51:08.47,Default,,0,0,0,,then tweak and customize your
Dialogue: 0,0:51:08.47,0:51:09.72,Default,,0,0,0,,uber shader bi-code a little bit
Dialogue: 0,0:51:09.94,0:51:11.13,Default,,0,0,0,,before actual generating final
Dialogue: 0,0:51:11.13,0:51:11.69,Default,,0,0,0,,machine code.
Dialogue: 0,0:51:12.55,0:51:13.88,Default,,0,0,0,,If you have a classic uber
Dialogue: 0,0:51:13.88,0:51:14.99,Default,,0,0,0,,shader this can save you the
Dialogue: 0,0:51:14.99,0:51:16.04,Default,,0,0,0,,cost of having to re-run the
Dialogue: 0,0:51:16.04,0:51:17.67,Default,,0,0,0,,compiler front end for every
Dialogue: 0,0:51:17.67,0:51:18.56,Default,,0,0,0,,single permutation.
Dialogue: 0,0:51:19.64,0:51:20.85,Default,,0,0,0,,So we've made this a bit more
Dialogue: 0,0:51:20.85,0:51:22.38,Default,,0,0,0,,flexible and added a few more
Dialogue: 0,0:51:22.38,0:51:24.97,Default,,0,0,0,,cases where you can use these
Dialogue: 0,0:51:25.08,0:51:26.12,Default,,0,0,0,,specialized arguments.
Dialogue: 0,0:51:27.88,0:51:28.93,Default,,0,0,0,,We've added some extra vertex
Dialogue: 0,0:51:28.93,0:51:29.62,Default,,0,0,0,,array formats.
Dialogue: 0,0:51:29.66,0:51:31.03,Default,,0,0,0,,We had some missing one and two
Dialogue: 0,0:51:31.03,0:51:32.23,Default,,0,0,0,,component vertex formats.
Dialogue: 0,0:51:32.60,0:51:34.18,Default,,0,0,0,,And we've also added BGRA vertex
Dialogue: 0,0:51:34.18,0:51:34.75,Default,,0,0,0,,formats.
Dialogue: 0,0:51:37.41,0:51:38.45,Default,,0,0,0,,We've brought iOS surface
Dialogue: 0,0:51:38.45,0:51:40.15,Default,,0,0,0,,texture support from macOS to
Dialogue: 0,0:51:40.26,0:51:40.68,Default,,0,0,0,,iOS.
Dialogue: 0,0:51:40.68,0:51:42.55,Default,,0,0,0,,And we've also brought dual
Dialogue: 0,0:51:42.55,0:51:43.99,Default,,0,0,0,,sourced blending to iOS as well,
Dialogue: 0,0:51:44.28,0:51:46.50,Default,,0,0,0,,also particularly useful in some
Dialogue: 0,0:51:46.50,0:51:47.76,Default,,0,0,0,,deferred shading scenarios.
Dialogue: 0,0:51:48.26,0:51:52.59,Default,,0,0,0,,So that's -- brings us to the
Dialogue: 0,0:51:52.59,0:51:55.89,Default,,0,0,0,,end of introducing Metal 2.
Dialogue: 0,0:51:55.89,0:51:57.42,Default,,0,0,0,,My colleague, Michal, started
Dialogue: 0,0:51:57.42,0:51:58.81,Default,,0,0,0,,with giving you a little bit of
Dialogue: 0,0:51:58.81,0:52:00.10,Default,,0,0,0,,an overview of the overall scope
Dialogue: 0,0:52:00.10,0:52:00.64,Default,,0,0,0,,of Metal 2.
Dialogue: 0,0:52:00.96,0:52:03.50,Default,,0,0,0,,From VR to external GPUs, to
Dialogue: 0,0:52:03.89,0:52:05.04,Default,,0,0,0,,machine learning, and to new
Dialogue: 0,0:52:05.04,0:52:06.72,Default,,0,0,0,,developer tools and performance
Dialogue: 0,0:52:07.13,0:52:07.87,Default,,0,0,0,,analysis.
Dialogue: 0,0:52:07.87,0:52:08.82,Default,,0,0,0,,Of that, the pieces that we
Dialogue: 0,0:52:08.82,0:52:10.77,Default,,0,0,0,,really covered today are our
Dialogue: 0,0:52:10.77,0:52:12.29,Default,,0,0,0,,next big push toward reducing
Dialogue: 0,0:52:12.41,0:52:13.76,Default,,0,0,0,,CPU overhead using argument
Dialogue: 0,0:52:13.76,0:52:14.22,Default,,0,0,0,,buffers.
Dialogue: 0,0:52:14.84,0:52:16.33,Default,,0,0,0,,Argument buffers also unlock the
Dialogue: 0,0:52:16.33,0:52:17.69,Default,,0,0,0,,ability for the GPU to start
Dialogue: 0,0:52:17.75,0:52:18.79,Default,,0,0,0,,taking a little bit of its own
Dialogue: 0,0:52:18.79,0:52:19.70,Default,,0,0,0,,destiny when it comes to
Dialogue: 0,0:52:19.70,0:52:20.96,Default,,0,0,0,,configuring shader arguments,
Dialogue: 0,0:52:20.96,0:52:22.36,Default,,0,0,0,,which is one less reason to take
Dialogue: 0,0:52:22.36,0:52:24.51,Default,,0,0,0,,back to the CPU.
Dialogue: 0,0:52:25.42,0:52:27.15,Default,,0,0,0,,Raster Order Groups let us start
Dialogue: 0,0:52:27.15,0:52:28.50,Default,,0,0,0,,using the rasterizer for things
Dialogue: 0,0:52:28.50,0:52:30.02,Default,,0,0,0,,beyond basic in order blending.
Dialogue: 0,0:52:31.19,0:52:32.31,Default,,0,0,0,,We can now start taking
Dialogue: 0,0:52:32.31,0:52:33.90,Default,,0,0,0,,advantage of the latest hardware
Dialogue: 0,0:52:33.90,0:52:36.39,Default,,0,0,0,,capabilities to do, you know,
Dialogue: 0,0:52:36.39,0:52:38.23,Default,,0,0,0,,vox slice triangle meshes or set
Dialogue: 0,0:52:38.43,0:52:40.15,Default,,0,0,0,,transparency blending either in
Dialogue: 0,0:52:40.15,0:52:41.06,Default,,0,0,0,,order or independent.
Dialogue: 0,0:52:41.13,0:52:42.05,Default,,0,0,0,,They're both -- it makes them
Dialogue: 0,0:52:42.05,0:52:42.65,Default,,0,0,0,,both possible.
Dialogue: 0,0:52:43.84,0:52:46.50,Default,,0,0,0,,For the new iPad Pros, ProMotion
Dialogue: 0,0:52:46.50,0:52:47.56,Default,,0,0,0,,gives you very fine grained
Dialogue: 0,0:52:47.56,0:52:48.96,Default,,0,0,0,,control over exactly how your
Dialogue: 0,0:52:48.96,0:52:50.06,Default,,0,0,0,,animations are presented to the
Dialogue: 0,0:52:50.06,0:52:51.72,Default,,0,0,0,,user, giving you the ability to
Dialogue: 0,0:52:51.72,0:52:53.49,Default,,0,0,0,,get both peak frame rates and
Dialogue: 0,0:52:53.49,0:52:54.57,Default,,0,0,0,,the lowest possible latency.
Dialogue: 0,0:52:54.97,0:52:57.57,Default,,0,0,0,,Direct to display provides you a
Dialogue: 0,0:52:57.57,0:52:58.95,Default,,0,0,0,,path to reclaim a little bit of
Dialogue: 0,0:52:58.95,0:53:00.27,Default,,0,0,0,,GPU performance from the system
Dialogue: 0,0:53:00.37,0:53:01.54,Default,,0,0,0,,by being aware of what our
Dialogue: 0,0:53:01.54,0:53:02.98,Default,,0,0,0,,compositors do on your behalf.
Dialogue: 0,0:53:06.16,0:53:07.37,Default,,0,0,0,,So you'll be able to find the
Dialogue: 0,0:53:07.37,0:53:08.26,Default,,0,0,0,,video and the slides for this
Dialogue: 0,0:53:08.26,0:53:11.05,Default,,0,0,0,,session on the WWDC2017 website.
Dialogue: 0,0:53:11.70,0:53:14.93,Default,,0,0,0,,We have three other sessions on
Dialogue: 0,0:53:14.93,0:53:15.83,Default,,0,0,0,,Metal 2 this year.
Dialogue: 0,0:53:16.43,0:53:18.37,Default,,0,0,0,,In particular, tomorrow
Dialogue: 0,0:53:18.37,0:53:19.28,Default,,0,0,0,,afternoon we're going to have a
Dialogue: 0,0:53:19.28,0:53:20.45,Default,,0,0,0,,session dedicated to VR and
Dialogue: 0,0:53:20.45,0:53:20.97,Default,,0,0,0,,Metal 2.
Dialogue: 0,0:53:21.14,0:53:22.72,Default,,0,0,0,,This is going to go deep into
Dialogue: 0,0:53:22.72,0:53:24.54,Default,,0,0,0,,what your application needs to
Dialogue: 0,0:53:24.54,0:53:26.29,Default,,0,0,0,,do and a conceptual overview of
Dialogue: 0,0:53:26.29,0:53:28.26,Default,,0,0,0,,how to do VR rendering, dive
Dialogue: 0,0:53:28.26,0:53:29.89,Default,,0,0,0,,into specifically how to do VR
Dialogue: 0,0:53:29.89,0:53:31.94,Default,,0,0,0,,with the combination of Metal 2
Dialogue: 0,0:53:31.94,0:53:33.76,Default,,0,0,0,,and the Steam VR toolkit.
Dialogue: 0,0:53:33.76,0:53:35.92,Default,,0,0,0,,It's also going to go into using
Dialogue: 0,0:53:35.92,0:53:37.16,Default,,0,0,0,,Metal with external GPU
Dialogue: 0,0:53:37.16,0:53:37.58,Default,,0,0,0,,hardware.
Dialogue: 0,0:53:39.50,0:53:40.81,Default,,0,0,0,,On Thursday we have a
Dialogue: 0,0:53:40.95,0:53:42.12,Default,,0,0,0,,doubleheader starting with Metal
Dialogue: 0,0:53:42.12,0:53:43.51,Default,,0,0,0,,2 optimization and debugging.
Dialogue: 0,0:53:44.22,0:53:45.54,Default,,0,0,0,,This is going to go into what's
Dialogue: 0,0:53:45.54,0:53:46.56,Default,,0,0,0,,new in our developer and
Dialogue: 0,0:53:46.56,0:53:47.94,Default,,0,0,0,,performance tools and all the
Dialogue: 0,0:53:47.94,0:53:49.17,Default,,0,0,0,,new workflows that enables to
Dialogue: 0,0:53:49.17,0:53:49.92,Default,,0,0,0,,help you build the best
Dialogue: 0,0:53:49.92,0:53:50.91,Default,,0,0,0,,applications possible.
Dialogue: 0,0:53:51.12,0:53:52.65,Default,,0,0,0,,And it's going to be followed up
Dialogue: 0,0:53:52.65,0:53:54.17,Default,,0,0,0,,right after that with using
Dialogue: 0,0:53:54.17,0:53:55.11,Default,,0,0,0,,Metal 2 for compute.
Dialogue: 0,0:53:55.95,0:53:56.95,Default,,0,0,0,,And that's going to really have
Dialogue: 0,0:53:56.95,0:53:58.73,Default,,0,0,0,,a big focus this year on using
Dialogue: 0,0:53:58.73,0:54:00.04,Default,,0,0,0,,the GPU for machine learning
Dialogue: 0,0:54:00.04,0:54:00.75,Default,,0,0,0,,applications.
Dialogue: 0,0:54:00.75,0:54:01.78,Default,,0,0,0,,We've added a whole lot this
Dialogue: 0,0:54:01.78,0:54:03.64,Default,,0,0,0,,year and we want to show you
Dialogue: 0,0:54:03.64,0:54:05.58,Default,,0,0,0,,everything we've done.
Dialogue: 0,0:54:07.04,0:54:08.23,Default,,0,0,0,,I want to point you to a couple
Dialogue: 0,0:54:08.23,0:54:10.04,Default,,0,0,0,,of last year's WWDC sessions.
Dialogue: 0,0:54:11.12,0:54:12.46,Default,,0,0,0,,The first, What's New in Metal
Dialogue: 0,0:54:12.46,0:54:14.03,Default,,0,0,0,,Part One is where we did a deep
Dialogue: 0,0:54:14.03,0:54:15.62,Default,,0,0,0,,dive on resource Heaps.
Dialogue: 0,0:54:16.03,0:54:16.98,Default,,0,0,0,,And instead if you're looking to
Dialogue: 0,0:54:16.98,0:54:17.86,Default,,0,0,0,,get the best performance out of
Dialogue: 0,0:54:17.86,0:54:19.67,Default,,0,0,0,,argument buffers, argument
Dialogue: 0,0:54:19.67,0:54:20.77,Default,,0,0,0,,buffers and Heaps were built to
Dialogue: 0,0:54:20.77,0:54:22.55,Default,,0,0,0,,go together and so I highly
Dialogue: 0,0:54:22.55,0:54:23.67,Default,,0,0,0,,encourage you to go check out
Dialogue: 0,0:54:23.67,0:54:26.16,Default,,0,0,0,,the video and really -- and, you
Dialogue: 0,0:54:26.27,0:54:28.26,Default,,0,0,0,,know basically plan your
Dialogue: 0,0:54:28.26,0:54:29.16,Default,,0,0,0,,application around both of those
Dialogue: 0,0:54:29.16,0:54:29.52,Default,,0,0,0,,together.
Dialogue: 0,0:54:29.59,0:54:31.07,Default,,0,0,0,,They cover that in a lot more
Dialogue: 0,0:54:31.07,0:54:32.37,Default,,0,0,0,,detail than we did here today.
Dialogue: 0,0:54:33.89,0:54:35.85,Default,,0,0,0,,Second, if the conversation
Dialogue: 0,0:54:35.85,0:54:37.91,Default,,0,0,0,,about direct to display and wide
Dialogue: 0,0:54:37.91,0:54:39.27,Default,,0,0,0,,gamut and wide color interested
Dialogue: 0,0:54:39.27,0:54:40.83,Default,,0,0,0,,you we have a whole session that
Dialogue: 0,0:54:40.83,0:54:41.75,Default,,0,0,0,,really goes deep into the
Dialogue: 0,0:54:41.75,0:54:42.90,Default,,0,0,0,,concepts and the specifics
Dialogue: 0,0:54:42.90,0:54:43.90,Default,,0,0,0,,behind that, we also talked
Dialogue: 0,0:54:43.90,0:54:44.49,Default,,0,0,0,,about last year.
Dialogue: 0,0:54:45.52,0:54:47.48,Default,,0,0,0,,With that I think we'll wrap it
Dialogue: 0,0:54:47.48,0:54:47.60,Default,,0,0,0,,up.
Dialogue: 0,0:54:47.60,0:54:48.69,Default,,0,0,0,,I thank you for all attending
Dialogue: 0,0:54:48.69,0:54:49.40,Default,,0,0,0,,and I hope you enjoy the
Dialogue: 0,0:54:49.40,0:54:50.07,Default,,0,0,0,,remainder of your week.
Dialogue: 0,0:54:50.07,0:54:50.98,Default,,0,0,0,,So thank you.
Dialogue: 0,0:54:51.52,0:54:55.50,Default,,0,0,0,,[ Applause ]
