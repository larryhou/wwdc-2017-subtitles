[Script Info]
; Script generated by FFmpeg/Lavc57.89.100
ScriptType: v4.00+
PlayResX: 384
PlayResY: 288

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,16,&Hffffff,&Hffffff,&H0,&H0,0,0,0,0,100,100,0,0,1,1,0,2,10,10,10,0

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:22.47,0:00:22.99,Default,,0,0,0,,>> Good morning.
Dialogue: 0,0:00:23.13,0:00:24.39,Default,,0,0,0,,And welcome to the modernizing
Dialogue: 0,0:00:24.39,0:00:25.59,Default,,0,0,0,,Grand Central Dispatch Usage
Dialogue: 0,0:00:25.62,0:00:25.98,Default,,0,0,0,,Session.
Dialogue: 0,0:00:26.44,0:00:27.81,Default,,0,0,0,,I'm Daniel Chimene from the Core
Dialogue: 0,0:00:27.81,0:00:29.57,Default,,0,0,0,,Darwin Team and my colleagues
Dialogue: 0,0:00:29.57,0:00:31.69,Default,,0,0,0,,and I are here today to show you
Dialogue: 0,0:00:31.77,0:00:33.04,Default,,0,0,0,,how you can take advantage of
Dialogue: 0,0:00:33.04,0:00:34.75,Default,,0,0,0,,Grand Central Dispatch to get
Dialogue: 0,0:00:34.75,0:00:35.75,Default,,0,0,0,,the best performance in your
Dialogue: 0,0:00:35.75,0:00:36.28,Default,,0,0,0,,application.
Dialogue: 0,0:00:37.54,0:00:39.28,Default,,0,0,0,,As app developers, you spent
Dialogue: 0,0:00:39.28,0:00:40.96,Default,,0,0,0,,hundreds or thousands of hours
Dialogue: 0,0:00:41.03,0:00:42.71,Default,,0,0,0,,building amazing experiences for
Dialogue: 0,0:00:42.79,0:00:43.42,Default,,0,0,0,,your users.
Dialogue: 0,0:00:43.48,0:00:45.17,Default,,0,0,0,,Taking advantage of our powerful
Dialogue: 0,0:00:45.17,0:00:45.62,Default,,0,0,0,,devices.
Dialogue: 0,0:00:46.62,0:00:47.98,Default,,0,0,0,,You want your users to be able
Dialogue: 0,0:00:47.98,0:00:49.10,Default,,0,0,0,,to have a great experience.
Dialogue: 0,0:00:49.60,0:00:51.39,Default,,0,0,0,,Not just on one device, but
Dialogue: 0,0:00:51.39,0:00:52.53,Default,,0,0,0,,across all the variety of
Dialogue: 0,0:00:52.53,0:00:56.20,Default,,0,0,0,,devices that Apple makes.
Dialogue: 0,0:00:56.78,0:00:58.48,Default,,0,0,0,,GCD is designed to help you
Dialogue: 0,0:00:58.48,0:00:59.57,Default,,0,0,0,,dynamically scale your
Dialogue: 0,0:00:59.57,0:01:00.36,Default,,0,0,0,,application code.
Dialogue: 0,0:01:00.46,0:01:01.46,Default,,0,0,0,,From the single core Apple
Dialogue: 0,0:01:01.46,0:01:03.06,Default,,0,0,0,,Watch, all the way up to a mini
Dialogue: 0,0:01:03.06,0:01:03.54,Default,,0,0,0,,core Mac.
Dialogue: 0,0:01:04.49,0:01:05.50,Default,,0,0,0,,You don't want to have to worry
Dialogue: 0,0:01:05.50,0:01:07.09,Default,,0,0,0,,too much about what kind of
Dialogue: 0,0:01:07.09,0:01:08.25,Default,,0,0,0,,hardware your users are running.
Dialogue: 0,0:01:09.12,0:01:10.03,Default,,0,0,0,,But there are problematic
Dialogue: 0,0:01:10.10,0:01:11.39,Default,,0,0,0,,problems that can affect the
Dialogue: 0,0:01:11.39,0:01:13.22,Default,,0,0,0,,scalability and the efficiency
Dialogue: 0,0:01:13.68,0:01:14.25,Default,,0,0,0,,of your code.
Dialogue: 0,0:01:14.30,0:01:15.80,Default,,0,0,0,,Both on the low end and on the
Dialogue: 0,0:01:15.80,0:01:16.17,Default,,0,0,0,,high end.
Dialogue: 0,0:01:17.17,0:01:17.99,Default,,0,0,0,,That's what we're here to talk
Dialogue: 0,0:01:17.99,0:01:18.49,Default,,0,0,0,,about today.
Dialogue: 0,0:01:19.33,0:01:20.91,Default,,0,0,0,,We want to help you ensure that
Dialogue: 0,0:01:21.03,0:01:22.22,Default,,0,0,0,,all the work you're putting into
Dialogue: 0,0:01:22.22,0:01:23.21,Default,,0,0,0,,your app to make it a great
Dialogue: 0,0:01:23.21,0:01:24.59,Default,,0,0,0,,experience for your users
Dialogue: 0,0:01:25.21,0:01:26.85,Default,,0,0,0,,translates across all of these
Dialogue: 0,0:01:26.85,0:01:27.31,Default,,0,0,0,,devices.
Dialogue: 0,0:01:28.99,0:01:30.54,Default,,0,0,0,,You may have been using GCD
Dialogue: 0,0:01:30.54,0:01:33.17,Default,,0,0,0,,API's like dispatch async, and
Dialogue: 0,0:01:33.17,0:01:34.45,Default,,0,0,0,,others to create cues and
Dialogue: 0,0:01:34.45,0:01:35.43,Default,,0,0,0,,dispatch work to the system.
Dialogue: 0,0:01:36.34,0:01:37.23,Default,,0,0,0,,These are only some of the
Dialogue: 0,0:01:37.23,0:01:38.48,Default,,0,0,0,,interfaces to the concurrency
Dialogue: 0,0:01:38.48,0:01:40.21,Default,,0,0,0,,technology that we call Grand
Dialogue: 0,0:01:40.21,0:01:40.98,Default,,0,0,0,,Central Dispatch.
Dialogue: 0,0:01:41.69,0:01:42.90,Default,,0,0,0,,Today, we're going to take a
Dialogue: 0,0:01:42.90,0:01:44.48,Default,,0,0,0,,peek under the covers of GCD.
Dialogue: 0,0:01:44.51,0:01:46.58,Default,,0,0,0,,This is an advanced session
Dialogue: 0,0:01:46.67,0:01:47.85,Default,,0,0,0,,packed full of information.
Dialogue: 0,0:01:48.37,0:01:49.32,Default,,0,0,0,,So, let's get started right
Dialogue: 0,0:01:49.32,0:01:50.57,Default,,0,0,0,,away, by looking at our
Dialogue: 0,0:01:50.57,0:01:50.93,Default,,0,0,0,,hardware.
Dialogue: 0,0:01:52.14,0:01:53.66,Default,,0,0,0,,The amazing chips in our devices
Dialogue: 0,0:01:53.66,0:01:54.92,Default,,0,0,0,,have been getting faster and
Dialogue: 0,0:01:54.92,0:01:55.81,Default,,0,0,0,,faster over time.
Dialogue: 0,0:01:56.28,0:01:57.83,Default,,0,0,0,,However, much of the speed is
Dialogue: 0,0:01:57.83,0:01:58.76,Default,,0,0,0,,not just because the chips
Dialogue: 0,0:01:58.76,0:01:59.84,Default,,0,0,0,,themselves are getting faster,
Dialogue: 0,0:02:00.32,0:02:01.03,Default,,0,0,0,,but because they're getting
Dialogue: 0,0:02:01.03,0:02:02.39,Default,,0,0,0,,smarter, and smarter about
Dialogue: 0,0:02:02.39,0:02:03.07,Default,,0,0,0,,running your code.
Dialogue: 0,0:02:03.17,0:02:04.50,Default,,0,0,0,,And they're learning from what
Dialogue: 0,0:02:04.50,0:02:06.09,Default,,0,0,0,,your code does over time to
Dialogue: 0,0:02:06.09,0:02:07.14,Default,,0,0,0,,operate more efficiently.
Dialogue: 0,0:02:07.65,0:02:12.25,Default,,0,0,0,,However, if your code goes off
Dialogue: 0,0:02:12.32,0:02:13.82,Default,,0,0,0,,core, because it's completed its
Dialogue: 0,0:02:13.82,0:02:15.53,Default,,0,0,0,,task, then it may no longer be
Dialogue: 0,0:02:15.53,0:02:16.84,Default,,0,0,0,,able to take advantage of the
Dialogue: 0,0:02:16.91,0:02:18.13,Default,,0,0,0,,history that that core has built
Dialogue: 0,0:02:18.13,0:02:18.37,Default,,0,0,0,,up.
Dialogue: 0,0:02:18.48,0:02:20.19,Default,,0,0,0,,And you might leave performance
Dialogue: 0,0:02:20.19,0:02:21.66,Default,,0,0,0,,on the table when you come back
Dialogue: 0,0:02:21.85,0:02:22.34,Default,,0,0,0,,on core.
Dialogue: 0,0:02:23.29,0:02:24.65,Default,,0,0,0,,We've even seen examples of this
Dialogue: 0,0:02:24.65,0:02:26.00,Default,,0,0,0,,on our own frameworks, when we
Dialogue: 0,0:02:26.00,0:02:27.33,Default,,0,0,0,,applied some of the optimization
Dialogue: 0,0:02:27.37,0:02:28.24,Default,,0,0,0,,techniques that we're going to
Dialogue: 0,0:02:28.24,0:02:30.44,Default,,0,0,0,,discuss today, we saw large
Dialogue: 0,0:02:30.44,0:02:33.09,Default,,0,0,0,,speed ups from simple changes to
Dialogue: 0,0:02:33.09,0:02:34.11,Default,,0,0,0,,avoid these problematic
Dialogue: 0,0:02:34.11,0:02:34.43,Default,,0,0,0,,patterns.
Dialogue: 0,0:02:36.86,0:02:38.92,Default,,0,0,0,,So, using these techniques lets
Dialogue: 0,0:02:38.92,0:02:40.41,Default,,0,0,0,,you bring high performance apps
Dialogue: 0,0:02:40.57,0:02:41.97,Default,,0,0,0,,to more users with less work.
Dialogue: 0,0:02:42.67,0:02:44.30,Default,,0,0,0,,Today, we're going to give you
Dialogue: 0,0:02:44.30,0:02:45.32,Default,,0,0,0,,some insight into what our
Dialogue: 0,0:02:45.32,0:02:46.78,Default,,0,0,0,,system is doing under the covers
Dialogue: 0,0:02:47.05,0:02:47.76,Default,,0,0,0,,with your code.
Dialogue: 0,0:02:47.76,0:02:49.32,Default,,0,0,0,,So, you can tune your code to
Dialogue: 0,0:02:49.32,0:02:50.92,Default,,0,0,0,,take the best advantage of what
Dialogue: 0,0:02:50.92,0:02:51.89,Default,,0,0,0,,GCD has to offer.
Dialogue: 0,0:02:52.68,0:02:53.55,Default,,0,0,0,,We're going to discuss a few
Dialogue: 0,0:02:53.55,0:02:54.09,Default,,0,0,0,,things today.
Dialogue: 0,0:02:55.13,0:02:56.53,Default,,0,0,0,,First, we're going to discuss
Dialogue: 0,0:02:56.53,0:02:57.74,Default,,0,0,0,,how you can best express
Dialogue: 0,0:02:57.95,0:02:59.39,Default,,0,0,0,,parallelism and concurrency.
Dialogue: 0,0:03:00.03,0:03:02.00,Default,,0,0,0,,How you can chose the best way
Dialogue: 0,0:03:02.04,0:03:03.91,Default,,0,0,0,,to express concurrency to grand
Dialogue: 0,0:03:03.91,0:03:04.64,Default,,0,0,0,,central dispatch.
Dialogue: 0,0:03:05.55,0:03:07.04,Default,,0,0,0,,We're going to introduce Unified
Dialogue: 0,0:03:07.08,0:03:08.47,Default,,0,0,0,,Queue Identity, which is a major
Dialogue: 0,0:03:08.47,0:03:09.57,Default,,0,0,0,,under the hood improvement to
Dialogue: 0,0:03:09.57,0:03:10.65,Default,,0,0,0,,GCD that we're publishing this
Dialogue: 0,0:03:10.65,0:03:10.85,Default,,0,0,0,,year.
Dialogue: 0,0:03:11.67,0:03:12.63,Default,,0,0,0,,And we're finally going to show
Dialogue: 0,0:03:12.63,0:03:13.89,Default,,0,0,0,,you how you can find problem
Dialogue: 0,0:03:13.89,0:03:15.14,Default,,0,0,0,,spots in your code, with
Dialogue: 0,0:03:15.14,0:03:15.60,Default,,0,0,0,,instruments.
Dialogue: 0,0:03:16.63,0:03:17.77,Default,,0,0,0,,So, let's start by discussing
Dialogue: 0,0:03:17.77,0:03:19.20,Default,,0,0,0,,parallelism and concurrency.
Dialogue: 0,0:03:20.49,0:03:24.51,Default,,0,0,0,,So, for the purpose of this
Dialogue: 0,0:03:24.55,0:03:25.85,Default,,0,0,0,,talk, we're talking about
Dialogue: 0,0:03:25.95,0:03:27.51,Default,,0,0,0,,parallelism which is about how
Dialogue: 0,0:03:27.51,0:03:30.01,Default,,0,0,0,,your code executes in parallel,
Dialogue: 0,0:03:30.48,0:03:31.69,Default,,0,0,0,,simultaneously across many
Dialogue: 0,0:03:31.69,0:03:32.33,Default,,0,0,0,,different cores.
Dialogue: 0,0:03:32.76,0:03:34.57,Default,,0,0,0,,Concurrency is about how you
Dialogue: 0,0:03:34.57,0:03:35.81,Default,,0,0,0,,compose the independent
Dialogue: 0,0:03:35.81,0:03:37.08,Default,,0,0,0,,components of your application
Dialogue: 0,0:03:37.39,0:03:38.24,Default,,0,0,0,,to run concurrently.
Dialogue: 0,0:03:38.86,0:03:40.19,Default,,0,0,0,,The easy way to separate these
Dialogue: 0,0:03:40.19,0:03:41.80,Default,,0,0,0,,two concepts in your mind, is to
Dialogue: 0,0:03:41.80,0:03:42.85,Default,,0,0,0,,realize that parallelism is
Dialogue: 0,0:03:42.85,0:03:43.83,Default,,0,0,0,,something that usually requires
Dialogue: 0,0:03:43.83,0:03:45.15,Default,,0,0,0,,multiple cores and you want to
Dialogue: 0,0:03:45.15,0:03:46.17,Default,,0,0,0,,use them all at the same time.
Dialogue: 0,0:03:46.53,0:03:47.70,Default,,0,0,0,,And concurrency is something
Dialogue: 0,0:03:47.70,0:03:48.87,Default,,0,0,0,,that you can do even on a single
Dialogue: 0,0:03:48.87,0:03:49.46,Default,,0,0,0,,core system.
Dialogue: 0,0:03:49.46,0:03:51.02,Default,,0,0,0,,It's about how you interpose the
Dialogue: 0,0:03:51.02,0:03:52.50,Default,,0,0,0,,different tasks that are part of
Dialogue: 0,0:03:52.50,0:03:53.13,Default,,0,0,0,,your application.
Dialogue: 0,0:03:53.58,0:03:55.30,Default,,0,0,0,,So, let's start by talking about
Dialogue: 0,0:03:55.30,0:03:57.06,Default,,0,0,0,,parallelism and how you might us
Dialogue: 0,0:03:57.06,0:03:58.58,Default,,0,0,0,,it when you're writing an app.
Dialogue: 0,0:03:59.68,0:04:02.47,Default,,0,0,0,,So, let's imagine you make an
Dialogue: 0,0:04:02.47,0:04:04.10,Default,,0,0,0,,app and it processes huge
Dialogue: 0,0:04:04.10,0:04:04.60,Default,,0,0,0,,images.
Dialogue: 0,0:04:04.86,0:04:05.92,Default,,0,0,0,,And you want to be able to take
Dialogue: 0,0:04:05.92,0:04:07.14,Default,,0,0,0,,advantage of the many cores on a
Dialogue: 0,0:04:07.14,0:04:08.57,Default,,0,0,0,,Mac Pro to be able to process
Dialogue: 0,0:04:08.57,0:04:09.39,Default,,0,0,0,,those images faster.
Dialogue: 0,0:04:10.34,0:04:11.94,Default,,0,0,0,,What you do is break up that
Dialogue: 0,0:04:11.94,0:04:12.75,Default,,0,0,0,,image into chunks.
Dialogue: 0,0:04:13.58,0:04:15.57,Default,,0,0,0,,And have each core process those
Dialogue: 0,0:04:15.57,0:04:18.15,Default,,0,0,0,,chunks in parallel.
Dialogue: 0,0:04:19.47,0:04:20.37,Default,,0,0,0,,This gives you a speed up,
Dialogue: 0,0:04:20.61,0:04:21.24,Default,,0,0,0,,because the cores are
Dialogue: 0,0:04:21.24,0:04:22.97,Default,,0,0,0,,simultaneously working on
Dialogue: 0,0:04:22.97,0:04:24.00,Default,,0,0,0,,different parts of the image.
Dialogue: 0,0:04:25.35,0:04:26.93,Default,,0,0,0,,So, how do you implement this?
Dialogue: 0,0:04:27.07,0:04:29.51,Default,,0,0,0,,Well first, you should stop and
Dialogue: 0,0:04:29.51,0:04:31.13,Default,,0,0,0,,consider whether or not you can
Dialogue: 0,0:04:31.13,0:04:32.28,Default,,0,0,0,,take advantage of our system
Dialogue: 0,0:04:32.28,0:04:32.74,Default,,0,0,0,,frameworks.
Dialogue: 0,0:04:33.40,0:04:35.60,Default,,0,0,0,,For example, accelerate has
Dialogue: 0,0:04:35.66,0:04:37.25,Default,,0,0,0,,built-in support for parallel
Dialogue: 0,0:04:37.25,0:04:38.88,Default,,0,0,0,,execution of advanced image
Dialogue: 0,0:04:38.88,0:04:39.44,Default,,0,0,0,,algorithms.
Dialogue: 0,0:04:40.07,0:04:42.21,Default,,0,0,0,,Metal and core image can take
Dialogue: 0,0:04:42.21,0:04:44.24,Default,,0,0,0,,advantage of the powerful GPU.
Dialogue: 0,0:04:45.85,0:04:47.18,Default,,0,0,0,,Well, let's say you've decided
Dialogue: 0,0:04:47.18,0:04:49.19,Default,,0,0,0,,to implement this yourself, GCD
Dialogue: 0,0:04:49.19,0:04:50.60,Default,,0,0,0,,gives you a tool that lets you
Dialogue: 0,0:04:50.60,0:04:52.15,Default,,0,0,0,,easily express this pattern.
Dialogue: 0,0:04:52.96,0:04:54.40,Default,,0,0,0,,The way you express parallels in
Dialogue: 0,0:04:54.40,0:04:55.70,Default,,0,0,0,,GCD is with the API called
Dialogue: 0,0:04:55.70,0:04:56.52,Default,,0,0,0,,concurrentPerform.
Dialogue: 0,0:04:57.25,0:04:58.97,Default,,0,0,0,,This lets the framework optimize
Dialogue: 0,0:04:58.97,0:05:00.30,Default,,0,0,0,,the parallel case because it
Dialogue: 0,0:05:00.30,0:05:01.34,Default,,0,0,0,,knows that you're trying to do a
Dialogue: 0,0:05:01.45,0:05:03.04,Default,,0,0,0,,parallel computation across all
Dialogue: 0,0:05:03.04,0:05:03.59,Default,,0,0,0,,the cores.
Dialogue: 0,0:05:04.59,0:05:06.47,Default,,0,0,0,,concurrentPerform is a parallel
Dialogue: 0,0:05:06.47,0:05:07.99,Default,,0,0,0,,for loop that automatically load
Dialogue: 0,0:05:07.99,0:05:09.37,Default,,0,0,0,,balances your computation across
Dialogue: 0,0:05:09.42,0:05:11.90,Default,,0,0,0,,all the cores in the system.
Dialogue: 0,0:05:12.09,0:05:13.33,Default,,0,0,0,,When you use this with Swift, it
Dialogue: 0,0:05:13.33,0:05:14.45,Default,,0,0,0,,automatically chooses the
Dialogue: 0,0:05:14.45,0:05:15.94,Default,,0,0,0,,correct context to run all your
Dialogue: 0,0:05:15.94,0:05:16.62,Default,,0,0,0,,computation in.
Dialogue: 0,0:05:17.21,0:05:18.39,Default,,0,0,0,,This year, we've brought that
Dialogue: 0,0:05:18.39,0:05:19.75,Default,,0,0,0,,same power to the objective C
Dialogue: 0,0:05:19.75,0:05:22.00,Default,,0,0,0,,interface dispatch apply with
Dialogue: 0,0:05:22.00,0:05:23.41,Default,,0,0,0,,the dispatch apply auto keeper.
Dialogue: 0,0:05:24.33,0:05:25.66,Default,,0,0,0,,This replaces the Q argument
Dialogue: 0,0:05:26.44,0:05:28.11,Default,,0,0,0,,allowing the system to choose
Dialogue: 0,0:05:28.11,0:05:29.16,Default,,0,0,0,,the right context to run your
Dialogue: 0,0:05:29.16,0:05:30.10,Default,,0,0,0,,code in automatically.
Dialogue: 0,0:05:31.42,0:05:32.65,Default,,0,0,0,,So, now let's take a look at
Dialogue: 0,0:05:32.65,0:05:33.72,Default,,0,0,0,,this other parameter, which is
Dialogue: 0,0:05:33.72,0:05:34.64,Default,,0,0,0,,the iteration count.
Dialogue: 0,0:05:35.26,0:05:36.26,Default,,0,0,0,,This is how many times your
Dialogue: 0,0:05:36.26,0:05:37.42,Default,,0,0,0,,block is called in parallel
Dialogue: 0,0:05:37.42,0:05:38.09,Default,,0,0,0,,across the system.
Dialogue: 0,0:05:39.46,0:05:40.71,Default,,0,0,0,,How do you choose a good value
Dialogue: 0,0:05:40.71,0:05:40.94,Default,,0,0,0,,here?
Dialogue: 0,0:05:41.78,0:05:43.24,Default,,0,0,0,,You might imagine that a good
Dialogue: 0,0:05:43.24,0:05:44.35,Default,,0,0,0,,value would be the number of
Dialogue: 0,0:05:44.41,0:05:44.84,Default,,0,0,0,,cores.
Dialogue: 0,0:05:45.30,0:05:47.38,Default,,0,0,0,,Let's imagine that we're
Dialogue: 0,0:05:47.38,0:05:48.44,Default,,0,0,0,,executing our workload on a
Dialogue: 0,0:05:48.44,0:05:49.25,Default,,0,0,0,,three-core system.
Dialogue: 0,0:05:50.01,0:05:51.49,Default,,0,0,0,,Here, you can see the ideal
Dialogue: 0,0:05:51.49,0:05:53.22,Default,,0,0,0,,case, where three blocks run in
Dialogue: 0,0:05:53.22,0:05:54.40,Default,,0,0,0,,parallel on all three cores.
Dialogue: 0,0:05:55.02,0:05:56.63,Default,,0,0,0,,The real world isn't necessarily
Dialogue: 0,0:05:56.63,0:05:57.17,Default,,0,0,0,,this perfect.
Dialogue: 0,0:05:57.86,0:05:58.91,Default,,0,0,0,,What might happens if the third
Dialogue: 0,0:05:58.91,0:06:00.35,Default,,0,0,0,,core here is taken up for awhile
Dialogue: 0,0:06:00.35,0:06:02.17,Default,,0,0,0,,with UI rendering?
Dialogue: 0,0:06:03.36,0:06:05.15,Default,,0,0,0,,Well, what happens is the load
Dialogue: 0,0:06:05.15,0:06:06.70,Default,,0,0,0,,balancer has to move that third
Dialogue: 0,0:06:06.70,0:06:09.14,Default,,0,0,0,,block over to the first core in
Dialogue: 0,0:06:09.14,0:06:10.21,Default,,0,0,0,,order to execute it, because
Dialogue: 0,0:06:10.21,0:06:11.17,Default,,0,0,0,,it's the third course taken up.
Dialogue: 0,0:06:11.57,0:06:13.80,Default,,0,0,0,,And we get a bubble of idle CPU.
Dialogue: 0,0:06:13.95,0:06:15.67,Default,,0,0,0,,We could have taken advantage of
Dialogue: 0,0:06:15.67,0:06:17.56,Default,,0,0,0,,this time, to do more parallel
Dialogue: 0,0:06:17.56,0:06:17.77,Default,,0,0,0,,work.
Dialogue: 0,0:06:18.17,0:06:19.49,Default,,0,0,0,,And so, instead our workload
Dialogue: 0,0:06:19.49,0:06:19.99,Default,,0,0,0,,took longer.
Dialogue: 0,0:06:21.30,0:06:22.24,Default,,0,0,0,,How can we fix that?
Dialogue: 0,0:06:22.59,0:06:24.17,Default,,0,0,0,,Well, we can increase the
Dialogue: 0,0:06:24.17,0:06:26.87,Default,,0,0,0,,iteration count and give the
Dialogue: 0,0:06:26.87,0:06:28.26,Default,,0,0,0,,load balancer more flexibility.
Dialogue: 0,0:06:29.77,0:06:30.22,Default,,0,0,0,,It looks good.
Dialogue: 0,0:06:30.47,0:06:31.19,Default,,0,0,0,,That hole is gone.
Dialogue: 0,0:06:31.85,0:06:32.80,Default,,0,0,0,,There's actually another hole
Dialogue: 0,0:06:32.80,0:06:35.68,Default,,0,0,0,,over here, on the third core.
Dialogue: 0,0:06:36.19,0:06:37.17,Default,,0,0,0,,We could take advantage of that
Dialogue: 0,0:06:37.21,0:06:37.74,Default,,0,0,0,,time as well.
Dialogue: 0,0:06:39.76,0:06:42.23,Default,,0,0,0,,So, as Tim said on Monday, let's
Dialogue: 0,0:06:42.23,0:06:44.00,Default,,0,0,0,,turn the iteration cup up to 11.
Dialogue: 0,0:06:44.00,0:06:48.99,Default,,0,0,0,,There. We filled the hole, and
Dialogue: 0,0:06:48.99,0:06:50.11,Default,,0,0,0,,we have efficient execution.
Dialogue: 0,0:06:50.54,0:06:51.68,Default,,0,0,0,,We're using all of the available
Dialogue: 0,0:06:51.68,0:06:52.73,Default,,0,0,0,,resources on the system until we
Dialogue: 0,0:06:52.73,0:06:53.12,Default,,0,0,0,,finish.
Dialogue: 0,0:06:53.61,0:06:55.58,Default,,0,0,0,,This is still a very simplistic
Dialogue: 0,0:06:55.58,0:06:56.04,Default,,0,0,0,,example.
Dialogue: 0,0:06:56.34,0:06:57.55,Default,,0,0,0,,To deal with the real-world
Dialogue: 0,0:06:57.55,0:06:59.22,Default,,0,0,0,,complexity, you want to use an
Dialogue: 0,0:06:59.28,0:07:01.25,Default,,0,0,0,,order of magnitude more, say
Dialogue: 0,0:07:01.43,0:07:02.07,Default,,0,0,0,,1000.
Dialogue: 0,0:07:03.14,0:07:04.13,Default,,0,0,0,,You can use a large enough
Dialogue: 0,0:07:04.13,0:07:05.53,Default,,0,0,0,,iteration count so the load
Dialogue: 0,0:07:05.53,0:07:07.21,Default,,0,0,0,,balancer has the flexibility to
Dialogue: 0,0:07:07.21,0:07:08.38,Default,,0,0,0,,fill gaps in the system and take
Dialogue: 0,0:07:08.38,0:07:10.36,Default,,0,0,0,,the maximum of your amount of
Dialogue: 0,0:07:10.36,0:07:11.46,Default,,0,0,0,,advantage of the available
Dialogue: 0,0:07:11.46,0:07:12.37,Default,,0,0,0,,resources of the system.
Dialogue: 0,0:07:13.12,0:07:14.46,Default,,0,0,0,,However, you should be sure to
Dialogue: 0,0:07:14.46,0:07:15.82,Default,,0,0,0,,balance the overhead of the load
Dialogue: 0,0:07:15.82,0:07:17.83,Default,,0,0,0,,balancer versus the useful work
Dialogue: 0,0:07:17.96,0:07:19.87,Default,,0,0,0,,that each block in your parallel
Dialogue: 0,0:07:19.87,0:07:20.60,Default,,0,0,0,,for loop does.
Dialogue: 0,0:07:21.71,0:07:23.27,Default,,0,0,0,,Remember that not every CPU is
Dialogue: 0,0:07:23.27,0:07:24.31,Default,,0,0,0,,available to you all the time.
Dialogue: 0,0:07:24.31,0:07:26.06,Default,,0,0,0,,There are many tasks running
Dialogue: 0,0:07:26.14,0:07:27.33,Default,,0,0,0,,concurrently on the system.
Dialogue: 0,0:07:27.64,0:07:29.52,Default,,0,0,0,,And additionally, not every
Dialogue: 0,0:07:29.52,0:07:30.61,Default,,0,0,0,,worker thread will make equal
Dialogue: 0,0:07:30.61,0:07:31.01,Default,,0,0,0,,progress.
Dialogue: 0,0:07:32.50,0:07:34.52,Default,,0,0,0,,So, to recap, if you have a
Dialogue: 0,0:07:34.52,0:07:36.49,Default,,0,0,0,,parallel problem, make sure to
Dialogue: 0,0:07:36.49,0:07:37.70,Default,,0,0,0,,leverage the system frameworks
Dialogue: 0,0:07:37.70,0:07:38.42,Default,,0,0,0,,that are available to you.
Dialogue: 0,0:07:38.51,0:07:40.48,Default,,0,0,0,,You can use their power to solve
Dialogue: 0,0:07:40.48,0:07:41.01,Default,,0,0,0,,your problem.
Dialogue: 0,0:07:42.06,0:07:43.33,Default,,0,0,0,,Additionally, make sure to take
Dialogue: 0,0:07:43.33,0:07:44.70,Default,,0,0,0,,advantage of the automatic load
Dialogue: 0,0:07:44.70,0:07:45.58,Default,,0,0,0,,balancing inside
Dialogue: 0,0:07:45.58,0:07:46.36,Default,,0,0,0,,concurrentPerform.
Dialogue: 0,0:07:46.36,0:07:47.93,Default,,0,0,0,,Give it the flexibility to do
Dialogue: 0,0:07:47.93,0:07:48.75,Default,,0,0,0,,what it does best.
Dialogue: 0,0:07:49.50,0:07:51.11,Default,,0,0,0,,So, that's the discussion about
Dialogue: 0,0:07:51.11,0:07:51.64,Default,,0,0,0,,parallelism.
Dialogue: 0,0:07:51.94,0:07:52.91,Default,,0,0,0,,Now, let's switch to the main
Dialogue: 0,0:07:52.91,0:07:54.15,Default,,0,0,0,,topic for today, which is
Dialogue: 0,0:07:54.15,0:07:54.81,Default,,0,0,0,,concurrency.
Dialogue: 0,0:07:56.20,0:07:58.46,Default,,0,0,0,,So, concurrency.
Dialogue: 0,0:07:59.59,0:08:00.89,Default,,0,0,0,,Let's image you're writing a
Dialogue: 0,0:08:00.89,0:08:01.78,Default,,0,0,0,,simple news app.
Dialogue: 0,0:08:02.90,0:08:03.66,Default,,0,0,0,,How would you structure it?
Dialogue: 0,0:08:03.86,0:08:05.70,Default,,0,0,0,,Well, you start by breaking it
Dialogue: 0,0:08:05.70,0:08:06.78,Default,,0,0,0,,up into the independent
Dialogue: 0,0:08:06.78,0:08:08.46,Default,,0,0,0,,subsystems that make up the app.
Dialogue: 0,0:08:09.24,0:08:10.22,Default,,0,0,0,,Thinking about how you might
Dialogue: 0,0:08:10.22,0:08:11.77,Default,,0,0,0,,break up a news app into its
Dialogue: 0,0:08:11.77,0:08:13.24,Default,,0,0,0,,independent subsystems, you
Dialogue: 0,0:08:13.24,0:08:14.80,Default,,0,0,0,,might have a UI component that
Dialogue: 0,0:08:14.80,0:08:15.81,Default,,0,0,0,,renders the UI, that's the main
Dialogue: 0,0:08:15.81,0:08:16.12,Default,,0,0,0,,thread.
Dialogue: 0,0:08:16.71,0:08:18.27,Default,,0,0,0,,You might also have a database
Dialogue: 0,0:08:18.63,0:08:20.34,Default,,0,0,0,,that stores those articles.
Dialogue: 0,0:08:20.74,0:08:21.83,Default,,0,0,0,,And you might have a networking
Dialogue: 0,0:08:21.83,0:08:22.93,Default,,0,0,0,,subsystem that fetches those
Dialogue: 0,0:08:22.93,0:08:23.80,Default,,0,0,0,,articles from the network.
Dialogue: 0,0:08:23.80,0:08:25.61,Default,,0,0,0,,To give you a better picture of
Dialogue: 0,0:08:25.74,0:08:26.93,Default,,0,0,0,,how this app works and breaking
Dialogue: 0,0:08:26.93,0:08:28.47,Default,,0,0,0,,it up into subsystems gives you
Dialogue: 0,0:08:28.47,0:08:30.18,Default,,0,0,0,,an advantage, let's visualize
Dialogue: 0,0:08:30.62,0:08:31.91,Default,,0,0,0,,how that executes concurrently
Dialogue: 0,0:08:31.96,0:08:32.75,Default,,0,0,0,,on a modern system.
Dialogue: 0,0:08:33.43,0:08:36.63,Default,,0,0,0,,So, let's say here's a timeline
Dialogue: 0,0:08:36.79,0:08:38.83,Default,,0,0,0,,that shows at the top the CPU
Dialogue: 0,0:08:38.83,0:08:39.16,Default,,0,0,0,,track.
Dialogue: 0,0:08:39.16,0:08:40.18,Default,,0,0,0,,Let's image that we only have
Dialogue: 0,0:08:40.18,0:08:41.08,Default,,0,0,0,,one CPU remaining.
Dialogue: 0,0:08:41.08,0:08:42.22,Default,,0,0,0,,The other CPUs are busy for some
Dialogue: 0,0:08:42.22,0:08:42.45,Default,,0,0,0,,reason.
Dialogue: 0,0:08:43.15,0:08:44.28,Default,,0,0,0,,We only have one core available.
Dialogue: 0,0:08:44.74,0:08:46.39,Default,,0,0,0,,At any time only one of these
Dialogue: 0,0:08:46.39,0:08:47.70,Default,,0,0,0,,threads can run on that CPU.
Dialogue: 0,0:08:48.53,0:08:50.12,Default,,0,0,0,,So, what happens when a user
Dialogue: 0,0:08:50.12,0:08:51.70,Default,,0,0,0,,clicks the button and refreshes
Dialogue: 0,0:08:51.70,0:08:53.36,Default,,0,0,0,,the article list in the news
Dialogue: 0,0:08:53.36,0:08:53.53,Default,,0,0,0,,app?
Dialogue: 0,0:08:54.13,0:08:55.29,Default,,0,0,0,,Well, these interface renders
Dialogue: 0,0:08:55.29,0:08:56.68,Default,,0,0,0,,the response to that button and
Dialogue: 0,0:08:56.95,0:08:58.03,Default,,0,0,0,,then sends an asynchronous
Dialogue: 0,0:08:58.03,0:08:58.88,Default,,0,0,0,,across the database.
Dialogue: 0,0:09:00.14,0:09:01.35,Default,,0,0,0,,And then the database decides it
Dialogue: 0,0:09:01.35,0:09:02.74,Default,,0,0,0,,needs to refresh the articles,
Dialogue: 0,0:09:02.98,0:09:04.27,Default,,0,0,0,,which it chooses another command
Dialogue: 0,0:09:04.85,0:09:05.95,Default,,0,0,0,,to the networking subsystem.
Dialogue: 0,0:09:06.89,0:09:08.10,Default,,0,0,0,,However, at this point, the user
Dialogue: 0,0:09:08.10,0:09:08.96,Default,,0,0,0,,touches the app again.
Dialogue: 0,0:09:09.94,0:09:12.15,Default,,0,0,0,,And because the database is done
Dialogue: 0,0:09:12.22,0:09:13.09,Default,,0,0,0,,off the main thread of the
Dialogue: 0,0:09:13.09,0:09:14.90,Default,,0,0,0,,application, the OS can
Dialogue: 0,0:09:14.90,0:09:16.24,Default,,0,0,0,,immediately switch the CPU to
Dialogue: 0,0:09:16.24,0:09:18.03,Default,,0,0,0,,working on the UI thread, and it
Dialogue: 0,0:09:18.03,0:09:19.13,Default,,0,0,0,,can respond immediately to the
Dialogue: 0,0:09:19.13,0:09:20.70,Default,,0,0,0,,user without having to wait for
Dialogue: 0,0:09:20.89,0:09:21.99,Default,,0,0,0,,the database thread to complete.
Dialogue: 0,0:09:23.62,0:09:25.13,Default,,0,0,0,,This is the advantage of moving
Dialogue: 0,0:09:25.24,0:09:26.39,Default,,0,0,0,,work off the main thread.
Dialogue: 0,0:09:28.37,0:09:30.02,Default,,0,0,0,,When the user interface is done
Dialogue: 0,0:09:30.02,0:09:32.30,Default,,0,0,0,,responding, the CPU can then
Dialogue: 0,0:09:32.30,0:09:33.27,Default,,0,0,0,,switch back to the database
Dialogue: 0,0:09:33.32,0:09:34.33,Default,,0,0,0,,thread, and then finish the
Dialogue: 0,0:09:34.33,0:09:35.30,Default,,0,0,0,,networking task as well.
Dialogue: 0,0:09:36.50,0:09:37.78,Default,,0,0,0,,So, taking advantage of
Dialogue: 0,0:09:37.78,0:09:39.48,Default,,0,0,0,,concurrency like this lets you
Dialogue: 0,0:09:39.48,0:09:40.70,Default,,0,0,0,,build responsive apps.
Dialogue: 0,0:09:40.74,0:09:42.62,Default,,0,0,0,,The main thread can always
Dialogue: 0,0:09:42.62,0:09:43.81,Default,,0,0,0,,respond to the user's action
Dialogue: 0,0:09:44.08,0:09:45.26,Default,,0,0,0,,without having to wait for other
Dialogue: 0,0:09:45.26,0:09:46.15,Default,,0,0,0,,parts of your application to
Dialogue: 0,0:09:46.15,0:09:46.52,Default,,0,0,0,,complete.
Dialogue: 0,0:09:46.81,0:09:48.89,Default,,0,0,0,,So, let's take a look at what
Dialogue: 0,0:09:48.96,0:09:50.38,Default,,0,0,0,,that looks like to the CPU.
Dialogue: 0,0:09:51.42,0:09:52.72,Default,,0,0,0,,These white lines above here
Dialogue: 0,0:09:52.90,0:09:54.27,Default,,0,0,0,,show the content switches
Dialogue: 0,0:09:54.32,0:09:55.21,Default,,0,0,0,,between the subsystems.
Dialogue: 0,0:09:55.95,0:09:57.62,Default,,0,0,0,,A contact switch is when the CPU
Dialogue: 0,0:09:57.62,0:09:58.69,Default,,0,0,0,,switches between these different
Dialogue: 0,0:09:58.69,0:10:00.36,Default,,0,0,0,,subsystems or threads that make
Dialogue: 0,0:10:00.36,0:10:01.15,Default,,0,0,0,,up your application.
Dialogue: 0,0:10:02.07,0:10:03.15,Default,,0,0,0,,If you want to visualize what
Dialogue: 0,0:10:03.20,0:10:04.23,Default,,0,0,0,,this looks like to your
Dialogue: 0,0:10:04.23,0:10:05.64,Default,,0,0,0,,application, you can use
Dialogue: 0,0:10:05.64,0:10:07.23,Default,,0,0,0,,instrument system trace, which
Dialogue: 0,0:10:07.23,0:10:08.86,Default,,0,0,0,,shows you what the CPUs and the
Dialogue: 0,0:10:08.86,0:10:10.02,Default,,0,0,0,,threads are doing when they're
Dialogue: 0,0:10:10.02,0:10:11.03,Default,,0,0,0,,running in your application.
Dialogue: 0,0:10:11.45,0:10:12.81,Default,,0,0,0,,If you want to learn more about
Dialogue: 0,0:10:12.81,0:10:14.32,Default,,0,0,0,,this, you can watch the "System
Dialogue: 0,0:10:14.32,0:10:15.72,Default,,0,0,0,,Trace In-Depth" Talk from last
Dialogue: 0,0:10:15.72,0:10:16.64,Default,,0,0,0,,year where the instrument's team
Dialogue: 0,0:10:16.64,0:10:17.95,Default,,0,0,0,,described how you use system
Dialogue: 0,0:10:17.95,0:10:18.23,Default,,0,0,0,,trace.
Dialogue: 0,0:10:19.28,0:10:21.19,Default,,0,0,0,,So, this concept of context
Dialogue: 0,0:10:21.19,0:10:22.58,Default,,0,0,0,,switching is where the power of
Dialogue: 0,0:10:22.58,0:10:23.60,Default,,0,0,0,,concurrency comes from.
Dialogue: 0,0:10:24.10,0:10:25.55,Default,,0,0,0,,Let's look at when these context
Dialogue: 0,0:10:25.55,0:10:27.01,Default,,0,0,0,,switch might happen and what
Dialogue: 0,0:10:27.01,0:10:27.50,Default,,0,0,0,,causes them.
Dialogue: 0,0:10:28.37,0:10:30.65,Default,,0,0,0,,Well, they can start when a high
Dialogue: 0,0:10:30.65,0:10:32.23,Default,,0,0,0,,priority thread needs the CPU as
Dialogue: 0,0:10:32.23,0:10:33.69,Default,,0,0,0,,we saw earlier, with the UI
Dialogue: 0,0:10:33.69,0:10:34.81,Default,,0,0,0,,thread pre-empting the database
Dialogue: 0,0:10:34.81,0:10:35.06,Default,,0,0,0,,thread.
Dialogue: 0,0:10:35.97,0:10:37.37,Default,,0,0,0,,It can also happen when a thread
Dialogue: 0,0:10:37.37,0:10:39.65,Default,,0,0,0,,finishes its current work, or
Dialogue: 0,0:10:39.83,0:10:40.80,Default,,0,0,0,,it's waiting to acquire
Dialogue: 0,0:10:40.80,0:10:41.36,Default,,0,0,0,,resource.
Dialogue: 0,0:10:41.74,0:10:42.51,Default,,0,0,0,,Or it's waiting for an
Dialogue: 0,0:10:42.51,0:10:43.41,Default,,0,0,0,,asynchronous request to
Dialogue: 0,0:10:43.41,0:10:43.74,Default,,0,0,0,,complete.
Dialogue: 0,0:10:44.86,0:10:46.45,Default,,0,0,0,,However, with this great power
Dialogue: 0,0:10:46.45,0:10:48.41,Default,,0,0,0,,of concurrency comes great
Dialogue: 0,0:10:48.41,0:10:49.58,Default,,0,0,0,,responsibility as well.
Dialogue: 0,0:10:49.77,0:10:51.22,Default,,0,0,0,,You can have too much of a good
Dialogue: 0,0:10:51.22,0:10:51.44,Default,,0,0,0,,thing.
Dialogue: 0,0:10:52.90,0:10:54.27,Default,,0,0,0,,Let's say you're switching
Dialogue: 0,0:10:54.27,0:10:56.12,Default,,0,0,0,,between the network and database
Dialogue: 0,0:10:56.12,0:10:57.67,Default,,0,0,0,,threads on your CPU.
Dialogue: 0,0:10:58.39,0:10:59.63,Default,,0,0,0,,A few context switches is fine,
Dialogue: 0,0:10:59.63,0:11:00.59,Default,,0,0,0,,that's the power of concurrency
Dialogue: 0,0:11:00.59,0:11:01.24,Default,,0,0,0,,you're switching between
Dialogue: 0,0:11:01.24,0:11:01.94,Default,,0,0,0,,different tasks.
Dialogue: 0,0:11:02.62,0:11:04.15,Default,,0,0,0,,However, if you're doing this
Dialogue: 0,0:11:04.15,0:11:05.69,Default,,0,0,0,,thousands of times in really
Dialogue: 0,0:11:05.82,0:11:07.71,Default,,0,0,0,,rapid succession, you run into
Dialogue: 0,0:11:07.71,0:11:08.05,Default,,0,0,0,,trouble.
Dialogue: 0,0:11:08.13,0:11:08.73,Default,,0,0,0,,You're starting to lose
Dialogue: 0,0:11:08.79,0:11:10.78,Default,,0,0,0,,performance because each white
Dialogue: 0,0:11:10.78,0:11:12.66,Default,,0,0,0,,bar here is a context switch.
Dialogue: 0,0:11:13.07,0:11:14.07,Default,,0,0,0,,And the overhead of a context
Dialogue: 0,0:11:14.07,0:11:14.73,Default,,0,0,0,,switch adds up.
Dialogue: 0,0:11:14.73,0:11:16.08,Default,,0,0,0,,It's not just the time we spend
Dialogue: 0,0:11:16.08,0:11:17.16,Default,,0,0,0,,executing the context switch,
Dialogue: 0,0:11:17.49,0:11:18.61,Default,,0,0,0,,it's also that history that the
Dialogue: 0,0:11:18.61,0:11:19.82,Default,,0,0,0,,core has built up, it has to
Dialogue: 0,0:11:19.85,0:11:21.08,Default,,0,0,0,,regain that history after every
Dialogue: 0,0:11:21.08,0:11:22.31,Default,,0,0,0,,contact switch.
Dialogue: 0,0:11:23.00,0:11:24.67,Default,,0,0,0,,There are also other affects you
Dialogue: 0,0:11:24.67,0:11:25.28,Default,,0,0,0,,might experience.
Dialogue: 0,0:11:25.56,0:11:26.63,Default,,0,0,0,,For example, there might be
Dialogue: 0,0:11:26.63,0:11:28.57,Default,,0,0,0,,others ahead of you in line for
Dialogue: 0,0:11:28.57,0:11:29.51,Default,,0,0,0,,access to the CPU.
Dialogue: 0,0:11:30.49,0:11:32.36,Default,,0,0,0,,You have to wait each time you
Dialogue: 0,0:11:32.36,0:11:33.97,Default,,0,0,0,,context switch for the rest of
Dialogue: 0,0:11:33.97,0:11:35.32,Default,,0,0,0,,the queue to drain out and so
Dialogue: 0,0:11:35.32,0:11:38.00,Default,,0,0,0,,you may be delayed by somebody
Dialogue: 0,0:11:38.00,0:11:38.93,Default,,0,0,0,,else ahead of you in line.
Dialogue: 0,0:11:39.62,0:11:41.03,Default,,0,0,0,,So, let's look about what might
Dialogue: 0,0:11:41.06,0:11:42.34,Default,,0,0,0,,cause excessive context
Dialogue: 0,0:11:42.34,0:11:42.58,Default,,0,0,0,,switching.
Dialogue: 0,0:11:43.70,0:11:45.45,Default,,0,0,0,,So, there's three main causes
Dialogue: 0,0:11:45.45,0:11:46.38,Default,,0,0,0,,we're going to talk about today.
Dialogue: 0,0:11:46.97,0:11:48.42,Default,,0,0,0,,First, repeatedly waiting for
Dialogue: 0,0:11:48.42,0:11:49.79,Default,,0,0,0,,exclusive access to contended
Dialogue: 0,0:11:49.79,0:11:50.34,Default,,0,0,0,,resources.
Dialogue: 0,0:11:50.90,0:11:52.09,Default,,0,0,0,,Repeatedly switching between
Dialogue: 0,0:11:52.09,0:11:53.84,Default,,0,0,0,,independent operations, and
Dialogue: 0,0:11:53.84,0:11:55.31,Default,,0,0,0,,repeatedly bouncing an operation
Dialogue: 0,0:11:55.45,0:11:56.14,Default,,0,0,0,,between threads.
Dialogue: 0,0:11:56.96,0:11:57.94,Default,,0,0,0,,You note, that I repeated the
Dialogue: 0,0:11:57.94,0:11:59.85,Default,,0,0,0,,word repeatedly several times.
Dialogue: 0,0:12:00.60,0:12:01.38,Default,,0,0,0,,That's intentional.
Dialogue: 0,0:12:03.34,0:12:04.86,Default,,0,0,0,,Context switching a few times is
Dialogue: 0,0:12:04.86,0:12:06.40,Default,,0,0,0,,okay, that's how concurrency
Dialogue: 0,0:12:06.40,0:12:07.44,Default,,0,0,0,,works, that's the power that
Dialogue: 0,0:12:07.44,0:12:07.99,Default,,0,0,0,,we're giving you.
Dialogue: 0,0:12:08.65,0:12:10.21,Default,,0,0,0,,However, when you repeat it too
Dialogue: 0,0:12:10.21,0:12:11.75,Default,,0,0,0,,many times, the cost start to
Dialogue: 0,0:12:11.75,0:12:12.13,Default,,0,0,0,,add up.
Dialogue: 0,0:12:13.38,0:12:14.58,Default,,0,0,0,,So, let's start by looking at
Dialogue: 0,0:12:14.58,0:12:15.80,Default,,0,0,0,,the first case, which is
Dialogue: 0,0:12:15.80,0:12:17.18,Default,,0,0,0,,exclusive access to contended
Dialogue: 0,0:12:17.18,0:12:17.83,Default,,0,0,0,,resources.
Dialogue: 0,0:12:18.79,0:12:19.55,Default,,0,0,0,,When can this happen?
Dialogue: 0,0:12:20.31,0:12:22.70,Default,,0,0,0,,Well, the primary case in which
Dialogue: 0,0:12:22.70,0:12:24.18,Default,,0,0,0,,this happens is when you have a
Dialogue: 0,0:12:24.18,0:12:26.05,Default,,0,0,0,,lock and a bunch of threads are
Dialogue: 0,0:12:26.05,0:12:28.18,Default,,0,0,0,,all trying to acquire that lock.
Dialogue: 0,0:12:29.49,0:12:30.72,Default,,0,0,0,,So, how can you tell if this is
Dialogue: 0,0:12:30.72,0:12:31.69,Default,,0,0,0,,occurring in your application?
Dialogue: 0,0:12:31.90,0:12:33.43,Default,,0,0,0,,Well, we can go back to system
Dialogue: 0,0:12:33.43,0:12:33.79,Default,,0,0,0,,trace.
Dialogue: 0,0:12:34.35,0:12:35.74,Default,,0,0,0,,We can visualize what it looks
Dialogue: 0,0:12:35.74,0:12:36.47,Default,,0,0,0,,like in instruments.
Dialogue: 0,0:12:37.25,0:12:38.78,Default,,0,0,0,,So, let's say this shows us that
Dialogue: 0,0:12:38.78,0:12:40.31,Default,,0,0,0,,we have many threads running for
Dialogue: 0,0:12:40.31,0:12:41.39,Default,,0,0,0,,a very short time and they're
Dialogue: 0,0:12:41.39,0:12:42.62,Default,,0,0,0,,all handing off to each other in
Dialogue: 0,0:12:42.62,0:12:43.38,Default,,0,0,0,,a little cascade.
Dialogue: 0,0:12:44.28,0:12:45.45,Default,,0,0,0,,Let's focus on the first thread
Dialogue: 0,0:12:45.45,0:12:46.31,Default,,0,0,0,,and see what instruments it's
Dialogue: 0,0:12:46.31,0:12:46.76,Default,,0,0,0,,telling us.
Dialogue: 0,0:12:47.90,0:12:49.75,Default,,0,0,0,,We have this blue track, which
Dialogue: 0,0:12:49.75,0:12:51.85,Default,,0,0,0,,shows when a thread is on CPU.
Dialogue: 0,0:12:52.53,0:12:53.86,Default,,0,0,0,,And the red track shows when
Dialogue: 0,0:12:53.86,0:12:54.69,Default,,0,0,0,,it's making a sys call.
Dialogue: 0,0:12:55.14,0:12:56.78,Default,,0,0,0,,In this case, it's making
Dialogue: 0,0:12:56.78,0:12:58.59,Default,,0,0,0,,[inaudible].
Dialogue: 0,0:12:58.59,0:13:00.34,Default,,0,0,0,,This shows that most of its time
Dialogue: 0,0:13:00.34,0:13:01.28,Default,,0,0,0,,is waiting for the [inaudible]
Dialogue: 0,0:13:01.28,0:13:02.22,Default,,0,0,0,,to become available.
Dialogue: 0,0:13:02.22,0:13:04.54,Default,,0,0,0,,And the on core time is very
Dialogue: 0,0:13:04.54,0:13:06.10,Default,,0,0,0,,short at only 10 microseconds.
Dialogue: 0,0:13:07.00,0:13:08.32,Default,,0,0,0,,And there are a lot of context
Dialogue: 0,0:13:08.32,0:13:09.60,Default,,0,0,0,,switches going on on the system,
Dialogue: 0,0:13:09.93,0:13:10.60,Default,,0,0,0,,which it shows you on the
Dialogue: 0,0:13:10.60,0:13:11.57,Default,,0,0,0,,context switches track at the
Dialogue: 0,0:13:11.57,0:13:11.84,Default,,0,0,0,,top.
Dialogue: 0,0:13:13.81,0:13:15.64,Default,,0,0,0,,So, what's causing this?
Dialogue: 0,0:13:15.86,0:13:17.01,Default,,0,0,0,,Let's go back to look at our
Dialogue: 0,0:13:17.01,0:13:19.46,Default,,0,0,0,,simple timeline and see how you
Dialogue: 0,0:13:19.74,0:13:23.64,Default,,0,0,0,,excess contingent could be
Dialogue: 0,0:13:23.64,0:13:24.15,Default,,0,0,0,,playing out.
Dialogue: 0,0:13:25.06,0:13:25.96,Default,,0,0,0,,So, you see this sort of
Dialogue: 0,0:13:25.96,0:13:27.53,Default,,0,0,0,,staircase pattern in time.
Dialogue: 0,0:13:28.00,0:13:29.06,Default,,0,0,0,,Where each thread is running for
Dialogue: 0,0:13:29.06,0:13:30.42,Default,,0,0,0,,a short time, and then giving up
Dialogue: 0,0:13:30.42,0:13:31.45,Default,,0,0,0,,the CPU to the next thread,
Dialogue: 0,0:13:31.63,0:13:32.98,Default,,0,0,0,,rinse and repeat for a long
Dialogue: 0,0:13:32.98,0:13:33.20,Default,,0,0,0,,time.
Dialogue: 0,0:13:33.91,0:13:35.27,Default,,0,0,0,,You want your work to look more
Dialogue: 0,0:13:35.27,0:13:35.83,Default,,0,0,0,,like this.
Dialogue: 0,0:13:36.70,0:13:38.46,Default,,0,0,0,,Where you have the CPU can focus
Dialogue: 0,0:13:38.46,0:13:39.93,Default,,0,0,0,,on one thing at a time, get it
Dialogue: 0,0:13:39.93,0:13:41.10,Default,,0,0,0,,done, and then work on the next
Dialogue: 0,0:13:41.19,0:13:41.38,Default,,0,0,0,,task.
Dialogue: 0,0:13:42.34,0:13:43.53,Default,,0,0,0,,So, what's going on here that
Dialogue: 0,0:13:43.53,0:13:44.54,Default,,0,0,0,,causes that staircase?
Dialogue: 0,0:13:44.71,0:13:45.88,Default,,0,0,0,,Let's zoom in to one of these
Dialogue: 0,0:13:45.88,0:13:46.57,Default,,0,0,0,,stair steps.
Dialogue: 0,0:13:47.62,0:13:49.48,Default,,0,0,0,,So, here we're focusing on two
Dialogue: 0,0:13:49.48,0:13:50.67,Default,,0,0,0,,threads, the green thread and
Dialogue: 0,0:13:50.67,0:13:51.23,Default,,0,0,0,,the blue thread.
Dialogue: 0,0:13:51.78,0:13:53.55,Default,,0,0,0,,And we have a CPU on top.
Dialogue: 0,0:13:54.25,0:13:55.48,Default,,0,0,0,,We've added a new lock track
Dialogue: 0,0:13:55.57,0:13:56.81,Default,,0,0,0,,here that shows the state of the
Dialogue: 0,0:13:56.81,0:13:58.11,Default,,0,0,0,,lock and what thread owns it.
Dialogue: 0,0:13:58.34,0:14:00.13,Default,,0,0,0,,In this case, the blue thread
Dialogue: 0,0:14:00.13,0:14:01.68,Default,,0,0,0,,owns the block, and the green
Dialogue: 0,0:14:01.68,0:14:02.21,Default,,0,0,0,,thread is waiting.
Dialogue: 0,0:14:03.46,0:14:04.37,Default,,0,0,0,,So, when the blue thread
Dialogue: 0,0:14:04.51,0:14:06.17,Default,,0,0,0,,unlocks, the ownership of that
Dialogue: 0,0:14:06.17,0:14:07.30,Default,,0,0,0,,lock is transferred to the green
Dialogue: 0,0:14:07.30,0:14:08.28,Default,,0,0,0,,thread, because it's next in
Dialogue: 0,0:14:08.28,0:14:08.56,Default,,0,0,0,,line.
Dialogue: 0,0:14:09.45,0:14:11.25,Default,,0,0,0,,However, when the blue thread
Dialogue: 0,0:14:11.68,0:14:12.93,Default,,0,0,0,,turns around and grabs the lock
Dialogue: 0,0:14:12.93,0:14:14.86,Default,,0,0,0,,again, it can't because the lock
Dialogue: 0,0:14:14.86,0:14:15.71,Default,,0,0,0,,is reserved for the green
Dialogue: 0,0:14:15.71,0:14:15.97,Default,,0,0,0,,thread.
Dialogue: 0,0:14:16.67,0:14:18.22,Default,,0,0,0,,It forces at context switch
Dialogue: 0,0:14:18.22,0:14:19.44,Default,,0,0,0,,because we now have to do
Dialogue: 0,0:14:19.44,0:14:20.11,Default,,0,0,0,,something else.
Dialogue: 0,0:14:20.49,0:14:21.44,Default,,0,0,0,,And we switch to the green
Dialogue: 0,0:14:21.44,0:14:23.50,Default,,0,0,0,,thread, and the CPU can then
Dialogue: 0,0:14:24.11,0:14:25.35,Default,,0,0,0,,finish the lock and we can
Dialogue: 0,0:14:25.35,0:14:25.70,Default,,0,0,0,,repeat.
Dialogue: 0,0:14:27.06,0:14:28.06,Default,,0,0,0,,Sometimes this is useful.
Dialogue: 0,0:14:28.28,0:14:29.38,Default,,0,0,0,,You want every thread that's
Dialogue: 0,0:14:29.38,0:14:30.26,Default,,0,0,0,,waiting on the lock to get a
Dialogue: 0,0:14:30.26,0:14:31.89,Default,,0,0,0,,chance to acquire the resource,
Dialogue: 0,0:14:32.61,0:14:34.76,Default,,0,0,0,,however, what if you had a lock
Dialogue: 0,0:14:34.81,0:14:35.75,Default,,0,0,0,,that works a different way.
Dialogue: 0,0:14:36.54,0:14:38.70,Default,,0,0,0,,Let's start again by looking at
Dialogue: 0,0:14:38.70,0:14:39.86,Default,,0,0,0,,what an unfair lock does.
Dialogue: 0,0:14:40.87,0:14:43.01,Default,,0,0,0,,So, this time when blue thread
Dialogue: 0,0:14:43.01,0:14:45.01,Default,,0,0,0,,unlocks, the lock isn't
Dialogue: 0,0:14:45.06,0:14:45.46,Default,,0,0,0,,reserved.
Dialogue: 0,0:14:45.86,0:14:46.95,Default,,0,0,0,,The ownership of the lock is up
Dialogue: 0,0:14:46.95,0:14:47.62,Default,,0,0,0,,for grabs.
Dialogue: 0,0:14:48.62,0:14:50.16,Default,,0,0,0,,Blue can take the lock again,
Dialogue: 0,0:14:50.54,0:14:52.03,Default,,0,0,0,,and it can immediately reacquire
Dialogue: 0,0:14:52.03,0:14:54.07,Default,,0,0,0,,and stay on CPU without forcing
Dialogue: 0,0:14:54.07,0:14:54.79,Default,,0,0,0,,a context switch.
Dialogue: 0,0:14:55.72,0:14:56.88,Default,,0,0,0,,This might make it difficult for
Dialogue: 0,0:14:56.88,0:14:57.90,Default,,0,0,0,,the green thread to actually get
Dialogue: 0,0:14:57.90,0:14:59.79,Default,,0,0,0,,a chance at the lock, but it
Dialogue: 0,0:14:59.79,0:15:00.97,Default,,0,0,0,,reduces the number of context
Dialogue: 0,0:15:00.97,0:15:02.35,Default,,0,0,0,,switches the blue thread has to
Dialogue: 0,0:15:02.89,0:15:06.47,Default,,0,0,0,,have in order to reacquire the
Dialogue: 0,0:15:06.47,0:15:06.64,Default,,0,0,0,,lock.
Dialogue: 0,0:15:08.02,0:15:09.11,Default,,0,0,0,,So, to recap when we're talking
Dialogue: 0,0:15:09.11,0:15:10.28,Default,,0,0,0,,about lock contention, you
Dialogue: 0,0:15:10.28,0:15:11.72,Default,,0,0,0,,actually want to make sure to
Dialogue: 0,0:15:11.72,0:15:12.99,Default,,0,0,0,,measure your application and
Dialogue: 0,0:15:12.99,0:15:14.62,Default,,0,0,0,,system trace and see if you have
Dialogue: 0,0:15:14.62,0:15:15.04,Default,,0,0,0,,an issue.
Dialogue: 0,0:15:15.50,0:15:17.59,Default,,0,0,0,,If you do, often the unfair lock
Dialogue: 0,0:15:17.87,0:15:19.30,Default,,0,0,0,,works best for objects,
Dialogue: 0,0:15:19.65,0:15:21.05,Default,,0,0,0,,properties, for global state in
Dialogue: 0,0:15:21.05,0:15:22.27,Default,,0,0,0,,your application that may have
Dialogue: 0,0:15:22.27,0:15:23.93,Default,,0,0,0,,taken a drop many, many times.
Dialogue: 0,0:15:25.53,0:15:26.49,Default,,0,0,0,,There's one other thing I want
Dialogue: 0,0:15:26.49,0:15:27.19,Default,,0,0,0,,to talk about when we're
Dialogue: 0,0:15:27.19,0:15:28.33,Default,,0,0,0,,mentioning locks, and that is
Dialogue: 0,0:15:28.33,0:15:29.10,Default,,0,0,0,,lock ownership.
Dialogue: 0,0:15:29.87,0:15:31.28,Default,,0,0,0,,So, remember the lock track we
Dialogue: 0,0:15:31.28,0:15:33.39,Default,,0,0,0,,had earlier, the runtime knows
Dialogue: 0,0:15:33.39,0:15:34.39,Default,,0,0,0,,which thread will unlock the
Dialogue: 0,0:15:34.39,0:15:34.88,Default,,0,0,0,,lock next.
Dialogue: 0,0:15:36.02,0:15:37.26,Default,,0,0,0,,We can take advantage of that
Dialogue: 0,0:15:37.26,0:15:38.80,Default,,0,0,0,,power to automatically result
Dialogue: 0,0:15:38.80,0:15:40.06,Default,,0,0,0,,priority inversions in your app
Dialogue: 0,0:15:40.50,0:15:41.67,Default,,0,0,0,,between the waiters and the
Dialogue: 0,0:15:41.67,0:15:42.36,Default,,0,0,0,,owners of the lock.
Dialogue: 0,0:15:42.78,0:15:44.22,Default,,0,0,0,,And even enable other
Dialogue: 0,0:15:44.22,0:15:46.06,Default,,0,0,0,,optimizations, like directed CPU
Dialogue: 0,0:15:46.06,0:15:47.17,Default,,0,0,0,,handoff to the owning thread.
Dialogue: 0,0:15:47.76,0:15:48.87,Default,,0,0,0,,Pierre is going to discuss this
Dialogue: 0,0:15:49.16,0:15:50.36,Default,,0,0,0,,later in our talk, when talking
Dialogue: 0,0:15:50.36,0:15:51.10,Default,,0,0,0,,about dispatch sync.
Dialogue: 0,0:15:52.20,0:15:54.29,Default,,0,0,0,,We often get the question, which
Dialogue: 0,0:15:54.35,0:15:55.73,Default,,0,0,0,,primitives have this power and
Dialogue: 0,0:15:55.73,0:15:56.43,Default,,0,0,0,,which ones don't.
Dialogue: 0,0:15:57.48,0:15:58.74,Default,,0,0,0,,Let's take a look at which
Dialogue: 0,0:15:58.74,0:15:59.78,Default,,0,0,0,,low-level primitives do this
Dialogue: 0,0:15:59.84,0:16:00.11,Default,,0,0,0,,today.
Dialogue: 0,0:16:01.51,0:16:03.10,Default,,0,0,0,,So, primitives with a single
Dialogue: 0,0:16:03.15,0:16:04.54,Default,,0,0,0,,known owner have this power.
Dialogue: 0,0:16:04.93,0:16:06.54,Default,,0,0,0,,Things like serial queues and OS
Dialogue: 0,0:16:06.54,0:16:07.10,Default,,0,0,0,,unfair lock.
Dialogue: 0,0:16:08.19,0:16:10.62,Default,,0,0,0,,However, asymmetric primitives,
Dialogue: 0,0:16:10.62,0:16:11.98,Default,,0,0,0,,like dispatch semaphore and
Dialogue: 0,0:16:11.98,0:16:13.47,Default,,0,0,0,,dispatch group don't have this
Dialogue: 0,0:16:13.54,0:16:14.67,Default,,0,0,0,,power, because the runtime
Dialogue: 0,0:16:14.67,0:16:15.83,Default,,0,0,0,,doesn't know what thread will
Dialogue: 0,0:16:15.83,0:16:16.89,Default,,0,0,0,,single the sub primitive.
Dialogue: 0,0:16:18.64,0:16:20.29,Default,,0,0,0,,Finally, primitives with
Dialogue: 0,0:16:20.29,0:16:22.11,Default,,0,0,0,,multiple owners like private,
Dialogue: 0,0:16:22.11,0:16:23.42,Default,,0,0,0,,concurrent queues and read or
Dialogue: 0,0:16:23.42,0:16:24.74,Default,,0,0,0,,writer locks, the systems
Dialogue: 0,0:16:24.74,0:16:25.73,Default,,0,0,0,,doesn't take advantage of that
Dialogue: 0,0:16:25.78,0:16:26.63,Default,,0,0,0,,today, because there isn't a
Dialogue: 0,0:16:26.63,0:16:27.24,Default,,0,0,0,,single owner.
Dialogue: 0,0:16:27.24,0:16:29.52,Default,,0,0,0,,When you're picking a primitive
Dialogue: 0,0:16:30.04,0:16:31.58,Default,,0,0,0,,consider whether or not your use
Dialogue: 0,0:16:31.65,0:16:32.94,Default,,0,0,0,,case involves threads of
Dialogue: 0,0:16:32.94,0:16:33.66,Default,,0,0,0,,different priorities
Dialogue: 0,0:16:33.66,0:16:34.23,Default,,0,0,0,,interacting.
Dialogue: 0,0:16:35.10,0:16:37.10,Default,,0,0,0,,In like a high party UI thread
Dialogue: 0,0:16:37.10,0:16:38.42,Default,,0,0,0,,with a lower priority background
Dialogue: 0,0:16:38.42,0:16:38.64,Default,,0,0,0,,thread.
Dialogue: 0,0:16:39.84,0:16:41.46,Default,,0,0,0,,If so, you might want to take
Dialogue: 0,0:16:41.46,0:16:42.42,Default,,0,0,0,,advantage of a primitive
Dialogue: 0,0:16:42.46,0:16:44.74,Default,,0,0,0,,ownership that ensures that your
Dialogue: 0,0:16:44.89,0:16:46.42,Default,,0,0,0,,UI thread doesn't get delayed by
Dialogue: 0,0:16:46.42,0:16:47.34,Default,,0,0,0,,waiting on a lower priority
Dialogue: 0,0:16:47.34,0:16:48.61,Default,,0,0,0,,background thread.
Dialogue: 0,0:16:49.26,0:16:51.06,Default,,0,0,0,,So, in summary, these
Dialogue: 0,0:16:51.13,0:16:52.53,Default,,0,0,0,,inefficient behaviors often
Dialogue: 0,0:16:52.53,0:16:53.50,Default,,0,0,0,,emerge in properties of your
Dialogue: 0,0:16:53.50,0:16:54.13,Default,,0,0,0,,application.
Dialogue: 0,0:16:54.49,0:16:55.81,Default,,0,0,0,,It's not easy to find these
Dialogue: 0,0:16:55.85,0:16:56.98,Default,,0,0,0,,problems just by looking at your
Dialogue: 0,0:16:56.98,0:16:57.34,Default,,0,0,0,,code.
Dialogue: 0,0:16:57.82,0:16:59.20,Default,,0,0,0,,You should observe it in
Dialogue: 0,0:16:59.20,0:17:00.85,Default,,0,0,0,,instrument system trace to
Dialogue: 0,0:17:00.85,0:17:02.45,Default,,0,0,0,,visualize your apps true, real
Dialogue: 0,0:17:02.45,0:17:04.43,Default,,0,0,0,,behavior and so you can use the
Dialogue: 0,0:17:04.49,0:17:05.53,Default,,0,0,0,,right lock for the job.
Dialogue: 0,0:17:06.53,0:17:07.42,Default,,0,0,0,,So, I've just discussed the
Dialogue: 0,0:17:07.52,0:17:09.02,Default,,0,0,0,,first cause on our context
Dialogue: 0,0:17:09.02,0:17:10.17,Default,,0,0,0,,switching list, which is
Dialogue: 0,0:17:10.17,0:17:11.25,Default,,0,0,0,,exclusive access.
Dialogue: 0,0:17:12.57,0:17:13.93,Default,,0,0,0,,To discuss some other ways your
Dialogue: 0,0:17:13.93,0:17:15.26,Default,,0,0,0,,apps can experience excessive
Dialogue: 0,0:17:15.26,0:17:16.45,Default,,0,0,0,,context switching, I'm going to
Dialogue: 0,0:17:16.45,0:17:18.73,Default,,0,0,0,,bring out my Daniel Steffen to
Dialogue: 0,0:17:19.06,0:17:20.48,Default,,0,0,0,,talk to you about how you can
Dialogue: 0,0:17:20.53,0:17:21.86,Default,,0,0,0,,organize your concurrency with
Dialogue: 0,0:17:21.86,0:17:23.89,Default,,0,0,0,,GCD, to avoid these pitfalls.
Dialogue: 0,0:17:26.52,0:17:31.13,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:17:31.63,0:17:31.87,Default,,0,0,0,,>> All right.
Dialogue: 0,0:17:32.08,0:17:32.67,Default,,0,0,0,,Thank you, Daniel.
Dialogue: 0,0:17:34.34,0:17:35.49,Default,,0,0,0,,So, we've got a lot to cover
Dialogue: 0,0:17:35.49,0:17:37.04,Default,,0,0,0,,today, so I won't be able to go
Dialogue: 0,0:17:37.04,0:17:38.56,Default,,0,0,0,,into too many details on the
Dialogue: 0,0:17:38.56,0:17:39.86,Default,,0,0,0,,fundamentals of GCD.
Dialogue: 0,0:17:40.41,0:17:41.97,Default,,0,0,0,,If you're new to the technology,
Dialogue: 0,0:17:42.38,0:17:43.69,Default,,0,0,0,,or need a bit of a refresher,
Dialogue: 0,0:17:43.80,0:17:44.94,Default,,0,0,0,,here are some of the sessions at
Dialogue: 0,0:17:44.94,0:17:47.29,Default,,0,0,0,,previous WWDC conferences that
Dialogue: 0,0:17:47.29,0:17:48.75,Default,,0,0,0,,covered GCD and the enhancements
Dialogue: 0,0:17:48.75,0:17:49.63,Default,,0,0,0,,that we've made to it over the
Dialogue: 0,0:17:49.63,0:17:50.11,Default,,0,0,0,,years.
Dialogue: 0,0:17:50.69,0:17:51.87,Default,,0,0,0,,So, I encourage you to go and
Dialogue: 0,0:17:51.87,0:17:52.81,Default,,0,0,0,,see those on video.
Dialogue: 0,0:17:53.50,0:17:55.27,Default,,0,0,0,,We do need a few of the basic
Dialogue: 0,0:17:55.27,0:17:56.88,Default,,0,0,0,,concepts of GCD today however,
Dialogue: 0,0:17:56.88,0:17:58.78,Default,,0,0,0,,starting with the serial
Dialogue: 0,0:17:58.93,0:17:59.57,Default,,0,0,0,,dispatch queue.
Dialogue: 0,0:18:00.57,0:18:01.94,Default,,0,0,0,,This is really our fundamental
Dialogue: 0,0:18:02.45,0:18:03.75,Default,,0,0,0,,synchronization primitive in
Dialogue: 0,0:18:03.75,0:18:04.09,Default,,0,0,0,,GCD.
Dialogue: 0,0:18:04.09,0:18:06.27,Default,,0,0,0,,It provides you with mutual
Dialogue: 0,0:18:06.27,0:18:07.71,Default,,0,0,0,,exclusion as well as FIFO
Dialogue: 0,0:18:07.74,0:18:08.00,Default,,0,0,0,,ordering.
Dialogue: 0,0:18:08.00,0:18:09.84,Default,,0,0,0,,This is one of these ordered and
Dialogue: 0,0:18:10.11,0:18:11.43,Default,,0,0,0,,fair primitives that Daniel just
Dialogue: 0,0:18:11.43,0:18:11.80,Default,,0,0,0,,mentioned.
Dialogue: 0,0:18:13.30,0:18:15.20,Default,,0,0,0,,And it has a concurrent atomic
Dialogue: 0,0:18:15.20,0:18:16.41,Default,,0,0,0,,in queue operation, so it's find
Dialogue: 0,0:18:16.41,0:18:17.41,Default,,0,0,0,,for multiple threads to in
Dialogue: 0,0:18:17.41,0:18:18.74,Default,,0,0,0,,queue, operations into the queue
Dialogue: 0,0:18:18.74,0:18:20.40,Default,,0,0,0,,at the same time, as well as a
Dialogue: 0,0:18:20.40,0:18:21.71,Default,,0,0,0,,single DQI thread that the
Dialogue: 0,0:18:21.71,0:18:23.22,Default,,0,0,0,,system provides to execute
Dialogue: 0,0:18:23.22,0:18:24.38,Default,,0,0,0,,asynchronous work out of the
Dialogue: 0,0:18:24.38,0:18:24.68,Default,,0,0,0,,queue.
Dialogue: 0,0:18:25.42,0:18:26.75,Default,,0,0,0,,So, let's look at an example of
Dialogue: 0,0:18:26.85,0:18:27.50,Default,,0,0,0,,this in action.
Dialogue: 0,0:18:27.50,0:18:29.44,Default,,0,0,0,,Here we're creating a serial
Dialogue: 0,0:18:29.47,0:18:30.93,Default,,0,0,0,,queue by calling the dispatch
Dialogue: 0,0:18:30.93,0:18:33.26,Default,,0,0,0,,queue constructor and that will
Dialogue: 0,0:18:33.26,0:18:34.98,Default,,0,0,0,,give you a piece of memory that
Dialogue: 0,0:18:34.98,0:18:36.43,Default,,0,0,0,,as long as you haven't used it
Dialogue: 0,0:18:36.43,0:18:37.51,Default,,0,0,0,,yet, it's just in your
Dialogue: 0,0:18:37.51,0:18:38.07,Default,,0,0,0,,application.
Dialogue: 0,0:18:38.83,0:18:40.01,Default,,0,0,0,,Now, imagine there's two threads
Dialogue: 0,0:18:40.01,0:18:41.05,Default,,0,0,0,,that come along in call D
Dialogue: 0,0:18:41.05,0:18:43.09,Default,,0,0,0,,queue.async method to submit
Dialogue: 0,0:18:43.09,0:18:44.42,Default,,0,0,0,,some asynchronous work into this
Dialogue: 0,0:18:44.42,0:18:44.74,Default,,0,0,0,,queue.
Dialogue: 0,0:18:45.40,0:18:46.34,Default,,0,0,0,,As mentioned, it's find for
Dialogue: 0,0:18:46.34,0:18:47.65,Default,,0,0,0,,multiple threads to do this, and
Dialogue: 0,0:18:47.65,0:18:49.55,Default,,0,0,0,,the items will just get in queue
Dialogue: 0,0:18:49.55,0:18:50.73,Default,,0,0,0,,in the order that they appeared.
Dialogue: 0,0:18:52.30,0:18:53.19,Default,,0,0,0,,And because this is the
Dialogue: 0,0:18:53.19,0:18:54.95,Default,,0,0,0,,asynchronous method, this method
Dialogue: 0,0:18:54.95,0:18:57.85,Default,,0,0,0,,returns and the threads can go
Dialogue: 0,0:18:57.85,0:18:59.49,Default,,0,0,0,,on their way, so maybe this
Dialogue: 0,0:18:59.66,0:19:00.78,Default,,0,0,0,,first thread eventually calls
Dialogue: 0,0:19:00.78,0:19:01.53,Default,,0,0,0,,queue.sync.
Dialogue: 0,0:19:01.97,0:19:02.89,Default,,0,0,0,,This is the way you interact
Dialogue: 0,0:19:02.89,0:19:03.94,Default,,0,0,0,,synchronously with the queue.
Dialogue: 0,0:19:04.32,0:19:05.36,Default,,0,0,0,,And because this is an ordered
Dialogue: 0,0:19:05.36,0:19:06.53,Default,,0,0,0,,primitive here, what this does
Dialogue: 0,0:19:06.53,0:19:07.57,Default,,0,0,0,,is it will in queue a
Dialogue: 0,0:19:07.57,0:19:09.73,Default,,0,0,0,,placeholder into the queue so
Dialogue: 0,0:19:09.73,0:19:12.72,Default,,0,0,0,,that the thread can wait until
Dialogue: 0,0:19:12.72,0:19:13.53,Default,,0,0,0,,it is its turn.
Dialogue: 0,0:19:14.56,0:19:16.88,Default,,0,0,0,,And now, there's this automatic
Dialogue: 0,0:19:17.14,0:19:18.51,Default,,0,0,0,,worker thread that will come
Dialogue: 0,0:19:18.51,0:19:19.83,Default,,0,0,0,,along to execute the
Dialogue: 0,0:19:19.83,0:19:21.56,Default,,0,0,0,,asynchronous work items, until
Dialogue: 0,0:19:21.56,0:19:22.90,Default,,0,0,0,,you get to that placeholder at
Dialogue: 0,0:19:22.90,0:19:24.45,Default,,0,0,0,,which point the ownership of the
Dialogue: 0,0:19:24.45,0:19:25.69,Default,,0,0,0,,queue will transfer to the
Dialogue: 0,0:19:25.75,0:19:27.14,Default,,0,0,0,,thread waiting in queue.sync so
Dialogue: 0,0:19:27.14,0:19:29.06,Default,,0,0,0,,that it can execute its block.
Dialogue: 0,0:19:30.13,0:19:32.75,Default,,0,0,0,,So, the next concept that we'll
Dialogue: 0,0:19:32.75,0:19:34.88,Default,,0,0,0,,need is the dispatch source.
Dialogue: 0,0:19:35.11,0:19:36.29,Default,,0,0,0,,This is our event monitoring
Dialogue: 0,0:19:36.29,0:19:37.46,Default,,0,0,0,,primitive in GCD.
Dialogue: 0,0:19:37.85,0:19:39.45,Default,,0,0,0,,Here we are setting one up to
Dialogue: 0,0:19:39.45,0:19:40.54,Default,,0,0,0,,monitor a default descriptive
Dialogue: 0,0:19:40.54,0:19:42.65,Default,,0,0,0,,for readability if you make read
Dialogue: 0,0:19:42.65,0:19:43.44,Default,,0,0,0,,source constructor.
Dialogue: 0,0:19:43.81,0:19:45.66,Default,,0,0,0,,You pass it in a queue which is
Dialogue: 0,0:19:45.69,0:19:47.00,Default,,0,0,0,,the target queue of the source,
Dialogue: 0,0:19:47.34,0:19:48.91,Default,,0,0,0,,which is where we execute the
Dialogue: 0,0:19:48.91,0:19:50.13,Default,,0,0,0,,event handle of the source,
Dialogue: 0,0:19:50.45,0:19:51.50,Default,,0,0,0,,which here just reads from the
Dialogue: 0,0:19:51.50,0:19:52.25,Default,,0,0,0,,default descriptor.
Dialogue: 0,0:19:53.05,0:19:54.17,Default,,0,0,0,,This target queue is also where
Dialogue: 0,0:19:54.17,0:19:55.41,Default,,0,0,0,,you might put other work that
Dialogue: 0,0:19:55.41,0:19:56.65,Default,,0,0,0,,should be serialized with this
Dialogue: 0,0:19:56.65,0:19:58.43,Default,,0,0,0,,operation, such as processing
Dialogue: 0,0:19:58.43,0:19:59.66,Default,,0,0,0,,the data that was read.
Dialogue: 0,0:20:00.82,0:20:02.21,Default,,0,0,0,,Then, we set the cancel handler
Dialogue: 0,0:20:02.21,0:20:03.40,Default,,0,0,0,,for the source, which is how
Dialogue: 0,0:20:03.40,0:20:04.79,Default,,0,0,0,,sources implement the
Dialogue: 0,0:20:04.82,0:20:06.33,Default,,0,0,0,,invalidation pattern.
Dialogue: 0,0:20:07.06,0:20:08.07,Default,,0,0,0,,And finally, when everything is
Dialogue: 0,0:20:08.10,0:20:09.17,Default,,0,0,0,,set up, you call source and
Dialogue: 0,0:20:09.17,0:20:10.57,Default,,0,0,0,,activate to start monitoring.
Dialogue: 0,0:20:11.20,0:20:12.74,Default,,0,0,0,,So, it's worth noting that
Dialogue: 0,0:20:12.83,0:20:14.55,Default,,0,0,0,,sources are really just an
Dialogue: 0,0:20:14.55,0:20:15.81,Default,,0,0,0,,instance of a more general
Dialogue: 0,0:20:15.81,0:20:17.61,Default,,0,0,0,,pattern throughout the OS, where
Dialogue: 0,0:20:17.71,0:20:19.12,Default,,0,0,0,,you have objects that deliver
Dialogue: 0,0:20:19.12,0:20:20.57,Default,,0,0,0,,events to you on a target queue
Dialogue: 0,0:20:20.57,0:20:21.49,Default,,0,0,0,,that you specify.
Dialogue: 0,0:20:22.09,0:20:23.70,Default,,0,0,0,,So, if you're familiar with XPC,
Dialogue: 0,0:20:23.70,0:20:25.48,Default,,0,0,0,,that would be another example of
Dialogue: 0,0:20:25.55,0:20:26.67,Default,,0,0,0,,that XPC connections.
Dialogue: 0,0:20:27.99,0:20:30.25,Default,,0,0,0,,And, it's worth noting that all
Dialogue: 0,0:20:30.25,0:20:31.09,Default,,0,0,0,,of everything we're telling you
Dialogue: 0,0:20:31.09,0:20:32.41,Default,,0,0,0,,today about sources really
Dialogue: 0,0:20:32.41,0:20:33.93,Default,,0,0,0,,applies to all such objects in
Dialogue: 0,0:20:33.93,0:20:34.27,Default,,0,0,0,,general.
Dialogue: 0,0:20:36.29,0:20:37.62,Default,,0,0,0,,So, putting these two concepts
Dialogue: 0,0:20:37.62,0:20:39.53,Default,,0,0,0,,together, we get what we call
Dialogue: 0,0:20:39.53,0:20:40.61,Default,,0,0,0,,the target queue hierarchy.
Dialogue: 0,0:20:41.35,0:20:46.16,Default,,0,0,0,,So, here we have two sources
Dialogue: 0,0:20:46.16,0:20:48.27,Default,,0,0,0,,with their associated target
Dialogue: 0,0:20:48.30,0:20:50.47,Default,,0,0,0,,queues, S1, S2 and the queue is
Dialogue: 0,0:20:50.54,0:20:50.89,Default,,0,0,0,,Q1 and Q2.
Dialogue: 0,0:20:50.89,0:20:52.42,Default,,0,0,0,,And we can form a little tree
Dialogue: 0,0:20:52.42,0:20:53.78,Default,,0,0,0,,out of this situation by adding
Dialogue: 0,0:20:53.78,0:20:54.86,Default,,0,0,0,,yet another serial queue to the
Dialogue: 0,0:20:54.86,0:20:57.30,Default,,0,0,0,,mix, by adding mutual exclusion
Dialogue: 0,0:20:57.30,0:20:58.71,Default,,0,0,0,,queue, EQ, at the bottom.
Dialogue: 0,0:20:59.34,0:21:00.64,Default,,0,0,0,,The way we do this is simply by
Dialogue: 0,0:21:00.64,0:21:02.01,Default,,0,0,0,,passing in the optional target
Dialogue: 0,0:21:02.01,0:21:03.49,Default,,0,0,0,,argument into the dispatch queue
Dialogue: 0,0:21:03.49,0:21:04.00,Default,,0,0,0,,constructor.
Dialogue: 0,0:21:04.00,0:21:06.79,Default,,0,0,0,,So, this gives you a shared
Dialogue: 0,0:21:06.79,0:21:08.22,Default,,0,0,0,,single mutual exclusion context
Dialogue: 0,0:21:08.22,0:21:09.10,Default,,0,0,0,,for this whole tree.
Dialogue: 0,0:21:09.51,0:21:11.47,Default,,0,0,0,,Only one of the sources or one
Dialogue: 0,0:21:11.47,0:21:12.64,Default,,0,0,0,,item in one of the queues can
Dialogue: 0,0:21:12.64,0:21:13.69,Default,,0,0,0,,execute at one time.
Dialogue: 0,0:21:14.43,0:21:16.09,Default,,0,0,0,,But it preserves the independent
Dialogue: 0,0:21:16.09,0:21:17.61,Default,,0,0,0,,individual queue order for queue
Dialogue: 0,0:21:17.61,0:21:18.76,Default,,0,0,0,,1 and queue 2.
Dialogue: 0,0:21:19.22,0:21:20.46,Default,,0,0,0,,So, let's look at what I mean by
Dialogue: 0,0:21:20.46,0:21:21.59,Default,,0,0,0,,that.
Dialogue: 0,0:21:22.38,0:21:23.88,Default,,0,0,0,,Here I have the two queues,
Dialogue: 0,0:21:23.88,0:21:25.81,Default,,0,0,0,,queue 1 and queue 2 with them
Dialogue: 0,0:21:25.81,0:21:27.04,Default,,0,0,0,,queued in a specific order.
Dialogue: 0,0:21:27.80,0:21:28.94,Default,,0,0,0,,And because we have this extra
Dialogue: 0,0:21:28.94,0:21:30.48,Default,,0,0,0,,serial queue at the bottom, and
Dialogue: 0,0:21:30.48,0:21:32.19,Default,,0,0,0,,the executes, they will execute
Dialogue: 0,0:21:32.27,0:21:34.52,Default,,0,0,0,,in EQ and there will be a single
Dialogue: 0,0:21:34.52,0:21:35.63,Default,,0,0,0,,worker thread executing these
Dialogue: 0,0:21:35.63,0:21:36.92,Default,,0,0,0,,items giving you that mutual
Dialogue: 0,0:21:36.92,0:21:38.39,Default,,0,0,0,,exclusion property, only one
Dialogue: 0,0:21:38.39,0:21:39.69,Default,,0,0,0,,item executing at one time.
Dialogue: 0,0:21:39.74,0:21:41.48,Default,,0,0,0,,But as you can see, the items
Dialogue: 0,0:21:41.48,0:21:42.76,Default,,0,0,0,,from both queues can execute
Dialogue: 0,0:21:42.80,0:21:44.74,Default,,0,0,0,,interleafed while preserving the
Dialogue: 0,0:21:44.74,0:21:46.00,Default,,0,0,0,,individual order that they had
Dialogue: 0,0:21:46.00,0:21:47.06,Default,,0,0,0,,in their original queues.
Dialogue: 0,0:21:47.61,0:21:51.24,Default,,0,0,0,,So, the last concept that we'll
Dialogue: 0,0:21:51.24,0:21:53.03,Default,,0,0,0,,need today, is the notion of
Dialogue: 0,0:21:53.03,0:21:54.03,Default,,0,0,0,,quality of service.
Dialogue: 0,0:21:55.30,0:21:56.91,Default,,0,0,0,,Here is a fairly deed concept
Dialogue: 0,0:21:56.91,0:21:57.88,Default,,0,0,0,,that was talked about in some
Dialogue: 0,0:21:57.88,0:21:58.89,Default,,0,0,0,,detail in the past.
Dialogue: 0,0:21:58.89,0:22:00.01,Default,,0,0,0,,In particular, in the power
Dialogue: 0,0:22:00.01,0:22:01.17,Default,,0,0,0,,performance and diagnostics
Dialogue: 0,0:22:01.17,0:22:03.73,Default,,0,0,0,,session in 2014.
Dialogue: 0,0:22:03.73,0:22:05.58,Default,,0,0,0,,So, if this is new to you, I
Dialogue: 0,0:22:05.58,0:22:07.07,Default,,0,0,0,,would encourage you to go and
Dialogue: 0,0:22:07.07,0:22:07.61,Default,,0,0,0,,watch that.
Dialogue: 0,0:22:08.46,0:22:09.83,Default,,0,0,0,,But what we'll need today from
Dialogue: 0,0:22:09.83,0:22:11.56,Default,,0,0,0,,this is really mostly it's
Dialogue: 0,0:22:11.92,0:22:13.23,Default,,0,0,0,,abstract notion of priority.
Dialogue: 0,0:22:14.69,0:22:16.49,Default,,0,0,0,,And we'll use the terms QOS and
Dialogue: 0,0:22:16.49,0:22:18.45,Default,,0,0,0,,priority somewhat
Dialogue: 0,0:22:18.45,0:22:19.46,Default,,0,0,0,,interchangeably in the rest of
Dialogue: 0,0:22:19.50,0:22:19.97,Default,,0,0,0,,the session.
Dialogue: 0,0:22:21.27,0:22:22.54,Default,,0,0,0,,We have four quality of service
Dialogue: 0,0:22:22.54,0:22:23.51,Default,,0,0,0,,classes on the system.
Dialogue: 0,0:22:23.75,0:22:25.06,Default,,0,0,0,,From the highest user
Dialogue: 0,0:22:25.06,0:22:27.14,Default,,0,0,0,,interactive UI to user
Dialogue: 0,0:22:27.14,0:22:30.22,Default,,0,0,0,,initiated, or IN, utility, UT to
Dialogue: 0,0:22:30.37,0:22:31.52,Default,,0,0,0,,background BG.
Dialogue: 0,0:22:32.06,0:22:32.87,Default,,0,0,0,,The lowest priority.
Dialogue: 0,0:22:33.99,0:22:35.37,Default,,0,0,0,,So, let's look at how we would
Dialogue: 0,0:22:35.37,0:22:36.88,Default,,0,0,0,,combine this concept of quality
Dialogue: 0,0:22:36.88,0:22:38.35,Default,,0,0,0,,of service with the target queue
Dialogue: 0,0:22:38.35,0:22:39.33,Default,,0,0,0,,hierarchy that we just looked
Dialogue: 0,0:22:39.33,0:22:39.52,Default,,0,0,0,,at.
Dialogue: 0,0:22:40.29,0:22:41.86,Default,,0,0,0,,In this hierarchy, every node in
Dialogue: 0,0:22:41.86,0:22:42.75,Default,,0,0,0,,the tree can actually have a
Dialogue: 0,0:22:42.75,0:22:43.83,Default,,0,0,0,,quality of service label
Dialogue: 0,0:22:43.83,0:22:44.65,Default,,0,0,0,,associated with it.
Dialogue: 0,0:22:45.44,0:22:47.09,Default,,0,0,0,,So, for instance the source 2
Dialogue: 0,0:22:47.09,0:22:48.15,Default,,0,0,0,,might be relevant to the user
Dialogue: 0,0:22:48.15,0:22:48.72,Default,,0,0,0,,interface.
Dialogue: 0,0:22:49.10,0:22:50.16,Default,,0,0,0,,It might be monitored for an
Dialogue: 0,0:22:50.16,0:22:51.38,Default,,0,0,0,,event where we should update the
Dialogue: 0,0:22:51.38,0:22:52.56,Default,,0,0,0,,UI as soon as the event
Dialogue: 0,0:22:52.56,0:22:52.88,Default,,0,0,0,,triggers.
Dialogue: 0,0:22:52.88,0:22:55.04,Default,,0,0,0,,So, it could be that we want to
Dialogue: 0,0:22:55.04,0:22:56.55,Default,,0,0,0,,put the UI label onto the
Dialogue: 0,0:22:56.55,0:22:57.05,Default,,0,0,0,,source.
Dialogue: 0,0:22:57.92,0:22:59.01,Default,,0,0,0,,Another common use source would
Dialogue: 0,0:22:59.01,0:23:01.55,Default,,0,0,0,,be to put a label on the mutual
Dialogue: 0,0:23:01.55,0:23:03.07,Default,,0,0,0,,exclusion queue to provide a
Dialogue: 0,0:23:03.07,0:23:04.87,Default,,0,0,0,,flow of execution so that
Dialogue: 0,0:23:04.87,0:23:06.30,Default,,0,0,0,,nothing in this tree can execute
Dialogue: 0,0:23:06.30,0:23:08.15,Default,,0,0,0,,below this level, so UT in this
Dialogue: 0,0:23:08.15,0:23:08.61,Default,,0,0,0,,example.
Dialogue: 0,0:23:09.11,0:23:11.95,Default,,0,0,0,,And now if anything else in this
Dialogue: 0,0:23:11.95,0:23:13.64,Default,,0,0,0,,queue fires, for instance source
Dialogue: 0,0:23:13.64,0:23:16.52,Default,,0,0,0,,1, we will be using this flow
Dialogue: 0,0:23:16.52,0:23:18.02,Default,,0,0,0,,for the tree if it doesn't have
Dialogue: 0,0:23:18.02,0:23:19.08,Default,,0,0,0,,its own quality of service
Dialogue: 0,0:23:19.08,0:23:19.63,Default,,0,0,0,,associated.
Dialogue: 0,0:23:21.43,0:23:23.82,Default,,0,0,0,,And source firing is really just
Dialogue: 0,0:23:23.82,0:23:26.12,Default,,0,0,0,,an async executes from the
Dialogue: 0,0:23:26.12,0:23:26.52,Default,,0,0,0,,kernel.
Dialogue: 0,0:23:26.89,0:23:28.58,Default,,0,0,0,,And the same as before happens,
Dialogue: 0,0:23:28.58,0:23:29.81,Default,,0,0,0,,we end queue the source handler
Dialogue: 0,0:23:30.21,0:23:31.37,Default,,0,0,0,,eventually into the mutual
Dialogue: 0,0:23:31.37,0:23:32.66,Default,,0,0,0,,exclusion queue for execution.
Dialogue: 0,0:23:34.18,0:23:36.54,Default,,0,0,0,,For asyncs from user space, your
Dialogue: 0,0:23:36.54,0:23:37.67,Default,,0,0,0,,quality of service is usually
Dialogue: 0,0:23:37.67,0:23:38.71,Default,,0,0,0,,determined from the thread that
Dialogue: 0,0:23:38.71,0:23:39.75,Default,,0,0,0,,called queueu.async.
Dialogue: 0,0:23:39.82,0:23:41.65,Default,,0,0,0,,Now, we have a user initiated
Dialogue: 0,0:23:41.65,0:23:44.70,Default,,0,0,0,,thread that makes item at IN
Dialogue: 0,0:23:44.70,0:23:46.59,Default,,0,0,0,,into the queue and for execution
Dialogue: 0,0:23:46.59,0:23:47.67,Default,,0,0,0,,into E queue eventually.
Dialogue: 0,0:23:48.30,0:23:49.63,Default,,0,0,0,,And now, maybe we have the
Dialogue: 0,0:23:49.63,0:23:50.88,Default,,0,0,0,,source 2 that flies with this
Dialogue: 0,0:23:50.88,0:23:53.09,Default,,0,0,0,,very high priority UI relevant
Dialogue: 0,0:23:53.09,0:23:54.84,Default,,0,0,0,,event that executes its event
Dialogue: 0,0:23:54.84,0:23:56.16,Default,,0,0,0,,handler, and queues its event
Dialogue: 0,0:23:56.16,0:23:57.22,Default,,0,0,0,,handler into EQ.
Dialogue: 0,0:23:58.22,0:23:59.31,Default,,0,0,0,,So, now you'll notice that we
Dialogue: 0,0:23:59.31,0:24:01.08,Default,,0,0,0,,have a priority inversion
Dialogue: 0,0:24:01.08,0:24:01.62,Default,,0,0,0,,situation.
Dialogue: 0,0:24:01.62,0:24:02.76,Default,,0,0,0,,We have three items in queue
Dialogue: 0,0:24:02.81,0:24:04.14,Default,,0,0,0,,with a very high priority item
Dialogue: 0,0:24:04.14,0:24:06.12,Default,,0,0,0,,at the end preceded by some low
Dialogue: 0,0:24:06.16,0:24:06.80,Default,,0,0,0,,priority items.
Dialogue: 0,0:24:07.17,0:24:08.22,Default,,0,0,0,,And these have to execute in
Dialogue: 0,0:24:08.22,0:24:08.51,Default,,0,0,0,,order.
Dialogue: 0,0:24:09.72,0:24:10.69,Default,,0,0,0,,The system resolves this
Dialogue: 0,0:24:10.69,0:24:12.04,Default,,0,0,0,,inversion for you by bringing up
Dialogue: 0,0:24:12.04,0:24:14.06,Default,,0,0,0,,a worker thread at the highest
Dialogue: 0,0:24:14.31,0:24:15.70,Default,,0,0,0,,priority of anything that is
Dialogue: 0,0:24:15.77,0:24:16.47,Default,,0,0,0,,currently in queue.
Dialogue: 0,0:24:16.47,0:24:19.12,Default,,0,0,0,,And it's worth keeping this
Dialogue: 0,0:24:19.12,0:24:20.20,Default,,0,0,0,,little tree on the right hand
Dialogue: 0,0:24:20.20,0:24:21.31,Default,,0,0,0,,side here in mind because it
Dialogue: 0,0:24:21.31,0:24:22.44,Default,,0,0,0,,comes up again later in the
Dialogue: 0,0:24:22.44,0:24:22.78,Default,,0,0,0,,session.
Dialogue: 0,0:24:24.17,0:24:28.38,Default,,0,0,0,,And with that let's move on to
Dialogue: 0,0:24:28.38,0:24:29.67,Default,,0,0,0,,our main topic of the section
Dialogue: 0,0:24:29.67,0:24:31.02,Default,,0,0,0,,which is how to use what we just
Dialogue: 0,0:24:31.02,0:24:32.22,Default,,0,0,0,,learned to express good
Dialogue: 0,0:24:32.22,0:24:34.96,Default,,0,0,0,,granularity of concurrency to
Dialogue: 0,0:24:35.64,0:24:35.73,Default,,0,0,0,,GCD.
Dialogue: 0,0:24:35.96,0:24:36.95,Default,,0,0,0,,Let's go back to our news
Dialogue: 0,0:24:36.95,0:24:37.84,Default,,0,0,0,,application that Daniel
Dialogue: 0,0:24:37.84,0:24:39.53,Default,,0,0,0,,introduced earlier and focus on
Dialogue: 0,0:24:39.53,0:24:40.81,Default,,0,0,0,,the networking subsystem for a
Dialogue: 0,0:24:40.81,0:24:43.63,Default,,0,0,0,,little bit.
Dialogue: 0,0:24:43.63,0:24:45.12,Default,,0,0,0,,In a networking subsystem,
Dialogue: 0,0:24:45.12,0:24:46.06,Default,,0,0,0,,you'll have to monitor some
Dialogue: 0,0:24:46.06,0:24:47.06,Default,,0,0,0,,network connections in the
Dialogue: 0,0:24:47.06,0:24:47.46,Default,,0,0,0,,kernel.
Dialogue: 0,0:24:47.94,0:24:49.25,Default,,0,0,0,,And with GCD you'll do that with
Dialogue: 0,0:24:49.25,0:24:50.26,Default,,0,0,0,,a dispatch source, and the
Dialogue: 0,0:24:50.30,0:24:51.33,Default,,0,0,0,,dispatch queue like you just
Dialogue: 0,0:24:51.33,0:24:51.60,Default,,0,0,0,,saw.
Dialogue: 0,0:24:51.60,0:24:53.43,Default,,0,0,0,,But of course in any networking
Dialogue: 0,0:24:53.43,0:24:54.71,Default,,0,0,0,,subsystem you usually not just
Dialogue: 0,0:24:54.71,0:24:55.75,Default,,0,0,0,,have one network connection,
Dialogue: 0,0:24:55.75,0:24:58.04,Default,,0,0,0,,you'll have many of them and
Dialogue: 0,0:24:58.04,0:24:59.28,Default,,0,0,0,,they will all replicate the same
Dialogue: 0,0:24:59.28,0:24:59.88,Default,,0,0,0,,setup.
Dialogue: 0,0:25:00.72,0:25:01.77,Default,,0,0,0,,So, let's focus on the right
Dialogue: 0,0:25:01.77,0:25:03.04,Default,,0,0,0,,hand side on the three
Dialogue: 0,0:25:03.04,0:25:04.81,Default,,0,0,0,,connections here and see how the
Dialogue: 0,0:25:04.81,0:25:05.31,Default,,0,0,0,,execute.
Dialogue: 0,0:25:06.94,0:25:07.90,Default,,0,0,0,,If the first connection
Dialogue: 0,0:25:07.90,0:25:09.74,Default,,0,0,0,,triggers, just like the same
Dialogue: 0,0:25:09.74,0:25:11.15,Default,,0,0,0,,thing we just saw happens, we
Dialogue: 0,0:25:11.15,0:25:12.50,Default,,0,0,0,,will end queue the event handler
Dialogue: 0,0:25:12.50,0:25:14.21,Default,,0,0,0,,for that source onto its target
Dialogue: 0,0:25:14.21,0:25:14.37,Default,,0,0,0,,queue.
Dialogue: 0,0:25:14.46,0:25:16.21,Default,,0,0,0,,Of course if the other two
Dialogue: 0,0:25:16.39,0:25:17.41,Default,,0,0,0,,connections fire at the same
Dialogue: 0,0:25:17.41,0:25:18.55,Default,,0,0,0,,time, they'll still replicated
Dialogue: 0,0:25:18.55,0:25:19.39,Default,,0,0,0,,and you'll end up with three
Dialogue: 0,0:25:19.39,0:25:21.06,Default,,0,0,0,,queues with an event handler end
Dialogue: 0,0:25:21.06,0:25:21.30,Default,,0,0,0,,queued.
Dialogue: 0,0:25:22.03,0:25:23.52,Default,,0,0,0,,And because you have these three
Dialogue: 0,0:25:23.65,0:25:24.85,Default,,0,0,0,,independent serial queues at the
Dialogue: 0,0:25:24.85,0:25:26.17,Default,,0,0,0,,bottom, you've really asked the
Dialogue: 0,0:25:26.17,0:25:27.61,Default,,0,0,0,,system to provide you with three
Dialogue: 0,0:25:27.61,0:25:28.65,Default,,0,0,0,,independent concurrency
Dialogue: 0,0:25:28.65,0:25:29.24,Default,,0,0,0,,contexts.
Dialogue: 0,0:25:29.68,0:25:30.81,Default,,0,0,0,,If all these become active at
Dialogue: 0,0:25:30.81,0:25:32.85,Default,,0,0,0,,once, the system will oblige and
Dialogue: 0,0:25:32.85,0:25:34.36,Default,,0,0,0,,create three threads for you to
Dialogue: 0,0:25:34.36,0:25:35.52,Default,,0,0,0,,execute the event handlers.
Dialogue: 0,0:25:36.62,0:25:37.62,Default,,0,0,0,,Now, this may be what you
Dialogue: 0,0:25:37.62,0:25:39.02,Default,,0,0,0,,wanted, and maybe exactly what
Dialogue: 0,0:25:39.02,0:25:40.86,Default,,0,0,0,,you were after, but it is quite
Dialogue: 0,0:25:40.86,0:25:42.79,Default,,0,0,0,,common for these event handlers
Dialogue: 0,0:25:42.79,0:25:45.24,Default,,0,0,0,,to be small and only read some
Dialogue: 0,0:25:45.28,0:25:46.58,Default,,0,0,0,,data from the network and in
Dialogue: 0,0:25:46.58,0:25:47.49,Default,,0,0,0,,queue it into a common data
Dialogue: 0,0:25:47.49,0:25:47.88,Default,,0,0,0,,structure.
Dialogue: 0,0:25:48.70,0:25:50.19,Default,,0,0,0,,Additionally, as we saw before,
Dialogue: 0,0:25:50.19,0:25:51.11,Default,,0,0,0,,you don't have just three
Dialogue: 0,0:25:51.11,0:25:52.33,Default,,0,0,0,,connections, you may have many,
Dialogue: 0,0:25:52.33,0:25:53.84,Default,,0,0,0,,many of them if you have a
Dialogue: 0,0:25:53.84,0:25:55.58,Default,,0,0,0,,number of network connections in
Dialogue: 0,0:25:55.68,0:25:56.34,Default,,0,0,0,,your subsystem.
Dialogue: 0,0:25:57.10,0:25:58.25,Default,,0,0,0,,So, this can leave to a
Dialogue: 0,0:25:58.25,0:25:59.44,Default,,0,0,0,,situation where you have this
Dialogue: 0,0:25:59.51,0:26:00.73,Default,,0,0,0,,kind of context switching
Dialogue: 0,0:26:00.73,0:26:02.09,Default,,0,0,0,,pattern, and excessive context
Dialogue: 0,0:26:02.09,0:26:03.01,Default,,0,0,0,,switching that Daniel talked
Dialogue: 0,0:26:03.01,0:26:04.64,Default,,0,0,0,,about where you execute a small
Dialogue: 0,0:26:04.64,0:26:06.20,Default,,0,0,0,,amount of work, context switch
Dialogue: 0,0:26:06.20,0:26:07.18,Default,,0,0,0,,to another thread and do that
Dialogue: 0,0:26:07.18,0:26:08.53,Default,,0,0,0,,again, and again, and again.
Dialogue: 0,0:26:09.15,0:26:10.82,Default,,0,0,0,,So, how can we improve on this
Dialogue: 0,0:26:10.82,0:26:12.47,Default,,0,0,0,,situation in this example here?
Dialogue: 0,0:26:13.29,0:26:15.07,Default,,0,0,0,,We can apply the single mutual
Dialogue: 0,0:26:15.07,0:26:16.33,Default,,0,0,0,,exclusion context idea that we
Dialogue: 0,0:26:16.33,0:26:18.08,Default,,0,0,0,,just talked about by simply
Dialogue: 0,0:26:18.08,0:26:19.43,Default,,0,0,0,,putting in an additional serial
Dialogue: 0,0:26:19.43,0:26:21.06,Default,,0,0,0,,queue at the bottom and forming
Dialogue: 0,0:26:21.06,0:26:23.44,Default,,0,0,0,,a hierarchy, you can get a
Dialogue: 0,0:26:23.44,0:26:24.78,Default,,0,0,0,,single mutual exclusion context
Dialogue: 0,0:26:24.78,0:26:26.01,Default,,0,0,0,,for all of these connections.
Dialogue: 0,0:26:26.76,0:26:27.91,Default,,0,0,0,,And if they fire at the same
Dialogue: 0,0:26:27.91,0:26:29.39,Default,,0,0,0,,time, the same thing as before
Dialogue: 0,0:26:29.39,0:26:30.44,Default,,0,0,0,,will happen, the event handlers
Dialogue: 0,0:26:30.44,0:26:31.45,Default,,0,0,0,,will get end queued onto the
Dialogue: 0,0:26:31.45,0:26:33.05,Default,,0,0,0,,target queues, but because
Dialogue: 0,0:26:33.08,0:26:33.99,Default,,0,0,0,,there's an additional serial
Dialogue: 0,0:26:33.99,0:26:35.53,Default,,0,0,0,,queue at the bottom here, it's a
Dialogue: 0,0:26:35.53,0:26:36.63,Default,,0,0,0,,single thread that will come and
Dialogue: 0,0:26:36.63,0:26:38.31,Default,,0,0,0,,execute them in order instead of
Dialogue: 0,0:26:38.38,0:26:39.52,Default,,0,0,0,,the multiple threads that we had
Dialogue: 0,0:26:39.55,0:26:39.97,Default,,0,0,0,,before.
Dialogue: 0,0:26:41.13,0:26:42.28,Default,,0,0,0,,So, this seems like a really
Dialogue: 0,0:26:42.28,0:26:44.24,Default,,0,0,0,,simple change but it is exactly
Dialogue: 0,0:26:44.24,0:26:45.82,Default,,0,0,0,,the type of change that lead to
Dialogue: 0,0:26:45.82,0:26:46.99,Default,,0,0,0,,the 1.3 X performance
Dialogue: 0,0:26:46.99,0:26:48.36,Default,,0,0,0,,improvement in some of our own
Dialogue: 0,0:26:48.44,0:26:50.71,Default,,0,0,0,,code that Daniel talked about
Dialogue: 0,0:26:50.71,0:26:52.25,Default,,0,0,0,,earlier in the session.
Dialogue: 0,0:26:53.26,0:26:57.44,Default,,0,0,0,,So, this is one example of how
Dialogue: 0,0:26:57.44,0:26:58.96,Default,,0,0,0,,we can avoid the problematic
Dialogue: 0,0:26:58.96,0:27:00.19,Default,,0,0,0,,pattern of repeatedly switching
Dialogue: 0,0:27:00.19,0:27:01.51,Default,,0,0,0,,between independent operations.
Dialogue: 0,0:27:02.43,0:27:03.62,Default,,0,0,0,,But it really comes under the
Dialogue: 0,0:27:03.62,0:27:04.84,Default,,0,0,0,,general heading of avoiding
Dialogue: 0,0:27:05.15,0:27:06.70,Default,,0,0,0,,unwanted and unbounded
Dialogue: 0,0:27:06.70,0:27:08.04,Default,,0,0,0,,concurrency in application.
Dialogue: 0,0:27:09.35,0:27:10.75,Default,,0,0,0,,One way you can get that is by
Dialogue: 0,0:27:10.75,0:27:11.92,Default,,0,0,0,,having many queues becoming
Dialogue: 0,0:27:11.92,0:27:12.81,Default,,0,0,0,,active all at once.
Dialogue: 0,0:27:13.37,0:27:15.20,Default,,0,0,0,,And one example of this is that
Dialogue: 0,0:27:15.20,0:27:16.37,Default,,0,0,0,,independent requiring source
Dialogue: 0,0:27:16.40,0:27:17.91,Default,,0,0,0,,pattern that we just say.
Dialogue: 0,0:27:18.24,0:27:19.20,Default,,0,0,0,,You can also get this if you
Dialogue: 0,0:27:19.20,0:27:20.36,Default,,0,0,0,,have independent or object
Dialogue: 0,0:27:20.48,0:27:21.04,Default,,0,0,0,,queues.
Dialogue: 0,0:27:21.56,0:27:22.81,Default,,0,0,0,,If many objects in your
Dialogue: 0,0:27:22.81,0:27:23.60,Default,,0,0,0,,application have their own
Dialogue: 0,0:27:23.60,0:27:24.87,Default,,0,0,0,,serial queues and you put
Dialogue: 0,0:27:24.87,0:27:26.08,Default,,0,0,0,,asynchronous work into them at
Dialogue: 0,0:27:26.08,0:27:27.28,Default,,0,0,0,,the same time you can get
Dialogue: 0,0:27:27.28,0:27:29.20,Default,,0,0,0,,exactly the same phenomenon.
Dialogue: 0,0:27:31.05,0:27:32.09,Default,,0,0,0,,You can also see this if you
Dialogue: 0,0:27:32.09,0:27:33.48,Default,,0,0,0,,have many work items submitted
Dialogue: 0,0:27:33.48,0:27:34.73,Default,,0,0,0,,to the global concurrent queue
Dialogue: 0,0:27:34.73,0:27:35.39,Default,,0,0,0,,at the same time.
Dialogue: 0,0:27:36.41,0:27:37.57,Default,,0,0,0,,In particular if there's work
Dialogue: 0,0:27:37.57,0:27:38.18,Default,,0,0,0,,items block.
Dialogue: 0,0:27:38.73,0:27:40.28,Default,,0,0,0,,The way the global concurrent
Dialogue: 0,0:27:40.28,0:27:41.50,Default,,0,0,0,,queue works is that it corrects
Dialogue: 0,0:27:41.50,0:27:42.97,Default,,0,0,0,,more threads when existing
Dialogue: 0,0:27:42.97,0:27:44.32,Default,,0,0,0,,threads block to give you a
Dialogue: 0,0:27:44.32,0:27:45.24,Default,,0,0,0,,continuing good level of
Dialogue: 0,0:27:45.24,0:27:46.57,Default,,0,0,0,,concurrency in your application.
Dialogue: 0,0:27:47.03,0:27:48.28,Default,,0,0,0,,But if those threads then block
Dialogue: 0,0:27:48.28,0:27:50.10,Default,,0,0,0,,again, you can get something
Dialogue: 0,0:27:50.35,0:27:51.28,Default,,0,0,0,,that we call the thread
Dialogue: 0,0:27:51.28,0:27:51.84,Default,,0,0,0,,explosion.
Dialogue: 0,0:27:52.88,0:27:53.99,Default,,0,0,0,,This is a topic that we went
Dialogue: 0,0:27:53.99,0:27:55.20,Default,,0,0,0,,into some detail in the
Dialogue: 0,0:27:55.20,0:27:56.26,Default,,0,0,0,,"Building Responses and
Dialogue: 0,0:27:56.26,0:27:57.19,Default,,0,0,0,,Efficient Apps with GCD" in
Dialogue: 0,0:27:57.19,0:27:59.15,Default,,0,0,0,,2015.
Dialogue: 0,0:27:59.64,0:28:01.52,Default,,0,0,0,,So, if this sounds new to you,
Dialogue: 0,0:28:01.57,0:28:02.51,Default,,0,0,0,,I'd encourage you to go and
Dialogue: 0,0:28:02.51,0:28:03.22,Default,,0,0,0,,watch that session.
Dialogue: 0,0:28:04.83,0:28:06.10,Default,,0,0,0,,So, how do you choose the right
Dialogue: 0,0:28:06.10,0:28:07.18,Default,,0,0,0,,amount of concurrency in your
Dialogue: 0,0:28:07.18,0:28:08.32,Default,,0,0,0,,application to avoid these
Dialogue: 0,0:28:08.32,0:28:09.12,Default,,0,0,0,,problematic patterns?
Dialogue: 0,0:28:10.29,0:28:11.61,Default,,0,0,0,,One idea that we've recommended
Dialogue: 0,0:28:11.61,0:28:13.56,Default,,0,0,0,,to you in the past is to use one
Dialogue: 0,0:28:13.56,0:28:14.54,Default,,0,0,0,,queue for subsystem.
Dialogue: 0,0:28:15.82,0:28:17.12,Default,,0,0,0,,So, here back in our news
Dialogue: 0,0:28:17.12,0:28:18.72,Default,,0,0,0,,application, we already have one
Dialogue: 0,0:28:18.72,0:28:19.82,Default,,0,0,0,,queue for the user interface,
Dialogue: 0,0:28:19.82,0:28:21.09,Default,,0,0,0,,the main queue and we could
Dialogue: 0,0:28:21.09,0:28:22.36,Default,,0,0,0,,choose one queue for the
Dialogue: 0,0:28:22.36,0:28:24.08,Default,,0,0,0,,networking and 1 queue for the
Dialogue: 0,0:28:24.08,0:28:25.78,Default,,0,0,0,,database subsystem in addition.
Dialogue: 0,0:28:27.02,0:28:28.67,Default,,0,0,0,,But what we've learned today a
Dialogue: 0,0:28:28.67,0:28:29.68,Default,,0,0,0,,more general way to think of
Dialogue: 0,0:28:29.74,0:28:31.04,Default,,0,0,0,,this is really to use one queue
Dialogue: 0,0:28:31.04,0:28:32.34,Default,,0,0,0,,hierarchy per subsystem.
Dialogue: 0,0:28:33.66,0:28:37.07,Default,,0,0,0,,This gives you a mutual
Dialogue: 0,0:28:37.07,0:28:38.00,Default,,0,0,0,,exclusion context for the
Dialogue: 0,0:28:38.00,0:28:39.81,Default,,0,0,0,,subsystem, and you can leave the
Dialogue: 0,0:28:39.81,0:28:41.52,Default,,0,0,0,,rest of the queue event sub
Dialogue: 0,0:28:41.52,0:28:42.94,Default,,0,0,0,,structing and subsystem alone
Dialogue: 0,0:28:43.31,0:28:45.11,Default,,0,0,0,,and just target that network
Dialogue: 0,0:28:45.25,0:28:47.41,Default,,0,0,0,,queue or database queue that
Dialogue: 0,0:28:47.41,0:28:49.49,Default,,0,0,0,,underlies the bottom of your
Dialogue: 0,0:28:49.49,0:28:50.41,Default,,0,0,0,,queue hierarchies.
Dialogue: 0,0:28:53.30,0:28:56.76,Default,,0,0,0,,But, that may be a bit too
Dialogue: 0,0:28:56.76,0:28:57.76,Default,,0,0,0,,simplistic a pattern for a
Dialogue: 0,0:28:57.76,0:28:59.23,Default,,0,0,0,,complex application or a complex
Dialogue: 0,0:28:59.23,0:28:59.77,Default,,0,0,0,,subsystem.
Dialogue: 0,0:29:00.18,0:29:01.31,Default,,0,0,0,,The main thing that is important
Dialogue: 0,0:29:01.31,0:29:02.48,Default,,0,0,0,,here is to have a fixed number
Dialogue: 0,0:29:02.48,0:29:03.53,Default,,0,0,0,,of serial queue hierarchies in
Dialogue: 0,0:29:03.53,0:29:04.15,Default,,0,0,0,,your application.
Dialogue: 0,0:29:04.68,0:29:05.71,Default,,0,0,0,,So, it may make sense to have
Dialogue: 0,0:29:05.71,0:29:07.24,Default,,0,0,0,,additional queue hierarchies for
Dialogue: 0,0:29:07.24,0:29:08.65,Default,,0,0,0,,a complicated subsystem, say a
Dialogue: 0,0:29:08.65,0:29:10.29,Default,,0,0,0,,secondary one for slower work,
Dialogue: 0,0:29:10.29,0:29:11.52,Default,,0,0,0,,or larger work items, so that
Dialogue: 0,0:29:11.56,0:29:13.29,Default,,0,0,0,,the first one, the primary one
Dialogue: 0,0:29:13.29,0:29:14.28,Default,,0,0,0,,can keep the subsystem
Dialogue: 0,0:29:14.28,0:29:15.80,Default,,0,0,0,,responsive to requests coming in
Dialogue: 0,0:29:15.80,0:29:16.37,Default,,0,0,0,,from outside.
Dialogue: 0,0:29:17.40,0:29:19.60,Default,,0,0,0,,Another thing that's important
Dialogue: 0,0:29:19.60,0:29:20.98,Default,,0,0,0,,to think about in this context
Dialogue: 0,0:29:21.43,0:29:23.17,Default,,0,0,0,,is the granularity of the work
Dialogue: 0,0:29:23.31,0:29:24.66,Default,,0,0,0,,submitted to those subsystems.
Dialogue: 0,0:29:25.86,0:29:26.94,Default,,0,0,0,,You want to use fairly large
Dialogue: 0,0:29:26.94,0:29:28.28,Default,,0,0,0,,work items when you move between
Dialogue: 0,0:29:28.28,0:29:30.15,Default,,0,0,0,,subsystems to get a picture like
Dialogue: 0,0:29:30.15,0:29:31.78,Default,,0,0,0,,what we say earlier in the
Dialogue: 0,0:29:31.78,0:29:34.18,Default,,0,0,0,,session, where the CP is able to
Dialogue: 0,0:29:34.18,0:29:35.54,Default,,0,0,0,,execute your subsystem for long
Dialogue: 0,0:29:35.54,0:29:37.73,Default,,0,0,0,,enough to reach an efficient
Dialogue: 0,0:29:37.73,0:29:38.40,Default,,0,0,0,,performance state.
Dialogue: 0,0:29:39.99,0:29:40.79,Default,,0,0,0,,Once you're inside the
Dialogue: 0,0:29:40.79,0:29:41.96,Default,,0,0,0,,subsystem, say the networking
Dialogue: 0,0:29:41.96,0:29:42.76,Default,,0,0,0,,subsystem here.
Dialogue: 0,0:29:43.25,0:29:44.74,Default,,0,0,0,,It may make sense to subdivide
Dialogue: 0,0:29:44.99,0:29:47.68,Default,,0,0,0,,into smaller block items and
Dialogue: 0,0:29:47.68,0:29:49.17,Default,,0,0,0,,have a finer granularity to
Dialogue: 0,0:29:49.17,0:29:50.33,Default,,0,0,0,,improve the responsiveness of
Dialogue: 0,0:29:50.33,0:29:51.16,Default,,0,0,0,,that subsystem.
Dialogue: 0,0:29:51.61,0:29:52.73,Default,,0,0,0,,For instance, you can to that by
Dialogue: 0,0:29:52.73,0:29:53.95,Default,,0,0,0,,splitting up your work and
Dialogue: 0,0:29:53.95,0:29:55.96,Default,,0,0,0,,re-asyncing to another queue in
Dialogue: 0,0:29:55.96,0:29:56.75,Default,,0,0,0,,your queue hierarchy.
Dialogue: 0,0:29:56.75,0:29:57.65,Default,,0,0,0,,And that doesn't introduce a
Dialogue: 0,0:29:57.65,0:29:58.69,Default,,0,0,0,,context switch because you're
Dialogue: 0,0:29:58.69,0:30:02.93,Default,,0,0,0,,already in that one subsystem.
Dialogue: 0,0:30:03.43,0:30:04.71,Default,,0,0,0,,So, in summary, what have we
Dialogue: 0,0:30:04.71,0:30:05.68,Default,,0,0,0,,looked at in this section?
Dialogue: 0,0:30:06.96,0:30:08.33,Default,,0,0,0,,We saw how we can organize
Dialogue: 0,0:30:08.33,0:30:09.96,Default,,0,0,0,,queues and sources into serial
Dialogue: 0,0:30:09.96,0:30:10.73,Default,,0,0,0,,queue hierarchies.
Dialogue: 0,0:30:11.25,0:30:12.95,Default,,0,0,0,,How to use a fixed number of the
Dialogue: 0,0:30:12.95,0:30:14.53,Default,,0,0,0,,queue hierarchies to give GCD a
Dialogue: 0,0:30:14.53,0:30:16.10,Default,,0,0,0,,good granularity of concurrency.
Dialogue: 0,0:30:16.68,0:30:18.80,Default,,0,0,0,,And how to size your work items
Dialogue: 0,0:30:18.80,0:30:20.41,Default,,0,0,0,,appropriately earlier in the
Dialogue: 0,0:30:20.41,0:30:22.18,Default,,0,0,0,,section for parallel work and
Dialogue: 0,0:30:22.18,0:30:24.81,Default,,0,0,0,,here for concurrent work inside
Dialogue: 0,0:30:24.81,0:30:26.35,Default,,0,0,0,,the subsystem as well as between
Dialogue: 0,0:30:26.35,0:30:26.92,Default,,0,0,0,,subsystems.
Dialogue: 0,0:30:27.56,0:30:29.19,Default,,0,0,0,,And with this, I'll hand it over
Dialogue: 0,0:30:29.19,0:30:30.87,Default,,0,0,0,,to Pierre to dive into how we
Dialogue: 0,0:30:30.87,0:30:32.75,Default,,0,0,0,,have improved GCD to always
Dialogue: 0,0:30:32.75,0:30:33.92,Default,,0,0,0,,execute the queue hierarchy on a
Dialogue: 0,0:30:33.92,0:30:35.22,Default,,0,0,0,,single thread and how you can
Dialogue: 0,0:30:35.22,0:30:36.93,Default,,0,0,0,,modernize your code to take
Dialogue: 0,0:30:36.93,0:30:37.69,Default,,0,0,0,,advantage of this.
Dialogue: 0,0:30:38.52,0:30:43.88,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:30:44.38,0:30:45.01,Default,,0,0,0,,>> Thank you Daniel.
Dialogue: 0,0:30:46.51,0:30:49.04,Default,,0,0,0,,So, indeed we have completely
Dialogue: 0,0:30:49.04,0:30:51.08,Default,,0,0,0,,reinvented the internals of GCD
Dialogue: 0,0:30:51.08,0:30:52.83,Default,,0,0,0,,this year to eliminate some
Dialogue: 0,0:30:52.83,0:30:54.94,Default,,0,0,0,,unwanted context switches and
Dialogue: 0,0:30:54.94,0:30:56.84,Default,,0,0,0,,execute single queue hierarchies
Dialogue: 0,0:30:56.84,0:30:58.27,Default,,0,0,0,,like the ones that Daniel showed
Dialogue: 0,0:30:58.69,0:30:59.46,Default,,0,0,0,,on the single thread.
Dialogue: 0,0:31:00.48,0:31:02.70,Default,,0,0,0,,To do so we have created a new
Dialogue: 0,0:31:03.16,0:31:04.48,Default,,0,0,0,,kind of concepts that we call
Dialogue: 0,0:31:04.79,0:31:06.63,Default,,0,0,0,,Unified Queue Identity that let
Dialogue: 0,0:31:06.63,0:31:07.30,Default,,0,0,0,,us do that.
Dialogue: 0,0:31:07.30,0:31:09.13,Default,,0,0,0,,And we will walk you through how
Dialogue: 0,0:31:09.90,0:31:10.72,Default,,0,0,0,,it works.
Dialogue: 0,0:31:11.49,0:31:16.05,Default,,0,0,0,,So, really this part of the talk
Dialogue: 0,0:31:16.05,0:31:17.63,Default,,0,0,0,,will focus on a single queue
Dialogue: 0,0:31:17.63,0:31:19.39,Default,,0,0,0,,hierarchy, like the ones Daniel
Dialogue: 0,0:31:19.39,0:31:19.96,Default,,0,0,0,,showed earlier.
Dialogue: 0,0:31:20.52,0:31:21.70,Default,,0,0,0,,However, we'll work on
Dialogue: 0,0:31:21.70,0:31:23.96,Default,,0,0,0,,simplified ones with the sources
Dialogue: 0,0:31:23.96,0:31:25.95,Default,,0,0,0,,at the top, and your mutual
Dialogue: 0,0:31:25.95,0:31:27.90,Default,,0,0,0,,exclusion context at the bottom.
Dialogue: 0,0:31:27.90,0:31:28.98,Default,,0,0,0,,The internal GCD notes are not
Dialogue: 0,0:31:28.98,0:31:31.97,Default,,0,0,0,,quite given for that part of the
Dialogue: 0,0:31:33.24,0:31:33.35,Default,,0,0,0,,talk.
Dialogue: 0,0:31:33.68,0:31:35.44,Default,,0,0,0,,So, when you create an
Dialogue: 0,0:31:35.44,0:31:36.20,Default,,0,0,0,,[inaudible] context you use to
Dialogue: 0,0:31:36.20,0:31:38.88,Default,,0,0,0,,dispatch queue constructor, that
Dialogue: 0,0:31:38.91,0:31:40.27,Default,,0,0,0,,creates just a piece of memory
Dialogue: 0,0:31:40.27,0:31:41.43,Default,,0,0,0,,in your application that is a
Dialogue: 0,0:31:41.43,0:31:41.71,Default,,0,0,0,,note.
Dialogue: 0,0:31:42.31,0:31:43.48,Default,,0,0,0,,And one of the first things that
Dialogue: 0,0:31:43.48,0:31:45.79,Default,,0,0,0,,you may do is to dispatch recent
Dialogue: 0,0:31:45.79,0:31:47.64,Default,,0,0,0,,coded items to it.
Dialogue: 0,0:31:48.15,0:31:49.50,Default,,0,0,0,,So, you will have code in your
Dialogue: 0,0:31:49.50,0:31:51.95,Default,,0,0,0,,application that will here and
Dialogue: 0,0:31:51.95,0:31:53.95,Default,,0,0,0,,queue a [inaudible] on the
Dialogue: 0,0:31:53.95,0:31:56.98,Default,,0,0,0,,queue, when that happened before
Dialogue: 0,0:31:56.98,0:31:58.84,Default,,0,0,0,,we used to request a thread
Dialogue: 0,0:31:58.84,0:32:01.49,Default,,0,0,0,,anonymously to the system.
Dialogue: 0,0:32:01.67,0:32:03.85,Default,,0,0,0,,And the resolution of what that
Dialogue: 0,0:32:03.85,0:32:05.69,Default,,0,0,0,,was meant to do happens late
Dialogue: 0,0:32:05.78,0:32:06.69,Default,,0,0,0,,inside your application.
Dialogue: 0,0:32:08.25,0:32:10.00,Default,,0,0,0,,In this case, we change that and
Dialogue: 0,0:32:10.00,0:32:11.84,Default,,0,0,0,,what we do is that we create our
Dialogue: 0,0:32:11.88,0:32:13.68,Default,,0,0,0,,counter object, the Unified
Dialogue: 0,0:32:13.68,0:32:15.54,Default,,0,0,0,,Queue Identity that is tied to
Dialogue: 0,0:32:15.54,0:32:17.72,Default,,0,0,0,,your queue and is exactly meant
Dialogue: 0,0:32:17.72,0:32:18.81,Default,,0,0,0,,to represent your queue in the
Dialogue: 0,0:32:18.81,0:32:19.16,Default,,0,0,0,,kernel.
Dialogue: 0,0:32:20.08,0:32:21.54,Default,,0,0,0,,We can tie that object with the
Dialogue: 0,0:32:21.54,0:32:23.03,Default,,0,0,0,,required hierarchy to execute to
Dialogue: 0,0:32:23.03,0:32:24.68,Default,,0,0,0,,work, which here is backup.
Dialogue: 0,0:32:25.28,0:32:27.28,Default,,0,0,0,,And that causes the system to
Dialogue: 0,0:32:27.28,0:32:28.04,Default,,0,0,0,,ask for a thread.
Dialogue: 0,0:32:28.86,0:32:31.07,Default,,0,0,0,,The thread request, that dotted
Dialogue: 0,0:32:31.07,0:32:33.66,Default,,0,0,0,,line on the slide, may not be
Dialogue: 0,0:32:33.66,0:32:35.89,Default,,0,0,0,,fulfilled for some time, because
Dialogue: 0,0:32:35.89,0:32:37.00,Default,,0,0,0,,here that's a background thread,
Dialogue: 0,0:32:37.24,0:32:38.51,Default,,0,0,0,,and maybe the system is loaded
Dialogue: 0,0:32:38.51,0:32:40.05,Default,,0,0,0,,enough that it's not even worth
Dialogue: 0,0:32:40.05,0:32:44.61,Default,,0,0,0,,giving you a thread for it.
Dialogue: 0,0:32:44.61,0:32:45.93,Default,,0,0,0,,Later on, some other path of
Dialogue: 0,0:32:46.09,0:32:49.18,Default,,0,0,0,,your application may actually
Dialogue: 0,0:32:49.18,0:32:50.73,Default,,0,0,0,,try to en queue more work.
Dialogue: 0,0:32:50.73,0:32:51.22,Default,,0,0,0,,Here a UT [inaudible] that is
Dialogue: 0,0:32:51.22,0:32:53.53,Default,,0,0,0,,slightly higher priority.
Dialogue: 0,0:32:54.00,0:32:55.96,Default,,0,0,0,,We can use the queue identity,
Dialogue: 0,0:32:56.09,0:32:57.50,Default,,0,0,0,,the unified identity in the
Dialogue: 0,0:32:57.50,0:32:58.59,Default,,0,0,0,,catalog to look and solve the
Dialogue: 0,0:32:58.59,0:32:59.87,Default,,0,0,0,,priority inversion, and elevate
Dialogue: 0,0:32:59.87,0:33:00.92,Default,,0,0,0,,the priority of that thread
Dialogue: 0,0:33:00.92,0:33:01.43,Default,,0,0,0,,request.
Dialogue: 0,0:33:01.91,0:33:03.20,Default,,0,0,0,,It may be that is the small
Dialogue: 0,0:33:03.20,0:33:04.85,Default,,0,0,0,,nudge that the system needed to
Dialogue: 0,0:33:04.85,0:33:06.21,Default,,0,0,0,,actually give you a thread here
Dialogue: 0,0:33:06.21,0:33:07.74,Default,,0,0,0,,to execute your work.
Dialogue: 0,0:33:08.02,0:33:09.12,Default,,0,0,0,,But this thread is in the
Dialogue: 0,0:33:09.12,0:33:10.41,Default,,0,0,0,,scheduler queues not yet on
Dialogue: 0,0:33:10.41,0:33:10.63,Default,,0,0,0,,call.
Dialogue: 0,0:33:10.63,0:33:11.36,Default,,0,0,0,,Not executing.
Dialogue: 0,0:33:11.95,0:33:13.33,Default,,0,0,0,,And the reason why is because
Dialogue: 0,0:33:13.33,0:33:14.46,Default,,0,0,0,,there is another thread in your
Dialogue: 0,0:33:14.46,0:33:15.68,Default,,0,0,0,,application that is interacting
Dialogue: 0,0:33:15.68,0:33:16.75,Default,,0,0,0,,with a queue and working
Dialogue: 0,0:33:16.75,0:33:18.05,Default,,0,0,0,,synchronously at a higher
Dialogue: 0,0:33:18.05,0:33:19.76,Default,,0,0,0,,priority, even, usually shaded.
Dialogue: 0,0:33:20.29,0:33:23.06,Default,,0,0,0,,Now that we have that Unified
Dialogue: 0,0:33:23.06,0:33:24.49,Default,,0,0,0,,Queue Identity, we can actually
Dialogue: 0,0:33:24.74,0:33:26.35,Default,,0,0,0,,since that thread has to block
Dialogue: 0,0:33:26.57,0:33:27.83,Default,,0,0,0,,to en queue the placeholder that
Dialogue: 0,0:33:27.83,0:33:29.72,Default,,0,0,0,,Daniel told you about a bit
Dialogue: 0,0:33:29.72,0:33:31.96,Default,,0,0,0,,earlier, we can block the
Dialogue: 0,0:33:31.96,0:33:33.73,Default,,0,0,0,,synchronous execution of that
Dialogue: 0,0:33:33.84,0:33:35.20,Default,,0,0,0,,thread on the Unified Queue
Dialogue: 0,0:33:35.20,0:33:35.68,Default,,0,0,0,,Identity.
Dialogue: 0,0:33:35.68,0:33:36.82,Default,,0,0,0,,The same on that we use for
Dialogue: 0,0:33:36.82,0:33:38.23,Default,,0,0,0,,asynchronous work, [inaudible].
Dialogue: 0,0:33:38.23,0:33:41.05,Default,,0,0,0,,But now that we unified the
Dialogue: 0,0:33:41.05,0:33:43.06,Default,,0,0,0,,asynchronous and the synchronous
Dialogue: 0,0:33:43.27,0:33:44.79,Default,,0,0,0,,part of the queue in a single
Dialogue: 0,0:33:44.79,0:33:46.39,Default,,0,0,0,,identity, we can apply an
Dialogue: 0,0:33:46.87,0:33:48.57,Default,,0,0,0,,optimization and delicately
Dialogue: 0,0:33:48.57,0:33:49.69,Default,,0,0,0,,switch the thread that's
Dialogue: 0,0:33:49.69,0:33:51.27,Default,,0,0,0,,blocking you by passing the
Dialogue: 0,0:33:51.27,0:33:52.54,Default,,0,0,0,,scheduler queue and registering
Dialogue: 0,0:33:52.54,0:33:54.25,Default,,0,0,0,,the queue delays that Daniel
Dialogue: 0,0:33:54.41,0:33:55.94,Default,,0,0,0,,introduced while talking about
Dialogue: 0,0:33:55.94,0:33:56.90,Default,,0,0,0,,the scheduler very early.
Dialogue: 0,0:33:58.02,0:33:59.83,Default,,0,0,0,,So, that's how the unified queue
Dialogue: 0,0:33:59.83,0:34:00.99,Default,,0,0,0,,identity is used for for
Dialogue: 0,0:34:00.99,0:34:02.23,Default,,0,0,0,,asynchronous and synchronous
Dialogue: 0,0:34:02.23,0:34:02.85,Default,,0,0,0,,work items.
Dialogue: 0,0:34:05.40,0:34:07.26,Default,,0,0,0,,Now, how did we use that for
Dialogue: 0,0:34:07.26,0:34:07.82,Default,,0,0,0,,events?
Dialogue: 0,0:34:08.02,0:34:08.91,Default,,0,0,0,,Why is it useful?
Dialogue: 0,0:34:09.85,0:34:11.61,Default,,0,0,0,,So, that is the small tree that
Dialogue: 0,0:34:11.61,0:34:13.77,Default,,0,0,0,,we've been using so far, let's
Dialogue: 0,0:34:13.77,0:34:15.51,Default,,0,0,0,,look at the creation of these
Dialogue: 0,0:34:15.51,0:34:16.07,Default,,0,0,0,,sources.
Dialogue: 0,0:34:17.36,0:34:18.52,Default,,0,0,0,,When you create the source using
Dialogue: 0,0:34:18.52,0:34:20.72,Default,,0,0,0,,the makeResource factory button,
Dialogue: 0,0:34:20.72,0:34:22.48,Default,,0,0,0,,you set a bunch of events, of
Dialogue: 0,0:34:22.48,0:34:23.40,Default,,0,0,0,,favorite handlers and
Dialogue: 0,0:34:23.40,0:34:24.04,Default,,0,0,0,,properties.
Dialogue: 0,0:34:24.52,0:34:25.54,Default,,0,0,0,,But what is really interesting
Dialogue: 0,0:34:25.54,0:34:26.58,Default,,0,0,0,,is what happens when you
Dialogue: 0,0:34:26.58,0:34:28.39,Default,,0,0,0,,activating the object.
Dialogue: 0,0:34:29.34,0:34:31.58,Default,,0,0,0,,This is actually at that moment,
Dialogue: 0,0:34:31.97,0:34:33.76,Default,,0,0,0,,that we will notice that utility
Dialogue: 0,0:34:33.89,0:34:35.55,Default,,0,0,0,,are QOS, at which the handler
Dialogue: 0,0:34:35.55,0:34:36.72,Default,,0,0,0,,for your source will always
Dialogue: 0,0:34:36.72,0:34:37.27,Default,,0,0,0,,execute.
Dialogue: 0,0:34:37.50,0:34:38.81,Default,,0,0,0,,Because it's inherited from your
Dialogue: 0,0:34:38.81,0:34:39.41,Default,,0,0,0,,queue hierarchy.
Dialogue: 0,0:34:39.72,0:34:42.10,Default,,0,0,0,,We will also know now, with the
Dialogue: 0,0:34:42.10,0:34:44.80,Default,,0,0,0,,new system, that the handler
Dialogue: 0,0:34:44.80,0:34:46.46,Default,,0,0,0,,will eventually execute that in
Dialogue: 0,0:34:46.58,0:34:49.40,Default,,0,0,0,,queue execution mature exclusion
Dialogue: 0,0:34:49.40,0:34:49.94,Default,,0,0,0,,context.
Dialogue: 0,0:34:50.82,0:34:53.00,Default,,0,0,0,,And will now register the source
Dialogue: 0,0:34:53.00,0:34:55.16,Default,,0,0,0,,at front with the sync unified
Dialogue: 0,0:34:55.16,0:34:57.14,Default,,0,0,0,,identity that I just talked
Dialogue: 0,0:34:57.14,0:34:59.30,Default,,0,0,0,,about a bit earlier.
Dialogue: 0,0:34:59.61,0:35:01.80,Default,,0,0,0,,If we look at the higher UI QOS
Dialogue: 0,0:35:02.02,0:35:04.51,Default,,0,0,0,,source that we have on the tree,
Dialogue: 0,0:35:05.15,0:35:06.70,Default,,0,0,0,,the way we are treated is very
Dialogue: 0,0:35:06.70,0:35:09.28,Default,,0,0,0,,similar of the first one, except
Dialogue: 0,0:35:09.28,0:35:10.53,Default,,0,0,0,,that when you're setting the
Dialogue: 0,0:35:10.59,0:35:12.75,Default,,0,0,0,,handler here you're specifying
Dialogue: 0,0:35:12.75,0:35:14.41,Default,,0,0,0,,the QOS that you actually want.
Dialogue: 0,0:35:15.37,0:35:16.58,Default,,0,0,0,,And again, what's interesting is
Dialogue: 0,0:35:16.58,0:35:18.13,Default,,0,0,0,,what happens at activation.
Dialogue: 0,0:35:18.13,0:35:19.89,Default,,0,0,0,,That is when we the snapshot and
Dialogue: 0,0:35:19.89,0:35:21.94,Default,,0,0,0,,like before when we got the
Dialogue: 0,0:35:21.94,0:35:24.15,Default,,0,0,0,,utility QOS from your hierarchy,
Dialogue: 0,0:35:24.44,0:35:25.88,Default,,0,0,0,,here we get it from your hint.
Dialogue: 0,0:35:26.80,0:35:27.95,Default,,0,0,0,,We still recall the fact that
Dialogue: 0,0:35:27.99,0:35:29.61,Default,,0,0,0,,they will execute both the
Dialogue: 0,0:35:29.61,0:35:31.30,Default,,0,0,0,,sources on the same execution
Dialogue: 0,0:35:31.30,0:35:31.84,Default,,0,0,0,,context.
Dialogue: 0,0:35:31.84,0:35:33.38,Default,,0,0,0,,And will register that second
Dialogue: 0,0:35:33.38,0:35:34.49,Default,,0,0,0,,source up front again, which
Dialogue: 0,0:35:34.71,0:35:36.51,Default,,0,0,0,,with some unified identity in
Dialogue: 0,0:35:37.10,0:35:39.37,Default,,0,0,0,,the kernel.
Dialogue: 0,0:35:39.51,0:35:41.75,Default,,0,0,0,,So, really what we're trying to
Dialogue: 0,0:35:41.75,0:35:43.87,Default,,0,0,0,,solve with that quite complex
Dialogue: 0,0:35:43.96,0:35:46.45,Default,,0,0,0,,identity is a problem that we
Dialogue: 0,0:35:46.45,0:35:48.14,Default,,0,0,0,,had in previous phases of the
Dialogue: 0,0:35:48.21,0:35:51.32,Default,,0,0,0,,OS, where related operations
Dialogue: 0,0:35:51.32,0:35:52.85,Default,,0,0,0,,would actually bounce off the
Dialogue: 0,0:35:52.85,0:35:53.47,Default,,0,0,0,,old threads.
Dialogue: 0,0:35:53.61,0:35:54.77,Default,,0,0,0,,Let's look at how it used to
Dialogue: 0,0:35:54.77,0:35:55.12,Default,,0,0,0,,work.
Dialogue: 0,0:35:56.09,0:35:58.44,Default,,0,0,0,,So, remember that's our queue
Dialogue: 0,0:35:58.44,0:36:01.33,Default,,0,0,0,,hierarchy, and let's bring up
Dialogue: 0,0:36:01.41,0:36:02.54,Default,,0,0,0,,the timeline that you've seen a
Dialogue: 0,0:36:02.54,0:36:05.15,Default,,0,0,0,,bunch of times now in our talk.
Dialogue: 0,0:36:05.28,0:36:07.35,Default,,0,0,0,,At the top, the CPU, but now
Dialogue: 0,0:36:07.35,0:36:08.90,Default,,0,0,0,,there is a new tack, the
Dialogue: 0,0:36:08.90,0:36:10.76,Default,,0,0,0,,exclusion queue card that will
Dialogue: 0,0:36:10.76,0:36:12.59,Default,,0,0,0,,show you what is executing at
Dialogue: 0,0:36:12.59,0:36:15.70,Default,,0,0,0,,any given moment on that queue.
Dialogue: 0,0:36:15.93,0:36:17.51,Default,,0,0,0,,So, that's really how the
Dialogue: 0,0:36:17.56,0:36:19.37,Default,,0,0,0,,runtime used to work before this
Dialogue: 0,0:36:19.37,0:36:22.04,Default,,0,0,0,,phase in macOS Sierra and iOS
Dialogue: 0,0:36:22.04,0:36:22.31,Default,,0,0,0,,10.
Dialogue: 0,0:36:22.62,0:36:24.62,Default,,0,0,0,,So, let's look at what happens
Dialogue: 0,0:36:24.62,0:36:25.97,Default,,0,0,0,,if the first source fails.
Dialogue: 0,0:36:26.63,0:36:28.29,Default,,0,0,0,,Before, like I said thread
Dialogue: 0,0:36:28.29,0:36:29.40,Default,,0,0,0,,requests were anonymous.
Dialogue: 0,0:36:29.40,0:36:30.65,Default,,0,0,0,,We would ask for an anonymous
Dialogue: 0,0:36:30.65,0:36:31.85,Default,,0,0,0,,thread, deliver the event on the
Dialogue: 0,0:36:31.85,0:36:33.66,Default,,0,0,0,,thread and then we would look at
Dialogue: 0,0:36:33.66,0:36:33.98,Default,,0,0,0,,the event.
Dialogue: 0,0:36:34.86,0:36:36.71,Default,,0,0,0,,And when we look at the event
Dialogue: 0,0:36:36.71,0:36:38.44,Default,,0,0,0,,inside your application, that is
Dialogue: 0,0:36:38.44,0:36:40.00,Default,,0,0,0,,only then that we realize that
Dialogue: 0,0:36:40.00,0:36:41.97,Default,,0,0,0,,this event is meant to run on a
Dialogue: 0,0:36:41.97,0:36:42.21,Default,,0,0,0,,queue.
Dialogue: 0,0:36:42.21,0:36:43.88,Default,,0,0,0,,We would then queue the event
Dialogue: 0,0:36:43.88,0:36:44.28,Default,,0,0,0,,handler.
Dialogue: 0,0:36:44.42,0:36:46.93,Default,,0,0,0,,But since the queue is
Dialogue: 0,0:36:46.93,0:36:48.16,Default,,0,0,0,,unclaimed, the thread could
Dialogue: 0,0:36:48.16,0:36:50.86,Default,,0,0,0,,actually become that queue and
Dialogue: 0,0:36:50.86,0:36:52.36,Default,,0,0,0,,start executing given handler
Dialogue: 0,0:36:52.77,0:36:53.60,Default,,0,0,0,,for your source.
Dialogue: 0,0:36:54.31,0:36:54.89,Default,,0,0,0,,And we do so.
Dialogue: 0,0:36:55.49,0:36:56.93,Default,,0,0,0,,Now, the interesting thing is
Dialogue: 0,0:36:56.93,0:36:58.24,Default,,0,0,0,,what happens when the second
Dialogue: 0,0:36:58.24,0:36:59.35,Default,,0,0,0,,source that is higher priority
Dialogue: 0,0:36:59.35,0:36:59.90,Default,,0,0,0,,fires?
Dialogue: 0,0:37:00.72,0:37:01.63,Default,,0,0,0,,The same actually.
Dialogue: 0,0:37:02.12,0:37:03.73,Default,,0,0,0,,Since it's a hierarchy QOS here,
Dialogue: 0,0:37:03.91,0:37:05.15,Default,,0,0,0,,higher priority that's what
Dialogue: 0,0:37:05.15,0:37:06.22,Default,,0,0,0,,you're executing right now.
Dialogue: 0,0:37:07.43,0:37:08.57,Default,,0,0,0,,We would bring up a new
Dialogue: 0,0:37:08.63,0:37:10.08,Default,,0,0,0,,anonymous thread deliver that
Dialogue: 0,0:37:10.14,0:37:11.26,Default,,0,0,0,,higher priority event on the
Dialogue: 0,0:37:11.31,0:37:11.57,Default,,0,0,0,,thread.
Dialogue: 0,0:37:13.20,0:37:14.42,Default,,0,0,0,,And look at what that event
Dialogue: 0,0:37:14.42,0:37:14.89,Default,,0,0,0,,means.
Dialogue: 0,0:37:15.04,0:37:16.14,Default,,0,0,0,,And we will notice that it is
Dialogue: 0,0:37:16.14,0:37:17.10,Default,,0,0,0,,for exactly the same queue
Dialogue: 0,0:37:17.10,0:37:17.97,Default,,0,0,0,,hierarchy only then.
Dialogue: 0,0:37:18.04,0:37:19.68,Default,,0,0,0,,And then queue the handler after
Dialogue: 0,0:37:19.68,0:37:20.76,Default,,0,0,0,,the one we just pre emptied.
Dialogue: 0,0:37:21.60,0:37:23.19,Default,,0,0,0,,As you see, we closed our first
Dialogue: 0,0:37:23.61,0:37:24.18,Default,,0,0,0,,context switch.
Dialogue: 0,0:37:24.72,0:37:26.18,Default,,0,0,0,,It was of that higher priority
Dialogue: 0,0:37:26.18,0:37:26.56,Default,,0,0,0,,event.
Dialogue: 0,0:37:27.14,0:37:28.62,Default,,0,0,0,,But, we cannot make for what
Dialogue: 0,0:37:28.62,0:37:29.64,Default,,0,0,0,,progress, because unlike the
Dialogue: 0,0:37:29.64,0:37:30.82,Default,,0,0,0,,first time, that second thread
Dialogue: 0,0:37:30.82,0:37:32.17,Default,,0,0,0,,cannot take over the queue it is
Dialogue: 0,0:37:32.17,0:37:33.16,Default,,0,0,0,,already associated with a
Dialogue: 0,0:37:33.16,0:37:33.68,Default,,0,0,0,,thread.
Dialogue: 0,0:37:33.95,0:37:34.91,Default,,0,0,0,,We cannot take it over.
Dialogue: 0,0:37:35.48,0:37:36.29,Default,,0,0,0,,So, the thread is done.
Dialogue: 0,0:37:36.53,0:37:38.13,Default,,0,0,0,,Which as Daniel explained one
Dialogue: 0,0:37:38.13,0:37:39.83,Default,,0,0,0,,reason why you context switch
Dialogue: 0,0:37:39.83,0:37:40.10,Default,,0,0,0,,again.
Dialogue: 0,0:37:40.77,0:37:41.68,Default,,0,0,0,,And that's what we do, we
Dialogue: 0,0:37:41.68,0:37:42.97,Default,,0,0,0,,context switch back to the first
Dialogue: 0,0:37:42.97,0:37:43.95,Default,,0,0,0,,thread that is the one that can
Dialogue: 0,0:37:43.95,0:37:44.89,Default,,0,0,0,,actually make progress.
Dialogue: 0,0:37:44.89,0:37:46.84,Default,,0,0,0,,We execute the rest of the first
Dialogue: 0,0:37:46.84,0:37:48.28,Default,,0,0,0,,handle and finally move to the
Dialogue: 0,0:37:48.28,0:37:48.70,Default,,0,0,0,,second one.
Dialogue: 0,0:37:50.07,0:37:52.45,Default,,0,0,0,,So, as you can see, we use two
Dialogue: 0,0:37:52.54,0:37:54.22,Default,,0,0,0,,threads and two context switches
Dialogue: 0,0:37:54.29,0:37:55.65,Default,,0,0,0,,that you really didn't want for
Dialogue: 0,0:37:55.65,0:37:56.96,Default,,0,0,0,,a single execution context.
Dialogue: 0,0:37:57.48,0:38:01.00,Default,,0,0,0,,We fixed that using Unified
Dialogue: 0,0:38:01.04,0:38:03.00,Default,,0,0,0,,Identity in macOS High Sierra
Dialogue: 0,0:38:03.07,0:38:04.69,Default,,0,0,0,,and iOS 11.
Dialogue: 0,0:38:05.83,0:38:09.27,Default,,0,0,0,,We got rid of that thread.
Dialogue: 0,0:38:10.16,0:38:12.57,Default,,0,0,0,,And we also, of course got rid
Dialogue: 0,0:38:12.57,0:38:14.85,Default,,0,0,0,,of the two context switches that
Dialogue: 0,0:38:14.85,0:38:16.42,Default,,0,0,0,,we had, that were unwanted.
Dialogue: 0,0:38:17.40,0:38:18.72,Default,,0,0,0,,And of course, its important
Dialogue: 0,0:38:18.72,0:38:20.73,Default,,0,0,0,,because unlike what happened
Dialogue: 0,0:38:20.78,0:38:22.11,Default,,0,0,0,,when Daniel showed you the
Dialogue: 0,0:38:22.11,0:38:24.92,Default,,0,0,0,,pre-emption with that UI touch
Dialogue: 0,0:38:24.92,0:38:27.00,Default,,0,0,0,,event, where we could take
Dialogue: 0,0:38:27.00,0:38:28.65,Default,,0,0,0,,advantage of the fact that we
Dialogue: 0,0:38:28.76,0:38:30.60,Default,,0,0,0,,actually had two threads that
Dialogue: 0,0:38:30.60,0:38:32.19,Default,,0,0,0,,were independent to be more
Dialogue: 0,0:38:32.19,0:38:33.27,Default,,0,0,0,,responsive for application.
Dialogue: 0,0:38:33.63,0:38:35.28,Default,,0,0,0,,Here, we didn't benefit from any
Dialogue: 0,0:38:35.28,0:38:36.28,Default,,0,0,0,,of these context switches,
Dialogue: 0,0:38:36.57,0:38:38.21,Default,,0,0,0,,because these event handler, S1
Dialogue: 0,0:38:38.21,0:38:40.59,Default,,0,0,0,,and M2 had to execute in order
Dialogue: 0,0:38:40.59,0:38:41.13,Default,,0,0,0,,anyways.
Dialogue: 0,0:38:41.13,0:38:42.51,Default,,0,0,0,,So, knowing about that event
Dialogue: 0,0:38:42.51,0:38:43.55,Default,,0,0,0,,early was not useful.
Dialogue: 0,0:38:43.55,0:38:46.05,Default,,0,0,0,,And if you look at how this
Dialogue: 0,0:38:46.05,0:38:48.01,Default,,0,0,0,,actually, what the flow is
Dialogue: 0,0:38:48.01,0:38:49.92,Default,,0,0,0,,today, it looks more like this.
Dialogue: 0,0:38:50.82,0:38:53.03,Default,,0,0,0,,What happened here?
Dialogue: 0,0:38:54.94,0:38:56.93,Default,,0,0,0,,The most important thing on that
Dialogue: 0,0:38:56.93,0:38:58.35,Default,,0,0,0,,flow is that now if you look at
Dialogue: 0,0:38:58.35,0:39:00.11,Default,,0,0,0,,the thread, it's called EQ,
Dialogue: 0,0:39:00.39,0:39:01.52,Default,,0,0,0,,because that's the part of the
Dialogue: 0,0:39:01.52,0:39:03.21,Default,,0,0,0,,unified identity, the thread and
Dialogue: 0,0:39:03.21,0:39:04.64,Default,,0,0,0,,the EQ are basically the same
Dialogue: 0,0:39:04.64,0:39:05.10,Default,,0,0,0,,object.
Dialogue: 0,0:39:05.39,0:39:06.70,Default,,0,0,0,,And the kernel knows that it's
Dialogue: 0,0:39:06.70,0:39:08.48,Default,,0,0,0,,really executing a queue, which
Dialogue: 0,0:39:08.48,0:39:09.98,Default,,0,0,0,,is reflected on the CPU tab, you
Dialogue: 0,0:39:09.98,0:39:11.19,Default,,0,0,0,,don't see the events anymore,
Dialogue: 0,0:39:11.19,0:39:12.29,Default,,0,0,0,,it's just running your queue.
Dialogue: 0,0:39:14.48,0:39:16.26,Default,,0,0,0,,However, you might ask, how did
Dialogue: 0,0:39:16.26,0:39:19.21,Default,,0,0,0,,we manage to deliver the event,
Dialogue: 0,0:39:19.46,0:39:20.90,Default,,0,0,0,,that second event without
Dialogue: 0,0:39:20.90,0:39:21.73,Default,,0,0,0,,requiring a hamper.
Dialogue: 0,0:39:21.85,0:39:23.57,Default,,0,0,0,,That is actually a good
Dialogue: 0,0:39:24.70,0:39:24.92,Default,,0,0,0,,question.
Dialogue: 0,0:39:25.45,0:39:27.27,Default,,0,0,0,,When the event fires, now we
Dialogue: 0,0:39:27.27,0:39:28.76,Default,,0,0,0,,know where it will execute,
Dialogue: 0,0:39:28.76,0:39:29.94,Default,,0,0,0,,where you will handle it.
Dialogue: 0,0:39:30.33,0:39:31.69,Default,,0,0,0,,We just mark the thread.
Dialogue: 0,0:39:32.49,0:39:33.42,Default,,0,0,0,,No helper needed.
Dialogue: 0,0:39:34.23,0:39:38.27,Default,,0,0,0,,And at the first possible time,
Dialogue: 0,0:39:38.99,0:39:40.79,Default,,0,0,0,,we will notice that thread was
Dialogue: 0,0:39:40.79,0:39:42.01,Default,,0,0,0,,marked with you have pending
Dialogue: 0,0:39:42.01,0:39:42.49,Default,,0,0,0,,events.
Dialogue: 0,0:39:42.97,0:39:44.36,Default,,0,0,0,,And when we de-queue the events,
Dialogue: 0,0:39:44.36,0:39:46.60,Default,,0,0,0,,one needs to hide time, hide
Dialogue: 0,0:39:46.60,0:39:47.56,Default,,0,0,0,,after the first handler
Dialogue: 0,0:39:47.56,0:39:48.12,Default,,0,0,0,,finishes.
Dialogue: 0,0:39:48.70,0:39:50.07,Default,,0,0,0,,We can grab the events from the
Dialogue: 0,0:39:50.07,0:39:51.57,Default,,0,0,0,,kernel, look at them, and then
Dialogue: 0,0:39:51.61,0:39:53.35,Default,,0,0,0,,queue their handlers on your
Dialogue: 0,0:39:54.01,0:39:54.25,Default,,0,0,0,,hierarchy.
Dialogue: 0,0:39:54.80,0:39:57.73,Default,,0,0,0,,So, why did we go through that
Dialogue: 0,0:39:57.73,0:39:59.02,Default,,0,0,0,,quite complex explanation?
Dialogue: 0,0:40:00.05,0:40:01.86,Default,,0,0,0,,That's so that you can
Dialogue: 0,0:40:01.86,0:40:03.15,Default,,0,0,0,,understand how to best take
Dialogue: 0,0:40:03.15,0:40:04.68,Default,,0,0,0,,advantage of the runtime
Dialogue: 0,0:40:04.68,0:40:05.13,Default,,0,0,0,,behavior.
Dialogue: 0,0:40:06.09,0:40:07.37,Default,,0,0,0,,Because clearly, the runtime
Dialogue: 0,0:40:07.37,0:40:08.99,Default,,0,0,0,,uses every possible hint you're
Dialogue: 0,0:40:08.99,0:40:11.00,Default,,0,0,0,,giving us to optimize behavior
Dialogue: 0,0:40:11.00,0:40:11.76,Default,,0,0,0,,in your application.
Dialogue: 0,0:40:12.77,0:40:14.72,Default,,0,0,0,,And admittance buttons to know
Dialogue: 0,0:40:14.72,0:40:17.36,Default,,0,0,0,,how to hint and when to hint the
Dialogue: 0,0:40:17.36,0:40:18.87,Default,,0,0,0,,runtime correctly so that we
Dialogue: 0,0:40:18.87,0:40:19.89,Default,,0,0,0,,make the right decisions.
Dialogue: 0,0:40:20.39,0:40:24.20,Default,,0,0,0,,Which brings me to what should
Dialogue: 0,0:40:24.20,0:40:26.23,Default,,0,0,0,,you do to existing code bases to
Dialogue: 0,0:40:26.23,0:40:28.90,Default,,0,0,0,,take advantage of all that core
Dialogue: 0,0:40:28.90,0:40:32.97,Default,,0,0,0,,technology that we rebuilt.
Dialogue: 0,0:40:33.16,0:40:35.97,Default,,0,0,0,,Now, actually two steps to
Dialogue: 0,0:40:35.97,0:40:37.16,Default,,0,0,0,,follow to take the full
Dialogue: 0,0:40:37.16,0:40:38.71,Default,,0,0,0,,advantage of that technology.
Dialogue: 0,0:40:38.94,0:40:41.12,Default,,0,0,0,,The first one is no mutation
Dialogue: 0,0:40:41.12,0:40:41.97,Default,,0,0,0,,after activation.
Dialogue: 0,0:40:42.67,0:40:44.04,Default,,0,0,0,,And the second one is paying
Dialogue: 0,0:40:44.28,0:40:46.80,Default,,0,0,0,,extra care with extra attention
Dialogue: 0,0:40:46.80,0:40:47.57,Default,,0,0,0,,to your target queue
Dialogue: 0,0:40:47.57,0:40:48.13,Default,,0,0,0,,hierarchies.
Dialogue: 0,0:40:49.13,0:40:49.86,Default,,0,0,0,,So, what does that mean?
Dialogue: 0,0:40:51.24,0:40:52.58,Default,,0,0,0,,No mutation past activation
Dialogue: 0,0:40:52.66,0:40:53.81,Default,,0,0,0,,really means that when you have
Dialogue: 0,0:40:53.81,0:40:55.40,Default,,0,0,0,,any kind of property on a
Dialogue: 0,0:40:55.40,0:40:57.22,Default,,0,0,0,,dispatch object, you can send
Dialogue: 0,0:40:57.22,0:40:58.45,Default,,0,0,0,,them, well as soon as you
Dialogue: 0,0:40:58.45,0:40:59.82,Default,,0,0,0,,activate the object, you should
Dialogue: 0,0:40:59.82,0:41:01.06,Default,,0,0,0,,stop mutating them.
Dialogue: 0,0:41:01.64,0:41:04.79,Default,,0,0,0,,The second example, that's our
Dialogue: 0,0:41:04.79,0:41:05.98,Default,,0,0,0,,source that we've seen quite a
Dialogue: 0,0:41:05.98,0:41:07.47,Default,,0,0,0,,few times already in the talk.
Dialogue: 0,0:41:07.96,0:41:08.64,Default,,0,0,0,,That [inaudible] for the
Dialogue: 0,0:41:08.64,0:41:09.84,Default,,0,0,0,,ability.
Dialogue: 0,0:41:09.84,0:41:12.69,Default,,0,0,0,,And you're setting a bunch of
Dialogue: 0,0:41:12.69,0:41:14.61,Default,,0,0,0,,properties, handlers; the event
Dialogue: 0,0:41:14.61,0:41:15.81,Default,,0,0,0,,handler, the consent handler.
Dialogue: 0,0:41:15.81,0:41:16.83,Default,,0,0,0,,You may have registration
Dialogue: 0,0:41:16.83,0:41:17.41,Default,,0,0,0,,handlers.
Dialogue: 0,0:41:18.20,0:41:19.54,Default,,0,0,0,,You can even change them a few
Dialogue: 0,0:41:19.54,0:41:20.83,Default,,0,0,0,,times, that's fine, you can
Dialogue: 0,0:41:20.83,0:41:21.50,Default,,0,0,0,,change your mind.
Dialogue: 0,0:41:21.95,0:41:23.96,Default,,0,0,0,,And then you activate the
Dialogue: 0,0:41:23.96,0:41:24.35,Default,,0,0,0,,source.
Dialogue: 0,0:41:25.71,0:41:27.50,Default,,0,0,0,,The contact here is that you
Dialogue: 0,0:41:27.50,0:41:29.56,Default,,0,0,0,,should stop mutate your objects.
Dialogue: 0,0:41:30.25,0:41:31.38,Default,,0,0,0,,It's very tempting to,
Dialogue: 0,0:41:31.71,0:41:33.08,Default,,0,0,0,,after-the-fact, for example
Dialogue: 0,0:41:33.08,0:41:33.98,Default,,0,0,0,,change the target queue of your
Dialogue: 0,0:41:33.98,0:41:34.39,Default,,0,0,0,,source.
Dialogue: 0,0:41:34.39,0:41:35.49,Default,,0,0,0,,That will cause problems.
Dialogue: 0,0:41:35.79,0:41:37.36,Default,,0,0,0,,And the reason why is exactly
Dialogue: 0,0:41:37.36,0:41:38.96,Default,,0,0,0,,what I showed a bit earlier, at
Dialogue: 0,0:41:38.96,0:41:40.88,Default,,0,0,0,,activate time we take a snapshot
Dialogue: 0,0:41:40.92,0:41:42.01,Default,,0,0,0,,of the properties of your
Dialogue: 0,0:41:42.01,0:41:43.31,Default,,0,0,0,,objects, and we will take
Dialogue: 0,0:41:43.31,0:41:44.91,Default,,0,0,0,,decisions in the future based on
Dialogue: 0,0:41:44.91,0:41:45.56,Default,,0,0,0,,that snapshot.
Dialogue: 0,0:41:45.69,0:41:48.49,Default,,0,0,0,,And if you change the target
Dialogue: 0,0:41:48.49,0:41:50.20,Default,,0,0,0,,queue hierarchy after-the-fact,
Dialogue: 0,0:41:50.48,0:41:51.76,Default,,0,0,0,,it will hinder that snapshot
Dialogue: 0,0:41:51.76,0:41:54.26,Default,,0,0,0,,stale and that will defeat a
Dialogue: 0,0:41:54.26,0:41:55.54,Default,,0,0,0,,bunch of very important
Dialogue: 0,0:41:55.54,0:41:56.85,Default,,0,0,0,,optimization such as the
Dialogue: 0,0:41:56.85,0:41:59.73,Default,,0,0,0,,priority inversion avoidance
Dialogue: 0,0:41:59.73,0:42:01.10,Default,,0,0,0,,[inaudible] the direct handoff
Dialogue: 0,0:42:01.19,0:42:02.31,Default,,0,0,0,,that we have for the dispatch
Dialogue: 0,0:42:02.31,0:42:03.69,Default,,0,0,0,,sync that I presented earlier,
Dialogue: 0,0:42:03.69,0:42:05.76,Default,,0,0,0,,are all defensive and
Dialogue: 0,0:42:05.76,0:42:07.06,Default,,0,0,0,,deliverable optimizations that
Dialogue: 0,0:42:07.06,0:42:09.98,Default,,0,0,0,,we just went through.
Dialogue: 0,0:42:10.90,0:42:12.59,Default,,0,0,0,,And I insist on the points that
Dialogue: 0,0:42:12.59,0:42:13.97,Default,,0,0,0,,Daniel made early on, which is
Dialogue: 0,0:42:13.97,0:42:16.48,Default,,0,0,0,,that many of you probably never
Dialogue: 0,0:42:16.89,0:42:18.48,Default,,0,0,0,,had to create a dispatch source
Dialogue: 0,0:42:18.48,0:42:19.20,Default,,0,0,0,,in your application.
Dialogue: 0,0:42:19.20,0:42:20.58,Default,,0,0,0,,And this is fine, this is really
Dialogue: 0,0:42:20.58,0:42:21.40,Default,,0,0,0,,how it's supposed to work.
Dialogue: 0,0:42:22.24,0:42:23.85,Default,,0,0,0,,You probably actually use them a
Dialogue: 0,0:42:23.85,0:42:25.91,Default,,0,0,0,,lot of them through system
Dialogue: 0,0:42:25.91,0:42:26.48,Default,,0,0,0,,frameworks.
Dialogue: 0,0:42:26.48,0:42:27.29,Default,,0,0,0,,It's a shame you have a
Dialogue: 0,0:42:27.29,0:42:28.70,Default,,0,0,0,,framework that you have to then
Dialogue: 0,0:42:28.70,0:42:30.67,Default,,0,0,0,,dispatch queue to because they
Dialogue: 0,0:42:30.67,0:42:33.17,Default,,0,0,0,,are asyncing some notifications
Dialogue: 0,0:42:33.17,0:42:34.61,Default,,0,0,0,,on the queue on your behalf.
Dialogue: 0,0:42:34.71,0:42:36.11,Default,,0,0,0,,Behind the scenes, they have one
Dialogue: 0,0:42:36.11,0:42:36.89,Default,,0,0,0,,of these sources.
Dialogue: 0,0:42:37.22,0:42:38.06,Default,,0,0,0,,So, if you're changing the
Dialogue: 0,0:42:38.06,0:42:39.77,Default,,0,0,0,,assumptions of the system, you
Dialogue: 0,0:42:39.77,0:42:42.11,Default,,0,0,0,,will actually break all of these
Dialogue: 0,0:42:42.11,0:42:45.67,Default,,0,0,0,,optimizations as well.
Dialogue: 0,0:42:46.55,0:42:48.81,Default,,0,0,0,,So, I hope a made a point really
Dialogue: 0,0:42:48.81,0:42:50.18,Default,,0,0,0,,clear that to target your
Dialogue: 0,0:42:50.18,0:42:52.40,Default,,0,0,0,,hierarchy is essential and you
Dialogue: 0,0:42:52.40,0:42:53.27,Default,,0,0,0,,have to protect it.
Dialogue: 0,0:42:54.66,0:42:55.23,Default,,0,0,0,,What does that mean?
Dialogue: 0,0:42:56.47,0:42:57.26,Default,,0,0,0,,And how to do that?
Dialogue: 0,0:42:58.76,0:43:00.16,Default,,0,0,0,,The first way, which is a very
Dialogue: 0,0:43:00.16,0:43:01.39,Default,,0,0,0,,simple device, is that when
Dialogue: 0,0:43:01.39,0:43:03.80,Default,,0,0,0,,you're building one, start from
Dialogue: 0,0:43:03.80,0:43:05.88,Default,,0,0,0,,the bottom and build it toward
Dialogue: 0,0:43:06.50,0:43:07.31,Default,,0,0,0,,the top.
Dialogue: 0,0:43:07.50,0:43:09.02,Default,,0,0,0,,When you show that card from the
Dialogue: 0,0:43:09.02,0:43:11.71,Default,,0,0,0,,slide build up, as you see,
Dialogue: 0,0:43:12.09,0:43:13.91,Default,,0,0,0,,these wider holes there, they
Dialogue: 0,0:43:13.91,0:43:14.85,Default,,0,0,0,,are your target queue
Dialogue: 0,0:43:14.85,0:43:15.52,Default,,0,0,0,,relationships.
Dialogue: 0,0:43:15.77,0:43:18.15,Default,,0,0,0,,None of them have to be mutated
Dialogue: 0,0:43:18.15,0:43:19.89,Default,,0,0,0,,if you [inaudible] in that
Dialogue: 0,0:43:20.57,0:43:20.96,Default,,0,0,0,,order.
Dialogue: 0,0:43:21.04,0:43:22.66,Default,,0,0,0,,However, when you have a large
Dialogue: 0,0:43:22.66,0:43:24.16,Default,,0,0,0,,application, or you're hiding
Dialogue: 0,0:43:24.16,0:43:25.49,Default,,0,0,0,,your frameworks and you're
Dialogue: 0,0:43:25.49,0:43:27.00,Default,,0,0,0,,bending one of these queues to
Dialogue: 0,0:43:27.00,0:43:30.06,Default,,0,0,0,,another part of your engineering
Dialogue: 0,0:43:30.17,0:43:32.41,Default,,0,0,0,,company, you may want to have
Dialogue: 0,0:43:32.41,0:43:33.71,Default,,0,0,0,,stronger guarantees than that.
Dialogue: 0,0:43:34.26,0:43:35.52,Default,,0,0,0,,You may want to lockdown these
Dialogue: 0,0:43:35.52,0:43:36.76,Default,,0,0,0,,relationships, so that really no
Dialogue: 0,0:43:36.76,0:43:37.73,Default,,0,0,0,,one can mutate them
Dialogue: 0,0:43:37.73,0:43:39.03,Default,,0,0,0,,after-the-fact.
Dialogue: 0,0:43:39.58,0:43:41.85,Default,,0,0,0,,This is actually something that
Dialogue: 0,0:43:41.85,0:43:43.31,Default,,0,0,0,,you can do with the technology
Dialogue: 0,0:43:43.31,0:43:44.75,Default,,0,0,0,,that we call set a queue
Dialogue: 0,0:43:44.75,0:43:45.26,Default,,0,0,0,,hierarchy.
Dialogue: 0,0:43:45.42,0:43:47.24,Default,,0,0,0,,We introduced it last year, and
Dialogue: 0,0:43:47.74,0:43:49.46,Default,,0,0,0,,actually if you are using Swift
Dialogue: 0,0:43:49.46,0:43:50.88,Default,,0,0,0,,3, then you can stop listening
Dialogue: 0,0:43:50.88,0:43:51.98,Default,,0,0,0,,to me, because you're already in
Dialogue: 0,0:43:51.98,0:43:53.15,Default,,0,0,0,,that form and that the only
Dialogue: 0,0:43:53.15,0:43:54.62,Default,,0,0,0,,world you're living.
Dialogue: 0,0:43:55.61,0:43:57.07,Default,,0,0,0,,However, if you have an existing
Dialogue: 0,0:43:57.07,0:43:58.19,Default,,0,0,0,,cloud based, or you use older
Dialogue: 0,0:43:58.19,0:44:01.06,Default,,0,0,0,,versions than of Swift, you need
Dialogue: 0,0:44:01.06,0:44:03.08,Default,,0,0,0,,to do some extra steps.
Dialogue: 0,0:44:03.74,0:44:06.76,Default,,0,0,0,,So, let's focus on the
Dialogue: 0,0:44:06.76,0:44:08.63,Default,,0,0,0,,relationship between Q1 and EQ
Dialogue: 0,0:44:08.90,0:44:09.05,Default,,0,0,0,,here.
Dialogue: 0,0:44:09.78,0:44:12.27,Default,,0,0,0,,When you created that with
Dialogue: 0,0:44:12.27,0:44:13.89,Default,,0,0,0,,Objective-C you probably hold
Dialogue: 0,0:44:13.89,0:44:15.36,Default,,0,0,0,,code that looks like this.
Dialogue: 0,0:44:15.44,0:44:17.35,Default,,0,0,0,,You create your queue and then
Dialogue: 0,0:44:17.41,0:44:19.22,Default,,0,0,0,,in the second step, you will set
Dialogue: 0,0:44:19.41,0:44:21.82,Default,,0,0,0,,your target queue of Q1 to EQ.
Dialogue: 0,0:44:22.16,0:44:23.92,Default,,0,0,0,,That is not protecting your
Dialogue: 0,0:44:23.92,0:44:24.57,Default,,0,0,0,,queue hierarchy.
Dialogue: 0,0:44:24.57,0:44:26.42,Default,,0,0,0,,Anyone can come along and call
Dialogue: 0,0:44:26.42,0:44:27.67,Default,,0,0,0,,dispatch target queue again and
Dialogue: 0,0:44:27.67,0:44:28.83,Default,,0,0,0,,break all your assumptions.
Dialogue: 0,0:44:29.06,0:44:30.13,Default,,0,0,0,,That's not totally great.
Dialogue: 0,0:44:30.91,0:44:32.99,Default,,0,0,0,,There is a simple step to just
Dialogue: 0,0:44:32.99,0:44:34.32,Default,,0,0,0,,fix that code into a way that is
Dialogue: 0,0:44:34.32,0:44:37.21,Default,,0,0,0,,safe, which is to adopt a new
Dialogue: 0,0:44:37.21,0:44:38.54,Default,,0,0,0,,API we introduced last year,
Dialogue: 0,0:44:38.74,0:44:39.97,Default,,0,0,0,,which is dispatch queue create
Dialogue: 0,0:44:39.97,0:44:42.64,Default,,0,0,0,,with target, which in a single
Dialogue: 0,0:44:42.64,0:44:44.48,Default,,0,0,0,,automatic step will create the
Dialogue: 0,0:44:44.48,0:44:46.61,Default,,0,0,0,,queue, set the queue hierarchy
Dialogue: 0,0:44:46.61,0:44:48.12,Default,,0,0,0,,height, and protect it.
Dialogue: 0,0:44:48.68,0:44:50.07,Default,,0,0,0,,And that's it.
Dialogue: 0,0:44:50.54,0:44:51.71,Default,,0,0,0,,These were the two steps to
Dialogue: 0,0:44:51.71,0:44:53.53,Default,,0,0,0,,follow for you to really work
Dialogue: 0,0:44:53.53,0:44:54.39,Default,,0,0,0,,with the [inaudible] well.
Dialogue: 0,0:44:54.39,0:44:58.31,Default,,0,0,0,,Other, a bit like the mutated
Dialogue: 0,0:44:58.31,0:45:00.30,Default,,0,0,0,,case that Daniel walked you
Dialogue: 0,0:45:00.30,0:45:02.57,Default,,0,0,0,,through early on, finding when
Dialogue: 0,0:45:02.57,0:45:04.32,Default,,0,0,0,,you're doing one of these things
Dialogue: 0,0:45:04.32,0:45:05.84,Default,,0,0,0,,wrong is fairly challenging,
Dialogue: 0,0:45:05.84,0:45:07.23,Default,,0,0,0,,especially on the large cloud
Dialogue: 0,0:45:07.23,0:45:07.65,Default,,0,0,0,,base.
Dialogue: 0,0:45:07.65,0:45:09.26,Default,,0,0,0,,Finding that in an existing
Dialogue: 0,0:45:09.26,0:45:10.83,Default,,0,0,0,,cloud base full code inspection
Dialogue: 0,0:45:10.89,0:45:11.44,Default,,0,0,0,,is hard.
Dialogue: 0,0:45:12.36,0:45:14.74,Default,,0,0,0,,This is why we created a new GCD
Dialogue: 0,0:45:14.74,0:45:16.63,Default,,0,0,0,,performance instruments tool to
Dialogue: 0,0:45:16.63,0:45:18.35,Default,,0,0,0,,find problem spots in an
Dialogue: 0,0:45:18.35,0:45:19.41,Default,,0,0,0,,existing application.
Dialogue: 0,0:45:19.98,0:45:21.10,Default,,0,0,0,,And I will call Daniel back to
Dialogue: 0,0:45:21.10,0:45:23.81,Default,,0,0,0,,the stage to demo for you.
Dialogue: 0,0:45:24.52,0:45:28.87,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:45:29.37,0:45:29.90,Default,,0,0,0,,>> Thank you, Pierre.
Dialogue: 0,0:45:30.43,0:45:32.77,Default,,0,0,0,,All right to start out with
Dialogue: 0,0:45:32.77,0:45:34.17,Default,,0,0,0,,please note that this GCD
Dialogue: 0,0:45:34.17,0:45:35.22,Default,,0,0,0,,performance instrument that
Dialogue: 0,0:45:35.22,0:45:37.16,Default,,0,0,0,,we'll see is not yet present in
Dialogue: 0,0:45:37.16,0:45:38.40,Default,,0,0,0,,the version of XCode 9 that you
Dialogue: 0,0:45:38.40,0:45:39.75,Default,,0,0,0,,have, but it will be available
Dialogue: 0,0:45:39.75,0:45:42.00,Default,,0,0,0,,in an upcoming seed of XCode 9.
Dialogue: 0,0:45:42.00,0:45:44.57,Default,,0,0,0,,So, for this demo, let's analyze
Dialogue: 0,0:45:44.60,0:45:46.18,Default,,0,0,0,,the execution of our sample news
Dialogue: 0,0:45:46.18,0:45:47.49,Default,,0,0,0,,application in some detail.
Dialogue: 0,0:45:48.60,0:45:49.57,Default,,0,0,0,,So, what happens here if you
Dialogue: 0,0:45:49.57,0:45:51.15,Default,,0,0,0,,click this connect button at the
Dialogue: 0,0:45:51.15,0:45:53.05,Default,,0,0,0,,bottom, is that this app creates
Dialogue: 0,0:45:53.05,0:45:54.38,Default,,0,0,0,,a number of network connections
Dialogue: 0,0:45:54.49,0:45:56.34,Default,,0,0,0,,to a server, to read lists of
Dialogue: 0,0:45:56.34,0:45:57.74,Default,,0,0,0,,URLs from, which are then
Dialogue: 0,0:45:57.74,0:45:59.20,Default,,0,0,0,,displayed in the WebViews
Dialogue: 0,0:45:59.20,0:46:00.25,Default,,0,0,0,,whenever the refresh button is
Dialogue: 0,0:46:00.25,0:46:00.39,Default,,0,0,0,,hit.
Dialogue: 0,0:46:01.15,0:46:02.78,Default,,0,0,0,,So, let's jump into XCode to see
Dialogue: 0,0:46:02.78,0:46:03.87,Default,,0,0,0,,how we are setting up those
Dialogue: 0,0:46:03.87,0:46:04.58,Default,,0,0,0,,network connections.
Dialogue: 0,0:46:05.45,0:46:07.69,Default,,0,0,0,,So, here we are in XCode in the
Dialogue: 0,0:46:07.69,0:46:09.81,Default,,0,0,0,,create connections method, which
Dialogue: 0,0:46:09.81,0:46:10.96,Default,,0,0,0,,does just that.
Dialogue: 0,0:46:11.38,0:46:12.01,Default,,0,0,0,,It's very simple.
Dialogue: 0,0:46:12.01,0:46:13.72,Default,,0,0,0,,We have a for loop, maybe just
Dialogue: 0,0:46:13.72,0:46:15.44,Default,,0,0,0,,create some sockets and connect
Dialogue: 0,0:46:15.44,0:46:16.34,Default,,0,0,0,,them to our server.
Dialogue: 0,0:46:17.27,0:46:18.95,Default,,0,0,0,,And we monitor that socket for
Dialogue: 0,0:46:18.95,0:46:20.09,Default,,0,0,0,,readability with one of these
Dialogue: 0,0:46:20.15,0:46:21.70,Default,,0,0,0,,dispatch read sources that we've
Dialogue: 0,0:46:21.70,0:46:22.90,Default,,0,0,0,,seen so many times already in
Dialogue: 0,0:46:22.90,0:46:23.40,Default,,0,0,0,,this session.
Dialogue: 0,0:46:23.40,0:46:24.80,Default,,0,0,0,,And here it is the trusted the
Dialogue: 0,0:46:24.80,0:46:25.51,Default,,0,0,0,,see API.
Dialogue: 0,0:46:26.55,0:46:27.95,Default,,0,0,0,,We then set up the event handler
Dialogue: 0,0:46:27.95,0:46:29.51,Default,,0,0,0,,block for that dispatch source
Dialogue: 0,0:46:29.91,0:46:30.22,Default,,0,0,0,,here.
Dialogue: 0,0:46:30.37,0:46:32.15,Default,,0,0,0,,And when the socket becomes
Dialogue: 0,0:46:32.15,0:46:33.35,Default,,0,0,0,,readable, we just read from it
Dialogue: 0,0:46:33.35,0:46:34.76,Default,,0,0,0,,with the read system call until
Dialogue: 0,0:46:34.76,0:46:36.02,Default,,0,0,0,,there is no more data available.
Dialogue: 0,0:46:36.76,0:46:38.42,Default,,0,0,0,,Once we have the data, we pass
Dialogue: 0,0:46:38.42,0:46:40.59,Default,,0,0,0,,it to our database, subsystem in
Dialogue: 0,0:46:40.59,0:46:41.58,Default,,0,0,0,,the application with this
Dialogue: 0,0:46:41.61,0:46:42.56,Default,,0,0,0,,process 0 method.
Dialogue: 0,0:46:43.71,0:46:45.08,Default,,0,0,0,,So, let's build and run, and
Dialogue: 0,0:46:45.08,0:46:46.21,Default,,0,0,0,,take a system trace of this
Dialogue: 0,0:46:46.21,0:46:47.42,Default,,0,0,0,,application and see how it
Dialogue: 0,0:46:47.42,0:46:48.02,Default,,0,0,0,,executes.
Dialogue: 0,0:46:48.02,0:46:52.25,Default,,0,0,0,,So here we are in instruments,
Dialogue: 0,0:46:52.29,0:46:54.15,Default,,0,0,0,,in system trace, and in addition
Dialogue: 0,0:46:54.15,0:46:55.26,Default,,0,0,0,,to the usual tacks in system
Dialogue: 0,0:46:55.26,0:46:56.74,Default,,0,0,0,,trace, we've added this new GCD
Dialogue: 0,0:46:56.74,0:46:57.69,Default,,0,0,0,,performance instrument.
Dialogue: 0,0:46:58.10,0:46:59.44,Default,,0,0,0,,When we click on there, we see a
Dialogue: 0,0:46:59.44,0:47:01.06,Default,,0,0,0,,number of performance events
Dialogue: 0,0:47:01.06,0:47:02.46,Default,,0,0,0,,that have been reported for
Dialogue: 0,0:47:02.46,0:47:03.35,Default,,0,0,0,,performance problems.
Dialogue: 0,0:47:03.75,0:47:05.34,Default,,0,0,0,,One of these is this mutation
Dialogue: 0,0:47:05.34,0:47:06.46,Default,,0,0,0,,after activation event, that we
Dialogue: 0,0:47:06.46,0:47:08.26,Default,,0,0,0,,can also see when we go and mass
Dialogue: 0,0:47:08.26,0:47:08.89,Default,,0,0,0,,over the timeline.
Dialogue: 0,0:47:09.32,0:47:10.58,Default,,0,0,0,,You can also click on one of the
Dialogue: 0,0:47:10.58,0:47:12.18,Default,,0,0,0,,other events here, such as this,
Dialogue: 0,0:47:12.18,0:47:13.49,Default,,0,0,0,,re-target after activation
Dialogue: 0,0:47:13.49,0:47:13.84,Default,,0,0,0,,event.
Dialogue: 0,0:47:14.51,0:47:15.85,Default,,0,0,0,,And the list will take us
Dialogue: 0,0:47:15.85,0:47:16.63,Default,,0,0,0,,directly there.
Dialogue: 0,0:47:16.63,0:47:18.04,Default,,0,0,0,,If you want more details on
Dialogue: 0,0:47:18.04,0:47:19.65,Default,,0,0,0,,this, we can disclose the
Dialogue: 0,0:47:19.65,0:47:20.81,Default,,0,0,0,,backtrace on the right hand side
Dialogue: 0,0:47:20.81,0:47:22.31,Default,,0,0,0,,is instruments which will show
Dialogue: 0,0:47:22.31,0:47:23.64,Default,,0,0,0,,us where exactly this event
Dialogue: 0,0:47:23.64,0:47:24.74,Default,,0,0,0,,occurred in your application.
Dialogue: 0,0:47:25.17,0:47:26.42,Default,,0,0,0,,So, here for instance it is in
Dialogue: 0,0:47:26.42,0:47:28.23,Default,,0,0,0,,our create connections method.
Dialogue: 0,0:47:29.55,0:47:30.96,Default,,0,0,0,,If we double click on this
Dialogue: 0,0:47:30.96,0:47:32.31,Default,,0,0,0,,frame, instruments will show us
Dialogue: 0,0:47:32.31,0:47:33.39,Default,,0,0,0,,directly the line of code where
Dialogue: 0,0:47:33.77,0:47:34.70,Default,,0,0,0,,the problem occurred.
Dialogue: 0,0:47:35.40,0:47:36.79,Default,,0,0,0,,This is actually a target queue
Dialogue: 0,0:47:36.79,0:47:38.18,Default,,0,0,0,,call here that indeed occurs
Dialogue: 0,0:47:38.18,0:47:38.97,Default,,0,0,0,,after activate.
Dialogue: 0,0:47:39.42,0:47:40.61,Default,,0,0,0,,Like, this is the pattern up
Dialogue: 0,0:47:40.61,0:47:41.48,Default,,0,0,0,,here just told you about.
Dialogue: 0,0:47:41.48,0:47:43.01,Default,,0,0,0,,To go and fix that, we can jump
Dialogue: 0,0:47:43.14,0:47:44.38,Default,,0,0,0,,directly into XCode with the
Dialogue: 0,0:47:44.38,0:47:45.68,Default,,0,0,0,,open file and XCode button and
Dialogue: 0,0:47:45.68,0:47:46.20,Default,,0,0,0,,instruments.
Dialogue: 0,0:47:46.68,0:47:48.42,Default,,0,0,0,,So, here we are at that dispatch
Dialogue: 0,0:47:48.42,0:47:50.34,Default,,0,0,0,,the target queue line and indeed
Dialogue: 0,0:47:50.40,0:47:51.72,Default,,0,0,0,,it, as well as the dispatch
Dialogue: 0,0:47:51.72,0:47:53.82,Default,,0,0,0,,source at event handler set up
Dialogue: 0,0:47:53.82,0:47:54.94,Default,,0,0,0,,happens after activate.
Dialogue: 0,0:47:55.49,0:47:56.90,Default,,0,0,0,,So, here in this example, it's
Dialogue: 0,0:47:56.90,0:47:57.64,Default,,0,0,0,,really easy to fix.
Dialogue: 0,0:47:57.64,0:47:58.94,Default,,0,0,0,,We just move these two lines
Dialogue: 0,0:47:59.36,0:48:00.21,Default,,0,0,0,,down below.
Dialogue: 0,0:48:00.21,0:48:01.71,Default,,0,0,0,,And we have fixed the problem.
Dialogue: 0,0:48:01.71,0:48:03.39,Default,,0,0,0,,We have activate after we set up
Dialogue: 0,0:48:03.43,0:48:04.86,Default,,0,0,0,,the source, and not before.
Dialogue: 0,0:48:05.53,0:48:06.62,Default,,0,0,0,,So, let's jump back into
Dialogue: 0,0:48:06.62,0:48:08.16,Default,,0,0,0,,instruments and see what we can
Dialogue: 0,0:48:08.16,0:48:09.56,Default,,0,0,0,,see in the system trace now.
Dialogue: 0,0:48:09.86,0:48:11.18,Default,,0,0,0,,It looks the same as before,
Dialogue: 0,0:48:11.18,0:48:12.70,Default,,0,0,0,,except when you click on the GCD
Dialogue: 0,0:48:12.70,0:48:14.20,Default,,0,0,0,,performance track, you will see
Dialogue: 0,0:48:14.20,0:48:15.34,Default,,0,0,0,,there is no more significant
Dialogue: 0,0:48:15.34,0:48:16.48,Default,,0,0,0,,performance problems detected.
Dialogue: 0,0:48:16.48,0:48:17.84,Default,,0,0,0,,And that's what you ought to see
Dialogue: 0,0:48:17.84,0:48:18.69,Default,,0,0,0,,if you use this instrument.
Dialogue: 0,0:48:18.84,0:48:20.47,Default,,0,0,0,,So, of course this was very
Dialogue: 0,0:48:20.47,0:48:21.69,Default,,0,0,0,,simple in this application.
Dialogue: 0,0:48:21.69,0:48:22.69,Default,,0,0,0,,You may have to do some work.
Dialogue: 0,0:48:24.57,0:48:25.81,Default,,0,0,0,,So, let's focus on the points
Dialogue: 0,0:48:25.81,0:48:26.92,Default,,0,0,0,,track in the application.
Dialogue: 0,0:48:26.92,0:48:28.10,Default,,0,0,0,,This shows us a number of
Dialogue: 0,0:48:28.15,0:48:29.37,Default,,0,0,0,,network event handlers.
Dialogue: 0,0:48:29.82,0:48:31.11,Default,,0,0,0,,And these are the source event
Dialogue: 0,0:48:31.11,0:48:32.17,Default,,0,0,0,,handlers in our application.
Dialogue: 0,0:48:32.67,0:48:34.07,Default,,0,0,0,,How did you manage to make these
Dialogue: 0,0:48:34.07,0:48:35.01,Default,,0,0,0,,show up in instruments?
Dialogue: 0,0:48:35.61,0:48:36.25,Default,,0,0,0,,That's actually really
Dialogue: 0,0:48:36.25,0:48:37.36,Default,,0,0,0,,interesting to understand
Dialogue: 0,0:48:37.36,0:48:38.39,Default,,0,0,0,,because it's something you can
Dialogue: 0,0:48:38.39,0:48:39.92,Default,,0,0,0,,apply to your own code to
Dialogue: 0,0:48:39.92,0:48:41.65,Default,,0,0,0,,understand how it executes in
Dialogue: 0,0:48:41.68,0:48:42.18,Default,,0,0,0,,instruments.
Dialogue: 0,0:48:43.81,0:48:45.56,Default,,0,0,0,,Well, going back to XCode in our
Dialogue: 0,0:48:45.56,0:48:47.49,Default,,0,0,0,,create connections method, when
Dialogue: 0,0:48:47.49,0:48:49.52,Default,,0,0,0,,we set up our source and its
Dialogue: 0,0:48:49.52,0:48:50.46,Default,,0,0,0,,source event handlers, we are
Dialogue: 0,0:48:50.46,0:48:51.98,Default,,0,0,0,,interested in the execution of
Dialogue: 0,0:48:52.05,0:48:53.81,Default,,0,0,0,,that event handler, and try to
Dialogue: 0,0:48:53.81,0:48:54.93,Default,,0,0,0,,understand its timing.
Dialogue: 0,0:48:55.51,0:48:57.02,Default,,0,0,0,,To see that instruments, we've
Dialogue: 0,0:48:57.02,0:48:59.16,Default,,0,0,0,,added the kdebug signpost start
Dialogue: 0,0:48:59.16,0:49:00.70,Default,,0,0,0,,function at the beginning of the
Dialogue: 0,0:49:00.70,0:49:02.78,Default,,0,0,0,,handler, and the kdebug signpost
Dialogue: 0,0:49:02.89,0:49:03.94,Default,,0,0,0,,end function at the end.
Dialogue: 0,0:49:03.94,0:49:05.84,Default,,0,0,0,,And that is all it takes for the
Dialogue: 0,0:49:05.84,0:49:07.35,Default,,0,0,0,,section of code to appear
Dialogue: 0,0:49:07.35,0:49:08.49,Default,,0,0,0,,highlighted in the points track
Dialogue: 0,0:49:08.95,0:49:10.10,Default,,0,0,0,,in instrument system trace.
Dialogue: 0,0:49:10.40,0:49:11.84,Default,,0,0,0,,So, if you switch back to
Dialogue: 0,0:49:11.84,0:49:13.77,Default,,0,0,0,,instruments, that is these red
Dialogue: 0,0:49:13.87,0:49:15.44,Default,,0,0,0,,dots at the pop in the points
Dialogue: 0,0:49:15.44,0:49:16.83,Default,,0,0,0,,track and we can see in the back
Dialogue: 0,0:49:16.83,0:49:18.71,Default,,0,0,0,,trace that it matches our event
Dialogue: 0,0:49:18.71,0:49:20.49,Default,,0,0,0,,handler for one of these events.
Dialogue: 0,0:49:21.57,0:49:22.73,Default,,0,0,0,,If you zoom in on one of these
Dialogue: 0,0:49:22.73,0:49:24.42,Default,,0,0,0,,interesting looking areas in the
Dialogue: 0,0:49:24.42,0:49:26.23,Default,,0,0,0,,points track, here, you can see
Dialogue: 0,0:49:26.23,0:49:27.96,Default,,0,0,0,,that there is a number of event
Dialogue: 0,0:49:27.96,0:49:29.88,Default,,0,0,0,,handlers that are occurring very
Dialogue: 0,0:49:29.88,0:49:30.95,Default,,0,0,0,,close together.
Dialogue: 0,0:49:31.16,0:49:33.28,Default,,0,0,0,,And by mousing over we can
Dialogue: 0,0:49:33.28,0:49:34.07,Default,,0,0,0,,actually see that they're
Dialogue: 0,0:49:34.07,0:49:35.43,Default,,0,0,0,,execute for very short amounts
Dialogue: 0,0:49:35.43,0:49:35.84,Default,,0,0,0,,of time.
Dialogue: 0,0:49:36.36,0:49:38.29,Default,,0,0,0,,The pop-up will tell us the
Dialogue: 0,0:49:38.29,0:49:39.75,Default,,0,0,0,,amount of time it has executed
Dialogue: 0,0:49:39.95,0:49:40.83,Default,,0,0,0,,and we can even see that
Dialogue: 0,0:49:40.83,0:49:42.19,Default,,0,0,0,,sometimes we have overlapping
Dialogue: 0,0:49:42.19,0:49:43.23,Default,,0,0,0,,event handlers that are all
Dialogue: 0,0:49:43.23,0:49:44.89,Default,,0,0,0,,executing concurrently at the
Dialogue: 0,0:49:44.93,0:49:45.51,Default,,0,0,0,,same time.
Dialogue: 0,0:49:45.51,0:49:47.77,Default,,0,0,0,,So, this is one of the symptoms
Dialogue: 0,0:49:47.77,0:49:48.86,Default,,0,0,0,,of potentially unwanted
Dialogue: 0,0:49:48.86,0:49:50.06,Default,,0,0,0,,concurrency in our application,
Dialogue: 0,0:49:50.38,0:49:51.55,Default,,0,0,0,,where something that didn't look
Dialogue: 0,0:49:51.55,0:49:53.35,Default,,0,0,0,,like it would cause concurrency
Dialogue: 0,0:49:53.56,0:49:55.93,Default,,0,0,0,,in your code, actually does run
Dialogue: 0,0:49:55.93,0:49:57.15,Default,,0,0,0,,in a concurrent way or multiple
Dialogue: 0,0:49:57.15,0:49:58.91,Default,,0,0,0,,threads and cause potentially
Dialogue: 0,0:49:58.91,0:49:59.88,Default,,0,0,0,,extra context switches.
Dialogue: 0,0:50:01.47,0:50:03.08,Default,,0,0,0,,So, to understand this better,
Dialogue: 0,0:50:03.08,0:50:04.59,Default,,0,0,0,,let's bring up the threads in
Dialogue: 0,0:50:04.59,0:50:05.14,Default,,0,0,0,,instruments.
Dialogue: 0,0:50:05.43,0:50:06.56,Default,,0,0,0,,And the system trace that are
Dialogue: 0,0:50:06.56,0:50:07.51,Default,,0,0,0,,executing this code.
Dialogue: 0,0:50:12.45,0:50:13.73,Default,,0,0,0,,So, here I've highlighted the
Dialogue: 0,0:50:13.73,0:50:14.72,Default,,0,0,0,,three worker threads that are
Dialogue: 0,0:50:14.72,0:50:16.03,Default,,0,0,0,,executing these event handlers.
Dialogue: 0,0:50:16.50,0:50:17.86,Default,,0,0,0,,And we can see as before that
Dialogue: 0,0:50:17.86,0:50:19.37,Default,,0,0,0,,they are executing on call
Dialogue: 0,0:50:19.56,0:50:20.38,Default,,0,0,0,,during this time.
Dialogue: 0,0:50:20.93,0:50:22.32,Default,,0,0,0,,And the time they were running.
Dialogue: 0,0:50:22.32,0:50:23.85,Default,,0,0,0,,But here we can see they were
Dialogue: 0,0:50:23.85,0:50:25.87,Default,,0,0,0,,again, running for a very short
Dialogue: 0,0:50:25.87,0:50:27.57,Default,,0,0,0,,amount of time in this area.
Dialogue: 0,0:50:27.93,0:50:30.39,Default,,0,0,0,,And we can verify that they are
Dialogue: 0,0:50:30.39,0:50:31.69,Default,,0,0,0,,making these read system calls
Dialogue: 0,0:50:31.69,0:50:33.15,Default,,0,0,0,,that we saw earlier in the event
Dialogue: 0,0:50:33.15,0:50:33.42,Default,,0,0,0,,handler.
Dialogue: 0,0:50:34.14,0:50:35.77,Default,,0,0,0,,And we can get some more detail
Dialogue: 0,0:50:35.77,0:50:36.86,Default,,0,0,0,,by looking at the back trace
Dialogue: 0,0:50:36.86,0:50:38.25,Default,,0,0,0,,again, and seeing, yes it is us
Dialogue: 0,0:50:38.25,0:50:39.28,Default,,0,0,0,,that is calling that read system
Dialogue: 0,0:50:39.28,0:50:41.25,Default,,0,0,0,,call and here it reads 97 bytes
Dialogue: 0,0:50:41.58,0:50:42.37,Default,,0,0,0,,from our socket.
Dialogue: 0,0:50:44.22,0:50:45.25,Default,,0,0,0,,And looking at the other
Dialogue: 0,0:50:45.25,0:50:46.21,Default,,0,0,0,,threads, the same pattern
Dialogue: 0,0:50:46.21,0:50:46.77,Default,,0,0,0,,repeats.
Dialogue: 0,0:50:46.77,0:50:47.79,Default,,0,0,0,,You can see it's the same read
Dialogue: 0,0:50:47.79,0:50:49.21,Default,,0,0,0,,system calls occurring there,
Dialogue: 0,0:50:49.21,0:50:49.99,Default,,0,0,0,,more or less at the same
Dialogue: 0,0:50:49.99,0:50:52.47,Default,,0,0,0,,timeframe and so on the second
Dialogue: 0,0:50:52.47,0:50:53.50,Default,,0,0,0,,thread here or on the first
Dialogue: 0,0:50:53.50,0:50:53.74,Default,,0,0,0,,thread.
Dialogue: 0,0:50:54.00,0:50:54.86,Default,,0,0,0,,They're really all doing the
Dialogue: 0,0:50:54.86,0:50:56.74,Default,,0,0,0,,same thing, and overlapping.
Dialogue: 0,0:50:57.89,0:50:59.16,Default,,0,0,0,,It would be much better for our
Dialogue: 0,0:50:59.16,0:51:01.81,Default,,0,0,0,,program if these things executed
Dialogue: 0,0:51:01.81,0:51:02.56,Default,,0,0,0,,on a single thread.
Dialogue: 0,0:51:02.56,0:51:03.74,Default,,0,0,0,,Here we don't really get any
Dialogue: 0,0:51:03.74,0:51:05.05,Default,,0,0,0,,benefit from the concurrency
Dialogue: 0,0:51:05.32,0:51:06.46,Default,,0,0,0,,because we are executing such
Dialogue: 0,0:51:06.46,0:51:07.44,Default,,0,0,0,,short pieces of code.
Dialogue: 0,0:51:07.90,0:51:09.72,Default,,0,0,0,,And we are probably getting more
Dialogue: 0,0:51:09.72,0:51:11.24,Default,,0,0,0,,harm than good from adding these
Dialogue: 0,0:51:11.24,0:51:12.22,Default,,0,0,0,,extra context switches.
Dialogue: 0,0:51:13.04,0:51:14.50,Default,,0,0,0,,So, let's apply the patterns
Dialogue: 0,0:51:14.50,0:51:15.78,Default,,0,0,0,,that we saw earlier to fix this
Dialogue: 0,0:51:15.78,0:51:16.67,Default,,0,0,0,,problem in this sample
Dialogue: 0,0:51:16.67,0:51:17.22,Default,,0,0,0,,application.
Dialogue: 0,0:51:17.81,0:51:19.45,Default,,0,0,0,,Jumping back into XCode, let's
Dialogue: 0,0:51:19.45,0:51:20.58,Default,,0,0,0,,see how we set up the target
Dialogue: 0,0:51:20.58,0:51:21.62,Default,,0,0,0,,queue for this source that we
Dialogue: 0,0:51:21.62,0:51:21.84,Default,,0,0,0,,have.
Dialogue: 0,0:51:23.06,0:51:24.10,Default,,0,0,0,,So, that's sort of when you
Dialogue: 0,0:51:24.10,0:51:25.77,Default,,0,0,0,,create this queue at the top of
Dialogue: 0,0:51:25.84,0:51:27.26,Default,,0,0,0,,this function framework and as
Dialogue: 0,0:51:27.26,0:51:29.19,Default,,0,0,0,,you can see, we do it simply by
Dialogue: 0,0:51:29.19,0:51:30.05,Default,,0,0,0,,calling this batch queue
Dialogue: 0,0:51:30.05,0:51:30.57,Default,,0,0,0,,correct.
Dialogue: 0,0:51:31.45,0:51:32.85,Default,,0,0,0,,And that creates an independent
Dialogue: 0,0:51:32.85,0:51:34.02,Default,,0,0,0,,serial queue that isn't
Dialogue: 0,0:51:34.02,0:51:35.35,Default,,0,0,0,,connected to anything else in
Dialogue: 0,0:51:35.35,0:51:36.05,Default,,0,0,0,,our application.
Dialogue: 0,0:51:36.05,0:51:37.89,Default,,0,0,0,,This is exactly like the case we
Dialogue: 0,0:51:37.89,0:51:40.04,Default,,0,0,0,,had earlier in my example of the
Dialogue: 0,0:51:40.04,0:51:40.94,Default,,0,0,0,,networking subsystem.
Dialogue: 0,0:51:41.64,0:51:43.36,Default,,0,0,0,,So, let's fix that by adding a
Dialogue: 0,0:51:43.36,0:51:44.62,Default,,0,0,0,,mutual exclusion context at the
Dialogue: 0,0:51:44.62,0:51:46.20,Default,,0,0,0,,bottom of all of these queues
Dialogue: 0,0:51:46.20,0:51:47.11,Default,,0,0,0,,for all of these connections.
Dialogue: 0,0:51:47.61,0:51:49.33,Default,,0,0,0,,And we do that by adding the, or
Dialogue: 0,0:51:49.33,0:51:50.67,Default,,0,0,0,,by switching to the dispatch
Dialogue: 0,0:51:50.67,0:51:51.61,Default,,0,0,0,,queue create with target
Dialogue: 0,0:51:51.61,0:51:53.26,Default,,0,0,0,,function up here introduced to
Dialogue: 0,0:51:53.26,0:51:53.78,Default,,0,0,0,,you earlier.
Dialogue: 0,0:51:54.42,0:51:59.00,Default,,0,0,0,,So, here we add dispatch queue,
Dialogue: 0,0:51:59.00,0:51:59.75,Default,,0,0,0,,create this target.
Dialogue: 0,0:52:00.21,0:52:01.72,Default,,0,0,0,,And we use a single mutual
Dialogue: 0,0:52:01.72,0:52:02.91,Default,,0,0,0,,exclusion queue as the target
Dialogue: 0,0:52:02.91,0:52:03.76,Default,,0,0,0,,queue for all of these.
Dialogue: 0,0:52:04.20,0:52:05.25,Default,,0,0,0,,And this is a serial queue that
Dialogue: 0,0:52:05.25,0:52:06.60,Default,,0,0,0,,we created somewhere else.
Dialogue: 0,0:52:07.42,0:52:09.04,Default,,0,0,0,,And with that, we build and run
Dialogue: 0,0:52:09.04,0:52:09.98,Default,,0,0,0,,again and look at the system
Dialogue: 0,0:52:09.98,0:52:10.55,Default,,0,0,0,,trace again.
Dialogue: 0,0:52:11.58,0:52:12.85,Default,,0,0,0,,And now it looks very different.
Dialogue: 0,0:52:13.47,0:52:15.44,Default,,0,0,0,,Here we have still the same
Dialogue: 0,0:52:15.44,0:52:16.62,Default,,0,0,0,,points track and we still see
Dialogue: 0,0:52:16.62,0:52:18.14,Default,,0,0,0,,the same network events that
Dialogue: 0,0:52:18.14,0:52:19.43,Default,,0,0,0,,occur, but as you can see,
Dialogue: 0,0:52:19.66,0:52:20.60,Default,,0,0,0,,there's no more overlapping
Dialogue: 0,0:52:20.60,0:52:21.69,Default,,0,0,0,,events in that track, and
Dialogue: 0,0:52:21.91,0:52:23.07,Default,,0,0,0,,there's a single worker thread
Dialogue: 0,0:52:23.07,0:52:24.23,Default,,0,0,0,,that executes this code.
Dialogue: 0,0:52:24.31,0:52:26.38,Default,,0,0,0,,And if we zoom in on one of
Dialogue: 0,0:52:26.43,0:52:27.73,Default,,0,0,0,,these clusters we can see this
Dialogue: 0,0:52:27.73,0:52:29.07,Default,,0,0,0,,is actually many instances of
Dialogue: 0,0:52:29.07,0:52:31.00,Default,,0,0,0,,that event handler executing in
Dialogue: 0,0:52:31.00,0:52:32.31,Default,,0,0,0,,rapid succession, which is
Dialogue: 0,0:52:32.31,0:52:33.69,Default,,0,0,0,,exactly what we expected.
Dialogue: 0,0:52:34.22,0:52:36.38,Default,,0,0,0,,And when you zoom in more on one
Dialogue: 0,0:52:36.38,0:52:37.75,Default,,0,0,0,,particular event, you can see
Dialogue: 0,0:52:37.75,0:52:38.90,Default,,0,0,0,,it's still executing for a
Dialogue: 0,0:52:38.90,0:52:40.68,Default,,0,0,0,,fairly short amount of time, and
Dialogue: 0,0:52:40.68,0:52:41.72,Default,,0,0,0,,making those same read sys
Dialogue: 0,0:52:41.72,0:52:42.12,Default,,0,0,0,,calls.
Dialogue: 0,0:52:42.79,0:52:44.22,Default,,0,0,0,,But now that is much less
Dialogue: 0,0:52:44.22,0:52:45.27,Default,,0,0,0,,problematic because it's all
Dialogue: 0,0:52:45.27,0:52:46.99,Default,,0,0,0,,happening on a single thread.
Dialogue: 0,0:52:49.64,0:52:51.89,Default,,0,0,0,,So, this may seem like a very
Dialogue: 0,0:52:51.89,0:52:53.63,Default,,0,0,0,,simple and trivial change, but
Dialogue: 0,0:52:53.63,0:52:54.55,Default,,0,0,0,,it's worth pointing out that
Dialogue: 0,0:52:54.55,0:52:55.93,Default,,0,0,0,,it's exactly this type of small
Dialogue: 0,0:52:55.93,0:52:57.91,Default,,0,0,0,,tweak that led to the 1.3X
Dialogue: 0,0:52:57.91,0:52:59.31,Default,,0,0,0,,performance improvement in some
Dialogue: 0,0:52:59.31,0:53:00.78,Default,,0,0,0,,of our own framework code that
Dialogue: 0,0:53:00.78,0:53:02.02,Default,,0,0,0,,Daniel pointed out at the
Dialogue: 0,0:53:02.02,0:53:02.94,Default,,0,0,0,,beginning of the session.
Dialogue: 0,0:53:03.43,0:53:04.74,Default,,0,0,0,,So, very small changes like this
Dialogue: 0,0:53:04.74,0:53:05.60,Default,,0,0,0,,can make a significant
Dialogue: 0,0:53:05.60,0:53:06.04,Default,,0,0,0,,difference.
Dialogue: 0,0:53:07.48,0:53:12.26,Default,,0,0,0,,All right so, let's look back at
Dialogue: 0,0:53:12.26,0:53:13.17,Default,,0,0,0,,what we've covered today.
Dialogue: 0,0:53:13.17,0:53:15.16,Default,,0,0,0,,Daniel, at the beginning went
Dialogue: 0,0:53:15.16,0:53:16.61,Default,,0,0,0,,with you over the details of how
Dialogue: 0,0:53:16.61,0:53:18.74,Default,,0,0,0,,not to go off core unnecessarily
Dialogue: 0,0:53:18.74,0:53:19.98,Default,,0,0,0,,is ever more important for
Dialogue: 0,0:53:19.98,0:53:21.41,Default,,0,0,0,,modern CPUs so that it can reach
Dialogue: 0,0:53:21.41,0:53:22.46,Default,,0,0,0,,the most efficient performance
Dialogue: 0,0:53:22.46,0:53:22.68,Default,,0,0,0,,state.
Dialogue: 0,0:53:23.51,0:53:25.11,Default,,0,0,0,,We looked at the importance of
Dialogue: 0,0:53:25.11,0:53:26.69,Default,,0,0,0,,sizing the workforce of power
Dialogue: 0,0:53:26.69,0:53:28.59,Default,,0,0,0,,workloads and for work moving
Dialogue: 0,0:53:28.59,0:53:29.73,Default,,0,0,0,,between subsystems in your
Dialogue: 0,0:53:29.73,0:53:31.46,Default,,0,0,0,,application as well as inside
Dialogue: 0,0:53:31.54,0:53:32.27,Default,,0,0,0,,those subsystems.
Dialogue: 0,0:53:33.17,0:53:34.45,Default,,0,0,0,,We talked about how to choose
Dialogue: 0,0:53:34.45,0:53:36.48,Default,,0,0,0,,good granularity of concurrency
Dialogue: 0,0:53:36.48,0:53:37.92,Default,,0,0,0,,with GCD by using a fixed number
Dialogue: 0,0:53:37.92,0:53:38.95,Default,,0,0,0,,of serial queue hierarchies in
Dialogue: 0,0:53:38.95,0:53:39.60,Default,,0,0,0,,your application.
Dialogue: 0,0:53:40.10,0:53:41.06,Default,,0,0,0,,And Pierre walked you through
Dialogue: 0,0:53:41.06,0:53:42.96,Default,,0,0,0,,how to modernize your GCD usage
Dialogue: 0,0:53:43.26,0:53:44.36,Default,,0,0,0,,to take full advantage of
Dialogue: 0,0:53:44.36,0:53:46.19,Default,,0,0,0,,improvements in the OS, in our
Dialogue: 0,0:53:46.19,0:53:46.63,Default,,0,0,0,,hardware.
Dialogue: 0,0:53:47.60,0:53:49.10,Default,,0,0,0,,And finally, we saw how we can
Dialogue: 0,0:53:49.10,0:53:50.49,Default,,0,0,0,,use instruments to find problems
Dialogue: 0,0:53:50.49,0:53:51.89,Default,,0,0,0,,spots in our application and how
Dialogue: 0,0:53:52.21,0:53:54.83,Default,,0,0,0,,to fix them.
Dialogue: 0,0:53:55.19,0:53:56.26,Default,,0,0,0,,For more information on this
Dialogue: 0,0:53:56.26,0:53:57.93,Default,,0,0,0,,session, I will direct you to
Dialogue: 0,0:53:57.93,0:54:00.20,Default,,0,0,0,,this URL where the documentation
Dialogue: 0,0:54:00.20,0:54:02.12,Default,,0,0,0,,links for GCD are as well as the
Dialogue: 0,0:54:02.12,0:54:04.18,Default,,0,0,0,,movie for the session, and we
Dialogue: 0,0:54:04.18,0:54:05.39,Default,,0,0,0,,have some related sessions this
Dialogue: 0,0:54:05.39,0:54:06.57,Default,,0,0,0,,week that might be worthwhile
Dialogue: 0,0:54:06.88,0:54:07.62,Default,,0,0,0,,going to.
Dialogue: 0,0:54:07.75,0:54:09.73,Default,,0,0,0,,Introducing Core ML already
Dialogue: 0,0:54:09.73,0:54:11.23,Default,,0,0,0,,having happened, the other two
Dialogue: 0,0:54:11.23,0:54:12.39,Default,,0,0,0,,are going to help you with
Dialogue: 0,0:54:12.39,0:54:13.64,Default,,0,0,0,,parallel and computing
Dialogue: 0,0:54:13.69,0:54:14.18,Default,,0,0,0,,[inaudible] task in your
Dialogue: 0,0:54:14.34,0:54:15.75,Default,,0,0,0,,application like we talked about
Dialogue: 0,0:54:15.75,0:54:16.35,Default,,0,0,0,,at the beginning.
Dialogue: 0,0:54:16.95,0:54:19.43,Default,,0,0,0,,And the last two are going to
Dialogue: 0,0:54:19.43,0:54:20.57,Default,,0,0,0,,help you with more performance
Dialogue: 0,0:54:20.57,0:54:21.66,Default,,0,0,0,,analysis and improvements of
Dialogue: 0,0:54:21.70,0:54:23.19,Default,,0,0,0,,different aspects of your app.
Dialogue: 0,0:54:23.19,0:54:25.22,Default,,0,0,0,,And with that, I'd like to thank
Dialogue: 0,0:54:25.22,0:54:25.84,Default,,0,0,0,,you for coming.
Dialogue: 0,0:54:26.18,0:54:26.99,Default,,0,0,0,,If you have any questions,
Dialogue: 0,0:54:26.99,0:54:27.97,Default,,0,0,0,,please come and see us at the
Dialogue: 0,0:54:27.97,0:54:28.25,Default,,0,0,0,,labs.
Dialogue: 0,0:54:29.51,0:54:31.51,Default,,0,0,0,,[ Applause ]
