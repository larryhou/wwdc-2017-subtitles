1
00:00:28,067 --> 00:00:31,833
大家好 欢迎你们来到
“tvOS上的最佳本地化体验”

2
00:00:32,467 --> 00:00:33,933
我的名字叫若阿金·罗波·席尔瓦

3
00:00:34,033 --> 00:00:35,167
在接下来几分钟里

4
00:00:35,233 --> 00:00:37,500
我将会带着你们看一下
你们要采取的几个步骤

5
00:00:37,633 --> 00:00:41,100
在tvOS上创造一个
很棒的本地化应用体验

6
00:00:42,933 --> 00:00:45,700
Apple TV已经在多语言
和不同地区上架了

7
00:00:45,833 --> 00:00:47,300
tvOS 11上新加入的是

8
00:00:47,367 --> 00:00:50,867
阿拉伯语和希伯来语
以及可选的系统语言

9
00:00:51,700 --> 00:00:53,333
将国际化支持加入到你的应用中

10
00:00:53,400 --> 00:00:55,867
是一个进入新市场的好机会

11
00:00:55,933 --> 00:00:58,933
让更多的用户来使用并享受你的内容

12
00:00:59,400 --> 00:01:03,067
我们有很多的API和工具
来帮助你们达成这一点

13
00:01:03,500 --> 00:01:04,467
让我们现在就开始吧

14
00:01:07,067 --> 00:01:09,700
我会把这个主题分成
三个不同部分来讲

15
00:01:09,967 --> 00:01:13,067
首先 我会谈谈如何处理
文本的最佳体验

16
00:01:13,133 --> 00:01:14,567
即显示给你用户的文本信息

17
00:01:15,200 --> 00:01:18,567
然后我会说下
对于布局和图像应该考虑的因素

18
00:01:19,067 --> 00:01:22,267
最后 就是导出你本地内容的步骤

19
00:01:22,367 --> 00:01:24,733
还有测试你的应用
以确保它能正常运作

20
00:01:25,433 --> 00:01:27,167
让我们从文本开始说起吧

21
00:01:29,200 --> 00:01:30,900
任何要呈现给你用户的文本信息

22
00:01:30,967 --> 00:01:33,133
都应该以他们的偏好语言显示

23
00:01:34,200 --> 00:01:37,567
如果在你的Storyboard元素里有些文本
你就什么都不需要做了

24
00:01:37,900 --> 00:01:39,700
它们被默认标记为“本地化的”

25
00:01:41,667 --> 00:01:44,300
如果你计划呈现的是字符串和代码

26
00:01:44,567 --> 00:01:47,300
那么这些内容应该调用
NSLocalizedString来返回

27
00:01:47,667 --> 00:01:50,100
这样就可以将你的字符串
标记为“本地化的”

28
00:01:50,167 --> 00:01:53,300
以便它会被包含在
你将要送出翻译的文件中

29
00:01:54,700 --> 00:01:56,000
对于这两种情况

30
00:01:56,067 --> 00:01:58,900
给字符串做好备注是非常有用的

31
00:01:59,167 --> 00:02:02,367
你应用里的每一个本地化的字符串
都应该包含这部分备注

32
00:02:02,933 --> 00:02:04,600
备注可以被当成定义因素

33
00:02:04,667 --> 00:02:09,233
用于已翻译内容和
感觉不自然或不清晰的文本信息之间

34
00:02:11,500 --> 00:02:13,600
这里是一个代码中本地化字符串的例子

35
00:02:14,067 --> 00:02:16,733
如你所见
这是个简单的英文单词“订阅”

36
00:02:16,967 --> 00:02:19,567
其备注描述了
它会出现我UI中的什么位置

37
00:02:19,667 --> 00:02:22,067
还有它在我的应用里会实现什么

38
00:02:25,233 --> 00:02:28,267
将备注加到
Storyboard元素上也很简单

39
00:02:28,800 --> 00:02:31,100
对于每个元素 你就把备注加到

40
00:02:31,167 --> 00:02:34,700
在Identity Inspector下的
Comment for Localizer文本框

41
00:02:37,967 --> 00:02:40,467
需要注意的是
要显示你应用中的文本信息时

42
00:02:40,700 --> 00:02:43,333
本地化字符串不是唯一实现它的方式

43
00:02:43,733 --> 00:02:46,567
事实上 你的一些用例很有可能

44
00:02:46,633 --> 00:02:48,667
被我们的格式化类所支持

45
00:02:49,300 --> 00:02:51,967
这些类能帮助你格式化和显示内容
像是数字

46
00:02:52,033 --> 00:02:56,367
汇率 日期 像是长度和质量单位
以及更多

47
00:02:56,533 --> 00:02:59,133
根本就不用给这些内容写本地化字符串

48
00:03:01,667 --> 00:03:03,900
这里是个关于使用
DateFormatter的例子

49
00:03:04,300 --> 00:03:05,900
我只需创建这个对象

50
00:03:05,967 --> 00:03:08,400
在本例中
我只关心显示时间

51
00:03:08,567 --> 00:03:11,600
因此我将timeStyle
设成我偏好的长度值

52
00:03:12,000 --> 00:03:14,800
最后得到一个此对象的格式化字符串

53
00:03:15,700 --> 00:03:19,133
这个字符串
不仅保证是以用户的偏好语言显示

54
00:03:19,267 --> 00:03:22,200
而且处理了一些其他的格式化环境内容

55
00:03:22,267 --> 00:03:25,833
像是用户偏爱12小时制
还是24小时制

56
00:03:28,067 --> 00:03:30,933
关于如何最大程度地利用格式器
的更多信息

57
00:03:31,000 --> 00:03:33,600
还有它们国际化能力的一些指引内容

58
00:03:33,867 --> 00:03:37,067
我强烈建议你们去看看
2016年的这两场演讲

59
00:03:40,800 --> 00:03:42,333
让我们谈谈远程内容

60
00:03:43,367 --> 00:03:45,233
任何你从服务器取得的文本信息

61
00:03:45,300 --> 00:03:47,767
也应该与你应用的运行语言一致

62
00:03:48,567 --> 00:03:50,000
我所指的是 例如

63
00:03:50,067 --> 00:03:52,767
你应用里所显示的
多媒体内容和描述信息

64
00:03:54,933 --> 00:03:57,467
为了达成这一点
你需要通知你的服务器

65
00:03:57,533 --> 00:03:59,900
内容应该以什么语言来呈现

66
00:04:02,233 --> 00:04:05,700
我们有些API来让你们知道
你应用的当前运行语言是什么

67
00:04:05,767 --> 00:04:10,467
这帮你省了很多工夫
来从你支持的语言中选出最好的

68
00:04:10,767 --> 00:04:12,733
同时还尊重了用户的偏好

69
00:04:14,433 --> 00:04:17,433
像是区域差异和
适当的区域备用方案这些因素

70
00:04:17,500 --> 00:04:18,567
也被考虑到了

71
00:04:21,966 --> 00:04:23,600
举几个小例子

72
00:04:23,667 --> 00:04:26,333
这里我有一个表格
第一列显示的是语种

73
00:04:26,400 --> 00:04:28,500
用户可能将此语种选为其系统语言

74
00:04:28,667 --> 00:04:32,467
第二列
显示了你应用支持的备选语言

75
00:04:32,967 --> 00:04:36,233
第三列就是最终结果
在考虑各种情况后所得出

76
00:04:36,667 --> 00:04:37,767
第一个例子是

77
00:04:37,833 --> 00:04:40,200
用户选择了西班牙语

78
00:04:40,267 --> 00:04:41,833
并将区域设为墨西哥

79
00:04:42,067 --> 00:04:44,700
由于识别码是“es-MX”

80
00:04:46,833 --> 00:04:50,267
这个应用除了支持西班牙的西班牙语
还支持拉丁美洲西班牙语

81
00:04:50,333 --> 00:04:56,167
在本地化列表中
分别是“es-ES”和“es-419”

82
00:04:56,967 --> 00:05:01,000
运行时间接下来会
为你的应用选择拉丁美洲西班牙语

83
00:05:02,900 --> 00:05:04,667
类似地 第二个例子是

84
00:05:04,800 --> 00:05:07,600
用户选择了中文
并将区域设为中国

85
00:05:07,833 --> 00:05:10,467
Bundle接下来就会选择
“简体中文”

86
00:05:10,533 --> 00:05:12,433
从你应用所支持的语种当中

87
00:05:16,733 --> 00:05:18,667
要获取你应用的当前运行语言

88
00:05:18,800 --> 00:05:22,033
你只需要从偏好本地化内容中
获取第一个对象

89
00:05:22,100 --> 00:05:23,367
该内容来自于你应用的bundle

90
00:05:24,200 --> 00:05:27,133
它会返回一个语言识别码
你可以将此识别码发送到服务器上

91
00:05:28,533 --> 00:05:29,500
同样地

92
00:05:29,667 --> 00:05:32,933
如果你的服务器支持
很多种跟你应用有关的语言

93
00:05:33,267 --> 00:05:36,433
你也可从这些语言中得到最合适的语言

94
00:05:36,633 --> 00:05:39,700
利用Bundle.preferredLocalizations
(from: available)语句

95
00:05:41,600 --> 00:05:43,967
这就是关于
如何处理你应用中文本信息的概述

96
00:05:44,533 --> 00:05:47,400
可以使用Storyboard
来将文本标记为本地化的

97
00:05:47,467 --> 00:05:49,833
也可以调用
NSLocalizedString以及相关代码

98
00:05:50,433 --> 00:05:51,667
我们有许多格式器

99
00:05:51,733 --> 00:05:54,167
用来显示和上下文化信息

100
00:05:54,233 --> 00:05:55,500
像是日期和数字

101
00:05:55,833 --> 00:05:58,233
对于远程内容
你可以依赖Bundle API

102
00:05:58,300 --> 00:05:59,567
来通知你的服务器

103
00:05:59,633 --> 00:06:01,467
你的内容应该被显示成什么语言

104
00:06:03,733 --> 00:06:06,667
接下来 让我们谈下布局和图像

105
00:06:09,767 --> 00:06:10,833
谈到布局的时候

106
00:06:10,967 --> 00:06:13,633
通常有两种要进行适应的情况

107
00:06:14,900 --> 00:06:17,500
第一种就是单词长度可能不同

108
00:06:18,400 --> 00:06:20,667
例如
这里是英文单词"backup"

109
00:06:21,433 --> 00:06:23,500
然后这是芬兰语中同样的单词

110
00:06:24,233 --> 00:06:27,033
显著变长或者变短的翻译

111
00:06:27,100 --> 00:06:29,633
会影响你的布局在运行时间中的表现

112
00:06:29,767 --> 00:06:31,467
你应该为此相应地进行设计

113
00:06:32,933 --> 00:06:35,233
另一个方面是文本方向性

114
00:06:36,133 --> 00:06:37,800
英语使用的是拉丁字母表

115
00:06:37,867 --> 00:06:40,167
读还有解析都是从左到右的

116
00:06:41,733 --> 00:06:43,033
一些语言像是阿拉伯语

117
00:06:43,100 --> 00:06:45,233
它们的文本是从右到左读的

118
00:06:45,633 --> 00:06:48,500
结果就是有一些设计上的考虑

119
00:06:48,567 --> 00:06:50,933
来应对关于信息的流向和顺序

120
00:06:51,567 --> 00:06:53,500
例如 在从右到左的语言中

121
00:06:53,600 --> 00:06:56,333
列表中的第一个项目应该是在最右边

122
00:06:56,400 --> 00:06:57,767
而不是在最左边

123
00:06:59,667 --> 00:07:02,700
如果你的应用用UIKit
来显示用户界面元素

124
00:07:02,833 --> 00:07:04,567
这里有一些你能用得上的技术

125
00:07:04,633 --> 00:07:07,067
来让你轻松应对这两种不同的情况

126
00:07:07,567 --> 00:07:10,967
我强烈建议你
从UIStackView开始看起

127
00:07:11,533 --> 00:07:15,167
UIStackView是一个用来布局
一系列视图的流线型界面

128
00:07:15,367 --> 00:07:17,100
水平或者垂直地

129
00:07:17,300 --> 00:07:20,600
它们还可以被嵌套使用
来创建这里所显示的复杂布局

130
00:07:22,167 --> 00:07:24,933
在本例中
你可以看到我有一些编好号的视图

131
00:07:25,400 --> 00:07:28,200
这里的基本信息流是从左到右的

132
00:07:28,267 --> 00:07:30,233
就像是英语这样的语言

133
00:07:32,133 --> 00:07:34,600
关于UIStackView的内容
是底层的

134
00:07:34,667 --> 00:07:36,733
它依赖于叫作自动布局的东西

135
00:07:37,900 --> 00:07:42,400
自动布局是一组API
它用来确定视图间的布局关系

136
00:07:42,567 --> 00:07:44,900
也就是说如果一个视图的尺寸改变了

137
00:07:45,000 --> 00:07:48,367
其他的视图能够进行相应地适应更改
来避免重叠或者截断

138
00:07:49,567 --> 00:07:50,767
另外

139
00:07:50,967 --> 00:07:54,667
自动布局
还依赖于头限制和尾限制的概念

140
00:07:55,300 --> 00:07:58,100
这些本来是左到右位置限制

141
00:07:58,200 --> 00:08:01,867
不过当运行的是
从右到左语言的时候评估的是右到左

142
00:08:02,067 --> 00:08:04,067
因此 对于上面的栈视图

143
00:08:04,867 --> 00:08:07,567
布局会自动地改变为从右到左

144
00:08:07,633 --> 00:08:10,000
比如 运行在阿拉伯语或者希伯来语时

145
00:08:12,033 --> 00:08:12,900
而且这可以被实现

146
00:08:12,967 --> 00:08:15,167
都不用额外多写一行代码

147
00:08:15,233 --> 00:08:16,767
对于不同的布局环境来说

148
00:08:19,300 --> 00:08:20,933
对于使用TVMLKit的应用来说

149
00:08:21,000 --> 00:08:22,200
其所提供的标准模板

150
00:08:22,267 --> 00:08:25,000
对于我上面提到的两点
所有费力的工作都被它完成了

151
00:08:26,300 --> 00:08:28,367
特别是对于从右到左语言

152
00:08:28,433 --> 00:08:32,567
有着新加入的阿拉伯语和希伯来语
以及可选的系统语言

153
00:08:33,033 --> 00:08:36,667
我们有些新的API
来权衡相同的头和尾概念

154
00:08:36,866 --> 00:08:40,533
对于有特定位置或者
对齐的TVMLKit元素来说

155
00:08:42,366 --> 00:08:44,300
类似地 对于边缘和内填充

156
00:08:44,367 --> 00:08:47,267
我们有新的多媒体询问来描述特定的值

157
00:08:47,333 --> 00:08:49,133
对于一个特定布局方向来说

158
00:08:51,733 --> 00:08:53,600
为了深入探究这些新功能

159
00:08:53,867 --> 00:08:56,567
请参见TVMLKit进阶

160
00:08:59,233 --> 00:09:00,467
接下来让我们看看图像

161
00:09:00,567 --> 00:09:02,733
对于这个主题
我会简要说明一个方法

162
00:09:02,800 --> 00:09:05,200
你要记住这个方法
以应对不同的布局方向

163
00:09:05,767 --> 00:09:09,433
通常你应用中的图像会分为三类

164
00:09:10,533 --> 00:09:13,800
你的绝大多数图像可能都是第一种
也就是通用的

165
00:09:14,067 --> 00:09:16,533
这些图像不需要特别调整

166
00:09:16,600 --> 00:09:17,800
以应对某个布局方向

167
00:09:19,733 --> 00:09:20,833
第二种

168
00:09:20,900 --> 00:09:24,067
就是确实有某种方向性的图像

169
00:09:24,533 --> 00:09:25,733
这种图像有很多种

170
00:09:25,800 --> 00:09:28,733
像是导航箭头 揭露指示器

171
00:09:28,867 --> 00:09:32,067
或者像是这个例子
一种文本的简化呈现

172
00:09:32,933 --> 00:09:34,633
对于这些图像来说
唯一要做的步骤

173
00:09:34,700 --> 00:09:37,067
来适应相反方向布局就是

174
00:09:37,300 --> 00:09:38,833
从图形角度上镜像它们

175
00:09:38,967 --> 00:09:40,433
现在我们就有正确的结果了

176
00:09:42,800 --> 00:09:45,733
最后 第三种和第二种很类似

177
00:09:45,833 --> 00:09:47,300
不过相对复杂些

178
00:09:47,367 --> 00:09:51,033
也就是单纯地翻转它们
会得到错误的结果

179
00:09:52,067 --> 00:09:54,967
在本例中 我有一个带对勾的项目列表

180
00:09:55,167 --> 00:09:57,433
但是作为符号 对勾是不应该被镜像的

181
00:09:59,033 --> 00:10:00,167
所以在这种情况下

182
00:10:00,233 --> 00:10:02,300
我需要的是两个独立的图像

183
00:10:02,367 --> 00:10:03,867
每个对应不同的布局方向

184
00:10:06,200 --> 00:10:08,967
Xcode可以让你
轻松应对所有这些情况

185
00:10:09,033 --> 00:10:10,833
从你的资源目录中就可以找到

186
00:10:11,300 --> 00:10:13,333
对于每个资源 你可以标出

187
00:10:13,400 --> 00:10:16,300
某个图像是否有固定的方向
或者应该适应

188
00:10:16,367 --> 00:10:19,567
不论是通过镜像
还是指明不同图像的情况

189
00:10:19,767 --> 00:10:22,433
接下来就是一般的图像使用了

190
00:10:22,500 --> 00:10:25,467
通过代码
或是通过Interface Builder使用

191
00:10:28,000 --> 00:10:29,000
对于更多的内容

192
00:10:29,067 --> 00:10:31,933
关于如何使用资源目录
来应对不同的布局方向

193
00:10:32,100 --> 00:10:34,367
请参见2016年的这场演讲

194
00:10:37,367 --> 00:10:38,900
这就是关于布局和图像的内容

195
00:10:39,167 --> 00:10:41,267
我们看到了UIKit和
TVMLKit

196
00:10:41,333 --> 00:10:44,033
对于适应的布局
有着非常高级别的处理办法

197
00:10:44,667 --> 00:10:48,967
还介绍了一些tvOS11
新引入用来支持从右到左语言的API

198
00:10:49,600 --> 00:10:51,767
还有关于图像方向性的概念

199
00:10:51,833 --> 00:10:53,833
以及为何它会成为图像资源的一部分

200
00:10:56,167 --> 00:10:57,067
最后同样重要的是

201
00:10:57,133 --> 00:10:59,500
让我们谈谈
如何将一门语言添加到你的应用

202
00:10:59,567 --> 00:11:00,767
我从头到尾来讲一下

203
00:11:03,367 --> 00:11:04,700
将一门语言添加到你的项目

204
00:11:04,767 --> 00:11:06,400
是在项目编辑器内完成的

205
00:11:06,800 --> 00:11:09,067
在Xcode中选择你的项目文件

206
00:11:09,133 --> 00:11:10,633
在项目设置中

207
00:11:10,867 --> 00:11:14,033
你可以在本地化区域添加支持的语言

208
00:11:15,567 --> 00:11:18,967
Xcode会管理并且追踪
任何可用的文件管理

209
00:11:19,033 --> 00:11:21,267
像是从Storyboard中
提取文本信息

210
00:11:21,433 --> 00:11:24,133
还有你在代码中
标记为本地化的字符串

211
00:11:27,900 --> 00:11:30,867
当你准备好将应用的内容进行翻译了

212
00:11:30,933 --> 00:11:33,867
接下来你只需要在Xcode中
选择你的项目文件

213
00:11:34,000 --> 00:11:37,100
并且在编辑菜单里选择本地化导出

214
00:11:37,767 --> 00:11:41,300
Xcode会生成一个翻译交换文件
或者XLIFF

215
00:11:41,367 --> 00:11:43,000
你可以把它发出去进行翻译

216
00:11:45,633 --> 00:11:47,133
一旦你收到送回的这个文件

217
00:11:47,367 --> 00:11:49,900
要将该内容重新引入到
你的Xcode项目

218
00:11:50,000 --> 00:11:53,800
只需要选择引入本地化
从相同的菜单中

219
00:11:55,400 --> 00:11:58,267
Xcode会更新所有相关文件和资源

220
00:11:58,333 --> 00:12:00,067
以确保你的应用在构建的时候

221
00:12:00,233 --> 00:12:02,900
包含了所有最新的所支持的翻译

222
00:12:07,100 --> 00:12:09,700
完成了这个之后
测试你的应用是个不错的主意

223
00:12:09,767 --> 00:12:12,167
在你计划支持的不同环境上进行测试

224
00:12:13,033 --> 00:12:16,100
Xcode提供了许多不同功能
来帮助你们实现这个目的

225
00:12:16,267 --> 00:12:17,400
你就能清楚了解

226
00:12:17,467 --> 00:12:19,533
你的应用在这些环境下表现如何

227
00:12:19,600 --> 00:12:21,833
即使你根本不会说所支持的语言

228
00:12:25,000 --> 00:12:26,267
对于Objective-C代码

229
00:12:26,333 --> 00:12:28,200
静态分析器的支持确保了

230
00:12:28,267 --> 00:12:30,467
对于一个UI元素而言
你所提供的任何字符串

231
00:12:30,533 --> 00:12:32,500
都会被恰当地标记为“本地化”

232
00:12:33,100 --> 00:12:34,533
不仅如此 你还可以检查

233
00:12:34,600 --> 00:12:37,367
你所有的本地化字符串
是否有遗漏的备注

234
00:12:39,200 --> 00:12:41,033
对于在不同语言中运行你的应用

235
00:12:41,100 --> 00:12:43,233
有一组很方便的选择用来模拟

236
00:12:43,300 --> 00:12:45,433
一个特定的语言或者区域设置

237
00:12:46,633 --> 00:12:47,733
除此之外

238
00:12:47,900 --> 00:12:51,200
Xcode还允许你在仿真环境中
运行你的应用

239
00:12:51,300 --> 00:12:53,500
或者伪语言 像是从右到左

240
00:12:53,733 --> 00:12:56,767
以便你可以接着
在你的基本语言中测试你的应用

241
00:12:56,967 --> 00:12:59,967
同时看看
其在从右到左的语言中是什么样的

242
00:13:00,367 --> 00:13:03,733
这可以通过使用你应用中
方案编辑器的选项标签页来实现

243
00:13:08,167 --> 00:13:10,333
通过Xcode 9进行本地化会议

244
00:13:10,400 --> 00:13:12,467
涵盖了所有这些功能以及更多的内容

245
00:13:12,533 --> 00:13:16,333
介绍了绝大多数 你准备
本地化你的应用时要用到的工具

246
00:13:17,900 --> 00:13:20,900
这就是关于本地化和
测试你的应用的概要内容

247
00:13:20,967 --> 00:13:21,933
在Xcode中

248
00:13:22,367 --> 00:13:24,333
我介绍了你要如何添加支持的语言

249
00:13:24,400 --> 00:13:26,833
到你的项目中 整合翻译

250
00:13:26,900 --> 00:13:30,267
还有在不同的环境中
检查你的项目和应用

251
00:13:32,033 --> 00:13:34,567
有关本地化的更多内容和资源

252
00:13:34,633 --> 00:13:36,400
请参见为本演讲而制作的链接

253
00:13:39,667 --> 00:13:41,200
除了这些资源

254
00:13:41,267 --> 00:13:44,033
如果你有兴趣更深入地探究本地化

255
00:13:44,100 --> 00:13:45,800
和国际化的主题

256
00:13:45,900 --> 00:13:47,967
可以从这里所列的演讲看起

257
00:13:49,933 --> 00:13:50,767
感谢你们的观看

