[Script Info]
; Script generated by FFmpeg/Lavc57.89.100
ScriptType: v4.00+
PlayResX: 384
PlayResY: 288

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,16,&Hffffff,&Hffffff,&H0,&H0,0,0,0,0,100,100,0,0,1,1,0,2,10,10,10,0

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:23.52,0:00:27.12,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:00:27.62,0:00:28.17,Default,,0,0,0,,Thanks for coming.
Dialogue: 0,0:00:28.63,0:00:29.64,Default,,0,0,0,,My name is Tony Parker.
Dialogue: 0,0:00:29.64,0:00:30.31,Default,,0,0,0,,I'm the manager of the
Dialogue: 0,0:00:30.31,0:00:31.81,Default,,0,0,0,,Foundation Team at Apple, and
Dialogue: 0,0:00:31.81,0:00:32.52,Default,,0,0,0,,I'm here today with my
Dialogue: 0,0:00:32.52,0:00:33.85,Default,,0,0,0,,colleagues Michael LeHew and
Dialogue: 0,0:00:33.85,0:00:35.23,Default,,0,0,0,,Itai Ferber to tell you What's
Dialogue: 0,0:00:35.23,0:00:36.21,Default,,0,0,0,,New in Foundation.
Dialogue: 0,0:00:37.48,0:00:38.77,Default,,0,0,0,,We have three topics today.
Dialogue: 0,0:00:39.02,0:00:40.38,Default,,0,0,0,,The first, we're going to go
Dialogue: 0,0:00:40.38,0:00:41.92,Default,,0,0,0,,over really quickly some new API
Dialogue: 0,0:00:42.07,0:00:42.97,Default,,0,0,0,,highlights from this year's
Dialogue: 0,0:00:42.97,0:00:43.91,Default,,0,0,0,,release of Foundation.
Dialogue: 0,0:00:44.65,0:00:46.01,Default,,0,0,0,,After that, we're going to go
Dialogue: 0,0:00:46.01,0:00:47.33,Default,,0,0,0,,into the first of our two major
Dialogue: 0,0:00:47.33,0:00:49.80,Default,,0,0,0,,topics, the key paths and key
Dialogue: 0,0:00:49.80,0:00:51.19,Default,,0,0,0,,value observation APIs.
Dialogue: 0,0:00:52.48,0:00:53.54,Default,,0,0,0,,And after that, we'll talk about
Dialogue: 0,0:00:53.54,0:00:55.36,Default,,0,0,0,,our new encoding and decoding
Dialogue: 0,0:00:55.47,0:00:55.85,Default,,0,0,0,,APIs.
Dialogue: 0,0:00:56.64,0:00:58.43,Default,,0,0,0,,So let's get started with those
Dialogue: 0,0:00:58.43,0:01:00.19,Default,,0,0,0,,new API highlights.
Dialogue: 0,0:01:02.00,0:01:04.29,Default,,0,0,0,,First, this year, we've enhanced
Dialogue: 0,0:01:04.29,0:01:05.66,Default,,0,0,0,,the FileProvider API that we
Dialogue: 0,0:01:05.66,0:01:06.96,Default,,0,0,0,,introduced last year as part of
Dialogue: 0,0:01:06.96,0:01:07.51,Default,,0,0,0,,iOS 10.
Dialogue: 0,0:01:08.41,0:01:09.87,Default,,0,0,0,,This enhances your ability to
Dialogue: 0,0:01:09.87,0:01:12.01,Default,,0,0,0,,communicate between FileProvider
Dialogue: 0,0:01:12.01,0:01:13.14,Default,,0,0,0,,extensions and other
Dialogue: 0,0:01:13.14,0:01:13.90,Default,,0,0,0,,applications.
Dialogue: 0,0:01:14.46,0:01:17.05,Default,,0,0,0,,We've improved our available
Dialogue: 0,0:01:17.05,0:01:18.13,Default,,0,0,0,,storage space API.
Dialogue: 0,0:01:18.80,0:01:21.22,Default,,0,0,0,,This is new API on MSURL that
Dialogue: 0,0:01:21.22,0:01:22.59,Default,,0,0,0,,lets you not only get an idea of
Dialogue: 0,0:01:22.59,0:01:24.15,Default,,0,0,0,,how much free space is available
Dialogue: 0,0:01:24.15,0:01:25.71,Default,,0,0,0,,on your customer's device but
Dialogue: 0,0:01:25.71,0:01:26.91,Default,,0,0,0,,also how much space can be made
Dialogue: 0,0:01:26.91,0:01:28.22,Default,,0,0,0,,available if we purge
Dialogue: 0,0:01:28.54,0:01:30.32,Default,,0,0,0,,unnecessary content like caches
Dialogue: 0,0:01:30.42,0:01:31.40,Default,,0,0,0,,or old data.
Dialogue: 0,0:01:32.02,0:01:35.90,Default,,0,0,0,,We've added new API to NS range
Dialogue: 0,0:01:36.05,0:01:37.67,Default,,0,0,0,,and Swift range to help convert
Dialogue: 0,0:01:37.67,0:01:39.77,Default,,0,0,0,,between NSString's use of NS
Dialogue: 0,0:01:39.77,0:01:42.23,Default,,0,0,0,,range and Swift's string and its
Dialogue: 0,0:01:42.23,0:01:42.64,Default,,0,0,0,,range.
Dialogue: 0,0:01:43.11,0:01:44.42,Default,,0,0,0,,This is especially useful for
Dialogue: 0,0:01:44.42,0:01:46.16,Default,,0,0,0,,classes like AttributedString
Dialogue: 0,0:01:46.16,0:01:47.11,Default,,0,0,0,,and RegularExpression.
Dialogue: 0,0:01:47.72,0:01:50.85,Default,,0,0,0,,In NSXPCConnection, we've added
Dialogue: 0,0:01:50.85,0:01:53.00,Default,,0,0,0,,support for, better support for
Dialogue: 0,0:01:53.04,0:01:53.74,Default,,0,0,0,,NSProgress.
Dialogue: 0,0:01:53.74,0:01:54.95,Default,,0,0,0,,And this is actually really
Dialogue: 0,0:01:54.95,0:01:56.11,Default,,0,0,0,,interesting for that first item
Dialogue: 0,0:01:56.33,0:01:58.01,Default,,0,0,0,,because the new, enhanced
Dialogue: 0,0:01:58.01,0:01:59.47,Default,,0,0,0,,ability for communication
Dialogue: 0,0:01:59.47,0:02:01.41,Default,,0,0,0,,between extensions and apps is
Dialogue: 0,0:02:01.41,0:02:03.18,Default,,0,0,0,,actually NSXPCConnection, which
Dialogue: 0,0:02:03.18,0:02:04.65,Default,,0,0,0,,is available this year on iOS
Dialogue: 0,0:02:04.65,0:02:05.37,Default,,0,0,0,,for the first time.
Dialogue: 0,0:02:06.09,0:02:07.52,Default,,0,0,0,,NSURLSession has also gained
Dialogue: 0,0:02:07.52,0:02:08.73,Default,,0,0,0,,support for NSProgress.
Dialogue: 0,0:02:09.17,0:02:10.52,Default,,0,0,0,,And so what we're hoping is that
Dialogue: 0,0:02:10.52,0:02:11.95,Default,,0,0,0,,you can use all of these
Dialogue: 0,0:02:11.95,0:02:14.07,Default,,0,0,0,,progress features together to
Dialogue: 0,0:02:14.27,0:02:16.06,Default,,0,0,0,,flow progress from a download to
Dialogue: 0,0:02:16.06,0:02:18.13,Default,,0,0,0,,the extension, to an app, and
Dialogue: 0,0:02:18.13,0:02:19.33,Default,,0,0,0,,display something to your user.
Dialogue: 0,0:02:19.86,0:02:22.20,Default,,0,0,0,,And finally, we've brought the
Dialogue: 0,0:02:22.20,0:02:23.73,Default,,0,0,0,,thermal notifications from Mac
Dialogue: 0,0:02:23.87,0:02:24.86,Default,,0,0,0,,to iOS this year.
Dialogue: 0,0:02:25.50,0:02:27.06,Default,,0,0,0,,For more on many of these
Dialogue: 0,0:02:27.06,0:02:28.25,Default,,0,0,0,,topics, check out What's New in
Dialogue: 0,0:02:28.25,0:02:28.76,Default,,0,0,0,,Cocoa.
Dialogue: 0,0:02:28.76,0:02:29.90,Default,,0,0,0,,It was this morning, so if you
Dialogue: 0,0:02:29.90,0:02:31.49,Default,,0,0,0,,missed it, we had a pretty big
Dialogue: 0,0:02:31.49,0:02:33.15,Default,,0,0,0,,section on Foundation in that
Dialogue: 0,0:02:33.93,0:02:34.03,Default,,0,0,0,,talk.
Dialogue: 0,0:02:35.44,0:02:37.03,Default,,0,0,0,,Performance was also a really
Dialogue: 0,0:02:37.03,0:02:38.99,Default,,0,0,0,,key consideration for us this
Dialogue: 0,0:02:38.99,0:02:40.58,Default,,0,0,0,,year on Foundation, and that
Dialogue: 0,0:02:40.58,0:02:42.46,Default,,0,0,0,,started with a new copy-on-write
Dialogue: 0,0:02:42.46,0:02:43.94,Default,,0,0,0,,behavior for NSArray and its
Dialogue: 0,0:02:43.97,0:02:45.82,Default,,0,0,0,,dictionary, NSSet, and their
Dialogue: 0,0:02:45.82,0:02:46.46,Default,,0,0,0,,mutable friends.
Dialogue: 0,0:02:47.66,0:02:49.73,Default,,0,0,0,,So a huge motivator for this was
Dialogue: 0,0:02:49.81,0:02:50.73,Default,,0,0,0,,bridging into Swift.
Dialogue: 0,0:02:51.22,0:02:53.88,Default,,0,0,0,,So when an NSArray is returned
Dialogue: 0,0:02:53.88,0:02:55.63,Default,,0,0,0,,from an Objective-C API, perhaps
Dialogue: 0,0:02:55.63,0:02:57.49,Default,,0,0,0,,in a framework, and you use it
Dialogue: 0,0:02:57.49,0:02:58.92,Default,,0,0,0,,in Swift, you're receiving the
Dialogue: 0,0:02:58.92,0:03:00.22,Default,,0,0,0,,Swift value type: array,
Dialogue: 0,0:03:00.22,0:03:01.07,Default,,0,0,0,,dictionary, and set.
Dialogue: 0,0:03:01.07,0:03:03.11,Default,,0,0,0,,And to preserve value semantics,
Dialogue: 0,0:03:03.47,0:03:05.89,Default,,0,0,0,,those structures call copy on
Dialogue: 0,0:03:05.89,0:03:07.09,Default,,0,0,0,,the reference type when they do
Dialogue: 0,0:03:07.09,0:03:07.60,Default,,0,0,0,,that bridging.
Dialogue: 0,0:03:08.30,0:03:09.49,Default,,0,0,0,,If the result happened to be one
Dialogue: 0,0:03:09.49,0:03:11.13,Default,,0,0,0,,of the mutable subclasses, then
Dialogue: 0,0:03:11.13,0:03:12.19,Default,,0,0,0,,that copy could be pretty
Dialogue: 0,0:03:12.19,0:03:12.76,Default,,0,0,0,,expensive.
Dialogue: 0,0:03:13.32,0:03:14.64,Default,,0,0,0,,Now, we can defer the cost of
Dialogue: 0,0:03:14.64,0:03:16.11,Default,,0,0,0,,that copy until the time that
Dialogue: 0,0:03:16.11,0:03:17.47,Default,,0,0,0,,it's actually mutated, if that
Dialogue: 0,0:03:17.47,0:03:19.04,Default,,0,0,0,,happens at all, which can result
Dialogue: 0,0:03:19.04,0:03:21.08,Default,,0,0,0,,in really big improvements for
Dialogue: 0,0:03:21.08,0:03:22.04,Default,,0,0,0,,performance when bridging.
Dialogue: 0,0:03:22.41,0:03:25.28,Default,,0,0,0,,Struct data, a part of the
Dialogue: 0,0:03:25.28,0:03:27.49,Default,,0,0,0,,Foundation's Swift overlap, has
Dialogue: 0,0:03:27.49,0:03:28.82,Default,,0,0,0,,also gained a lot of performance
Dialogue: 0,0:03:28.82,0:03:29.36,Default,,0,0,0,,enhancements.
Dialogue: 0,0:03:29.85,0:03:31.41,Default,,0,0,0,,In particular, something really
Dialogue: 0,0:03:31.41,0:03:32.57,Default,,0,0,0,,cool -- we're able to actually
Dialogue: 0,0:03:32.57,0:03:34.39,Default,,0,0,0,,inline critical parts of data's
Dialogue: 0,0:03:34.39,0:03:35.96,Default,,0,0,0,,behavior into your app when you
Dialogue: 0,0:03:35.96,0:03:36.50,Default,,0,0,0,,compile.
Dialogue: 0,0:03:36.94,0:03:38.10,Default,,0,0,0,,This can include things like
Dialogue: 0,0:03:38.18,0:03:40.14,Default,,0,0,0,,indexing byte by byte in a data.
Dialogue: 0,0:03:40.91,0:03:42.97,Default,,0,0,0,,And again, that leads to some
Dialogue: 0,0:03:42.97,0:03:44.02,Default,,0,0,0,,really impressive performance
Dialogue: 0,0:03:44.02,0:03:44.55,Default,,0,0,0,,improvements.
Dialogue: 0,0:03:45.84,0:03:47.61,Default,,0,0,0,,NSCalendar has gained a better
Dialogue: 0,0:03:47.61,0:03:49.30,Default,,0,0,0,,performance, both in CPU time
Dialogue: 0,0:03:49.30,0:03:51.13,Default,,0,0,0,,and with lower peak memory, and
Dialogue: 0,0:03:51.13,0:03:52.00,Default,,0,0,0,,in addition to that, we've
Dialogue: 0,0:03:52.00,0:03:53.03,Default,,0,0,0,,actually improved the results
Dialogue: 0,0:03:53.03,0:03:54.21,Default,,0,0,0,,that it gives you, especially in
Dialogue: 0,0:03:54.21,0:03:55.01,Default,,0,0,0,,corner cases.
Dialogue: 0,0:03:55.56,0:03:57.76,Default,,0,0,0,,And finally, we've improved the
Dialogue: 0,0:03:57.76,0:03:59.24,Default,,0,0,0,,performance of bridging NSNumber
Dialogue: 0,0:03:59.28,0:04:01.34,Default,,0,0,0,,to and from Swift, and we've
Dialogue: 0,0:04:01.34,0:04:02.96,Default,,0,0,0,,improved its behavior in corner
Dialogue: 0,0:04:02.96,0:04:05.15,Default,,0,0,0,,cases as well to provide better
Dialogue: 0,0:04:05.15,0:04:07.17,Default,,0,0,0,,safety when you are converting
Dialogue: 0,0:04:07.17,0:04:08.72,Default,,0,0,0,,things from NSNumber to Swift
Dialogue: 0,0:04:08.72,0:04:10.10,Default,,0,0,0,,types like integer, Boolean, and
Dialogue: 0,0:04:10.10,0:04:10.50,Default,,0,0,0,,so forth.
Dialogue: 0,0:04:11.45,0:04:12.61,Default,,0,0,0,,This faster bridging has a big
Dialogue: 0,0:04:12.61,0:04:13.80,Default,,0,0,0,,impact on things like property
Dialogue: 0,0:04:13.80,0:04:14.41,Default,,0,0,0,,list parsing.
Dialogue: 0,0:04:15.15,0:04:16.40,Default,,0,0,0,,For more on many of these
Dialogue: 0,0:04:16.40,0:04:17.86,Default,,0,0,0,,topics, check out Efficient
Dialogue: 0,0:04:17.86,0:04:18.90,Default,,0,0,0,,Interactions with Frameworks.
Dialogue: 0,0:04:19.01,0:04:20.42,Default,,0,0,0,,That's Friday at 1:50.
Dialogue: 0,0:04:21.30,0:04:22.35,Default,,0,0,0,,Now, with that, I'd like to turn
Dialogue: 0,0:04:22.35,0:04:23.56,Default,,0,0,0,,it over to my colleague Michael
Dialogue: 0,0:04:23.56,0:04:24.88,Default,,0,0,0,,to talk about key paths and key
Dialogue: 0,0:04:24.88,0:04:25.53,Default,,0,0,0,,value observing.
Dialogue: 0,0:04:26.52,0:04:34.41,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:04:34.91,0:04:35.55,Default,,0,0,0,,>> Thanks, Tony.
Dialogue: 0,0:04:36.24,0:04:37.68,Default,,0,0,0,,Hi, I'm Michael from the
Dialogue: 0,0:04:37.68,0:04:39.34,Default,,0,0,0,,Foundation Team, and I'm excited
Dialogue: 0,0:04:39.58,0:04:40.74,Default,,0,0,0,,to share some improvements that
Dialogue: 0,0:04:40.74,0:04:42.03,Default,,0,0,0,,we're making to key paths and
Dialogue: 0,0:04:42.03,0:04:43.25,Default,,0,0,0,,key value observing this year.
Dialogue: 0,0:04:43.45,0:04:44.67,Default,,0,0,0,,And I'd like to start by saying
Dialogue: 0,0:04:44.67,0:04:45.62,Default,,0,0,0,,something that we feel fairly
Dialogue: 0,0:04:45.62,0:04:46.88,Default,,0,0,0,,strongly about on the Foundation
Dialogue: 0,0:04:46.88,0:04:47.14,Default,,0,0,0,,Team.
Dialogue: 0,0:04:47.93,0:04:49.28,Default,,0,0,0,,And that is that key paths are
Dialogue: 0,0:04:49.28,0:04:50.70,Default,,0,0,0,,incredibly important in Cocoa
Dialogue: 0,0:04:50.70,0:04:51.29,Default,,0,0,0,,development.
Dialogue: 0,0:04:51.50,0:04:53.06,Default,,0,0,0,,And this is because they let us
Dialogue: 0,0:04:53.06,0:04:54.31,Default,,0,0,0,,reason about the structure of
Dialogue: 0,0:04:54.31,0:04:55.68,Default,,0,0,0,,our types apart from any
Dialogue: 0,0:04:55.68,0:04:57.32,Default,,0,0,0,,specific instance in a way
Dialogue: 0,0:04:57.32,0:04:58.60,Default,,0,0,0,,that's far more constrained than
Dialogue: 0,0:04:58.60,0:04:59.14,Default,,0,0,0,,a closure.
Dialogue: 0,0:04:59.91,0:05:01.49,Default,,0,0,0,,And this is so important that we
Dialogue: 0,0:05:01.49,0:05:02.66,Default,,0,0,0,,felt that they weren't, that
Dialogue: 0,0:05:02.66,0:05:03.82,Default,,0,0,0,,warranted special treatment in
Dialogue: 0,0:05:03.82,0:05:04.67,Default,,0,0,0,,the language itself.
Dialogue: 0,0:05:04.77,0:05:09.47,Default,,0,0,0,,And we started on this last
Dialogue: 0,0:05:09.47,0:05:11.40,Default,,0,0,0,,year, when we added string key
Dialogue: 0,0:05:11.40,0:05:12.71,Default,,0,0,0,,paths to Swift 3.
Dialogue: 0,0:05:13.66,0:05:14.61,Default,,0,0,0,,This was the, this added the
Dialogue: 0,0:05:14.61,0:05:17.51,Default,,0,0,0,,ability for Swift to, at compile
Dialogue: 0,0:05:17.51,0:05:19.20,Default,,0,0,0,,time, confirm the correctness of
Dialogue: 0,0:05:19.20,0:05:21.45,Default,,0,0,0,,an Objective-C key path, which
Dialogue: 0,0:05:21.45,0:05:22.16,Default,,0,0,0,,I'll review now.
Dialogue: 0,0:05:22.68,0:05:23.84,Default,,0,0,0,,Let's suppose we have a class
Dialogue: 0,0:05:23.84,0:05:25.17,Default,,0,0,0,,Kid, and it has some key value
Dialogue: 0,0:05:25.17,0:05:26.40,Default,,0,0,0,,observable properties, such as
Dialogue: 0,0:05:26.40,0:05:28.01,Default,,0,0,0,,their nickname, their age, and,
Dialogue: 0,0:05:28.01,0:05:28.98,Default,,0,0,0,,of course, their current best
Dialogue: 0,0:05:28.98,0:05:29.74,Default,,0,0,0,,friend of the moment.
Dialogue: 0,0:05:30.31,0:05:31.45,Default,,0,0,0,,We can go ahead and construct an
Dialogue: 0,0:05:31.45,0:05:32.75,Default,,0,0,0,,instance -- in this case, a
Dialogue: 0,0:05:32.75,0:05:34.08,Default,,0,0,0,,little boy by the name of Benji
Dialogue: 0,0:05:34.90,0:05:36.41,Default,,0,0,0,,-- and then form a string key
Dialogue: 0,0:05:36.41,0:05:37.78,Default,,0,0,0,,path to a kid's nickname
Dialogue: 0,0:05:37.78,0:05:38.27,Default,,0,0,0,,property.
Dialogue: 0,0:05:38.56,0:05:40.01,Default,,0,0,0,,And then, the Swift compiler
Dialogue: 0,0:05:40.01,0:05:41.30,Default,,0,0,0,,will confirm that this is a
Dialogue: 0,0:05:41.30,0:05:43.90,Default,,0,0,0,,reasonable thing for us to do.
Dialogue: 0,0:05:43.90,0:05:45.64,Default,,0,0,0,,We can then use key value, or
Dialogue: 0,0:05:45.64,0:05:47.86,Default,,0,0,0,,key value coding to read or
Dialogue: 0,0:05:47.86,0:05:49.09,Default,,0,0,0,,write that variable back into
Dialogue: 0,0:05:49.09,0:05:49.80,Default,,0,0,0,,the instance.
Dialogue: 0,0:05:51.32,0:05:52.77,Default,,0,0,0,,Now, while this compile time
Dialogue: 0,0:05:52.77,0:05:54.01,Default,,0,0,0,,check that we get with using a
Dialogue: 0,0:05:54.01,0:05:55.49,Default,,0,0,0,,string key path expression is
Dialogue: 0,0:05:55.49,0:05:57.54,Default,,0,0,0,,pretty awesome, in the end, it
Dialogue: 0,0:05:57.54,0:05:59.18,Default,,0,0,0,,still compiles down to a string.
Dialogue: 0,0:06:00.23,0:06:01.39,Default,,0,0,0,,And in order for that string to
Dialogue: 0,0:06:01.39,0:06:02.57,Default,,0,0,0,,be useful, we need to use the
Dialogue: 0,0:06:02.57,0:06:04.32,Default,,0,0,0,,Objective-C runtime, which, last
Dialogue: 0,0:06:04.32,0:06:05.31,Default,,0,0,0,,I checked, still remains
Dialogue: 0,0:06:05.31,0:06:07.07,Default,,0,0,0,,unavailable for Swift value
Dialogue: 0,0:06:07.07,0:06:08.35,Default,,0,0,0,,types and probably won't be made
Dialogue: 0,0:06:08.35,0:06:09.50,Default,,0,0,0,,available any time soon.
Dialogue: 0,0:06:10.83,0:06:12.76,Default,,0,0,0,,Finally, string key paths carry
Dialogue: 0,0:06:12.76,0:06:15.30,Default,,0,0,0,,no type information.
Dialogue: 0,0:06:15.30,0:06:16.39,Default,,0,0,0,,It's just a string.
Dialogue: 0,0:06:17.67,0:06:19.90,Default,,0,0,0,,And so all general API that uses
Dialogue: 0,0:06:19.90,0:06:21.05,Default,,0,0,0,,string key paths needs to be
Dialogue: 0,0:06:21.05,0:06:23.21,Default,,0,0,0,,defined in terms of any.
Dialogue: 0,0:06:23.76,0:06:27.01,Default,,0,0,0,,But this is Swift, and surely we
Dialogue: 0,0:06:27.01,0:06:27.63,Default,,0,0,0,,can do better.
Dialogue: 0,0:06:28.48,0:06:29.76,Default,,0,0,0,,And so we thought about what
Dialogue: 0,0:06:29.86,0:06:31.26,Default,,0,0,0,,would, you know, key paths, what
Dialogue: 0,0:06:31.26,0:06:32.39,Default,,0,0,0,,should they be in Swift?
Dialogue: 0,0:06:32.67,0:06:34.33,Default,,0,0,0,,Well, we'd want to be able to
Dialogue: 0,0:06:34.33,0:06:35.43,Default,,0,0,0,,describe properties first, so
Dialogue: 0,0:06:35.43,0:06:36.34,Default,,0,0,0,,that's pretty essential.
Dialogue: 0,0:06:36.71,0:06:37.52,Default,,0,0,0,,They should be statically
Dialogue: 0,0:06:37.52,0:06:38.25,Default,,0,0,0,,type-safe.
Dialogue: 0,0:06:39.48,0:06:41.07,Default,,0,0,0,,They should be fast as well.
Dialogue: 0,0:06:41.29,0:06:42.32,Default,,0,0,0,,And they should work with all
Dialogue: 0,0:06:42.32,0:06:43.52,Default,,0,0,0,,the kinds of values that we
Dialogue: 0,0:06:43.52,0:06:44.54,Default,,0,0,0,,encounter in Swift.
Dialogue: 0,0:06:44.89,0:06:47.71,Default,,0,0,0,,And they also should work on all
Dialogue: 0,0:06:47.71,0:06:48.60,Default,,0,0,0,,platforms where Swift is
Dialogue: 0,0:06:48.60,0:06:49.05,Default,,0,0,0,,supported.
Dialogue: 0,0:06:49.98,0:06:51.10,Default,,0,0,0,,And so we thought for a long
Dialogue: 0,0:06:51.10,0:06:52.39,Default,,0,0,0,,time about how to make all these
Dialogue: 0,0:06:52.39,0:06:53.75,Default,,0,0,0,,key paths' dreams come true,
Dialogue: 0,0:06:54.42,0:06:56.00,Default,,0,0,0,,ultimately sharing our idea with
Dialogue: 0,0:06:56.00,0:06:56.93,Default,,0,0,0,,the world through the open
Dialogue: 0,0:06:56.93,0:06:58.60,Default,,0,0,0,,source Swift evolution process
Dialogue: 0,0:06:58.60,0:07:00.95,Default,,0,0,0,,with a document entitled SE-0161
Dialogue: 0,0:07:01.11,0:07:02.74,Default,,0,0,0,,Smart Key Paths.
Dialogue: 0,0:07:02.82,0:07:04.15,Default,,0,0,0,,And here's what the new Swift 4
Dialogue: 0,0:07:04.15,0:07:05.47,Default,,0,0,0,,key path literals look like.
Dialogue: 0,0:07:07.32,0:07:08.91,Default,,0,0,0,,They start with a backslash,
Dialogue: 0,0:07:10.34,0:07:12.05,Default,,0,0,0,,followed by the name of the base
Dialogue: 0,0:07:12.05,0:07:14.67,Default,,0,0,0,,type, a dot to indicate that
Dialogue: 0,0:07:14.67,0:07:15.58,Default,,0,0,0,,we're doing something inside
Dialogue: 0,0:07:15.58,0:07:17.08,Default,,0,0,0,,that base type, and then the
Dialogue: 0,0:07:17.08,0:07:17.83,Default,,0,0,0,,name of the property.
Dialogue: 0,0:07:18.44,0:07:21.04,Default,,0,0,0,,And the backslash here is really
Dialogue: 0,0:07:21.04,0:07:22.44,Default,,0,0,0,,important because it helps us to
Dialogue: 0,0:07:22.44,0:07:24.06,Default,,0,0,0,,disambiguate the execution of a
Dialogue: 0,0:07:24.06,0:07:26.16,Default,,0,0,0,,property versus a mention or a
Dialogue: 0,0:07:26.16,0:07:27.24,Default,,0,0,0,,reference to the property.
Dialogue: 0,0:07:27.76,0:07:30.32,Default,,0,0,0,,And of course, this is Swift, so
Dialogue: 0,0:07:30.32,0:07:31.72,Default,,0,0,0,,when we can infer the base type,
Dialogue: 0,0:07:32.04,0:07:34.55,Default,,0,0,0,,we do, though the backslash and
Dialogue: 0,0:07:34.55,0:07:35.35,Default,,0,0,0,,the dot remain.
Dialogue: 0,0:07:37.04,0:07:38.74,Default,,0,0,0,,Key paths can be composed in
Dialogue: 0,0:07:38.74,0:07:39.90,Default,,0,0,0,,sequence, just like calling
Dialogue: 0,0:07:39.90,0:07:41.13,Default,,0,0,0,,property after property, after
Dialogue: 0,0:07:41.13,0:07:41.54,Default,,0,0,0,,property.
Dialogue: 0,0:07:42.72,0:07:44.42,Default,,0,0,0,,And soon, optional chaining will
Dialogue: 0,0:07:44.42,0:07:46.03,Default,,0,0,0,,work as it does with properties.
Dialogue: 0,0:07:49.20,0:07:50.46,Default,,0,0,0,,We'll also soon allow
Dialogue: 0,0:07:50.46,0:07:51.93,Default,,0,0,0,,indirection through subscripts.
Dialogue: 0,0:07:55.10,0:07:56.29,Default,,0,0,0,,Someone likes that.
Dialogue: 0,0:07:56.29,0:07:56.88,Default,,0,0,0,,I like it too.
Dialogue: 0,0:07:57.14,0:07:59.21,Default,,0,0,0,,[laughs] Key paths can also
Dialogue: 0,0:08:00.31,0:08:02.44,Default,,0,0,0,,begin directly at a subscript,
Dialogue: 0,0:08:02.44,0:08:03.68,Default,,0,0,0,,and here we're starting with
Dialogue: 0,0:08:04.22,0:08:06.45,Default,,0,0,0,,data's byte subscript, and we're
Dialogue: 0,0:08:06.45,0:08:08.27,Default,,0,0,0,,using the startIndex here.
Dialogue: 0,0:08:08.97,0:08:10.89,Default,,0,0,0,,And of course, this can be
Dialogue: 0,0:08:10.89,0:08:12.04,Default,,0,0,0,,inferred as well, though the
Dialogue: 0,0:08:12.04,0:08:14.06,Default,,0,0,0,,backslash and the dot remain for
Dialogue: 0,0:08:14.06,0:08:14.82,Default,,0,0,0,,consistency.
Dialogue: 0,0:08:15.93,0:08:17.33,Default,,0,0,0,,These new key path expressions
Dialogue: 0,0:08:17.33,0:08:19.09,Default,,0,0,0,,offer uniform syntax for all
Dialogue: 0,0:08:19.09,0:08:20.55,Default,,0,0,0,,Swift types that support
Dialogue: 0,0:08:20.55,0:08:21.83,Default,,0,0,0,,properties, whether they are
Dialogue: 0,0:08:21.83,0:08:23.09,Default,,0,0,0,,stored or computed.
Dialogue: 0,0:08:23.89,0:08:25.98,Default,,0,0,0,,And of course, forming key paths
Dialogue: 0,0:08:25.98,0:08:27.57,Default,,0,0,0,,is one thing, but how can we use
Dialogue: 0,0:08:27.57,0:08:27.81,Default,,0,0,0,,them?
Dialogue: 0,0:08:27.92,0:08:29.31,Default,,0,0,0,,Well, let's suppose we have a
Dialogue: 0,0:08:29.31,0:08:32.13,Default,,0,0,0,,key path.
Dialogue: 0,0:08:32.35,0:08:33.74,Default,,0,0,0,,In this case, to a kid's age.
Dialogue: 0,0:08:34.37,0:08:35.55,Default,,0,0,0,,Using the key path to read a
Dialogue: 0,0:08:35.55,0:08:37.25,Default,,0,0,0,,property is as easy as invoking
Dialogue: 0,0:08:37.25,0:08:37.86,Default,,0,0,0,,a subscript.
Dialogue: 0,0:08:39.48,0:08:41.12,Default,,0,0,0,,That's starting to look like
Dialogue: 0,0:08:41.12,0:08:41.97,Default,,0,0,0,,code, so I'm going to go ahead
Dialogue: 0,0:08:41.97,0:08:44.41,Default,,0,0,0,,and syntax highlight now.
Dialogue: 0,0:08:44.66,0:08:44.98,Default,,0,0,0,,There we go.
Dialogue: 0,0:08:45.23,0:08:47.36,Default,,0,0,0,,So there's a little bit going on
Dialogue: 0,0:08:47.36,0:08:48.08,Default,,0,0,0,,here, and I want to talk about
Dialogue: 0,0:08:48.08,0:08:50.45,Default,,0,0,0,,some of the motivations behind
Dialogue: 0,0:08:50.45,0:08:51.64,Default,,0,0,0,,why this looks the way it looks.
Dialogue: 0,0:08:51.89,0:08:53.07,Default,,0,0,0,,First, we gave the key path
Dialogue: 0,0:08:53.41,0:08:56.09,Default,,0,0,0,,subscript parameter a label, and
Dialogue: 0,0:08:56.09,0:08:57.18,Default,,0,0,0,,we did this because we wanted it
Dialogue: 0,0:08:57.18,0:08:58.21,Default,,0,0,0,,to be non-ambiguous with other
Dialogue: 0,0:08:58.21,0:08:59.21,Default,,0,0,0,,subscripts that may exist on
Dialogue: 0,0:08:59.21,0:08:59.80,Default,,0,0,0,,other types.
Dialogue: 0,0:09:00.40,0:09:02.18,Default,,0,0,0,,Next, the type of the value that
Dialogue: 0,0:09:02.18,0:09:03.04,Default,,0,0,0,,you're using, invoking the
Dialogue: 0,0:09:03.04,0:09:04.65,Default,,0,0,0,,subscript on needs to match the
Dialogue: 0,0:09:04.65,0:09:06.94,Default,,0,0,0,,base type of the key path.
Dialogue: 0,0:09:06.94,0:09:08.21,Default,,0,0,0,,And if they match, it's a
Dialogue: 0,0:09:08.21,0:09:09.87,Default,,0,0,0,,reasonable thing, and your code
Dialogue: 0,0:09:09.87,0:09:10.47,Default,,0,0,0,,will compile.
Dialogue: 0,0:09:10.99,0:09:14.09,Default,,0,0,0,,You can also use subscripts to
Dialogue: 0,0:09:14.09,0:09:16.63,Default,,0,0,0,,mutate a particular value.
Dialogue: 0,0:09:17.26,0:09:18.45,Default,,0,0,0,,And subscripts are nice because
Dialogue: 0,0:09:18.45,0:09:20.02,Default,,0,0,0,,they offer a fast and symmetric
Dialogue: 0,0:09:20.02,0:09:21.64,Default,,0,0,0,,syntax for reads and writes into
Dialogue: 0,0:09:21.64,0:09:22.71,Default,,0,0,0,,a value, whether they be a value
Dialogue: 0,0:09:22.71,0:09:24.33,Default,,0,0,0,,type or a reference type.
Dialogue: 0,0:09:24.88,0:09:26.64,Default,,0,0,0,,Now, let me, I've been showing
Dialogue: 0,0:09:26.64,0:09:27.76,Default,,0,0,0,,these with reference types now,
Dialogue: 0,0:09:27.76,0:09:28.88,Default,,0,0,0,,but now I want to switch and
Dialogue: 0,0:09:28.88,0:09:29.99,Default,,0,0,0,,show how they work with value
Dialogue: 0,0:09:29.99,0:09:30.40,Default,,0,0,0,,types.
Dialogue: 0,0:09:30.73,0:09:31.87,Default,,0,0,0,,And to do this, we're going to
Dialogue: 0,0:09:31.87,0:09:32.84,Default,,0,0,0,,expand our example to what I
Dialogue: 0,0:09:32.84,0:09:34.02,Default,,0,0,0,,really wanted to talk about,
Dialogue: 0,0:09:34.15,0:09:35.17,Default,,0,0,0,,which is birthday party
Dialogue: 0,0:09:35.17,0:09:35.53,Default,,0,0,0,,planning.
Dialogue: 0,0:09:36.96,0:09:38.29,Default,,0,0,0,,So let's go ahead and create a
Dialogue: 0,0:09:38.29,0:09:38.69,Default,,0,0,0,,party.
Dialogue: 0,0:09:39.65,0:09:40.37,Default,,0,0,0,,Benji's going to have a
Dialogue: 0,0:09:40.37,0:09:41.69,Default,,0,0,0,,construction-theme birthday
Dialogue: 0,0:09:41.69,0:09:42.49,Default,,0,0,0,,party, it looks like.
Dialogue: 0,0:09:42.93,0:09:44.56,Default,,0,0,0,,And reading from a value type
Dialogue: 0,0:09:44.56,0:09:45.57,Default,,0,0,0,,with a key path that uses the
Dialogue: 0,0:09:45.57,0:09:47.09,Default,,0,0,0,,same subscript syntax that we
Dialogue: 0,0:09:47.09,0:09:48.52,Default,,0,0,0,,saw with our reference types.
Dialogue: 0,0:09:49.16,0:09:52.45,Default,,0,0,0,,Similarly, mutating a party uses
Dialogue: 0,0:09:52.45,0:09:53.58,Default,,0,0,0,,the same subscript syntax.
Dialogue: 0,0:09:53.58,0:09:54.64,Default,,0,0,0,,There's a common theme here.
Dialogue: 0,0:09:54.81,0:09:56.25,Default,,0,0,0,,The syntax really is uniform.
Dialogue: 0,0:09:56.90,0:09:59.53,Default,,0,0,0,,However, since this is Swift, we
Dialogue: 0,0:09:59.53,0:10:00.79,Default,,0,0,0,,know that Ben's party is a
Dialogue: 0,0:10:00.79,0:10:01.93,Default,,0,0,0,,birthday party, and so the
Dialogue: 0,0:10:01.93,0:10:03.41,Default,,0,0,0,,language can infer that for us.
Dialogue: 0,0:10:04.70,0:10:05.84,Default,,0,0,0,,And I just heard that Ben
Dialogue: 0,0:10:05.84,0:10:06.77,Default,,0,0,0,,changed his mind about his
Dialogue: 0,0:10:06.77,0:10:08.16,Default,,0,0,0,,birthday party theme again, so
Dialogue: 0,0:10:08.16,0:10:09.87,Default,,0,0,0,,let's fix that while we're at
Dialogue: 0,0:10:10.58,0:10:10.68,Default,,0,0,0,,it.
Dialogue: 0,0:10:10.90,0:10:11.99,Default,,0,0,0,,Now, here I'm just highlighting
Dialogue: 0,0:10:11.99,0:10:12.68,Default,,0,0,0,,the syntax.
Dialogue: 0,0:10:12.97,0:10:13.95,Default,,0,0,0,,In code like this, you would
Dialogue: 0,0:10:13.95,0:10:15.52,Default,,0,0,0,,just call the properties, so
Dialogue: 0,0:10:15.52,0:10:16.48,Default,,0,0,0,,let's look at what's actually
Dialogue: 0,0:10:16.48,0:10:17.76,Default,,0,0,0,,happening when you use these key
Dialogue: 0,0:10:17.76,0:10:18.74,Default,,0,0,0,,path expressions.
Dialogue: 0,0:10:19.10,0:10:22.87,Default,,0,0,0,,Key path expressions are
Dialogue: 0,0:10:22.87,0:10:24.19,Default,,0,0,0,,actually producing concrete
Dialogue: 0,0:10:24.19,0:10:25.64,Default,,0,0,0,,values, and like all values,
Dialogue: 0,0:10:25.73,0:10:26.57,Default,,0,0,0,,they can be stored.
Dialogue: 0,0:10:27.91,0:10:29.30,Default,,0,0,0,,Well, what is the type of this
Dialogue: 0,0:10:29.30,0:10:29.72,Default,,0,0,0,,variable?
Dialogue: 0,0:10:30.16,0:10:30.88,Default,,0,0,0,,Let's pretend we can
Dialogue: 0,0:10:30.88,0:10:33.03,Default,,0,0,0,,Option-click in X, just like we
Dialogue: 0,0:10:33.03,0:10:34.46,Default,,0,0,0,,could in Xcode and see that, not
Dialogue: 0,0:10:34.46,0:10:35.65,Default,,0,0,0,,surprisingly, we're getting back
Dialogue: 0,0:10:35.65,0:10:37.78,Default,,0,0,0,,a strongly typed key path with
Dialogue: 0,0:10:37.78,0:10:39.29,Default,,0,0,0,,the base type being a kid and
Dialogue: 0,0:10:39.29,0:10:41.03,Default,,0,0,0,,the property type being a string
Dialogue: 0,0:10:41.03,0:10:43.36,Default,,0,0,0,,because nicknames are strings.
Dialogue: 0,0:10:44.18,0:10:45.51,Default,,0,0,0,,Strongly typed key paths also
Dialogue: 0,0:10:45.51,0:10:46.89,Default,,0,0,0,,work with compound key paths.
Dialogue: 0,0:10:47.14,0:10:48.17,Default,,0,0,0,,Here we see that we started a
Dialogue: 0,0:10:48.17,0:10:49.69,Default,,0,0,0,,birthday party and traversed
Dialogue: 0,0:10:49.69,0:10:51.13,Default,,0,0,0,,through to the celebrant's age.
Dialogue: 0,0:10:51.30,0:10:52.73,Default,,0,0,0,,And of course, age is a double
Dialogue: 0,0:10:52.73,0:10:53.73,Default,,0,0,0,,because if you've ever known a
Dialogue: 0,0:10:53.73,0:10:55.39,Default,,0,0,0,,young kid, the numbers after the
Dialogue: 0,0:10:55.39,0:10:56.34,Default,,0,0,0,,decimal point are very
Dialogue: 0,0:10:56.34,0:10:56.84,Default,,0,0,0,,important.
Dialogue: 0,0:10:58.74,0:11:00.19,Default,,0,0,0,,Key paths stored in variables
Dialogue: 0,0:11:00.19,0:11:01.33,Default,,0,0,0,,can be used just like the
Dialogue: 0,0:11:01.33,0:11:01.91,Default,,0,0,0,,literals.
Dialogue: 0,0:11:02.20,0:11:07.11,Default,,0,0,0,,And because they're strongly
Dialogue: 0,0:11:07.11,0:11:08.43,Default,,0,0,0,,typed, they are statically known
Dialogue: 0,0:11:08.43,0:11:09.82,Default,,0,0,0,,to have the right type -- here
Dialogue: 0,0:11:09.82,0:11:11.17,Default,,0,0,0,,double, as we expected.
Dialogue: 0,0:11:12.32,0:11:13.21,Default,,0,0,0,,Let's suppose we had another
Dialogue: 0,0:11:13.21,0:11:14.13,Default,,0,0,0,,birthday party to plan.
Dialogue: 0,0:11:14.81,0:11:16.81,Default,,0,0,0,,This time, it's Mia's, or Ben's
Dialogue: 0,0:11:16.81,0:11:17.68,Default,,0,0,0,,little sister Mia.
Dialogue: 0,0:11:18.71,0:11:19.91,Default,,0,0,0,,We can use the same key path
Dialogue: 0,0:11:19.91,0:11:20.85,Default,,0,0,0,,variable to find out which
Dialogue: 0,0:11:20.85,0:11:22.17,Default,,0,0,0,,birthday she'll be celebrating,
Dialogue: 0,0:11:22.72,0:11:23.92,Default,,0,0,0,,and in this way, key paths kind
Dialogue: 0,0:11:23.92,0:11:25.57,Default,,0,0,0,,of serve as an unexecuted
Dialogue: 0,0:11:25.57,0:11:26.67,Default,,0,0,0,,property invocation.
Dialogue: 0,0:11:27.86,0:11:28.94,Default,,0,0,0,,Now, in this example, I'm hard
Dialogue: 0,0:11:28.94,0:11:30.40,Default,,0,0,0,,coding the celebrant's age, but
Dialogue: 0,0:11:30.53,0:11:31.58,Default,,0,0,0,,let's go ahead and generalize
Dialogue: 0,0:11:31.58,0:11:31.96,Default,,0,0,0,,this a bit.
Dialogue: 0,0:11:32.16,0:11:34.34,Default,,0,0,0,,What if I wanted to know the age
Dialogue: 0,0:11:34.34,0:11:35.75,Default,,0,0,0,,of anyone relevant to a party?
Dialogue: 0,0:11:36.26,0:11:37.26,Default,,0,0,0,,We're going to go ahead and
Dialogue: 0,0:11:37.26,0:11:38.82,Default,,0,0,0,,define a function, and we're
Dialogue: 0,0:11:38.82,0:11:39.30,Default,,0,0,0,,going to call it the
Dialogue: 0,0:11:39.30,0:11:40.93,Default,,0,0,0,,partyPersonsAge function.
Dialogue: 0,0:11:41.32,0:11:42.94,Default,,0,0,0,,They're given a party, and a key
Dialogue: 0,0:11:42.94,0:11:44.54,Default,,0,0,0,,path to a participant will
Dialogue: 0,0:11:44.54,0:11:45.41,Default,,0,0,0,,return their age.
Dialogue: 0,0:11:45.70,0:11:46.63,Default,,0,0,0,,And to do this, I'm going to
Dialogue: 0,0:11:46.63,0:11:48.27,Default,,0,0,0,,show another feature that these
Dialogue: 0,0:11:48.27,0:11:50.07,Default,,0,0,0,,type-safe key paths have, and
Dialogue: 0,0:11:50.07,0:11:50.73,Default,,0,0,0,,that is the ability to
Dialogue: 0,0:11:50.73,0:11:52.54,Default,,0,0,0,,dynamically form new key paths
Dialogue: 0,0:11:52.54,0:11:53.54,Default,,0,0,0,,from other key paths.
Dialogue: 0,0:11:53.98,0:11:55.46,Default,,0,0,0,,And so here I'll append two key
Dialogue: 0,0:11:55.46,0:11:56.47,Default,,0,0,0,,paths together, the
Dialogue: 0,0:11:56.47,0:11:58.38,Default,,0,0,0,,participantPath to a kid's age.
Dialogue: 0,0:11:58.55,0:11:59.62,Default,,0,0,0,,And again, we're inferring kid
Dialogue: 0,0:11:59.62,0:12:00.45,Default,,0,0,0,,here, which is why you don't see
Dialogue: 0,0:12:00.45,0:12:01.49,Default,,0,0,0,,the word "kid" there, except for
Dialogue: 0,0:12:01.49,0:12:02.44,Default,,0,0,0,,in the variable name.
Dialogue: 0,0:12:03.70,0:12:05.47,Default,,0,0,0,,And as you would expect, you get
Dialogue: 0,0:12:05.47,0:12:06.59,Default,,0,0,0,,a strongly typed key path that
Dialogue: 0,0:12:06.59,0:12:07.81,Default,,0,0,0,,starts at a birthday party and
Dialogue: 0,0:12:07.81,0:12:08.39,Default,,0,0,0,,goes to a double.
Dialogue: 0,0:12:09.55,0:12:11.56,Default,,0,0,0,,Using the key path is the same
Dialogue: 0,0:12:11.56,0:12:12.80,Default,,0,0,0,,as any other key path stored
Dialogue: 0,0:12:12.80,0:12:13.38,Default,,0,0,0,,into a variable.
Dialogue: 0,0:12:13.74,0:12:14.66,Default,,0,0,0,,And we can go ahead and call our
Dialogue: 0,0:12:14.66,0:12:15.56,Default,,0,0,0,,function on the celebrant in
Dialogue: 0,0:12:15.56,0:12:16.52,Default,,0,0,0,,that we have the same exact
Dialogue: 0,0:12:16.75,0:12:18.13,Default,,0,0,0,,result that we saw previously.
Dialogue: 0,0:12:19.23,0:12:20.54,Default,,0,0,0,,And when subscripts are
Dialogue: 0,0:12:20.54,0:12:21.82,Default,,0,0,0,,supported, we can also use this
Dialogue: 0,0:12:21.82,0:12:23.47,Default,,0,0,0,,function now to find the age of
Dialogue: 0,0:12:23.47,0:12:25.01,Default,,0,0,0,,the first attendee to the party.
Dialogue: 0,0:12:25.07,0:12:28.22,Default,,0,0,0,,Now, I want to talk to the rules
Dialogue: 0,0:12:28.22,0:12:30.71,Default,,0,0,0,,of appending key paths a bit.
Dialogue: 0,0:12:30.71,0:12:31.91,Default,,0,0,0,,When we append two key paths
Dialogue: 0,0:12:31.91,0:12:33.67,Default,,0,0,0,,together, it's like we're adding
Dialogue: 0,0:12:33.67,0:12:34.18,Default,,0,0,0,,them together.
Dialogue: 0,0:12:34.71,0:12:36.86,Default,,0,0,0,,But in order for this addition
Dialogue: 0,0:12:36.86,0:12:38.27,Default,,0,0,0,,to make sense, we really need to
Dialogue: 0,0:12:38.27,0:12:39.41,Default,,0,0,0,,look at the types of the key
Dialogue: 0,0:12:39.41,0:12:40.18,Default,,0,0,0,,paths involved.
Dialogue: 0,0:12:41.04,0:12:42.31,Default,,0,0,0,,Specifically, we need to look at
Dialogue: 0,0:12:42.40,0:12:43.96,Default,,0,0,0,,each base type and each property
Dialogue: 0,0:12:43.96,0:12:44.23,Default,,0,0,0,,type.
Dialogue: 0,0:12:45.29,0:12:47.74,Default,,0,0,0,,And the inner types need to
Dialogue: 0,0:12:47.74,0:12:48.20,Default,,0,0,0,,match.
Dialogue: 0,0:12:48.32,0:12:50.19,Default,,0,0,0,,And if that's the case, we can
Dialogue: 0,0:12:50.19,0:12:51.47,Default,,0,0,0,,form a key path from the
Dialogue: 0,0:12:51.50,0:12:53.72,Default,,0,0,0,,original base type to the final
Dialogue: 0,0:12:53.72,0:12:54.36,Default,,0,0,0,,property type.
Dialogue: 0,0:12:54.92,0:12:58.61,Default,,0,0,0,,And in this way, it's like key
Dialogue: 0,0:12:58.61,0:12:59.54,Default,,0,0,0,,paths actually don't care how
Dialogue: 0,0:12:59.54,0:13:00.65,Default,,0,0,0,,they get from the, their base
Dialogue: 0,0:13:00.65,0:13:02.29,Default,,0,0,0,,type to the property type, just
Dialogue: 0,0:13:02.29,0:13:03.38,Default,,0,0,0,,that they can, and the compiler
Dialogue: 0,0:13:03.38,0:13:05.90,Default,,0,0,0,,ensures that for us.
Dialogue: 0,0:13:06.09,0:13:06.98,Default,,0,0,0,,Now, I'd like to take another
Dialogue: 0,0:13:06.98,0:13:08.24,Default,,0,0,0,,look at another example or
Dialogue: 0,0:13:08.24,0:13:09.36,Default,,0,0,0,,another aspect of the type
Dialogue: 0,0:13:09.36,0:13:10.61,Default,,0,0,0,,safety that the Swift key paths
Dialogue: 0,0:13:10.61,0:13:13.37,Default,,0,0,0,,provide, in case it wasn't that
Dialogue: 0,0:13:13.68,0:13:13.95,Default,,0,0,0,,clear.
Dialogue: 0,0:13:13.95,0:13:17.30,Default,,0,0,0,,Suppose we wanted to output a
Dialogue: 0,0:13:17.30,0:13:18.24,Default,,0,0,0,,summary of our party.
Dialogue: 0,0:13:18.64,0:13:20.11,Default,,0,0,0,,We could form an array of labels
Dialogue: 0,0:13:20.11,0:13:22.98,Default,,0,0,0,,in key paths, but what would we
Dialogue: 0,0:13:22.98,0:13:25.20,Default,,0,0,0,,expect this array, partyPaths,
Dialogue: 0,0:13:25.62,0:13:26.75,Default,,0,0,0,,what would we expect the type of
Dialogue: 0,0:13:26.75,0:13:27.20,Default,,0,0,0,,it to be?
Dialogue: 0,0:13:27.46,0:13:29.11,Default,,0,0,0,,After all, theme is a string,
Dialogue: 0,0:13:29.48,0:13:30.62,Default,,0,0,0,,the attending is an array of
Dialogue: 0,0:13:30.62,0:13:32.72,Default,,0,0,0,,kids, and the celebrant is a
Dialogue: 0,0:13:32.72,0:13:33.83,Default,,0,0,0,,reference to a single kid.
Dialogue: 0,0:13:35.35,0:13:36.47,Default,,0,0,0,,In this case, we get a new type.
Dialogue: 0,0:13:36.83,0:13:38.28,Default,,0,0,0,,It's a, it's an array of partial
Dialogue: 0,0:13:38.28,0:13:39.68,Default,,0,0,0,,key paths to BirthdayParty.
Dialogue: 0,0:13:40.25,0:13:41.27,Default,,0,0,0,,And partial key paths are
Dialogue: 0,0:13:41.27,0:13:43.19,Default,,0,0,0,,partially type-erased key paths.
Dialogue: 0,0:13:43.66,0:13:44.74,Default,,0,0,0,,They know about their base type,
Dialogue: 0,0:13:45.00,0:13:47.47,Default,,0,0,0,,but they can point to any valid
Dialogue: 0,0:13:47.47,0:13:50.41,Default,,0,0,0,,key path for that particular
Dialogue: 0,0:13:50.41,0:13:50.78,Default,,0,0,0,,base.
Dialogue: 0,0:13:50.78,0:13:52.22,Default,,0,0,0,,And so in this case, let's go
Dialogue: 0,0:13:52.22,0:13:53.49,Default,,0,0,0,,ahead and print our report.
Dialogue: 0,0:13:54.47,0:13:57.18,Default,,0,0,0,,We'll zip our titles and paths
Dialogue: 0,0:13:57.18,0:13:59.45,Default,,0,0,0,,together, use the party path to
Dialogue: 0,0:13:59.45,0:14:01.29,Default,,0,0,0,,get the party value, and then
Dialogue: 0,0:14:01.29,0:14:01.95,Default,,0,0,0,,print our report.
Dialogue: 0,0:14:02.10,0:14:04.09,Default,,0,0,0,,And you can see Mia's having a
Dialogue: 0,0:14:04.09,0:14:05.23,Default,,0,0,0,,space-themed -- well, it looks
Dialogue: 0,0:14:05.23,0:14:06.41,Default,,0,0,0,,like a family birthday party --
Dialogue: 0,0:14:06.57,0:14:07.68,Default,,0,0,0,,but it's space themed, which
Dialogue: 0,0:14:07.68,0:14:11.08,Default,,0,0,0,,should be pretty fun.
Dialogue: 0,0:14:11.30,0:14:12.72,Default,,0,0,0,,Now, I want to add an extension
Dialogue: 0,0:14:12.78,0:14:13.48,Default,,0,0,0,,to BirthdayParty.
Dialogue: 0,0:14:13.76,0:14:14.76,Default,,0,0,0,,We're going to add a function
Dialogue: 0,0:14:14.93,0:14:15.92,Default,,0,0,0,,that lets our kids blow out
Dialogue: 0,0:14:15.92,0:14:16.90,Default,,0,0,0,,their birthday candles, and this
Dialogue: 0,0:14:16.90,0:14:17.59,Default,,0,0,0,,is going to be a little bit
Dialogue: 0,0:14:17.59,0:14:18.35,Default,,0,0,0,,different from what we were
Dialogue: 0,0:14:18.35,0:14:19.84,Default,,0,0,0,,doing previously because up
Dialogue: 0,0:14:19.84,0:14:20.81,Default,,0,0,0,,until now, we've been reading
Dialogue: 0,0:14:20.81,0:14:21.76,Default,,0,0,0,,key paths, and now I want to
Dialogue: 0,0:14:21.76,0:14:23.07,Default,,0,0,0,,write to a key path or use a key
Dialogue: 0,0:14:23.07,0:14:24.01,Default,,0,0,0,,path to write to a value.
Dialogue: 0,0:14:24.22,0:14:25.88,Default,,0,0,0,,So we're going to add our
Dialogue: 0,0:14:25.88,0:14:27.59,Default,,0,0,0,,functions, and I want to point
Dialogue: 0,0:14:27.59,0:14:28.57,Default,,0,0,0,,out that age key path is
Dialogue: 0,0:14:28.57,0:14:29.43,Default,,0,0,0,,actually a new type.
Dialogue: 0,0:14:29.43,0:14:30.74,Default,,0,0,0,,It's a writable key path of a,
Dialogue: 0,0:14:30.87,0:14:31.96,Default,,0,0,0,,that starts at a BirthdayParty
Dialogue: 0,0:14:31.96,0:14:32.74,Default,,0,0,0,,and goes to a double.
Dialogue: 0,0:14:33.24,0:14:35.62,Default,,0,0,0,,We can use writable key paths
Dialogue: 0,0:14:35.62,0:14:37.98,Default,,0,0,0,,just like regular key paths to
Dialogue: 0,0:14:37.98,0:14:39.81,Default,,0,0,0,,get values out of our values,
Dialogue: 0,0:14:40.51,0:14:41.51,Default,,0,0,0,,and we can also use them to
Dialogue: 0,0:14:41.51,0:14:42.39,Default,,0,0,0,,mutate our values.
Dialogue: 0,0:14:43.02,0:14:44.24,Default,,0,0,0,,And we can finally go ahead and
Dialogue: 0,0:14:44.24,0:14:45.25,Default,,0,0,0,,blow out our candles.
Dialogue: 0,0:14:45.62,0:14:46.77,Default,,0,0,0,,This all looks pretty good,
Dialogue: 0,0:14:47.02,0:14:48.11,Default,,0,0,0,,except for one problem.
Dialogue: 0,0:14:48.84,0:14:49.72,Default,,0,0,0,,Doesn't compile.
Dialogue: 0,0:14:50.29,0:14:51.86,Default,,0,0,0,,This is a birthday catastrophe.
Dialogue: 0,0:14:52.85,0:14:54.83,Default,,0,0,0,,So let's try to, I'm going to
Dialogue: 0,0:14:54.83,0:14:56.33,Default,,0,0,0,,debug this live on stage.
Dialogue: 0,0:14:56.71,0:15:00.25,Default,,0,0,0,,Debug. So the compiler's telling
Dialogue: 0,0:15:00.25,0:15:01.41,Default,,0,0,0,,us, "Cannot assign to an
Dialogue: 0,0:15:01.41,0:15:02.45,Default,,0,0,0,,immutable expression of type
Dialogue: 0,0:15:02.49,0:15:04.49,Default,,0,0,0,,'Double,'" which is very Swift
Dialogue: 0,0:15:04.49,0:15:04.74,Default,,0,0,0,,of it.
Dialogue: 0,0:15:04.74,0:15:06.94,Default,,0,0,0,,Let's see if we can figure out
Dialogue: 0,0:15:06.94,0:15:07.51,Default,,0,0,0,,what's going on.
Dialogue: 0,0:15:08.08,0:15:09.21,Default,,0,0,0,,It's saying immutable, but we
Dialogue: 0,0:15:09.21,0:15:12.20,Default,,0,0,0,,are passing a writable key path.
Dialogue: 0,0:15:12.20,0:15:13.95,Default,,0,0,0,,And we are indeed passing a key
Dialogue: 0,0:15:13.95,0:15:14.15,Default,,0,0,0,,path.
Dialogue: 0,0:15:14.15,0:15:15.12,Default,,0,0,0,,Let's confirm, though, that this
Dialogue: 0,0:15:15.12,0:15:16.56,Default,,0,0,0,,key path is actually to
Dialogue: 0,0:15:16.56,0:15:17.23,Default,,0,0,0,,immutable variable.
Dialogue: 0,0:15:17.23,0:15:18.19,Default,,0,0,0,,That, you know, sometimes you
Dialogue: 0,0:15:18.19,0:15:19.22,Default,,0,0,0,,say let when you meant to say
Dialogue: 0,0:15:19.22,0:15:19.50,Default,,0,0,0,,var.
Dialogue: 0,0:15:19.63,0:15:20.31,Default,,0,0,0,,So let's bring back the
Dialogue: 0,0:15:20.31,0:15:21.64,Default,,0,0,0,,declaration of kid, but we'll
Dialogue: 0,0:15:21.64,0:15:23.68,Default,,0,0,0,,see that var, our age is indeed
Dialogue: 0,0:15:23.68,0:15:24.12,Default,,0,0,0,,mutable.
Dialogue: 0,0:15:24.50,0:15:26.20,Default,,0,0,0,,It's a var, so that's not the
Dialogue: 0,0:15:26.20,0:15:26.71,Default,,0,0,0,,problem.
Dialogue: 0,0:15:27.41,0:15:28.50,Default,,0,0,0,,So maybe the problem's with the
Dialogue: 0,0:15:28.50,0:15:29.63,Default,,0,0,0,,actual write itself.
Dialogue: 0,0:15:30.19,0:15:31.17,Default,,0,0,0,,And that's, and we're using the
Dialogue: 0,0:15:31.17,0:15:31.68,Default,,0,0,0,,subscript.
Dialogue: 0,0:15:31.82,0:15:32.93,Default,,0,0,0,,And I'm on stage telling you
Dialogue: 0,0:15:32.93,0:15:34.12,Default,,0,0,0,,that subscripts work, so that's
Dialogue: 0,0:15:34.12,0:15:34.87,Default,,0,0,0,,not the problem.
Dialogue: 0,0:15:35.48,0:15:37.01,Default,,0,0,0,,So it must be something to do
Dialogue: 0,0:15:37.01,0:15:37.54,Default,,0,0,0,,self.
Dialogue: 0,0:15:38.08,0:15:39.14,Default,,0,0,0,,Well, what's self?
Dialogue: 0,0:15:39.14,0:15:40.43,Default,,0,0,0,,Self is an extension on
Dialogue: 0,0:15:40.43,0:15:41.55,Default,,0,0,0,,BirthdayParty, so now we're
Dialogue: 0,0:15:41.55,0:15:42.60,Default,,0,0,0,,going to need to bring back the
Dialogue: 0,0:15:42.60,0:15:43.67,Default,,0,0,0,,declaration of BirthdayParty.
Dialogue: 0,0:15:43.67,0:15:44.58,Default,,0,0,0,,Luckily, we had some room.
Dialogue: 0,0:15:44.79,0:15:47.12,Default,,0,0,0,,And we'll see that
Dialogue: 0,0:15:47.63,0:15:49.20,Default,,0,0,0,,BirthdayParty's a struct, and
Dialogue: 0,0:15:49.20,0:15:50.36,Default,,0,0,0,,structs are value types.
Dialogue: 0,0:15:50.52,0:15:51.57,Default,,0,0,0,,And so the compiler's actually
Dialogue: 0,0:15:51.57,0:15:52.43,Default,,0,0,0,,doing the right thing here.
Dialogue: 0,0:15:52.62,0:15:53.82,Default,,0,0,0,,It's not letting us mutate a
Dialogue: 0,0:15:53.82,0:15:55.13,Default,,0,0,0,,BirthdayParty because our key
Dialogue: 0,0:15:55.13,0:15:56.68,Default,,0,0,0,,path's anchored in a
Dialogue: 0,0:15:56.68,0:15:57.72,Default,,0,0,0,,BirthdayParty there.
Dialogue: 0,0:15:58.35,0:15:59.45,Default,,0,0,0,,And so one trick we could do,
Dialogue: 0,0:15:59.45,0:15:59.73,Default,,0,0,0,,right.
Dialogue: 0,0:15:59.73,0:16:00.95,Default,,0,0,0,,We look in our bag of Swift
Dialogue: 0,0:16:00.95,0:16:03.12,Default,,0,0,0,,tricks that we know, and we see
Dialogue: 0,0:16:03.12,0:16:04.50,Default,,0,0,0,,that, oh, OK, we can just add
Dialogue: 0,0:16:04.50,0:16:05.44,Default,,0,0,0,,mutating, and everything will
Dialogue: 0,0:16:05.44,0:16:05.71,Default,,0,0,0,,work.
Dialogue: 0,0:16:07.14,0:16:08.71,Default,,0,0,0,,But when you do that, you want
Dialogue: 0,0:16:08.71,0:16:09.61,Default,,0,0,0,,to stop and think, is this
Dialogue: 0,0:16:09.61,0:16:10.72,Default,,0,0,0,,really the right choice?
Dialogue: 0,0:16:11.32,0:16:13.40,Default,,0,0,0,,Because we're not really
Dialogue: 0,0:16:13.40,0:16:15.34,Default,,0,0,0,,modifying the key, or the
Dialogue: 0,0:16:15.61,0:16:16.34,Default,,0,0,0,,birthday party.
Dialogue: 0,0:16:16.94,0:16:18.28,Default,,0,0,0,,We're modifying the celebrant.
Dialogue: 0,0:16:18.28,0:16:19.74,Default,,0,0,0,,Birthday parties don't have ages
Dialogue: 0,0:16:19.74,0:16:21.76,Default,,0,0,0,,last I checked, and celebrant's
Dialogue: 0,0:16:21.76,0:16:24.08,Default,,0,0,0,,actually a class, a reference
Dialogue: 0,0:16:24.08,0:16:24.26,Default,,0,0,0,,type.
Dialogue: 0,0:16:24.99,0:16:26.33,Default,,0,0,0,,And so for this, we actually
Dialogue: 0,0:16:26.33,0:16:27.50,Default,,0,0,0,,have another kind of key path
Dialogue: 0,0:16:27.50,0:16:29.50,Default,,0,0,0,,that adds reference mutable
Dialogue: 0,0:16:29.50,0:16:31.70,Default,,0,0,0,,semantics to mutations, and it's
Dialogue: 0,0:16:31.70,0:16:32.74,Default,,0,0,0,,called a reference writable key
Dialogue: 0,0:16:33.96,0:16:34.08,Default,,0,0,0,,path.
Dialogue: 0,0:16:34.85,0:16:35.87,Default,,0,0,0,,And so let's go ahead and use
Dialogue: 0,0:16:35.87,0:16:36.00,Default,,0,0,0,,it.
Dialogue: 0,0:16:36.25,0:16:37.87,Default,,0,0,0,,And this compiles, and we can
Dialogue: 0,0:16:37.87,0:16:39.06,Default,,0,0,0,,finally assert that our little
Dialogue: 0,0:16:39.06,0:16:40.40,Default,,0,0,0,,boy, Benji, is finally one year
Dialogue: 0,0:16:40.40,0:16:41.61,Default,,0,0,0,,older, although I think he goes
Dialogue: 0,0:16:41.61,0:16:43.07,Default,,0,0,0,,by Ben now.
Dialogue: 0,0:16:43.26,0:16:44.04,Default,,0,0,0,,And so we can review the
Dialogue: 0,0:16:44.04,0:16:45.08,Default,,0,0,0,,difference between these two
Dialogue: 0,0:16:45.41,0:16:48.20,Default,,0,0,0,,kinds of mutating key paths.
Dialogue: 0,0:16:48.28,0:16:49.77,Default,,0,0,0,,So we have a writable key path.
Dialogue: 0,0:16:49.92,0:16:51.34,Default,,0,0,0,,And writable key paths write
Dialogue: 0,0:16:51.34,0:16:52.97,Default,,0,0,0,,directly into their value-type
Dialogue: 0,0:16:52.97,0:16:53.56,Default,,0,0,0,,bases.
Dialogue: 0,0:16:53.94,0:16:55.79,Default,,0,0,0,,So the base or the chained bases
Dialogue: 0,0:16:55.91,0:16:56.87,Default,,0,0,0,,need to be mutable.
Dialogue: 0,0:16:57.24,0:16:59.94,Default,,0,0,0,,Whereas a reference writable key
Dialogue: 0,0:16:59.94,0:17:01.67,Default,,0,0,0,,path simply invokes a property
Dialogue: 0,0:17:01.67,0:17:02.97,Default,,0,0,0,,setter on the reference type.
Dialogue: 0,0:17:03.58,0:17:05.14,Default,,0,0,0,,And all of these key path types
Dialogue: 0,0:17:05.14,0:17:08.21,Default,,0,0,0,,form an inheritance tree, each
Dialogue: 0,0:17:08.21,0:17:09.72,Default,,0,0,0,,more specific than the last.
Dialogue: 0,0:17:10.17,0:17:11.72,Default,,0,0,0,,Rooted at the top of this tree
Dialogue: 0,0:17:11.72,0:17:13.05,Default,,0,0,0,,is another kind of key path that
Dialogue: 0,0:17:13.05,0:17:14.09,Default,,0,0,0,,I haven't talked about called an
Dialogue: 0,0:17:14.09,0:17:15.16,Default,,0,0,0,,any key path, and this is a
Dialogue: 0,0:17:15.16,0:17:17.24,Default,,0,0,0,,fully type-erased key path.
Dialogue: 0,0:17:17.24,0:17:18.39,Default,,0,0,0,,And this is useful for when you
Dialogue: 0,0:17:18.39,0:17:19.15,Default,,0,0,0,,have key paths that are
Dialogue: 0,0:17:19.15,0:17:20.64,Default,,0,0,0,,comprised of multiple bases to
Dialogue: 0,0:17:20.64,0:17:21.48,Default,,0,0,0,,multiple different property
Dialogue: 0,0:17:21.48,0:17:22.82,Default,,0,0,0,,types, usually in a collection.
Dialogue: 0,0:17:23.33,0:17:25.26,Default,,0,0,0,,Now, if all of this seems a
Dialogue: 0,0:17:25.26,0:17:26.84,Default,,0,0,0,,little bit complicated, I assure
Dialogue: 0,0:17:26.84,0:17:27.92,Default,,0,0,0,,you that the rules for the kind
Dialogue: 0,0:17:27.92,0:17:29.05,Default,,0,0,0,,of key path that you want, and
Dialogue: 0,0:17:29.05,0:17:32.09,Default,,0,0,0,,use, and get are actually fairly
Dialogue: 0,0:17:32.09,0:17:33.62,Default,,0,0,0,,simple and match the rules that
Dialogue: 0,0:17:33.62,0:17:34.55,Default,,0,0,0,,you're already familiar with
Dialogue: 0,0:17:34.55,0:17:35.69,Default,,0,0,0,,from working with Swift value
Dialogue: 0,0:17:35.76,0:17:37.54,Default,,0,0,0,,types and reference types.
Dialogue: 0,0:17:38.76,0:17:40.37,Default,,0,0,0,,We'll start out with eliminating
Dialogue: 0,0:17:40.37,0:17:41.12,Default,,0,0,0,,half of the problem.
Dialogue: 0,0:17:41.42,0:17:43.92,Default,,0,0,0,,Read-only properties always
Dialogue: 0,0:17:43.92,0:17:46.66,Default,,0,0,0,,yield a key path.
Dialogue: 0,0:17:46.87,0:17:47.79,Default,,0,0,0,,With read-write properties,
Dialogue: 0,0:17:47.79,0:17:48.58,Default,,0,0,0,,things get a little more
Dialogue: 0,0:17:48.58,0:17:49.22,Default,,0,0,0,,nuanced.
Dialogue: 0,0:17:50.72,0:17:52.45,Default,,0,0,0,,Mutable value type bases or
Dialogue: 0,0:17:52.45,0:17:54.03,Default,,0,0,0,,chained mutable value type bases
Dialogue: 0,0:17:54.21,0:17:56.03,Default,,0,0,0,,will result in a writable key
Dialogue: 0,0:17:56.03,0:17:56.16,Default,,0,0,0,,path.
Dialogue: 0,0:17:56.39,0:17:58.52,Default,,0,0,0,,And so writable key paths help
Dialogue: 0,0:17:58.52,0:18:00.82,Default,,0,0,0,,let you write efficiently into a
Dialogue: 0,0:18:00.82,0:18:02.02,Default,,0,0,0,,value type.
Dialogue: 0,0:18:02.43,0:18:03.88,Default,,0,0,0,,However, if one of those value
Dialogue: 0,0:18:03.88,0:18:06.57,Default,,0,0,0,,types is made immutable, say
Dialogue: 0,0:18:06.57,0:18:08.84,Default,,0,0,0,,through a let statement, the
Dialogue: 0,0:18:08.84,0:18:10.16,Default,,0,0,0,,mutability of that property goes
Dialogue: 0,0:18:10.16,0:18:11.19,Default,,0,0,0,,away, just as it does when
Dialogue: 0,0:18:11.19,0:18:12.80,Default,,0,0,0,,you're using regular properties,
Dialogue: 0,0:18:13.24,0:18:14.26,Default,,0,0,0,,and you're left with just a key
Dialogue: 0,0:18:14.95,0:18:15.09,Default,,0,0,0,,path.
Dialogue: 0,0:18:15.90,0:18:17.08,Default,,0,0,0,,And saving the simplest case for
Dialogue: 0,0:18:17.08,0:18:18.57,Default,,0,0,0,,last, read-write properties on
Dialogue: 0,0:18:18.57,0:18:20.20,Default,,0,0,0,,reference type bases always
Dialogue: 0,0:18:20.20,0:18:21.39,Default,,0,0,0,,produce reference writable key
Dialogue: 0,0:18:21.39,0:18:21.84,Default,,0,0,0,,paths.
Dialogue: 0,0:18:21.84,0:18:25.00,Default,,0,0,0,,Now, I want to share one last
Dialogue: 0,0:18:25.23,0:18:26.44,Default,,0,0,0,,detail regarding the behavior of
Dialogue: 0,0:18:26.44,0:18:27.07,Default,,0,0,0,,key paths.
Dialogue: 0,0:18:28.05,0:18:29.60,Default,,0,0,0,,When we can use key paths with
Dialogue: 0,0:18:29.60,0:18:31.08,Default,,0,0,0,,subscripts, it's important to
Dialogue: 0,0:18:31.08,0:18:32.63,Default,,0,0,0,,know how their behavior differs
Dialogue: 0,0:18:32.63,0:18:33.38,Default,,0,0,0,,from closures.
Dialogue: 0,0:18:34.75,0:18:35.97,Default,,0,0,0,,Consider the following example.
Dialogue: 0,0:18:36.63,0:18:37.53,Default,,0,0,0,,Here I'm going to form a key
Dialogue: 0,0:18:37.53,0:18:38.68,Default,,0,0,0,,path to the first attendee of
Dialogue: 0,0:18:38.68,0:18:40.84,Default,,0,0,0,,the birthday party and use that
Dialogue: 0,0:18:40.84,0:18:42.11,Default,,0,0,0,,to identify their, use our
Dialogue: 0,0:18:42.11,0:18:43.49,Default,,0,0,0,,partyPersonAge method from
Dialogue: 0,0:18:43.49,0:18:45.74,Default,,0,0,0,,before to identify their age.
Dialogue: 0,0:18:46.26,0:18:47.89,Default,,0,0,0,,And not surprisingly, the key
Dialogue: 0,0:18:47.89,0:18:48.73,Default,,0,0,0,,path that we get here is
Dialogue: 0,0:18:48.73,0:18:50.16,Default,,0,0,0,,actually, is going to the zeroth
Dialogue: 0,0:18:50.16,0:18:51.72,Default,,0,0,0,,element of the attendees array.
Dialogue: 0,0:18:52.94,0:18:54.22,Default,,0,0,0,,Well, let's suppose I change the
Dialogue: 0,0:18:54.22,0:18:54.94,Default,,0,0,0,,index to 1.
Dialogue: 0,0:18:55.01,0:18:56.36,Default,,0,0,0,,I also care about the second
Dialogue: 0,0:18:56.36,0:18:58.21,Default,,0,0,0,,attendee's age for some reason.
Dialogue: 0,0:18:59.30,0:19:01.18,Default,,0,0,0,,You would be, might be surprised
Dialogue: 0,0:19:02.44,0:19:03.97,Default,,0,0,0,,that the resulting key path
Dialogue: 0,0:19:03.97,0:19:05.19,Default,,0,0,0,,actually is unchanged,
Dialogue: 0,0:19:05.19,0:19:06.52,Default,,0,0,0,,regardless of my changing of
Dialogue: 0,0:19:06.52,0:19:06.98,Default,,0,0,0,,index.
Dialogue: 0,0:19:07.50,0:19:08.77,Default,,0,0,0,,And in this way, key paths
Dialogue: 0,0:19:08.84,0:19:10.46,Default,,0,0,0,,became different than closures.
Dialogue: 0,0:19:10.90,0:19:12.81,Default,,0,0,0,,They capture by value, and so
Dialogue: 0,0:19:12.81,0:19:14.17,Default,,0,0,0,,when this feature becomes
Dialogue: 0,0:19:14.17,0:19:15.05,Default,,0,0,0,,available -- I wanted to say
Dialogue: 0,0:19:15.05,0:19:16.08,Default,,0,0,0,,this today so that you're not
Dialogue: 0,0:19:16.08,0:19:18.59,Default,,0,0,0,,surprised, and now I have.
Dialogue: 0,0:19:19.36,0:19:21.64,Default,,0,0,0,,So at this point, we've seen
Dialogue: 0,0:19:21.64,0:19:23.24,Default,,0,0,0,,many examples for how these
Dialogue: 0,0:19:23.34,0:19:25.55,Default,,0,0,0,,type-safe key paths satisfy our
Dialogue: 0,0:19:25.55,0:19:28.12,Default,,0,0,0,,goals for fast, type-safe and
Dialogue: 0,0:19:28.12,0:19:29.68,Default,,0,0,0,,expressive property traversal.
Dialogue: 0,0:19:30.28,0:19:31.96,Default,,0,0,0,,I'm going to change gears a
Dialogue: 0,0:19:31.96,0:19:33.18,Default,,0,0,0,,little bit now, though, because
Dialogue: 0,0:19:33.18,0:19:34.04,Default,,0,0,0,,I want to talk about how these
Dialogue: 0,0:19:34.04,0:19:35.35,Default,,0,0,0,,key paths can be used to improve
Dialogue: 0,0:19:35.35,0:19:37.03,Default,,0,0,0,,existing APIs in Swift today.
Dialogue: 0,0:19:37.75,0:19:38.63,Default,,0,0,0,,Specifically, I want to talk
Dialogue: 0,0:19:38.63,0:19:39.85,Default,,0,0,0,,about how we applied them to key
Dialogue: 0,0:19:39.85,0:19:40.49,Default,,0,0,0,,value observing.
Dialogue: 0,0:19:42.12,0:19:44.50,Default,,0,0,0,,As you probably know, KVO is
Dialogue: 0,0:19:44.50,0:19:45.82,Default,,0,0,0,,Cocoa's way of allowing objects
Dialogue: 0,0:19:45.82,0:19:47.57,Default,,0,0,0,,to establish relationships to be
Dialogue: 0,0:19:47.57,0:19:48.70,Default,,0,0,0,,notified about changes in their
Dialogue: 0,0:19:48.70,0:19:49.03,Default,,0,0,0,,state.
Dialogue: 0,0:19:49.63,0:19:50.97,Default,,0,0,0,,And if you've tried to use KVO
Dialogue: 0,0:19:50.97,0:19:53.18,Default,,0,0,0,,in Swift up to now, you probably
Dialogue: 0,0:19:53.18,0:19:55.23,Default,,0,0,0,,know that it leaves a little bit
Dialogue: 0,0:19:55.23,0:19:56.06,Default,,0,0,0,,to be desired.
Dialogue: 0,0:19:58.60,0:20:00.22,Default,,0,0,0,,Let's suppose we have a
Dialogue: 0,0:20:00.22,0:20:00.88,Default,,0,0,0,,reference--
Dialogue: 0,0:20:01.02,0:20:02.64,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:20:02.64,0:20:03.23,Default,,0,0,0,,Don't clap yet.
Dialogue: 0,0:20:03.23,0:20:05.73,Default,,0,0,0,,Clap in a minute.
Dialogue: 0,0:20:05.73,0:20:06.54,Default,,0,0,0,,[laughs] Let's suppose we have a
Dialogue: 0,0:20:06.54,0:20:07.73,Default,,0,0,0,,reference to an Objective-C
Dialogue: 0,0:20:07.73,0:20:09.09,Default,,0,0,0,,value -- say the little kid,
Dialogue: 0,0:20:09.09,0:20:10.94,Default,,0,0,0,,Mia, from earlier -- and we
Dialogue: 0,0:20:10.94,0:20:12.11,Default,,0,0,0,,really care about when this
Dialogue: 0,0:20:12.11,0:20:13.20,Default,,0,0,0,,kid's age changes.
Dialogue: 0,0:20:14.45,0:20:15.40,Default,,0,0,0,,We think that forming an
Dialogue: 0,0:20:15.40,0:20:17.10,Default,,0,0,0,,observation should simple, look
Dialogue: 0,0:20:17.10,0:20:18.24,Default,,0,0,0,,as simple as this.
Dialogue: 0,0:20:18.35,0:20:18.77,Default,,0,0,0,,Now clap. [laughs]
Dialogue: 0,0:20:20.52,0:20:24.61,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:20:25.11,0:20:26.27,Default,,0,0,0,,So I want to call out some
Dialogue: 0,0:20:26.31,0:20:27.35,Default,,0,0,0,,details about this form.
Dialogue: 0,0:20:27.79,0:20:29.55,Default,,0,0,0,,We are forming our observation
Dialogue: 0,0:20:29.55,0:20:31.86,Default,,0,0,0,,directly on the value type using
Dialogue: 0,0:20:31.86,0:20:33.86,Default,,0,0,0,,our new type-safe key paths.
Dialogue: 0,0:20:34.06,0:20:35.41,Default,,0,0,0,,What we get back is an
Dialogue: 0,0:20:35.41,0:20:37.02,Default,,0,0,0,,observation token similar to our
Dialogue: 0,0:20:37.02,0:20:38.08,Default,,0,0,0,,Notification Center APIs.
Dialogue: 0,0:20:38.08,0:20:39.86,Default,,0,0,0,,And this observation token is
Dialogue: 0,0:20:39.86,0:20:40.88,Default,,0,0,0,,doing two things for us.
Dialogue: 0,0:20:41.04,0:20:42.83,Default,,0,0,0,,One, it's saving us from having
Dialogue: 0,0:20:42.83,0:20:44.91,Default,,0,0,0,,to deal with unsafe raw pointers
Dialogue: 0,0:20:44.91,0:20:46.14,Default,,0,0,0,,with context to uniquely
Dialogue: 0,0:20:46.14,0:20:47.69,Default,,0,0,0,,identify our observation.
Dialogue: 0,0:20:47.99,0:20:49.53,Default,,0,0,0,,Now, our observation is directly
Dialogue: 0,0:20:49.53,0:20:50.98,Default,,0,0,0,,tied to our, the observation
Dialogue: 0,0:20:50.98,0:20:51.44,Default,,0,0,0,,that we get back.
Dialogue: 0,0:20:52.13,0:20:53.51,Default,,0,0,0,,Two, it's managing the life
Dialogue: 0,0:20:53.51,0:20:54.72,Default,,0,0,0,,[inaudible] of our observation.
Dialogue: 0,0:20:55.01,0:20:56.85,Default,,0,0,0,,And so if I, if -- well, in this
Dialogue: 0,0:20:56.85,0:20:57.74,Default,,0,0,0,,case, I can't set it to nil --
Dialogue: 0,0:20:57.74,0:20:58.79,Default,,0,0,0,,but if I were to set it to nil,
Dialogue: 0,0:20:58.91,0:21:00.00,Default,,0,0,0,,the observation would be toward
Dialogue: 0,0:21:00.75,0:21:01.87,Default,,0,0,0,,now [phonetic], which is a vast
Dialogue: 0,0:21:01.87,0:21:03.10,Default,,0,0,0,,improvement over getting
Dialogue: 0,0:21:03.10,0:21:04.51,Default,,0,0,0,,exceptions and having your app
Dialogue: 0,0:21:04.63,0:21:05.40,Default,,0,0,0,,crash when you forget to
Dialogue: 0,0:21:05.40,0:21:06.58,Default,,0,0,0,,unregister an observation.
Dialogue: 0,0:21:07.74,0:21:09.38,Default,,0,0,0,,Finally -- and this is perhaps
Dialogue: 0,0:21:09.41,0:21:10.89,Default,,0,0,0,,the nicest part -- you now
Dialogue: 0,0:21:10.96,0:21:13.06,Default,,0,0,0,,handle your observation's
Dialogue: 0,0:21:13.06,0:21:14.74,Default,,0,0,0,,reaction with a closure as
Dialogue: 0,0:21:15.02,0:21:17.00,Default,,0,0,0,,opposed to nested if statements
Dialogue: 0,0:21:17.00,0:21:18.07,Default,,0,0,0,,looking at and comparing
Dialogue: 0,0:21:18.07,0:21:18.61,Default,,0,0,0,,strings.
Dialogue: 0,0:21:19.19,0:21:19.84,Default,,0,0,0,,Let's take a look at the
Dialogue: 0,0:21:19.84,0:21:20.88,Default,,0,0,0,,parameters to this closure a
Dialogue: 0,0:21:20.88,0:21:21.50,Default,,0,0,0,,little bit more.
Dialogue: 0,0:21:22.79,0:21:24.01,Default,,0,0,0,,It has two parameters.
Dialogue: 0,0:21:24.01,0:21:25.53,Default,,0,0,0,,The first is the observed object
Dialogue: 0,0:21:25.53,0:21:25.99,Default,,0,0,0,,itself.
Dialogue: 0,0:21:26.26,0:21:27.63,Default,,0,0,0,,This is the same reference, Mia,
Dialogue: 0,0:21:27.73,0:21:29.51,Default,,0,0,0,,but we provide it as a parameter
Dialogue: 0,0:21:29.82,0:21:32.52,Default,,0,0,0,,to help you avoid accidentally
Dialogue: 0,0:21:32.52,0:21:33.73,Default,,0,0,0,,creating retain cycles.
Dialogue: 0,0:21:34.91,0:21:37.24,Default,,0,0,0,,Second, parameter is a change
Dialogue: 0,0:21:37.48,0:21:39.04,Default,,0,0,0,,object, and this is very similar
Dialogue: 0,0:21:39.04,0:21:40.76,Default,,0,0,0,,to the existing KVO API, except
Dialogue: 0,0:21:40.76,0:21:41.86,Default,,0,0,0,,you, if you've used, if you're
Dialogue: 0,0:21:41.86,0:21:43.07,Default,,0,0,0,,familiar with that API, you know
Dialogue: 0,0:21:43.07,0:21:44.10,Default,,0,0,0,,that that's a loosely type
Dialogue: 0,0:21:44.10,0:21:45.11,Default,,0,0,0,,dictionary, and here we're
Dialogue: 0,0:21:45.11,0:21:46.08,Default,,0,0,0,,actually providing a strongly
Dialogue: 0,0:21:46.08,0:21:46.69,Default,,0,0,0,,typed struct.
Dialogue: 0,0:21:46.91,0:21:48.07,Default,,0,0,0,,So we know observed is a kid
Dialogue: 0,0:21:48.07,0:21:49.13,Default,,0,0,0,,because of the key path and we
Dialogue: 0,0:21:49.13,0:21:50.48,Default,,0,0,0,,know that the age that's
Dialogue: 0,0:21:50.48,0:21:51.74,Default,,0,0,0,,changing is a double because of
Dialogue: 0,0:21:51.74,0:21:52.26,Default,,0,0,0,,the key path.
Dialogue: 0,0:21:52.63,0:21:53.48,Default,,0,0,0,,And now, I want to go ahead and
Dialogue: 0,0:21:53.48,0:21:54.14,Default,,0,0,0,,make this real.
Dialogue: 0,0:21:54.28,0:21:55.39,Default,,0,0,0,,So we'll do an example.
Dialogue: 0,0:21:55.39,0:21:56.60,Default,,0,0,0,,Let's suppose we have a
Dialogue: 0,0:21:56.60,0:21:57.74,Default,,0,0,0,,controller that cares about when
Dialogue: 0,0:21:57.74,0:21:58.59,Default,,0,0,0,,our kids get older.
Dialogue: 0,0:21:58.71,0:22:00.00,Default,,0,0,0,,It's the KindergartenController,
Dialogue: 0,0:22:00.37,0:22:01.51,Default,,0,0,0,,and it has a single key value
Dialogue: 0,0:22:01.51,0:22:03.04,Default,,0,0,0,,observable property, its
Dialogue: 0,0:22:03.40,0:22:04.52,Default,,0,0,0,,representedKid.
Dialogue: 0,0:22:04.67,0:22:05.49,Default,,0,0,0,,And we're going to form an
Dialogue: 0,0:22:05.49,0:22:06.94,Default,,0,0,0,,observation, so let's go ahead
Dialogue: 0,0:22:06.94,0:22:08.61,Default,,0,0,0,,and add an i var for our
Dialogue: 0,0:22:08.61,0:22:09.32,Default,,0,0,0,,observation.
Dialogue: 0,0:22:09.45,0:22:11.12,Default,,0,0,0,,And then, we'll form that
Dialogue: 0,0:22:11.12,0:22:12.80,Default,,0,0,0,,observation right now to our
Dialogue: 0,0:22:12.80,0:22:14.24,Default,,0,0,0,,controller's representedKid's
Dialogue: 0,0:22:14.30,0:22:15.41,Default,,0,0,0,,age, and we'll hold onto that in
Dialogue: 0,0:22:15.41,0:22:15.91,Default,,0,0,0,,the i var.
Dialogue: 0,0:22:16.66,0:22:18.21,Default,,0,0,0,,And we'll add our super-secret
Dialogue: 0,0:22:18.21,0:22:18.93,Default,,0,0,0,,business logic.
Dialogue: 0,0:22:19.25,0:22:20.16,Default,,0,0,0,,And if you're looking at this
Dialogue: 0,0:22:20.16,0:22:21.71,Default,,0,0,0,,and thinking that it's wrong, I
Dialogue: 0,0:22:21.71,0:22:22.60,Default,,0,0,0,,assure you that once you're
Dialogue: 0,0:22:22.60,0:22:23.62,Default,,0,0,0,,ready for kindergarten, you're
Dialogue: 0,0:22:23.62,0:22:24.67,Default,,0,0,0,,always ready for kindergarten,
Dialogue: 0,0:22:24.67,0:22:25.61,Default,,0,0,0,,so it's actually correct.
Dialogue: 0,0:22:26.15,0:22:27.47,Default,,0,0,0,,And that's it.
Dialogue: 0,0:22:27.65,0:22:30.18,Default,,0,0,0,,That's the entire declaration of
Dialogue: 0,0:22:30.18,0:22:30.81,Default,,0,0,0,,our controller.
Dialogue: 0,0:22:31.86,0:22:33.42,Default,,0,0,0,,There is no need for a dnit
Dialogue: 0,0:22:33.42,0:22:34.53,Default,,0,0,0,,[phonetic] where I throw away or
Dialogue: 0,0:22:34.53,0:22:36.02,Default,,0,0,0,,tear down my observation because
Dialogue: 0,0:22:36.02,0:22:36.99,Default,,0,0,0,,it's tied to the life
Dialogue: 0,0:22:36.99,0:22:37.88,Default,,0,0,0,,[inaudible] of that observation
Dialogue: 0,0:22:37.88,0:22:38.16,Default,,0,0,0,,token.
Dialogue: 0,0:22:38.16,0:22:39.27,Default,,0,0,0,,And so when the controller goes
Dialogue: 0,0:22:39.27,0:22:40.69,Default,,0,0,0,,away, the observation token will
Dialogue: 0,0:22:40.69,0:22:43.00,Default,,0,0,0,,go away, and it fits on the
Dialogue: 0,0:22:43.00,0:22:43.35,Default,,0,0,0,,slide.
Dialogue: 0,0:22:43.93,0:22:46.72,Default,,0,0,0,,So let's go ahead and create our
Dialogue: 0,0:22:46.72,0:22:47.22,Default,,0,0,0,,controller.
Dialogue: 0,0:22:48.81,0:22:50.60,Default,,0,0,0,,And here we'll point to Mia, and
Dialogue: 0,0:22:50.60,0:22:51.47,Default,,0,0,0,,we'll have Mia blow out her
Dialogue: 0,0:22:51.47,0:22:52.52,Default,,0,0,0,,candles with our function that
Dialogue: 0,0:22:52.52,0:22:53.33,Default,,0,0,0,,we defined earlier.
Dialogue: 0,0:22:53.68,0:22:54.70,Default,,0,0,0,,And we'll finally see through
Dialogue: 0,0:22:54.70,0:22:55.94,Default,,0,0,0,,the power of these new type-safe
Dialogue: 0,0:22:55.94,0:22:57.20,Default,,0,0,0,,key paths our little girl grow
Dialogue: 0,0:22:57.20,0:22:57.88,Default,,0,0,0,,one year older.
Dialogue: 0,0:22:58.31,0:23:01.40,Default,,0,0,0,,Now, at this point, I've shown
Dialogue: 0,0:23:01.40,0:23:02.32,Default,,0,0,0,,everything that I'm planning on
Dialogue: 0,0:23:02.32,0:23:03.90,Default,,0,0,0,,showing, but I do want to circle
Dialogue: 0,0:23:03.90,0:23:05.10,Default,,0,0,0,,back and talk about string key
Dialogue: 0,0:23:05.10,0:23:06.20,Default,,0,0,0,,paths one more time.
Dialogue: 0,0:23:06.28,0:23:08.76,Default,,0,0,0,,These guys are going to continue
Dialogue: 0,0:23:08.76,0:23:10.02,Default,,0,0,0,,to exist, and they're going to
Dialogue: 0,0:23:10.02,0:23:12.11,Default,,0,0,0,,remain useful for legacy APIs
Dialogue: 0,0:23:13.04,0:23:14.36,Default,,0,0,0,,that, you know, insist on using
Dialogue: 0,0:23:14.36,0:23:14.91,Default,,0,0,0,,strings.
Dialogue: 0,0:23:16.00,0:23:17.69,Default,,0,0,0,,However, starting in Swift 4,
Dialogue: 0,0:23:19.01,0:23:20.51,Default,,0,0,0,,you now have access to these new
Dialogue: 0,0:23:20.51,0:23:22.44,Default,,0,0,0,,type-safe performant key paths,
Dialogue: 0,0:23:23.01,0:23:23.95,Default,,0,0,0,,and we brought them to the
Dialogue: 0,0:23:23.95,0:23:25.16,Default,,0,0,0,,language because we feel that
Dialogue: 0,0:23:25.16,0:23:26.20,Default,,0,0,0,,they are so incredibly
Dialogue: 0,0:23:26.20,0:23:26.65,Default,,0,0,0,,important.
Dialogue: 0,0:23:26.65,0:23:28.46,Default,,0,0,0,,And they're only going to grow
Dialogue: 0,0:23:28.46,0:23:29.92,Default,,0,0,0,,to be more important over time.
Dialogue: 0,0:23:30.47,0:23:32.80,Default,,0,0,0,,And with that, I'd like to bring
Dialogue: 0,0:23:32.80,0:23:34.05,Default,,0,0,0,,Tony back on stage to discuss
Dialogue: 0,0:23:34.05,0:23:34.99,Default,,0,0,0,,another important language
Dialogue: 0,0:23:34.99,0:23:35.78,Default,,0,0,0,,feature that we're bringing to
Dialogue: 0,0:23:35.78,0:23:36.42,Default,,0,0,0,,Swift this year.
Dialogue: 0,0:23:36.59,0:23:36.92,Default,,0,0,0,,Thank you.
Dialogue: 0,0:23:38.52,0:23:42.69,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:23:43.19,0:23:43.47,Default,,0,0,0,,>> All right.
Dialogue: 0,0:23:43.47,0:23:43.96,Default,,0,0,0,,Thanks, Michael.
Dialogue: 0,0:23:44.45,0:23:45.81,Default,,0,0,0,,So next up, we're going to talk
Dialogue: 0,0:23:45.81,0:23:47.49,Default,,0,0,0,,about encoding and decoding.
Dialogue: 0,0:23:48.84,0:23:50.73,Default,,0,0,0,,So broadly speaking, encoding
Dialogue: 0,0:23:50.73,0:23:51.91,Default,,0,0,0,,and decoding is about the
Dialogue: 0,0:23:51.91,0:23:53.78,Default,,0,0,0,,conversion between your native
Dialogue: 0,0:23:53.78,0:23:55.60,Default,,0,0,0,,and custom Swift data structures
Dialogue: 0,0:23:56.02,0:23:58.22,Default,,0,0,0,,and archived formats, especially
Dialogue: 0,0:23:58.22,0:23:58.78,Default,,0,0,0,,JSON.
Dialogue: 0,0:23:59.66,0:24:00.65,Default,,0,0,0,,Now, many of you have told us
Dialogue: 0,0:24:00.65,0:24:02.27,Default,,0,0,0,,about the challenge of a
Dialogue: 0,0:24:02.27,0:24:03.95,Default,,0,0,0,,mismatch that is between the
Dialogue: 0,0:24:03.95,0:24:05.52,Default,,0,0,0,,strongly typed language of Swift
Dialogue: 0,0:24:06.15,0:24:08.48,Default,,0,0,0,,and loosely typed archive data
Dialogue: 0,0:24:08.48,0:24:09.57,Default,,0,0,0,,formats like JSON.
Dialogue: 0,0:24:10.61,0:24:11.86,Default,,0,0,0,,We believe that the answer to
Dialogue: 0,0:24:11.86,0:24:13.67,Default,,0,0,0,,this challenge is something that
Dialogue: 0,0:24:13.67,0:24:15.11,Default,,0,0,0,,starts with the language itself
Dialogue: 0,0:24:15.63,0:24:16.78,Default,,0,0,0,,and also takes advantage of the
Dialogue: 0,0:24:16.78,0:24:18.88,Default,,0,0,0,,compiler, the standard library,
Dialogue: 0,0:24:19.01,0:24:20.74,Default,,0,0,0,,and Foundation to make
Dialogue: 0,0:24:20.74,0:24:22.58,Default,,0,0,0,,interaction with JSON simple,
Dialogue: 0,0:24:22.93,0:24:24.33,Default,,0,0,0,,but also to provide you the
Dialogue: 0,0:24:24.33,0:24:25.60,Default,,0,0,0,,opportunity for powerful
Dialogue: 0,0:24:25.60,0:24:26.28,Default,,0,0,0,,customization.
Dialogue: 0,0:24:27.28,0:24:28.75,Default,,0,0,0,,So let's get started by looking
Dialogue: 0,0:24:28.75,0:24:29.44,Default,,0,0,0,,at an example.
Dialogue: 0,0:24:29.54,0:24:31.95,Default,,0,0,0,,Here is some JSON from one of
Dialogue: 0,0:24:31.95,0:24:33.11,Default,,0,0,0,,our favorite sites, GitHub.
Dialogue: 0,0:24:33.84,0:24:35.30,Default,,0,0,0,,This is the result of asking for
Dialogue: 0,0:24:35.30,0:24:37.01,Default,,0,0,0,,information about a commit made
Dialogue: 0,0:24:37.01,0:24:39.00,Default,,0,0,0,,to a repository, and it's pretty
Dialogue: 0,0:24:39.00,0:24:39.70,Default,,0,0,0,,standard JSON.
Dialogue: 0,0:24:40.12,0:24:41.94,Default,,0,0,0,,It's a JSON object or maybe what
Dialogue: 0,0:24:41.94,0:24:42.95,Default,,0,0,0,,we would call a dictionary.
Dialogue: 0,0:24:43.44,0:24:44.67,Default,,0,0,0,,It supports and arbitrary number
Dialogue: 0,0:24:44.67,0:24:46.14,Default,,0,0,0,,of key value pairs -- in this
Dialogue: 0,0:24:46.14,0:24:48.05,Default,,0,0,0,,case, name, which is a string;
Dialogue: 0,0:24:48.75,0:24:50.20,Default,,0,0,0,,email, which is also a string;
Dialogue: 0,0:24:50.20,0:24:52.32,Default,,0,0,0,,and date, which is a string.
Dialogue: 0,0:24:52.76,0:24:53.95,Default,,0,0,0,,And the reason is because, of
Dialogue: 0,0:24:53.95,0:24:55.32,Default,,0,0,0,,course, JSON has no native type
Dialogue: 0,0:24:55.32,0:24:55.87,Default,,0,0,0,,for dates.
Dialogue: 0,0:24:56.35,0:24:57.90,Default,,0,0,0,,But there are many conventions
Dialogue: 0,0:24:57.90,0:24:59.67,Default,,0,0,0,,by which dates are encoded in a
Dialogue: 0,0:24:59.67,0:25:01.99,Default,,0,0,0,,way into JSON, and this one
Dialogue: 0,0:25:01.99,0:25:03.57,Default,,0,0,0,,appears to be iso8601.
Dialogue: 0,0:25:04.83,0:25:06.44,Default,,0,0,0,,If we were to represent this
Dialogue: 0,0:25:06.44,0:25:08.45,Default,,0,0,0,,JSON in Swift, it would look
Dialogue: 0,0:25:08.45,0:25:09.41,Default,,0,0,0,,very different.
Dialogue: 0,0:25:09.55,0:25:11.85,Default,,0,0,0,,For example, we would make a
Dialogue: 0,0:25:11.85,0:25:13.76,Default,,0,0,0,,strong type for it, a struct
Dialogue: 0,0:25:13.76,0:25:14.79,Default,,0,0,0,,perhaps called Author.
Dialogue: 0,0:25:15.94,0:25:17.10,Default,,0,0,0,,This struct would have exactly
Dialogue: 0,0:25:17.10,0:25:18.88,Default,,0,0,0,,three properties -- name and
Dialogue: 0,0:25:18.88,0:25:20.45,Default,,0,0,0,,email, which are strings still;
Dialogue: 0,0:25:20.95,0:25:22.27,Default,,0,0,0,,but date, as you can see here,
Dialogue: 0,0:25:22.37,0:25:24.37,Default,,0,0,0,,is using Foundation's date type.
Dialogue: 0,0:25:24.37,0:25:26.52,Default,,0,0,0,,And the reason that's important
Dialogue: 0,0:25:26.52,0:25:27.88,Default,,0,0,0,,is because, as you interact with
Dialogue: 0,0:25:27.88,0:25:29.47,Default,,0,0,0,,the rest of the Cocoa SDK and
Dialogue: 0,0:25:29.47,0:25:31.42,Default,,0,0,0,,other APIs, you'll find that
Dialogue: 0,0:25:31.42,0:25:34.03,Default,,0,0,0,,date is the kind of type used to
Dialogue: 0,0:25:34.03,0:25:35.45,Default,,0,0,0,,represent a point in time.
Dialogue: 0,0:25:36.27,0:25:37.44,Default,,0,0,0,,And so this is where we've
Dialogue: 0,0:25:37.44,0:25:38.58,Default,,0,0,0,,reached that challenge, right.
Dialogue: 0,0:25:39.41,0:25:41.31,Default,,0,0,0,,How do we convert between that
Dialogue: 0,0:25:41.31,0:25:43.80,Default,,0,0,0,,loosely typed JSON on top and
Dialogue: 0,0:25:43.80,0:25:45.34,Default,,0,0,0,,the strong Swift type on the
Dialogue: 0,0:25:45.34,0:25:45.67,Default,,0,0,0,,bottom?
Dialogue: 0,0:25:46.59,0:25:48.24,Default,,0,0,0,,Well, we think it should be as
Dialogue: 0,0:25:48.24,0:25:49.05,Default,,0,0,0,,easy as this.
Dialogue: 0,0:25:49.23,0:25:51.20,Default,,0,0,0,,Simply adopt a protocol on your
Dialogue: 0,0:25:51.20,0:25:53.21,Default,,0,0,0,,struct and let the compiler, the
Dialogue: 0,0:25:53.21,0:25:54.89,Default,,0,0,0,,standard library, and Foundation
Dialogue: 0,0:25:55.25,0:25:56.94,Default,,0,0,0,,do the vast majority of the work
Dialogue: 0,0:25:56.94,0:25:57.26,Default,,0,0,0,,for you.
Dialogue: 0,0:25:57.35,0:25:59.22,Default,,0,0,0,,Thank you.
Dialogue: 0,0:26:00.52,0:26:03.71,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:26:04.21,0:26:05.44,Default,,0,0,0,,So let's turn this slide into
Dialogue: 0,0:26:05.44,0:26:06.06,Default,,0,0,0,,some real code.
Dialogue: 0,0:26:06.84,0:26:07.87,Default,,0,0,0,,First, I'm going to turn that
Dialogue: 0,0:26:07.87,0:26:09.31,Default,,0,0,0,,JSON into a string using Swift
Dialogue: 0,0:26:09.31,0:26:10.84,Default,,0,0,0,,4's cool, new string literal
Dialogue: 0,0:26:10.84,0:26:12.70,Default,,0,0,0,,syntax, the triple quote, and
Dialogue: 0,0:26:12.70,0:26:13.88,Default,,0,0,0,,then turn that string into data
Dialogue: 0,0:26:14.13,0:26:15.44,Default,,0,0,0,,using UTF-8 encoding, which is
Dialogue: 0,0:26:15.44,0:26:16.42,Default,,0,0,0,,pretty common for JSON.
Dialogue: 0,0:26:16.90,0:26:18.08,Default,,0,0,0,,Struct Author remains the same,
Dialogue: 0,0:26:18.29,0:26:18.78,Default,,0,0,0,,of course.
Dialogue: 0,0:26:19.37,0:26:21.30,Default,,0,0,0,,Next, we create a decoder.
Dialogue: 0,0:26:21.30,0:26:22.50,Default,,0,0,0,,This is what is actually doing
Dialogue: 0,0:26:22.50,0:26:24.70,Default,,0,0,0,,the conversion between the JSON
Dialogue: 0,0:26:24.70,0:26:25.71,Default,,0,0,0,,and our Swift structure.
Dialogue: 0,0:26:26.26,0:26:29.11,Default,,0,0,0,,We tell the decoder about that
Dialogue: 0,0:26:29.11,0:26:31.26,Default,,0,0,0,,convention, the iso8601 date.
Dialogue: 0,0:26:31.26,0:26:32.40,Default,,0,0,0,,And we'll talk more about this
Dialogue: 0,0:26:32.40,0:26:32.66,Default,,0,0,0,,later.
Dialogue: 0,0:26:33.53,0:26:35.15,Default,,0,0,0,,And finally, we ask the decoder
Dialogue: 0,0:26:35.15,0:26:36.71,Default,,0,0,0,,to decode an author.
Dialogue: 0,0:26:37.09,0:26:38.35,Default,,0,0,0,,The result is not an any.
Dialogue: 0,0:26:38.49,0:26:39.59,Default,,0,0,0,,It's not a dictionary.
Dialogue: 0,0:26:39.59,0:26:40.28,Default,,0,0,0,,You don't have to fish through
Dialogue: 0,0:26:40.28,0:26:42.14,Default,,0,0,0,,strings or check for keys.
Dialogue: 0,0:26:42.55,0:26:43.74,Default,,0,0,0,,It's already the type that you
Dialogue: 0,0:26:43.74,0:26:45.40,Default,,0,0,0,,care about using, in this case.
Dialogue: 0,0:26:46.81,0:26:47.92,Default,,0,0,0,,So that was pretty easy.
Dialogue: 0,0:26:48.20,0:26:49.22,Default,,0,0,0,,Let's bump up the difficulty
Dialogue: 0,0:26:49.22,0:26:50.12,Default,,0,0,0,,level one notch.
Dialogue: 0,0:26:50.50,0:26:52.05,Default,,0,0,0,,This JSON is actually part of a
Dialogue: 0,0:26:52.05,0:26:53.86,Default,,0,0,0,,larger set of JSON that comes as
Dialogue: 0,0:26:53.86,0:26:55.03,Default,,0,0,0,,the result of this request,
Dialogue: 0,0:26:55.35,0:26:57.52,Default,,0,0,0,,which includes things like URLs,
Dialogue: 0,0:26:57.52,0:26:58.84,Default,,0,0,0,,and additional strings, and
Dialogue: 0,0:26:58.84,0:26:59.72,Default,,0,0,0,,integer values.
Dialogue: 0,0:27:00.44,0:27:02.93,Default,,0,0,0,,So in Swift, we can just follow
Dialogue: 0,0:27:02.93,0:27:03.21,Default,,0,0,0,,suit.
Dialogue: 0,0:27:03.40,0:27:04.85,Default,,0,0,0,,So I'm going to nest my struct
Dialogue: 0,0:27:04.85,0:27:06.35,Default,,0,0,0,,Author in a new struct called
Dialogue: 0,0:27:06.35,0:27:08.08,Default,,0,0,0,,Commit, which is also codable.
Dialogue: 0,0:27:08.71,0:27:09.83,Default,,0,0,0,,There you can see that I'm able
Dialogue: 0,0:27:09.83,0:27:12.10,Default,,0,0,0,,to use Foundation's URL type and
Dialogue: 0,0:27:12.10,0:27:13.11,Default,,0,0,0,,our struct Author.
Dialogue: 0,0:27:13.24,0:27:14.02,Default,,0,0,0,,So you can see how we can
Dialogue: 0,0:27:14.02,0:27:15.57,Default,,0,0,0,,recursively descend into types,
Dialogue: 0,0:27:15.57,0:27:16.77,Default,,0,0,0,,if they conform with codable, to
Dialogue: 0,0:27:16.77,0:27:17.82,Default,,0,0,0,,decode them as well.
Dialogue: 0,0:27:18.59,0:27:19.96,Default,,0,0,0,,The string, which is, message,
Dialogue: 0,0:27:19.96,0:27:21.46,Default,,0,0,0,,which is a string, and our
Dialogue: 0,0:27:21.46,0:27:22.46,Default,,0,0,0,,comment count property.
Dialogue: 0,0:27:22.46,0:27:25.79,Default,,0,0,0,,And to decode this, again, one
Dialogue: 0,0:27:25.79,0:27:26.24,Default,,0,0,0,,line of code.
Dialogue: 0,0:27:26.24,0:27:27.18,Default,,0,0,0,,We're going to decode a commit
Dialogue: 0,0:27:27.22,0:27:27.71,Default,,0,0,0,,this time.
Dialogue: 0,0:27:27.87,0:27:30.15,Default,,0,0,0,,And the result: Our strong Swift
Dialogue: 0,0:27:30.15,0:27:31.59,Default,,0,0,0,,type, which lets us use the
Dialogue: 0,0:27:31.59,0:27:32.85,Default,,0,0,0,,Swift language features that we
Dialogue: 0,0:27:32.85,0:27:34.36,Default,,0,0,0,,know and love to get at the
Dialogue: 0,0:27:34.36,0:27:35.64,Default,,0,0,0,,values that we care about in the
Dialogue: 0,0:27:35.64,0:27:36.10,Default,,0,0,0,,archive.
Dialogue: 0,0:27:36.46,0:27:37.42,Default,,0,0,0,,In this case, it's simply
Dialogue: 0,0:27:37.42,0:27:38.37,Default,,0,0,0,,property access.
Dialogue: 0,0:27:38.84,0:27:40.86,Default,,0,0,0,,So let's look at what's going on
Dialogue: 0,0:27:40.86,0:27:41.03,Default,,0,0,0,,here.
Dialogue: 0,0:27:41.64,0:27:43.24,Default,,0,0,0,,First, the codable protocol,
Dialogue: 0,0:27:43.24,0:27:44.34,Default,,0,0,0,,which is actually not one
Dialogue: 0,0:27:44.34,0:27:45.14,Default,,0,0,0,,protocol, but two.
Dialogue: 0,0:27:45.62,0:27:47.08,Default,,0,0,0,,The first is called encodable
Dialogue: 0,0:27:47.53,0:27:49.47,Default,,0,0,0,,and has one function, encode to
Dialogue: 0,0:27:49.47,0:27:49.94,Default,,0,0,0,,encoder.
Dialogue: 0,0:27:50.66,0:27:52.81,Default,,0,0,0,,The purpose of that function is
Dialogue: 0,0:27:52.96,0:27:54.09,Default,,0,0,0,,to allow the type to tell the
Dialogue: 0,0:27:54.09,0:27:55.92,Default,,0,0,0,,encoder all of the information
Dialogue: 0,0:27:55.92,0:27:57.08,Default,,0,0,0,,that it needs in order to
Dialogue: 0,0:27:57.08,0:27:58.64,Default,,0,0,0,,recreate itself at a later time.
Dialogue: 0,0:27:59.57,0:28:01.11,Default,,0,0,0,,The corresponding protocol,
Dialogue: 0,0:28:01.11,0:28:03.07,Default,,0,0,0,,decodable, has one initializer.
Dialogue: 0,0:28:03.72,0:28:04.98,Default,,0,0,0,,The purpose of the initializer
Dialogue: 0,0:28:05.29,0:28:06.38,Default,,0,0,0,,is to allow the type to get the
Dialogue: 0,0:28:06.38,0:28:07.68,Default,,0,0,0,,values that it needs from the
Dialogue: 0,0:28:07.68,0:28:10.03,Default,,0,0,0,,decoder and then use those to
Dialogue: 0,0:28:10.03,0:28:11.62,Default,,0,0,0,,create a fully initialized
Dialogue: 0,0:28:11.62,0:28:13.69,Default,,0,0,0,,instance of itself that is ready
Dialogue: 0,0:28:13.69,0:28:14.23,Default,,0,0,0,,for use.
Dialogue: 0,0:28:14.76,0:28:17.62,Default,,0,0,0,,The primary design point of
Dialogue: 0,0:28:17.62,0:28:20.49,Default,,0,0,0,,these APIs is to use a Swift
Dialogue: 0,0:28:20.49,0:28:21.85,Default,,0,0,0,,behavior that you may already be
Dialogue: 0,0:28:21.85,0:28:23.28,Default,,0,0,0,,familiar with, and that's called
Dialogue: 0,0:28:23.28,0:28:24.18,Default,,0,0,0,,protocol extensions.
Dialogue: 0,0:28:24.88,0:28:26.75,Default,,0,0,0,,So in Swift, protocols can not
Dialogue: 0,0:28:26.75,0:28:28.97,Default,,0,0,0,,only define an interface, but
Dialogue: 0,0:28:28.97,0:28:31.63,Default,,0,0,0,,via an extension, they can
Dialogue: 0,0:28:31.63,0:28:33.35,Default,,0,0,0,,provide a default implementation
Dialogue: 0,0:28:33.50,0:28:34.88,Default,,0,0,0,,for that interface.
Dialogue: 0,0:28:36.11,0:28:37.43,Default,,0,0,0,,And they let you write your own
Dialogue: 0,0:28:37.43,0:28:39.03,Default,,0,0,0,,implementation for either part
Dialogue: 0,0:28:39.03,0:28:40.75,Default,,0,0,0,,or whole of that protocol to
Dialogue: 0,0:28:40.75,0:28:41.96,Default,,0,0,0,,customize the behavior.
Dialogue: 0,0:28:42.75,0:28:44.32,Default,,0,0,0,,So let's go back to our commit
Dialogue: 0,0:28:44.32,0:28:45.22,Default,,0,0,0,,to see how this works.
Dialogue: 0,0:28:46.23,0:28:47.22,Default,,0,0,0,,When I adopted the codable
Dialogue: 0,0:28:47.22,0:28:49.02,Default,,0,0,0,,protocol, the compiler actually
Dialogue: 0,0:28:49.02,0:28:50.80,Default,,0,0,0,,generated an implementation of
Dialogue: 0,0:28:50.80,0:28:52.36,Default,,0,0,0,,encode to encoder and initfrom
Dialogue: 0,0:28:52.36,0:28:54.11,Default,,0,0,0,,decoder for us completely for
Dialogue: 0,0:28:54.11,0:28:54.38,Default,,0,0,0,,free.
Dialogue: 0,0:28:54.48,0:28:56.43,Default,,0,0,0,,And in this case, I don't need
Dialogue: 0,0:28:56.43,0:28:57.56,Default,,0,0,0,,to customize anything about
Dialogue: 0,0:28:57.56,0:28:59.29,Default,,0,0,0,,them, so I can just omit them
Dialogue: 0,0:28:59.29,0:29:00.39,Default,,0,0,0,,completely from my type.
Dialogue: 0,0:29:01.87,0:29:02.90,Default,,0,0,0,,There is one thing I do want to
Dialogue: 0,0:29:02.90,0:29:04.06,Default,,0,0,0,,customize about this type,
Dialogue: 0,0:29:04.11,0:29:05.86,Default,,0,0,0,,though, and that is the name of
Dialogue: 0,0:29:05.86,0:29:06.48,Default,,0,0,0,,this property.
Dialogue: 0,0:29:06.86,0:29:08.18,Default,,0,0,0,,Now, you may notice that it is
Dialogue: 0,0:29:08.18,0:29:09.55,Default,,0,0,0,,using snake case, which is
Dialogue: 0,0:29:09.55,0:29:11.12,Default,,0,0,0,,pretty common in JSON, but it
Dialogue: 0,0:29:11.12,0:29:12.58,Default,,0,0,0,,doesn't match Swift's naming
Dialogue: 0,0:29:12.58,0:29:13.20,Default,,0,0,0,,conventions.
Dialogue: 0,0:29:13.66,0:29:14.85,Default,,0,0,0,,So let me show you how we're
Dialogue: 0,0:29:14.85,0:29:15.46,Default,,0,0,0,,going to fix that.
Dialogue: 0,0:29:15.94,0:29:17.34,Default,,0,0,0,,First, there's one more thing
Dialogue: 0,0:29:17.34,0:29:18.55,Default,,0,0,0,,that the compiler generated for
Dialogue: 0,0:29:18.55,0:29:20.23,Default,,0,0,0,,us, and that is this private
Dialogue: 0,0:29:20.23,0:29:21.65,Default,,0,0,0,,enum called CodingKeys.
Dialogue: 0,0:29:23.18,0:29:24.85,Default,,0,0,0,,This enum is backed by a string
Dialogue: 0,0:29:25.33,0:29:27.27,Default,,0,0,0,,and adopts a CodingKey protocol,
Dialogue: 0,0:29:27.27,0:29:28.28,Default,,0,0,0,,which, again, we'll talk more
Dialogue: 0,0:29:28.28,0:29:28.81,Default,,0,0,0,,about later.
Dialogue: 0,0:29:29.27,0:29:30.47,Default,,0,0,0,,But what's interesting to note
Dialogue: 0,0:29:30.47,0:29:32.14,Default,,0,0,0,,here is that this enum has four
Dialogue: 0,0:29:32.14,0:29:33.80,Default,,0,0,0,,case statements that match the
Dialogue: 0,0:29:33.80,0:29:35.68,Default,,0,0,0,,names of my four properties.
Dialogue: 0,0:29:36.25,0:29:37.67,Default,,0,0,0,,And so in order to customize the
Dialogue: 0,0:29:37.67,0:29:39.71,Default,,0,0,0,,name of my property, I just need
Dialogue: 0,0:29:39.71,0:29:41.19,Default,,0,0,0,,to customize the name of my case
Dialogue: 0,0:29:41.19,0:29:41.62,Default,,0,0,0,,statement.
Dialogue: 0,0:29:42.06,0:29:43.53,Default,,0,0,0,,So to do that, I'm going to
Dialogue: 0,0:29:43.53,0:29:45.46,Default,,0,0,0,,change this comment count snake
Dialogue: 0,0:29:45.46,0:29:47.36,Default,,0,0,0,,case to camel case.
Dialogue: 0,0:29:47.99,0:29:50.00,Default,,0,0,0,,But as you can see, I remain
Dialogue: 0,0:29:50.22,0:29:51.87,Default,,0,0,0,,compatible with the JSON that
Dialogue: 0,0:29:51.87,0:29:53.13,Default,,0,0,0,,we're reading by setting the
Dialogue: 0,0:29:53.13,0:29:55.10,Default,,0,0,0,,string value of that case to be
Dialogue: 0,0:29:55.38,0:29:56.85,Default,,0,0,0,,the value we expect to find in
Dialogue: 0,0:29:56.85,0:29:57.41,Default,,0,0,0,,our archive.
Dialogue: 0,0:29:58.33,0:29:59.51,Default,,0,0,0,,Now, if that's all the
Dialogue: 0,0:29:59.51,0:30:00.71,Default,,0,0,0,,customization that we needed to
Dialogue: 0,0:30:00.71,0:30:04.01,Default,,0,0,0,,do, then we're done.
Dialogue: 0,0:30:04.09,0:30:05.51,Default,,0,0,0,,Maybe you can stop watching now
Dialogue: 0,0:30:05.51,0:30:08.16,Default,,0,0,0,,and leave, but by the end of the
Dialogue: 0,0:30:08.16,0:30:09.59,Default,,0,0,0,,talk, I do want to show you how
Dialogue: 0,0:30:09.59,0:30:11.33,Default,,0,0,0,,we can do even more kinds of
Dialogue: 0,0:30:11.33,0:30:12.79,Default,,0,0,0,,customizations on this commit.
Dialogue: 0,0:30:13.06,0:30:14.43,Default,,0,0,0,,For now, I'd like to hand it
Dialogue: 0,0:30:14.43,0:30:16.19,Default,,0,0,0,,over to my colleague Itai to
Dialogue: 0,0:30:16.19,0:30:17.46,Default,,0,0,0,,show us a demo of this stuff in
Dialogue: 0,0:30:17.46,0:30:17.80,Default,,0,0,0,,action.
Dialogue: 0,0:30:19.52,0:30:25.86,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:30:26.36,0:30:28.56,Default,,0,0,0,,>> Thanks, Tony.
Dialogue: 0,0:30:29.73,0:30:31.80,Default,,0,0,0,,So Tony showed you just how easy
Dialogue: 0,0:30:31.80,0:30:32.99,Default,,0,0,0,,it is to adopt codable in your
Dialogue: 0,0:30:32.99,0:30:34.78,Default,,0,0,0,,types, but let's dive in to see
Dialogue: 0,0:30:34.78,0:30:35.94,Default,,0,0,0,,what this might look like for
Dialogue: 0,0:30:35.94,0:30:37.23,Default,,0,0,0,,many of your apps in practice.
Dialogue: 0,0:30:37.76,0:30:39.66,Default,,0,0,0,,I've got a small app here that
Dialogue: 0,0:30:39.66,0:30:40.76,Default,,0,0,0,,I've been prototyping lately.
Dialogue: 0,0:30:41.27,0:30:42.31,Default,,0,0,0,,Because I'm such a big fan of
Dialogue: 0,0:30:42.31,0:30:43.65,Default,,0,0,0,,Swift, I like to watch for
Dialogue: 0,0:30:43.65,0:30:45.16,Default,,0,0,0,,interesting git commits as they
Dialogue: 0,0:30:45.16,0:30:46.74,Default,,0,0,0,,come in on Swift's GitHub repo.
Dialogue: 0,0:30:47.30,0:30:48.84,Default,,0,0,0,,I've written a small app here
Dialogue: 0,0:30:49.04,0:30:50.88,Default,,0,0,0,,that talks to GitHub's JSON REST
Dialogue: 0,0:30:50.88,0:30:52.84,Default,,0,0,0,,API to parse these commits and
Dialogue: 0,0:30:52.84,0:30:53.86,Default,,0,0,0,,show me them in the table view.
Dialogue: 0,0:30:54.95,0:30:55.98,Default,,0,0,0,,So let's take a quick look at
Dialogue: 0,0:30:55.98,0:30:57.40,Default,,0,0,0,,how easy it was to put this app
Dialogue: 0,0:30:57.40,0:30:58.86,Default,,0,0,0,,together using the new codable
Dialogue: 0,0:30:59.02,0:30:59.32,Default,,0,0,0,,APIs.
Dialogue: 0,0:30:59.92,0:31:02.45,Default,,0,0,0,,If we switch to Xcode, you'll
Dialogue: 0,0:31:02.45,0:31:03.65,Default,,0,0,0,,notice some of the same models
Dialogue: 0,0:31:03.65,0:31:05.25,Default,,0,0,0,,that Tony had up on his slide
Dialogue: 0,0:31:05.51,0:31:06.90,Default,,0,0,0,,expanded a little bit.
Dialogue: 0,0:31:07.22,0:31:09.12,Default,,0,0,0,,We've got the same commit info,
Dialogue: 0,0:31:09.21,0:31:11.46,Default,,0,0,0,,author info, and we've gone
Dialogue: 0,0:31:11.46,0:31:12.28,Default,,0,0,0,,ahead and done the same
Dialogue: 0,0:31:12.28,0:31:12.64,Default,,0,0,0,,renaming.
Dialogue: 0,0:31:13.88,0:31:15.22,Default,,0,0,0,,On the right is the JSON spec
Dialogue: 0,0:31:15.34,0:31:16.79,Default,,0,0,0,,that GitHub provides, but with
Dialogue: 0,0:31:16.79,0:31:17.68,Default,,0,0,0,,some of the irrelevant parts
Dialogue: 0,0:31:17.68,0:31:18.16,Default,,0,0,0,,snipped out.
Dialogue: 0,0:31:18.16,0:31:19.51,Default,,0,0,0,,And if you'll notice on the
Dialogue: 0,0:31:19.51,0:31:20.99,Default,,0,0,0,,bottom right, we've got some
Dialogue: 0,0:31:20.99,0:31:22.53,Default,,0,0,0,,info in the JSON spec that we're
Dialogue: 0,0:31:22.53,0:31:23.65,Default,,0,0,0,,not currently decoding.
Dialogue: 0,0:31:24.53,0:31:25.67,Default,,0,0,0,,That's actually OK because it'll
Dialogue: 0,0:31:25.67,0:31:26.93,Default,,0,0,0,,get ignored by default, and so
Dialogue: 0,0:31:26.93,0:31:27.89,Default,,0,0,0,,we can come back to this later.
Dialogue: 0,0:31:28.44,0:31:30.20,Default,,0,0,0,,So let's hide this JSON spec and
Dialogue: 0,0:31:30.26,0:31:31.44,Default,,0,0,0,,go a little bit further down
Dialogue: 0,0:31:31.44,0:31:32.75,Default,,0,0,0,,into our file to see how we can
Dialogue: 0,0:31:32.75,0:31:33.95,Default,,0,0,0,,use these models in practice.
Dialogue: 0,0:31:34.74,0:31:35.93,Default,,0,0,0,,So in here, we've got our
Dialogue: 0,0:31:35.93,0:31:37.61,Default,,0,0,0,,CommitsViewController, and this
Dialogue: 0,0:31:37.61,0:31:38.59,Default,,0,0,0,,is the view controller that
Dialogue: 0,0:31:38.59,0:31:40.15,Default,,0,0,0,,actually displays these commits
Dialogue: 0,0:31:40.20,0:31:40.87,Default,,0,0,0,,in our table view.
Dialogue: 0,0:31:41.43,0:31:42.64,Default,,0,0,0,,And so the view controller here
Dialogue: 0,0:31:42.64,0:31:44.51,Default,,0,0,0,,has our table view, along with
Dialogue: 0,0:31:44.51,0:31:45.56,Default,,0,0,0,,an array of these commits.
Dialogue: 0,0:31:45.91,0:31:47.13,Default,,0,0,0,,And note here that this is an
Dialogue: 0,0:31:47.13,0:31:49.15,Default,,0,0,0,,array of our type.
Dialogue: 0,0:31:49.52,0:31:50.75,Default,,0,0,0,,It's not an array of any or
Dialogue: 0,0:31:50.75,0:31:51.35,Default,,0,0,0,,anything similar.
Dialogue: 0,0:31:52.80,0:31:54.85,Default,,0,0,0,,When we're going to go and
Dialogue: 0,0:31:54.85,0:31:56.14,Default,,0,0,0,,display this data, we can fetch
Dialogue: 0,0:31:56.14,0:31:57.72,Default,,0,0,0,,the data from GitHub, and then
Dialogue: 0,0:31:57.72,0:31:59.32,Default,,0,0,0,,using a JSON decoder, just like
Dialogue: 0,0:31:59.32,0:32:01.15,Default,,0,0,0,,Tony showed you, we can go ahead
Dialogue: 0,0:32:01.15,0:32:02.61,Default,,0,0,0,,and request to decode an array
Dialogue: 0,0:32:02.61,0:32:03.93,Default,,0,0,0,,of these commits into our type.
Dialogue: 0,0:32:05.29,0:32:06.78,Default,,0,0,0,,Once that's done, we can reload
Dialogue: 0,0:32:06.78,0:32:07.88,Default,,0,0,0,,our table view and have that
Dialogue: 0,0:32:07.88,0:32:08.23,Default,,0,0,0,,display.
Dialogue: 0,0:32:09.77,0:32:11.37,Default,,0,0,0,,Now, if anything goes wrong, we
Dialogue: 0,0:32:11.37,0:32:13.19,Default,,0,0,0,,can catch that error and display
Dialogue: 0,0:32:13.19,0:32:14.46,Default,,0,0,0,,some localized information to
Dialogue: 0,0:32:14.46,0:32:15.61,Default,,0,0,0,,the user to tell them what went
Dialogue: 0,0:32:15.61,0:32:17.69,Default,,0,0,0,,wrong at a high level.
Dialogue: 0,0:32:17.96,0:32:19.10,Default,,0,0,0,,Now, this is how you load the
Dialogue: 0,0:32:19.10,0:32:20.15,Default,,0,0,0,,data into your app, but let's
Dialogue: 0,0:32:20.15,0:32:21.28,Default,,0,0,0,,take a look at how this hooks up
Dialogue: 0,0:32:21.28,0:32:21.63,Default,,0,0,0,,to our UI.
Dialogue: 0,0:32:21.88,0:32:23.36,Default,,0,0,0,,So a little bit further down in
Dialogue: 0,0:32:23.36,0:32:24.88,Default,,0,0,0,,the file here, I've got a helper
Dialogue: 0,0:32:24.88,0:32:26.56,Default,,0,0,0,,method that lets me set up table
Dialogue: 0,0:32:26.56,0:32:27.59,Default,,0,0,0,,view cells right before they're
Dialogue: 0,0:32:27.59,0:32:28.48,Default,,0,0,0,,displayed to the user.
Dialogue: 0,0:32:28.90,0:32:30.70,Default,,0,0,0,,So in here, to set up my custom
Dialogue: 0,0:32:30.70,0:32:32.25,Default,,0,0,0,,table view cell, I'm going to
Dialogue: 0,0:32:32.25,0:32:33.59,Default,,0,0,0,,pull out a commit from our array
Dialogue: 0,0:32:33.59,0:32:35.86,Default,,0,0,0,,of commits, and then using the
Dialogue: 0,0:32:35.86,0:32:37.52,Default,,0,0,0,,strongly typed properties on
Dialogue: 0,0:32:37.52,0:32:38.87,Default,,0,0,0,,that commit, we can hook it up
Dialogue: 0,0:32:38.87,0:32:39.27,Default,,0,0,0,,to our UI.
Dialogue: 0,0:32:39.88,0:32:40.95,Default,,0,0,0,,And note again that we're not
Dialogue: 0,0:32:40.95,0:32:42.22,Default,,0,0,0,,downcasting from any and we're
Dialogue: 0,0:32:42.22,0:32:43.41,Default,,0,0,0,,not peering through arrays or
Dialogue: 0,0:32:43.41,0:32:43.97,Default,,0,0,0,,dictionaries.
Dialogue: 0,0:32:44.32,0:32:45.63,Default,,0,0,0,,This is our type the way we
Dialogue: 0,0:32:45.63,0:32:47.08,Default,,0,0,0,,wrote it and how we want to use
Dialogue: 0,0:32:47.08,0:32:47.15,Default,,0,0,0,,it.
Dialogue: 0,0:32:48.23,0:32:49.68,Default,,0,0,0,,Now, that's all nice and good,
Dialogue: 0,0:32:49.68,0:32:50.83,Default,,0,0,0,,but let's go back into our app
Dialogue: 0,0:32:50.83,0:32:51.81,Default,,0,0,0,,and you'll take a look here and
Dialogue: 0,0:32:51.81,0:32:53.21,Default,,0,0,0,,notice that we've got some room
Dialogue: 0,0:32:53.21,0:32:54.53,Default,,0,0,0,,in the UI that I've left here
Dialogue: 0,0:32:54.53,0:32:56.10,Default,,0,0,0,,for hooking up the hash values
Dialogue: 0,0:32:56.10,0:32:57.00,Default,,0,0,0,,of each of these commits.
Dialogue: 0,0:32:57.31,0:32:58.36,Default,,0,0,0,,But it's not hooked up yet, so
Dialogue: 0,0:32:58.45,0:33:01.51,Default,,0,0,0,,let's go ahead and do that now.
Dialogue: 0,0:33:02.17,0:33:03.63,Default,,0,0,0,,If we go back to our models and
Dialogue: 0,0:33:03.63,0:33:05.74,Default,,0,0,0,,pop open the JSON spec again, we
Dialogue: 0,0:33:05.74,0:33:08.64,Default,,0,0,0,,can see that there's a hash
Dialogue: 0,0:33:08.64,0:33:10.23,Default,,0,0,0,,property in the JSON spec that
Dialogue: 0,0:33:10.23,0:33:11.26,Default,,0,0,0,,we haven't been requesting.
Dialogue: 0,0:33:11.84,0:33:12.88,Default,,0,0,0,,So let's go ahead and add that
Dialogue: 0,0:33:12.88,0:33:13.40,Default,,0,0,0,,to our type.
Dialogue: 0,0:33:14.04,0:33:15.83,Default,,0,0,0,,And then, if I go ahead and
Dialogue: 0,0:33:15.83,0:33:17.10,Default,,0,0,0,,build our project to use it,
Dialogue: 0,0:33:17.64,0:33:18.65,Default,,0,0,0,,you'll notice that I actually
Dialogue: 0,0:33:18.65,0:33:19.84,Default,,0,0,0,,got a build failure.
Dialogue: 0,0:33:19.88,0:33:21.36,Default,,0,0,0,,So let's explore why that
Dialogue: 0,0:33:21.36,0:33:21.82,Default,,0,0,0,,happens.
Dialogue: 0,0:33:23.30,0:33:24.61,Default,,0,0,0,,As part of this type, I've
Dialogue: 0,0:33:24.61,0:33:26.05,Default,,0,0,0,,created a custom CodingKeys
Dialogue: 0,0:33:26.05,0:33:26.36,Default,,0,0,0,,enum.
Dialogue: 0,0:33:26.90,0:33:28.25,Default,,0,0,0,,Now, the CodingKeys enum that
Dialogue: 0,0:33:28.25,0:33:29.77,Default,,0,0,0,,you put in your type is a really
Dialogue: 0,0:33:29.77,0:33:31.42,Default,,0,0,0,,powerful tool for controlling
Dialogue: 0,0:33:31.42,0:33:32.96,Default,,0,0,0,,what the compiler generates as
Dialogue: 0,0:33:32.96,0:33:34.84,Default,,0,0,0,,part of init from NNCode
Dialogue: 0,0:33:34.87,0:33:35.13,Default,,0,0,0,,[phonetic] 2.
Dialogue: 0,0:33:36.02,0:33:37.19,Default,,0,0,0,,In this case, I provided a
Dialogue: 0,0:33:37.19,0:33:39.25,Default,,0,0,0,,CodingKeys enum that renames my
Dialogue: 0,0:33:39.30,0:33:41.11,Default,,0,0,0,,info property to commit to match
Dialogue: 0,0:33:41.11,0:33:42.40,Default,,0,0,0,,what's in the JSON.
Dialogue: 0,0:33:43.12,0:33:44.46,Default,,0,0,0,,But in this case, the hash
Dialogue: 0,0:33:44.53,0:33:46.10,Default,,0,0,0,,property that I just added isn't
Dialogue: 0,0:33:46.10,0:33:47.21,Default,,0,0,0,,found in the CodingKeys.
Dialogue: 0,0:33:47.89,0:33:49.29,Default,,0,0,0,,Now, what the compiler will try
Dialogue: 0,0:33:49.29,0:33:50.85,Default,,0,0,0,,to do is if you purposefully
Dialogue: 0,0:33:50.85,0:33:52.41,Default,,0,0,0,,leave a property out of your
Dialogue: 0,0:33:52.41,0:33:53.91,Default,,0,0,0,,CodingKeys enum, it'll actually
Dialogue: 0,0:33:53.91,0:33:55.83,Default,,0,0,0,,omit it from your encoded and
Dialogue: 0,0:33:55.83,0:33:56.87,Default,,0,0,0,,decoded representation.
Dialogue: 0,0:33:57.33,0:33:58.55,Default,,0,0,0,,But what's happening here is
Dialogue: 0,0:33:58.55,0:34:00.15,Default,,0,0,0,,that because this hash property
Dialogue: 0,0:34:00.15,0:34:02.05,Default,,0,0,0,,doesn't have a default value, if
Dialogue: 0,0:34:02.05,0:34:03.36,Default,,0,0,0,,the compiler were to try and
Dialogue: 0,0:34:03.36,0:34:05.10,Default,,0,0,0,,generate an initializer for us,
Dialogue: 0,0:34:05.44,0:34:06.78,Default,,0,0,0,,there'd be no reasonable value
Dialogue: 0,0:34:06.78,0:34:08.08,Default,,0,0,0,,to initialize this property to,
Dialogue: 0,0:34:08.50,0:34:09.85,Default,,0,0,0,,and so the compiler refuses to
Dialogue: 0,0:34:09.85,0:34:10.85,Default,,0,0,0,,do it and we get our build
Dialogue: 0,0:34:10.85,0:34:11.81,Default,,0,0,0,,failure because our type
Dialogue: 0,0:34:11.81,0:34:13.42,Default,,0,0,0,,actually doesn't conform to
Dialogue: 0,0:34:13.42,0:34:13.90,Default,,0,0,0,,decodable.
Dialogue: 0,0:34:14.86,0:34:16.12,Default,,0,0,0,,Now, in this case, we actually
Dialogue: 0,0:34:16.12,0:34:17.14,Default,,0,0,0,,don't want to leave this hash
Dialogue: 0,0:34:17.14,0:34:18.42,Default,,0,0,0,,property out of our encoded
Dialogue: 0,0:34:18.42,0:34:19.16,Default,,0,0,0,,representation.
Dialogue: 0,0:34:19.16,0:34:20.02,Default,,0,0,0,,We do want to decode it.
Dialogue: 0,0:34:20.35,0:34:21.55,Default,,0,0,0,,So let's go ahead and mirror
Dialogue: 0,0:34:21.55,0:34:22.91,Default,,0,0,0,,that same property in our
Dialogue: 0,0:34:22.91,0:34:23.68,Default,,0,0,0,,CodingKeys enum.
Dialogue: 0,0:34:25.04,0:34:26.28,Default,,0,0,0,,Let's hide the JSON spec again
Dialogue: 0,0:34:26.28,0:34:27.77,Default,,0,0,0,,and go and hook up this property
Dialogue: 0,0:34:27.98,0:34:28.80,Default,,0,0,0,,directly to our UI.
Dialogue: 0,0:34:29.54,0:34:31.28,Default,,0,0,0,,So here in the cell setup method
Dialogue: 0,0:34:31.28,0:34:32.59,Default,,0,0,0,,that we have, we're going to add
Dialogue: 0,0:34:32.59,0:34:34.50,Default,,0,0,0,,another line of code that grabs
Dialogue: 0,0:34:34.50,0:34:35.85,Default,,0,0,0,,that hash, and here we're going
Dialogue: 0,0:34:35.85,0:34:36.77,Default,,0,0,0,,to shorten it up a bit so it
Dialogue: 0,0:34:36.77,0:34:37.82,Default,,0,0,0,,fits nicely in our UI.
Dialogue: 0,0:34:37.82,0:34:39.28,Default,,0,0,0,,And just like using everything
Dialogue: 0,0:34:39.28,0:34:40.46,Default,,0,0,0,,else, using the strongly typed
Dialogue: 0,0:34:40.46,0:34:41.64,Default,,0,0,0,,properties, we can hook it up to
Dialogue: 0,0:34:41.64,0:34:42.42,Default,,0,0,0,,our UI directly.
Dialogue: 0,0:34:43.10,0:34:44.20,Default,,0,0,0,,So let's go ahead and rerun our
Dialogue: 0,0:34:44.47,0:34:45.59,Default,,0,0,0,,app and take a look to make sure
Dialogue: 0,0:34:45.59,0:34:46.77,Default,,0,0,0,,that things hooked up correctly.
Dialogue: 0,0:34:49.52,0:34:51.60,Default,,0,0,0,,Here, now that we've rerun, we
Dialogue: 0,0:34:51.60,0:34:53.07,Default,,0,0,0,,can actually see that everything
Dialogue: 0,0:34:53.07,0:34:54.47,Default,,0,0,0,,is hooked up to our UI, and I'm
Dialogue: 0,0:34:54.47,0:34:55.69,Default,,0,0,0,,pretty happy because that took a
Dialogue: 0,0:34:55.69,0:34:57.37,Default,,0,0,0,,whole of four lines of code to
Dialogue: 0,0:34:57.37,0:34:58.57,Default,,0,0,0,,add to our app.
Dialogue: 0,0:35:00.52,0:35:06.19,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:35:06.69,0:35:07.96,Default,,0,0,0,,Now, going back to the code for
Dialogue: 0,0:35:07.96,0:35:09.05,Default,,0,0,0,,a moment, let's take a look at
Dialogue: 0,0:35:09.05,0:35:10.51,Default,,0,0,0,,what we can do when things go
Dialogue: 0,0:35:10.51,0:35:12.82,Default,,0,0,0,,wrong in our app.
Dialogue: 0,0:35:13.12,0:35:14.63,Default,,0,0,0,,So if we pop open the JSON spec
Dialogue: 0,0:35:14.63,0:35:16.13,Default,,0,0,0,,one more time, you might notice
Dialogue: 0,0:35:16.13,0:35:16.88,Default,,0,0,0,,that in the bottom right, we
Dialogue: 0,0:35:17.11,0:35:18.36,Default,,0,0,0,,have one final property that we
Dialogue: 0,0:35:18.36,0:35:19.77,Default,,0,0,0,,haven't been decoding, so let's
Dialogue: 0,0:35:19.77,0:35:20.94,Default,,0,0,0,,go ahead and try to do that now.
Dialogue: 0,0:35:22.11,0:35:23.13,Default,,0,0,0,,We're going to add a URL
Dialogue: 0,0:35:23.20,0:35:24.79,Default,,0,0,0,,property to our type, and again,
Dialogue: 0,0:35:24.79,0:35:25.98,Default,,0,0,0,,we're going to want to mirror it
Dialogue: 0,0:35:25.98,0:35:27.02,Default,,0,0,0,,in the CodingKeys enum.
Dialogue: 0,0:35:28.28,0:35:29.73,Default,,0,0,0,,This time, though, let's give
Dialogue: 0,0:35:29.73,0:35:31.70,Default,,0,0,0,,the CodingKey a value that is
Dialogue: 0,0:35:31.70,0:35:33.38,Default,,0,0,0,,clearly not found within our
Dialogue: 0,0:35:33.38,0:35:34.13,Default,,0,0,0,,JSON payload.
Dialogue: 0,0:35:35.30,0:35:36.93,Default,,0,0,0,,Now, when we go ahead and try to
Dialogue: 0,0:35:36.93,0:35:38.39,Default,,0,0,0,,decode this value, it won't be
Dialogue: 0,0:35:38.39,0:35:39.91,Default,,0,0,0,,found, and so this'll actually
Dialogue: 0,0:35:39.91,0:35:41.18,Default,,0,0,0,,be an error at decode time.
Dialogue: 0,0:35:41.68,0:35:43.47,Default,,0,0,0,,To see how we can handle that
Dialogue: 0,0:35:43.47,0:35:44.81,Default,,0,0,0,,error, let's hide the JSON spec
Dialogue: 0,0:35:44.81,0:35:46.19,Default,,0,0,0,,again and go down to where we
Dialogue: 0,0:35:46.19,0:35:47.10,Default,,0,0,0,,perform the decode.
Dialogue: 0,0:35:48.71,0:35:49.93,Default,,0,0,0,,In order to handle this error,
Dialogue: 0,0:35:50.32,0:35:51.97,Default,,0,0,0,,we can catch a decoding error,
Dialogue: 0,0:35:52.37,0:35:53.95,Default,,0,0,0,,key not found error, which
Dialogue: 0,0:35:53.95,0:35:55.07,Default,,0,0,0,,indicates that we tried to
Dialogue: 0,0:35:55.07,0:35:56.60,Default,,0,0,0,,access something with this key,
Dialogue: 0,0:35:57.00,0:35:57.91,Default,,0,0,0,,but it wasn't found in the
Dialogue: 0,0:35:57.91,0:35:58.57,Default,,0,0,0,,payload anywhere.
Dialogue: 0,0:35:59.49,0:36:00.61,Default,,0,0,0,,Along with that, we get some
Dialogue: 0,0:36:00.61,0:36:01.94,Default,,0,0,0,,contextual information about
Dialogue: 0,0:36:01.94,0:36:02.82,Default,,0,0,0,,what went wrong and where.
Dialogue: 0,0:36:03.48,0:36:04.97,Default,,0,0,0,,So now, let's set a break point
Dialogue: 0,0:36:04.97,0:36:06.26,Default,,0,0,0,,here, and run our app with this
Dialogue: 0,0:36:06.26,0:36:07.87,Default,,0,0,0,,faulty key, and take a look to
Dialogue: 0,0:36:07.87,0:36:09.15,Default,,0,0,0,,make sure that we can catch this
Dialogue: 0,0:36:09.15,0:36:10.15,Default,,0,0,0,,error and we hit the break
Dialogue: 0,0:36:10.21,0:36:10.39,Default,,0,0,0,,point.
Dialogue: 0,0:36:11.50,0:36:13.46,Default,,0,0,0,,And so now that we run this app,
Dialogue: 0,0:36:13.60,0:36:14.48,Default,,0,0,0,,you'll notice that we do hit
Dialogue: 0,0:36:14.48,0:36:15.09,Default,,0,0,0,,that break point.
Dialogue: 0,0:36:15.32,0:36:16.47,Default,,0,0,0,,Now, if we go ahead and print
Dialogue: 0,0:36:16.47,0:36:17.95,Default,,0,0,0,,the key, you might see that this
Dialogue: 0,0:36:17.95,0:36:19.38,Default,,0,0,0,,is in fact the URL key that we
Dialogue: 0,0:36:19.38,0:36:21.04,Default,,0,0,0,,gave a faulty value to, and in
Dialogue: 0,0:36:21.04,0:36:22.36,Default,,0,0,0,,fact, it wasn't found in the
Dialogue: 0,0:36:22.42,0:36:23.43,Default,,0,0,0,,payload, and so we get the
Dialogue: 0,0:36:23.43,0:36:23.66,Default,,0,0,0,,error.
Dialogue: 0,0:36:24.62,0:36:26.02,Default,,0,0,0,,Now, here if we take a look at
Dialogue: 0,0:36:26.02,0:36:27.17,Default,,0,0,0,,the contextual information, you
Dialogue: 0,0:36:27.17,0:36:28.70,Default,,0,0,0,,might see two useful features
Dialogue: 0,0:36:29.05,0:36:30.00,Default,,0,0,0,,that helps you debug what
Dialogue: 0,0:36:30.00,0:36:30.38,Default,,0,0,0,,happened.
Dialogue: 0,0:36:31.15,0:36:32.73,Default,,0,0,0,,First, a debug description for
Dialogue: 0,0:36:32.73,0:36:34.18,Default,,0,0,0,,you the developer to figure out
Dialogue: 0,0:36:34.18,0:36:35.84,Default,,0,0,0,,what went wrong along with the
Dialogue: 0,0:36:35.84,0:36:37.48,Default,,0,0,0,,coding path that describes where
Dialogue: 0,0:36:37.48,0:36:38.38,Default,,0,0,0,,in the payload something
Dialogue: 0,0:36:38.38,0:36:39.85,Default,,0,0,0,,happened to cause this to go
Dialogue: 0,0:36:39.85,0:36:40.14,Default,,0,0,0,,wrong.
Dialogue: 0,0:36:41.67,0:36:42.85,Default,,0,0,0,,Now, this is all nice and good,
Dialogue: 0,0:36:42.95,0:36:45.22,Default,,0,0,0,,but in fact, if my URL is
Dialogue: 0,0:36:45.22,0:36:46.45,Default,,0,0,0,,something I don't really care
Dialogue: 0,0:36:46.45,0:36:47.53,Default,,0,0,0,,about all that much and I might
Dialogue: 0,0:36:47.53,0:36:49.04,Default,,0,0,0,,not need it, one way to handle
Dialogue: 0,0:36:49.04,0:36:50.52,Default,,0,0,0,,this error is to make your URL
Dialogue: 0,0:36:50.65,0:36:51.06,Default,,0,0,0,,optional.
Dialogue: 0,0:36:52.47,0:36:53.36,Default,,0,0,0,,When you make the property
Dialogue: 0,0:36:53.36,0:36:55.18,Default,,0,0,0,,optional by default, if the key
Dialogue: 0,0:36:55.18,0:36:56.96,Default,,0,0,0,,or value is not found, it'll
Dialogue: 0,0:36:56.96,0:36:58.62,Default,,0,0,0,,actually get set to nil on
Dialogue: 0,0:36:58.62,0:36:59.26,Default,,0,0,0,,initialization.
Dialogue: 0,0:36:59.88,0:37:01.26,Default,,0,0,0,,So let's hide our UI a bit and
Dialogue: 0,0:37:01.26,0:37:02.60,Default,,0,0,0,,rerun our app to see if we hit
Dialogue: 0,0:37:02.60,0:37:04.05,Default,,0,0,0,,that break point or not.
Dialogue: 0,0:37:04.60,0:37:06.51,Default,,0,0,0,,And in fact, when we rerun it,
Dialogue: 0,0:37:06.61,0:37:07.71,Default,,0,0,0,,we don't hit that break point
Dialogue: 0,0:37:07.71,0:37:09.06,Default,,0,0,0,,because the value is set to nil
Dialogue: 0,0:37:09.06,0:37:10.25,Default,,0,0,0,,by default, which is a handy
Dialogue: 0,0:37:10.25,0:37:10.63,Default,,0,0,0,,behavior.
Dialogue: 0,0:37:11.39,0:37:13.00,Default,,0,0,0,,Now, let's go back to our code
Dialogue: 0,0:37:13.00,0:37:13.95,Default,,0,0,0,,and take a look and see what
Dialogue: 0,0:37:13.95,0:37:15.12,Default,,0,0,0,,other errors we might be able to
Dialogue: 0,0:37:15.12,0:37:16.01,Default,,0,0,0,,catch that are helpful.
Dialogue: 0,0:37:17.24,0:37:18.77,Default,,0,0,0,,One other error like that is the
Dialogue: 0,0:37:18.77,0:37:20.36,Default,,0,0,0,,DecodingError.valueNotFound,
Dialogue: 0,0:37:20.98,0:37:22.16,Default,,0,0,0,,which indicates we tried to
Dialogue: 0,0:37:22.16,0:37:23.60,Default,,0,0,0,,decode something of this type
Dialogue: 0,0:37:24.01,0:37:25.15,Default,,0,0,0,,but in fact found nil.
Dialogue: 0,0:37:26.07,0:37:27.30,Default,,0,0,0,,Again, you get that same
Dialogue: 0,0:37:27.30,0:37:29.02,Default,,0,0,0,,contextual information that
Dialogue: 0,0:37:29.02,0:37:31.05,Default,,0,0,0,,tells you what went wrong and
Dialogue: 0,0:37:32.18,0:37:32.29,Default,,0,0,0,,where.
Dialogue: 0,0:37:32.49,0:37:33.69,Default,,0,0,0,,Along with that, you might want
Dialogue: 0,0:37:33.69,0:37:35.58,Default,,0,0,0,,to catch a type mismatch, which
Dialogue: 0,0:37:35.58,0:37:36.92,Default,,0,0,0,,indicates that you try to decode
Dialogue: 0,0:37:36.92,0:37:38.42,Default,,0,0,0,,something of this type, but
Dialogue: 0,0:37:38.42,0:37:39.52,Default,,0,0,0,,something else was found in a,
Dialogue: 0,0:37:39.62,0:37:40.19,Default,,0,0,0,,in the payload.
Dialogue: 0,0:37:40.33,0:37:41.71,Default,,0,0,0,,Say, you tried to decode a
Dialogue: 0,0:37:41.71,0:37:43.24,Default,,0,0,0,,strong, but instead, a number
Dialogue: 0,0:37:43.24,0:37:43.65,Default,,0,0,0,,was found.
Dialogue: 0,0:37:44.13,0:37:45.32,Default,,0,0,0,,And again, you get that same
Dialogue: 0,0:37:45.32,0:37:46.57,Default,,0,0,0,,contextual information as
Dialogue: 0,0:37:46.57,0:37:46.93,Default,,0,0,0,,before.
Dialogue: 0,0:37:47.75,0:37:49.23,Default,,0,0,0,,Now, these errors are really
Dialogue: 0,0:37:49.23,0:37:50.76,Default,,0,0,0,,handy for when you want to debug
Dialogue: 0,0:37:50.76,0:37:52.37,Default,,0,0,0,,when something goes wrong, but
Dialogue: 0,0:37:52.37,0:37:53.49,Default,,0,0,0,,in the general case, you don't
Dialogue: 0,0:37:53.49,0:37:54.57,Default,,0,0,0,,really want to catch these at
Dialogue: 0,0:37:54.57,0:37:55.68,Default,,0,0,0,,the top level like here.
Dialogue: 0,0:37:56.20,0:37:57.03,Default,,0,0,0,,Instead, you just want to
Dialogue: 0,0:37:57.03,0:37:57.98,Default,,0,0,0,,capture general error and
Dialogue: 0,0:37:57.98,0:37:59.14,Default,,0,0,0,,display something localized to
Dialogue: 0,0:37:59.14,0:38:00.44,Default,,0,0,0,,the users so they can figure out
Dialogue: 0,0:38:00.44,0:38:03.17,Default,,0,0,0,,what went wrong or report the
Dialogue: 0,0:38:03.48,0:38:03.57,Default,,0,0,0,,bug.
Dialogue: 0,0:38:03.57,0:38:04.96,Default,,0,0,0,,Now, these are actually a very
Dialogue: 0,0:38:04.96,0:38:06.34,Default,,0,0,0,,powerful tool to do some more
Dialogue: 0,0:38:06.34,0:38:07.18,Default,,0,0,0,,advanced things.
Dialogue: 0,0:38:07.59,0:38:09.06,Default,,0,0,0,,If you customize your init from
Dialogue: 0,0:38:09.06,0:38:10.73,Default,,0,0,0,,or encode to, you can actually
Dialogue: 0,0:38:10.73,0:38:12.03,Default,,0,0,0,,catch these errors within your
Dialogue: 0,0:38:12.03,0:38:13.49,Default,,0,0,0,,types to do powerful things like
Dialogue: 0,0:38:13.53,0:38:15.19,Default,,0,0,0,,data migrations, renaming
Dialogue: 0,0:38:15.19,0:38:16.63,Default,,0,0,0,,properties, and so on and so
Dialogue: 0,0:38:16.63,0:38:16.89,Default,,0,0,0,,forth.
Dialogue: 0,0:38:17.15,0:38:18.68,Default,,0,0,0,,But within our app, we actually
Dialogue: 0,0:38:18.68,0:38:19.87,Default,,0,0,0,,don't need that because I've got
Dialogue: 0,0:38:19.87,0:38:21.12,Default,,0,0,0,,exactly what I want with not
Dialogue: 0,0:38:21.12,0:38:21.53,Default,,0,0,0,,much code.
Dialogue: 0,0:38:22.10,0:38:23.13,Default,,0,0,0,,And so I'm going to turn things
Dialogue: 0,0:38:23.13,0:38:24.61,Default,,0,0,0,,back over to Tony to talk about
Dialogue: 0,0:38:24.61,0:38:25.70,Default,,0,0,0,,some of these more advanced
Dialogue: 0,0:38:25.70,0:38:27.18,Default,,0,0,0,,encoding and decoding topics.
Dialogue: 0,0:38:27.41,0:38:27.72,Default,,0,0,0,,Thanks.
Dialogue: 0,0:38:28.52,0:38:32.90,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:38:33.40,0:38:33.83,Default,,0,0,0,,>> Thanks, Itai.
Dialogue: 0,0:38:34.46,0:38:37.26,Default,,0,0,0,,All right, let's move on to talk
Dialogue: 0,0:38:37.26,0:38:39.40,Default,,0,0,0,,about some more advanced topics
Dialogue: 0,0:38:39.45,0:38:41.14,Default,,0,0,0,,in this, with encoding and
Dialogue: 0,0:38:41.14,0:38:41.54,Default,,0,0,0,,decoding.
Dialogue: 0,0:38:41.54,0:38:42.65,Default,,0,0,0,,And to do that, we're going to
Dialogue: 0,0:38:42.65,0:38:44.00,Default,,0,0,0,,go over what I call the three
Dialogue: 0,0:38:44.00,0:38:45.55,Default,,0,0,0,,pillars of our codable API
Dialogue: 0,0:38:45.55,0:38:46.49,Default,,0,0,0,,design philosophy.
Dialogue: 0,0:38:46.93,0:38:48.30,Default,,0,0,0,,The first is that we really
Dialogue: 0,0:38:48.30,0:38:49.55,Default,,0,0,0,,wanted error handling to be
Dialogue: 0,0:38:49.55,0:38:50.99,Default,,0,0,0,,built right in, as you just saw
Dialogue: 0,0:38:50.99,0:38:51.56,Default,,0,0,0,,in this demo.
Dialogue: 0,0:38:51.91,0:38:53.29,Default,,0,0,0,,So when you're working with
Dialogue: 0,0:38:53.29,0:38:54.98,Default,,0,0,0,,archived data, dealing with
Dialogue: 0,0:38:54.98,0:38:56.25,Default,,0,0,0,,unexpected input is not a
Dialogue: 0,0:38:56.25,0:38:58.59,Default,,0,0,0,,question of if, but simply when.
Dialogue: 0,0:38:59.87,0:39:01.40,Default,,0,0,0,,This can be data corruption, it
Dialogue: 0,0:39:01.40,0:39:03.16,Default,,0,0,0,,could be unexpected API changes
Dialogue: 0,0:39:03.16,0:39:04.22,Default,,0,0,0,,from where you receive that
Dialogue: 0,0:39:04.22,0:39:05.92,Default,,0,0,0,,data, or even something like
Dialogue: 0,0:39:05.92,0:39:07.36,Default,,0,0,0,,malicious input -- somebody
Dialogue: 0,0:39:07.36,0:39:08.84,Default,,0,0,0,,trying to probe for weaknesses
Dialogue: 0,0:39:08.84,0:39:09.65,Default,,0,0,0,,in your app.
Dialogue: 0,0:39:09.79,0:39:10.92,Default,,0,0,0,,And so we decided that there
Dialogue: 0,0:39:10.92,0:39:12.33,Default,,0,0,0,,should be no fatal errors as a
Dialogue: 0,0:39:12.33,0:39:13.76,Default,,0,0,0,,result of parsing untrusted
Dialogue: 0,0:39:13.76,0:39:13.98,Default,,0,0,0,,data.
Dialogue: 0,0:39:14.55,0:39:16.64,Default,,0,0,0,,However, we do use the fatal
Dialogue: 0,0:39:16.64,0:39:18.63,Default,,0,0,0,,error in Swift if we detect
Dialogue: 0,0:39:18.63,0:39:19.31,Default,,0,0,0,,something that may be a
Dialogue: 0,0:39:19.31,0:39:20.20,Default,,0,0,0,,developer mistake.
Dialogue: 0,0:39:20.30,0:39:21.41,Default,,0,0,0,,And in those cases, there's a
Dialogue: 0,0:39:21.41,0:39:22.36,Default,,0,0,0,,string with the fatal error
Dialogue: 0,0:39:22.36,0:39:23.27,Default,,0,0,0,,that'll tell you where you may
Dialogue: 0,0:39:23.27,0:39:23.98,Default,,0,0,0,,have gone wrong.
Dialogue: 0,0:39:23.98,0:39:26.30,Default,,0,0,0,,For everything else, we use
Dialogue: 0,0:39:26.30,0:39:27.89,Default,,0,0,0,,Swift's built-in error handling
Dialogue: 0,0:39:27.89,0:39:29.20,Default,,0,0,0,,mechanism, and those kinds of
Dialogue: 0,0:39:29.20,0:39:30.30,Default,,0,0,0,,errors are possible on both
Dialogue: 0,0:39:30.38,0:39:31.96,Default,,0,0,0,,encoding and decoding.
Dialogue: 0,0:39:32.08,0:39:33.87,Default,,0,0,0,,So let's look at what they are.
Dialogue: 0,0:39:35.17,0:39:37.19,Default,,0,0,0,,First, there's encoding.
Dialogue: 0,0:39:37.29,0:39:38.29,Default,,0,0,0,,So there's only one kind of
Dialogue: 0,0:39:38.29,0:39:39.48,Default,,0,0,0,,error on encoding, and that is
Dialogue: 0,0:39:39.48,0:39:40.41,Default,,0,0,0,,an invalid value.
Dialogue: 0,0:39:41.22,0:39:42.76,Default,,0,0,0,,So for some kinds of formats
Dialogue: 0,0:39:42.76,0:39:44.41,Default,,0,0,0,,like JSON, we wanted to give
Dialogue: 0,0:39:44.41,0:39:46.09,Default,,0,0,0,,them the flexibility to handle
Dialogue: 0,0:39:46.63,0:39:48.12,Default,,0,0,0,,input that they may not expect
Dialogue: 0,0:39:48.12,0:39:49.54,Default,,0,0,0,,without resorting to a fatal
Dialogue: 0,0:39:49.54,0:39:50.85,Default,,0,0,0,,error or some kind of default
Dialogue: 0,0:39:50.85,0:39:51.26,Default,,0,0,0,,value.
Dialogue: 0,0:39:51.70,0:39:53.08,Default,,0,0,0,,In JSON, for example, not a
Dialogue: 0,0:39:53.08,0:39:55.42,Default,,0,0,0,,number or infinity are not valid
Dialogue: 0,0:39:55.42,0:39:55.91,Default,,0,0,0,,values.
Dialogue: 0,0:39:55.91,0:39:57.23,Default,,0,0,0,,And so in those cases, they can
Dialogue: 0,0:39:57.23,0:39:57.76,Default,,0,0,0,,throw in error.
Dialogue: 0,0:39:58.34,0:39:59.26,Default,,0,0,0,,There may not be much you can do
Dialogue: 0,0:39:59.26,0:40:00.53,Default,,0,0,0,,about this at the type, by type
Dialogue: 0,0:40:00.53,0:40:01.95,Default,,0,0,0,,level, but you could still catch
Dialogue: 0,0:40:01.95,0:40:03.20,Default,,0,0,0,,it at the top level and present
Dialogue: 0,0:40:03.20,0:40:05.10,Default,,0,0,0,,an error to your user or prevent
Dialogue: 0,0:40:05.10,0:40:07.18,Default,,0,0,0,,some other kind of recovery
Dialogue: 0,0:40:07.18,0:40:07.69,Default,,0,0,0,,mechanism.
Dialogue: 0,0:40:08.68,0:40:09.90,Default,,0,0,0,,On decoding, there are four
Dialogue: 0,0:40:09.90,0:40:11.40,Default,,0,0,0,,kinds of error, three of which
Dialogue: 0,0:40:11.40,0:40:12.58,Default,,0,0,0,,we just saw in the demo -- type
Dialogue: 0,0:40:12.58,0:40:13.78,Default,,0,0,0,,mismatch, missing key, and
Dialogue: 0,0:40:13.78,0:40:14.84,Default,,0,0,0,,missing value, which you can
Dialogue: 0,0:40:14.84,0:40:16.33,Default,,0,0,0,,handle, again, either by using
Dialogue: 0,0:40:16.33,0:40:17.74,Default,,0,0,0,,the air handling mechanism if
Dialogue: 0,0:40:17.74,0:40:19.20,Default,,0,0,0,,the [inaudible] a required part
Dialogue: 0,0:40:19.20,0:40:20.97,Default,,0,0,0,,of your type or by making those
Dialogue: 0,0:40:20.97,0:40:21.91,Default,,0,0,0,,properties optional.
Dialogue: 0,0:40:22.74,0:40:23.80,Default,,0,0,0,,And lastly, we have data
Dialogue: 0,0:40:23.80,0:40:24.24,Default,,0,0,0,,corrupt.
Dialogue: 0,0:40:24.71,0:40:25.65,Default,,0,0,0,,Data corrupt is our kind of
Dialogue: 0,0:40:25.69,0:40:26.95,Default,,0,0,0,,catch-all error for all the
Dialogue: 0,0:40:26.95,0:40:27.88,Default,,0,0,0,,other kinds of things that can
Dialogue: 0,0:40:27.88,0:40:29.05,Default,,0,0,0,,happen during a decode.
Dialogue: 0,0:40:29.65,0:40:30.44,Default,,0,0,0,,And to see where it might be
Dialogue: 0,0:40:30.44,0:40:32.14,Default,,0,0,0,,useful, let's go into some depth
Dialogue: 0,0:40:32.14,0:40:33.36,Default,,0,0,0,,on what actually happens during
Dialogue: 0,0:40:33.36,0:40:33.89,Default,,0,0,0,,a decode.
Dialogue: 0,0:40:34.66,0:40:36.35,Default,,0,0,0,,First, in the beginning, all we
Dialogue: 0,0:40:36.35,0:40:37.05,Default,,0,0,0,,have are bytes.
Dialogue: 0,0:40:37.62,0:40:38.99,Default,,0,0,0,,It could be from the network.
Dialogue: 0,0:40:39.03,0:40:40.72,Default,,0,0,0,,It could be from a file on disk
Dialogue: 0,0:40:41.02,0:40:41.98,Default,,0,0,0,,or somewhere else in your app.
Dialogue: 0,0:40:42.26,0:40:43.96,Default,,0,0,0,,But regardless, at this point,
Dialogue: 0,0:40:43.96,0:40:44.83,Default,,0,0,0,,we don't really know anything
Dialogue: 0,0:40:44.83,0:40:45.27,Default,,0,0,0,,about them.
Dialogue: 0,0:40:45.27,0:40:47.15,Default,,0,0,0,,And so the very first step is to
Dialogue: 0,0:40:47.15,0:40:48.35,Default,,0,0,0,,convert those bytes into
Dialogue: 0,0:40:48.35,0:40:49.29,Default,,0,0,0,,structured bytes.
Dialogue: 0,0:40:50.18,0:40:51.98,Default,,0,0,0,,For example, the JSON decoder
Dialogue: 0,0:40:52.36,0:40:53.27,Default,,0,0,0,,has to verify certain
Dialogue: 0,0:40:53.27,0:40:54.73,Default,,0,0,0,,requirements of the JSON spec
Dialogue: 0,0:40:54.73,0:40:56.85,Default,,0,0,0,,are met -- the particular bytes
Dialogue: 0,0:40:56.85,0:40:58.04,Default,,0,0,0,,at the beginning of the archive,
Dialogue: 0,0:40:58.20,0:40:59.39,Default,,0,0,0,,which indicate string encoding;
Dialogue: 0,0:40:59.56,0:41:00.90,Default,,0,0,0,,certain characters which are
Dialogue: 0,0:41:00.90,0:41:02.95,Default,,0,0,0,,used as delimiters for strings,
Dialogue: 0,0:41:03.18,0:41:04.37,Default,,0,0,0,,numeric values, arrays, and
Dialogue: 0,0:41:04.37,0:41:05.39,Default,,0,0,0,,dictionaries, and so forth.
Dialogue: 0,0:41:05.60,0:41:07.49,Default,,0,0,0,,If any of those look wrong, then
Dialogue: 0,0:41:07.49,0:41:09.00,Default,,0,0,0,,the JSON decoder can throw an
Dialogue: 0,0:41:09.00,0:41:10.88,Default,,0,0,0,,error and stop the decode right
Dialogue: 0,0:41:10.88,0:41:11.10,Default,,0,0,0,,there.
Dialogue: 0,0:41:12.53,0:41:14.31,Default,,0,0,0,,After that, we want to convert
Dialogue: 0,0:41:14.31,0:41:15.83,Default,,0,0,0,,from things like JSON arrays,
Dialogue: 0,0:41:15.83,0:41:16.90,Default,,0,0,0,,and dictionaries, and strings
Dialogue: 0,0:41:16.90,0:41:18.71,Default,,0,0,0,,into your types, commits and
Dialogue: 0,0:41:18.71,0:41:19.20,Default,,0,0,0,,authors.
Dialogue: 0,0:41:19.32,0:41:20.61,Default,,0,0,0,,That is, after all, the entire
Dialogue: 0,0:41:20.61,0:41:21.51,Default,,0,0,0,,point of this API.
Dialogue: 0,0:41:22.84,0:41:24.07,Default,,0,0,0,,But there may be more that we
Dialogue: 0,0:41:24.07,0:41:26.02,Default,,0,0,0,,can do, and we call that
Dialogue: 0,0:41:26.02,0:41:27.58,Default,,0,0,0,,domain-specific validation.
Dialogue: 0,0:41:28.16,0:41:29.51,Default,,0,0,0,,For example, let's say that you
Dialogue: 0,0:41:29.51,0:41:30.53,Default,,0,0,0,,have a type that has an integer
Dialogue: 0,0:41:30.53,0:41:32.28,Default,,0,0,0,,property, but the only valid
Dialogue: 0,0:41:32.28,0:41:33.43,Default,,0,0,0,,values for the integer are
Dialogue: 0,0:41:33.43,0:41:34.63,Default,,0,0,0,,between zero and 100.
Dialogue: 0,0:41:35.29,0:41:37.09,Default,,0,0,0,,Or maybe your type has two
Dialogue: 0,0:41:37.09,0:41:38.51,Default,,0,0,0,,Boolean properties, but they
Dialogue: 0,0:41:38.51,0:41:39.79,Default,,0,0,0,,have to have an exclusive or
Dialogue: 0,0:41:39.79,0:41:40.88,Default,,0,0,0,,relationship with each other.
Dialogue: 0,0:41:41.73,0:41:42.55,Default,,0,0,0,,These kinds of things can be
Dialogue: 0,0:41:42.55,0:41:44.13,Default,,0,0,0,,difficult to express in Swift's
Dialogue: 0,0:41:44.13,0:41:46.12,Default,,0,0,0,,type system, but we do think we
Dialogue: 0,0:41:46.12,0:41:48.07,Default,,0,0,0,,have a great tool for handling
Dialogue: 0,0:41:48.07,0:41:49.18,Default,,0,0,0,,those, and that's just simply
Dialogue: 0,0:41:49.18,0:41:50.13,Default,,0,0,0,,writing more Swift code.
Dialogue: 0,0:41:50.46,0:41:51.79,Default,,0,0,0,,And so we wanted to make sure
Dialogue: 0,0:41:51.79,0:41:52.49,Default,,0,0,0,,that we provided you the
Dialogue: 0,0:41:52.49,0:41:53.83,Default,,0,0,0,,opportunity to do that if you
Dialogue: 0,0:41:53.83,0:41:54.53,Default,,0,0,0,,have those kinds of
Dialogue: 0,0:41:54.53,0:41:55.13,Default,,0,0,0,,requirements.
Dialogue: 0,0:41:56.16,0:41:57.12,Default,,0,0,0,,Finally, you may have
Dialogue: 0,0:41:57.27,0:41:58.40,Default,,0,0,0,,graph-level validation.
Dialogue: 0,0:41:58.74,0:41:59.88,Default,,0,0,0,,This is about the relationship
Dialogue: 0,0:41:59.88,0:42:01.04,Default,,0,0,0,,of the objects in the graph to
Dialogue: 0,0:42:01.04,0:42:02.69,Default,,0,0,0,,each other or to another part of
Dialogue: 0,0:42:02.69,0:42:03.07,Default,,0,0,0,,your app.
Dialogue: 0,0:42:04.05,0:42:05.99,Default,,0,0,0,,Let's apply this to our commit.
Dialogue: 0,0:42:06.29,0:42:07.68,Default,,0,0,0,,So earlier we saw how we
Dialogue: 0,0:42:07.68,0:42:08.98,Default,,0,0,0,,customized our commentCount
Dialogue: 0,0:42:08.98,0:42:10.83,Default,,0,0,0,,property by customizing the enum
Dialogue: 0,0:42:10.83,0:42:11.70,Default,,0,0,0,,called CodingKeys.
Dialogue: 0,0:42:12.07,0:42:13.02,Default,,0,0,0,,Now, we're going to customize
Dialogue: 0,0:42:13.05,0:42:15.14,Default,,0,0,0,,the decodable by implementing
Dialogue: 0,0:42:15.14,0:42:16.07,Default,,0,0,0,,init from decoder.
Dialogue: 0,0:42:16.92,0:42:19.01,Default,,0,0,0,,First, I asked the decoder for a
Dialogue: 0,0:42:19.01,0:42:19.72,Default,,0,0,0,,container.
Dialogue: 0,0:42:20.29,0:42:21.98,Default,,0,0,0,,Containers are what match up
Dialogue: 0,0:42:21.98,0:42:24.23,Default,,0,0,0,,your keys to the values that you
Dialogue: 0,0:42:24.23,0:42:25.71,Default,,0,0,0,,expect to find in the archive.
Dialogue: 0,0:42:26.93,0:42:28.43,Default,,0,0,0,,Once we have a container, we can
Dialogue: 0,0:42:28.43,0:42:30.23,Default,,0,0,0,,ask it for the values that we
Dialogue: 0,0:42:30.23,0:42:30.51,Default,,0,0,0,,need.
Dialogue: 0,0:42:30.74,0:42:32.59,Default,,0,0,0,,So in this case, a URL, a
Dialogue: 0,0:42:32.59,0:42:34.56,Default,,0,0,0,,string, our author, and there's
Dialogue: 0,0:42:34.56,0:42:36.62,Default,,0,0,0,,our recursive descent again, and
Dialogue: 0,0:42:36.66,0:42:37.89,Default,,0,0,0,,the integer value for
Dialogue: 0,0:42:37.89,0:42:38.65,Default,,0,0,0,,commentCount.
Dialogue: 0,0:42:39.72,0:42:40.69,Default,,0,0,0,,Now, let's say that I have an
Dialogue: 0,0:42:40.69,0:42:41.77,Default,,0,0,0,,additional requirement that I
Dialogue: 0,0:42:41.77,0:42:43.25,Default,,0,0,0,,need to verify as part of my
Dialogue: 0,0:42:43.25,0:42:45.30,Default,,0,0,0,,spec, and that is that all URLs
Dialogue: 0,0:42:45.30,0:42:47.06,Default,,0,0,0,,have to be HTTPS.
Dialogue: 0,0:42:47.50,0:42:48.79,Default,,0,0,0,,If they're not, then something
Dialogue: 0,0:42:48.79,0:42:49.43,Default,,0,0,0,,has gone wrong.
Dialogue: 0,0:42:50.11,0:42:50.97,Default,,0,0,0,,So let's see how we might do
Dialogue: 0,0:42:50.97,0:42:51.19,Default,,0,0,0,,that.
Dialogue: 0,0:42:51.59,0:42:52.98,Default,,0,0,0,,First, make some more room on
Dialogue: 0,0:42:52.98,0:42:53.35,Default,,0,0,0,,the slide.
Dialogue: 0,0:42:54.29,0:42:55.81,Default,,0,0,0,,After that, I'm going to use the
Dialogue: 0,0:42:55.81,0:42:57.26,Default,,0,0,0,,URL API that we already know how
Dialogue: 0,0:42:57.26,0:42:59.28,Default,,0,0,0,,to use, and that is the scheme
Dialogue: 0,0:42:59.28,0:42:59.71,Default,,0,0,0,,property.
Dialogue: 0,0:43:00.70,0:43:01.67,Default,,0,0,0,,Here I can just check that it's
Dialogue: 0,0:43:01.67,0:43:03.48,Default,,0,0,0,,equal to HTTPS, and if it's not,
Dialogue: 0,0:43:03.48,0:43:04.82,Default,,0,0,0,,I can throw one of these
Dialogue: 0,0:43:04.82,0:43:06.63,Default,,0,0,0,,decoding errors, providing a
Dialogue: 0,0:43:06.63,0:43:07.68,Default,,0,0,0,,debug description so that you
Dialogue: 0,0:43:07.68,0:43:08.96,Default,,0,0,0,,can catch it in your debugger as
Dialogue: 0,0:43:08.96,0:43:09.99,Default,,0,0,0,,Itai showed in the demo.
Dialogue: 0,0:43:10.73,0:43:11.81,Default,,0,0,0,,Now, what you see, what you'll
Dialogue: 0,0:43:11.81,0:43:14.47,Default,,0,0,0,,notice is not here is this type,
Dialogue: 0,0:43:14.47,0:43:16.08,Default,,0,0,0,,commit, looking into the string
Dialogue: 0,0:43:16.08,0:43:17.14,Default,,0,0,0,,value for the URL.
Dialogue: 0,0:43:17.14,0:43:19.29,Default,,0,0,0,,We can allow URL to decode
Dialogue: 0,0:43:19.29,0:43:21.13,Default,,0,0,0,,itself, and that's part of
Dialogue: 0,0:43:21.18,0:43:22.64,Default,,0,0,0,,what's so great about this
Dialogue: 0,0:43:22.64,0:43:23.04,Default,,0,0,0,,design.
Dialogue: 0,0:43:23.43,0:43:25.55,Default,,0,0,0,,So URL knows if that string is
Dialogue: 0,0:43:25.55,0:43:26.90,Default,,0,0,0,,URL or not, and if it's not,
Dialogue: 0,0:43:27.30,0:43:28.22,Default,,0,0,0,,it'll throw an error before we
Dialogue: 0,0:43:28.22,0:43:29.11,Default,,0,0,0,,even get to this point.
Dialogue: 0,0:43:29.41,0:43:30.47,Default,,0,0,0,,And because of the design of
Dialogue: 0,0:43:30.47,0:43:32.01,Default,,0,0,0,,Swift's error handling, that can
Dialogue: 0,0:43:32.01,0:43:34.04,Default,,0,0,0,,propagate out of this type to
Dialogue: 0,0:43:34.04,0:43:34.83,Default,,0,0,0,,the one that's decoding the
Dialogue: 0,0:43:34.83,0:43:36.43,Default,,0,0,0,,commit or even to the top level.
Dialogue: 0,0:43:36.93,0:43:39.91,Default,,0,0,0,,Let's move on to the second
Dialogue: 0,0:43:39.91,0:43:41.11,Default,,0,0,0,,pillar, and that is
Dialogue: 0,0:43:41.11,0:43:42.71,Default,,0,0,0,,encapsulation of the encoding
Dialogue: 0,0:43:42.71,0:43:43.25,Default,,0,0,0,,details.
Dialogue: 0,0:43:44.37,0:43:45.58,Default,,0,0,0,,We felt it was really important
Dialogue: 0,0:43:45.58,0:43:47.54,Default,,0,0,0,,to make sure that the keys and
Dialogue: 0,0:43:47.54,0:43:49.23,Default,,0,0,0,,values that a type chooses to
Dialogue: 0,0:43:49.23,0:43:50.78,Default,,0,0,0,,put into the archive are private
Dialogue: 0,0:43:50.88,0:43:51.61,Default,,0,0,0,,to that type.
Dialogue: 0,0:43:51.61,0:43:54.04,Default,,0,0,0,,And the reason it's important is
Dialogue: 0,0:43:54.04,0:43:55.62,Default,,0,0,0,,because that frees us from
Dialogue: 0,0:43:55.62,0:43:57.18,Default,,0,0,0,,something that, from designing
Dialogue: 0,0:43:57.18,0:43:58.33,Default,,0,0,0,,something that has global
Dialogue: 0,0:43:58.33,0:43:59.91,Default,,0,0,0,,knowledge of everything in the
Dialogue: 0,0:43:59.91,0:44:01.26,Default,,0,0,0,,archive that can possibly be
Dialogue: 0,0:44:01.26,0:44:01.48,Default,,0,0,0,,there.
Dialogue: 0,0:44:02.29,0:44:03.49,Default,,0,0,0,,The main mechanism we have for
Dialogue: 0,0:44:03.59,0:44:05.21,Default,,0,0,0,,performing this encapsulation is
Dialogue: 0,0:44:05.21,0:44:06.93,Default,,0,0,0,,called containers, and we have
Dialogue: 0,0:44:07.03,0:44:07.58,Default,,0,0,0,,three kinds.
Dialogue: 0,0:44:08.13,0:44:10.03,Default,,0,0,0,,The first is a keyed container.
Dialogue: 0,0:44:10.72,0:44:11.95,Default,,0,0,0,,Keyed containers are the
Dialogue: 0,0:44:11.95,0:44:13.06,Default,,0,0,0,,preferred choice in the vast
Dialogue: 0,0:44:13.06,0:44:14.43,Default,,0,0,0,,majority of cases, and the
Dialogue: 0,0:44:14.43,0:44:16.40,Default,,0,0,0,,reason is because they're by far
Dialogue: 0,0:44:16.40,0:44:17.64,Default,,0,0,0,,the most forward and backward
Dialogue: 0,0:44:17.64,0:44:18.17,Default,,0,0,0,,compatible.
Dialogue: 0,0:44:18.84,0:44:20.17,Default,,0,0,0,,If in a new version of your app
Dialogue: 0,0:44:20.23,0:44:22.19,Default,,0,0,0,,you have new or changed data,
Dialogue: 0,0:44:22.56,0:44:23.63,Default,,0,0,0,,you simply have to use a new
Dialogue: 0,0:44:23.63,0:44:23.95,Default,,0,0,0,,key.
Dialogue: 0,0:44:24.58,0:44:26.02,Default,,0,0,0,,This makes the most versions of
Dialogue: 0,0:44:26.02,0:44:27.55,Default,,0,0,0,,your app compatible with the
Dialogue: 0,0:44:27.55,0:44:28.69,Default,,0,0,0,,most versions of your data,
Dialogue: 0,0:44:28.95,0:44:29.84,Default,,0,0,0,,which is the best possible
Dialogue: 0,0:44:29.84,0:44:30.72,Default,,0,0,0,,outcome for everybody.
Dialogue: 0,0:44:31.90,0:44:32.98,Default,,0,0,0,,Let's look at what those keys
Dialogue: 0,0:44:32.98,0:44:33.59,Default,,0,0,0,,actually are.
Dialogue: 0,0:44:34.19,0:44:35.09,Default,,0,0,0,,So earlier we talked about the
Dialogue: 0,0:44:35.09,0:44:36.06,Default,,0,0,0,,CodingKey protocol.
Dialogue: 0,0:44:36.21,0:44:37.15,Default,,0,0,0,,Here's what it is.
Dialogue: 0,0:44:37.53,0:44:39.41,Default,,0,0,0,,It has two protocol, or two
Dialogue: 0,0:44:39.41,0:44:41.26,Default,,0,0,0,,properties and two initializers.
Dialogue: 0,0:44:41.84,0:44:43.05,Default,,0,0,0,,So the properties are
Dialogue: 0,0:44:43.05,0:44:44.38,Default,,0,0,0,,stringValue, which is handy when
Dialogue: 0,0:44:44.38,0:44:45.35,Default,,0,0,0,,you're working with JSON, for
Dialogue: 0,0:44:45.35,0:44:46.78,Default,,0,0,0,,example, but you can also
Dialogue: 0,0:44:46.78,0:44:48.17,Default,,0,0,0,,provide an integer value, which
Dialogue: 0,0:44:48.17,0:44:49.38,Default,,0,0,0,,is useful for formats that may
Dialogue: 0,0:44:49.38,0:44:50.90,Default,,0,0,0,,support a more efficient encoded
Dialogue: 0,0:44:50.90,0:44:51.98,Default,,0,0,0,,binary representation.
Dialogue: 0,0:44:53.19,0:44:54.35,Default,,0,0,0,,The initializers, what I would
Dialogue: 0,0:44:54.35,0:44:55.34,Default,,0,0,0,,like you to notice is that they
Dialogue: 0,0:44:55.34,0:44:56.06,Default,,0,0,0,,are optional.
Dialogue: 0,0:44:56.58,0:44:57.39,Default,,0,0,0,,What that means is that the
Dialogue: 0,0:44:57.39,0:44:58.96,Default,,0,0,0,,decoder has an ability to
Dialogue: 0,0:44:58.96,0:45:00.42,Default,,0,0,0,,perform an additional level of
Dialogue: 0,0:45:00.42,0:45:01.24,Default,,0,0,0,,safety checking.
Dialogue: 0,0:45:01.48,0:45:03.41,Default,,0,0,0,,It can verify with your coding
Dialogue: 0,0:45:03.41,0:45:05.44,Default,,0,0,0,,key that the value that's found
Dialogue: 0,0:45:05.44,0:45:06.49,Default,,0,0,0,,in the archive is actually what
Dialogue: 0,0:45:06.49,0:45:07.46,Default,,0,0,0,,you expect to find there.
Dialogue: 0,0:45:08.35,0:45:09.42,Default,,0,0,0,,Typically, you're going to adopt
Dialogue: 0,0:45:09.42,0:45:11.32,Default,,0,0,0,,this protocol on an enumeration,
Dialogue: 0,0:45:11.50,0:45:12.95,Default,,0,0,0,,like the one we've seen so far.
Dialogue: 0,0:45:13.37,0:45:15.20,Default,,0,0,0,,And again, what's happening here
Dialogue: 0,0:45:15.20,0:45:16.04,Default,,0,0,0,,is that the compiler in the
Dialogue: 0,0:45:16.04,0:45:17.31,Default,,0,0,0,,standard library are providing
Dialogue: 0,0:45:17.31,0:45:18.64,Default,,0,0,0,,an implementation of all four of
Dialogue: 0,0:45:18.64,0:45:19.58,Default,,0,0,0,,those requirements for us
Dialogue: 0,0:45:19.58,0:45:20.44,Default,,0,0,0,,completely for free.
Dialogue: 0,0:45:20.98,0:45:22.15,Default,,0,0,0,,So in this case, because the
Dialogue: 0,0:45:22.15,0:45:24.64,Default,,0,0,0,,enum is backed by a string, the
Dialogue: 0,0:45:24.64,0:45:26.52,Default,,0,0,0,,compiler uses the case name as
Dialogue: 0,0:45:26.52,0:45:27.57,Default,,0,0,0,,the string value, both for the
Dialogue: 0,0:45:27.57,0:45:28.66,Default,,0,0,0,,property and for the
Dialogue: 0,0:45:28.66,0:45:29.32,Default,,0,0,0,,initializer.
Dialogue: 0,0:45:29.39,0:45:30.92,Default,,0,0,0,,The intValue, though, remains
Dialogue: 0,0:45:30.92,0:45:32.05,Default,,0,0,0,,nil because there's not enough
Dialogue: 0,0:45:32.05,0:45:33.41,Default,,0,0,0,,information in this enum to
Dialogue: 0,0:45:33.41,0:45:34.85,Default,,0,0,0,,assign a particular value to
Dialogue: 0,0:45:34.85,0:45:35.10,Default,,0,0,0,,that.
Dialogue: 0,0:45:36.10,0:45:37.29,Default,,0,0,0,,Earlier when we customized the
Dialogue: 0,0:45:37.29,0:45:38.86,Default,,0,0,0,,case name, you can see how that
Dialogue: 0,0:45:38.86,0:45:39.45,Default,,0,0,0,,worked now.
Dialogue: 0,0:45:39.57,0:45:40.99,Default,,0,0,0,,We changed the name of the case,
Dialogue: 0,0:45:41.17,0:45:42.73,Default,,0,0,0,,but the value remained the same.
Dialogue: 0,0:45:42.73,0:45:44.07,Default,,0,0,0,,And so stringValue remained
Dialogue: 0,0:45:44.07,0:45:45.43,Default,,0,0,0,,compatible with our GitHub API.
Dialogue: 0,0:45:47.02,0:45:48.65,Default,,0,0,0,,If you're writing library code,
Dialogue: 0,0:45:48.74,0:45:49.37,Default,,0,0,0,,I would encourage you to
Dialogue: 0,0:45:49.37,0:45:50.44,Default,,0,0,0,,consider backing your coding
Dialogue: 0,0:45:50.44,0:45:51.38,Default,,0,0,0,,keys with an integer.
Dialogue: 0,0:45:51.43,0:45:54.04,Default,,0,0,0,,If you do this, you still get
Dialogue: 0,0:45:54.04,0:45:55.33,Default,,0,0,0,,more implementation for free
Dialogue: 0,0:45:55.33,0:45:56.71,Default,,0,0,0,,from the compiler -- in this
Dialogue: 0,0:45:56.71,0:45:57.99,Default,,0,0,0,,case, an integer value, which,
Dialogue: 0,0:45:57.99,0:45:59.81,Default,,0,0,0,,again, could be useful for
Dialogue: 0,0:45:59.81,0:46:01.29,Default,,0,0,0,,formats that may support integer
Dialogue: 0,0:46:01.29,0:46:01.73,Default,,0,0,0,,keys.
Dialogue: 0,0:46:03.50,0:46:05.26,Default,,0,0,0,,We also support unkeyed
Dialogue: 0,0:46:05.26,0:46:05.83,Default,,0,0,0,,containers.
Dialogue: 0,0:46:06.03,0:46:08.13,Default,,0,0,0,,These encode and decode in
Dialogue: 0,0:46:08.24,0:46:08.58,Default,,0,0,0,,order.
Dialogue: 0,0:46:09.33,0:46:10.61,Default,,0,0,0,,Use these for ordered or
Dialogue: 0,0:46:10.61,0:46:12.24,Default,,0,0,0,,unbounded data, and, you know,
Dialogue: 0,0:46:12.24,0:46:13.13,Default,,0,0,0,,the reason for that is that, of
Dialogue: 0,0:46:13.13,0:46:13.73,Default,,0,0,0,,course, you don't have to
Dialogue: 0,0:46:13.73,0:46:14.99,Default,,0,0,0,,generate fake keys in order to
Dialogue: 0,0:46:14.99,0:46:16.22,Default,,0,0,0,,get your data into an archive.
Dialogue: 0,0:46:17.08,0:46:18.83,Default,,0,0,0,,We also support single value
Dialogue: 0,0:46:18.83,0:46:20.17,Default,,0,0,0,,container, which, as the name
Dialogue: 0,0:46:20.17,0:46:22.01,Default,,0,0,0,,suggests, holds exactly one
Dialogue: 0,0:46:22.01,0:46:22.34,Default,,0,0,0,,entry.
Dialogue: 0,0:46:23.00,0:46:24.29,Default,,0,0,0,,Use these for primitive types.
Dialogue: 0,0:46:24.35,0:46:25.80,Default,,0,0,0,,For example, date stores the
Dialogue: 0,0:46:25.80,0:46:27.04,Default,,0,0,0,,number of seconds since a
Dialogue: 0,0:46:27.04,0:46:28.16,Default,,0,0,0,,reference point in time.
Dialogue: 0,0:46:28.97,0:46:30.20,Default,,0,0,0,,Now, when you choose these, just
Dialogue: 0,0:46:30.20,0:46:31.86,Default,,0,0,0,,be aware that they are the least
Dialogue: 0,0:46:31.86,0:46:34.38,Default,,0,0,0,,compatible choice, so keep that
Dialogue: 0,0:46:34.38,0:46:34.72,Default,,0,0,0,,in mind.
Dialogue: 0,0:46:35.90,0:46:37.27,Default,,0,0,0,,Let's return one more time to
Dialogue: 0,0:46:37.27,0:46:37.87,Default,,0,0,0,,our commit.
Dialogue: 0,0:46:39.06,0:46:40.35,Default,,0,0,0,,So we saw how we customized the
Dialogue: 0,0:46:40.35,0:46:42.70,Default,,0,0,0,,commentCount and the CodingKeys
Dialogue: 0,0:46:42.70,0:46:44.29,Default,,0,0,0,,with that, the decoding by
Dialogue: 0,0:46:44.29,0:46:45.55,Default,,0,0,0,,changing init from decoder.
Dialogue: 0,0:46:45.92,0:46:48.41,Default,,0,0,0,,Now, let's look at encoding with
Dialogue: 0,0:46:48.41,0:46:49.48,Default,,0,0,0,,encode to encoder.
Dialogue: 0,0:46:49.81,0:46:50.98,Default,,0,0,0,,And actually, I don't need to
Dialogue: 0,0:46:50.98,0:46:52.62,Default,,0,0,0,,customize anything here, but I
Dialogue: 0,0:46:52.62,0:46:53.37,Default,,0,0,0,,still want to show you what it
Dialogue: 0,0:46:53.37,0:46:54.73,Default,,0,0,0,,looks like so you can understand
Dialogue: 0,0:46:54.73,0:46:55.32,Default,,0,0,0,,how it works.
Dialogue: 0,0:46:55.76,0:46:57.88,Default,,0,0,0,,So first, we get a container,
Dialogue: 0,0:46:57.95,0:46:59.27,Default,,0,0,0,,and that container, as you can
Dialogue: 0,0:46:59.27,0:47:00.99,Default,,0,0,0,,see here, is keyed by our own
Dialogue: 0,0:47:00.99,0:47:02.77,Default,,0,0,0,,private-to-us CodingKeys.
Dialogue: 0,0:47:03.28,0:47:05.43,Default,,0,0,0,,That container is how I can
Dialogue: 0,0:47:05.43,0:47:07.71,Default,,0,0,0,,encode the values that I want to
Dialogue: 0,0:47:07.71,0:47:08.89,Default,,0,0,0,,be put in the archive -- our
Dialogue: 0,0:47:08.92,0:47:10.38,Default,,0,0,0,,URL, message, author, the
Dialogue: 0,0:47:10.38,0:47:12.06,Default,,0,0,0,,recursive descent again, and the
Dialogue: 0,0:47:12.06,0:47:12.67,Default,,0,0,0,,comment count.
Dialogue: 0,0:47:12.84,0:47:14.47,Default,,0,0,0,,I do want to show you an example
Dialogue: 0,0:47:14.47,0:47:15.18,Default,,0,0,0,,of where you may choose a
Dialogue: 0,0:47:15.18,0:47:16.76,Default,,0,0,0,,different kind of container, so
Dialogue: 0,0:47:16.76,0:47:17.77,Default,,0,0,0,,let's say that we are working
Dialogue: 0,0:47:17.77,0:47:19.44,Default,,0,0,0,,with the GO JSON spec, which has
Dialogue: 0,0:47:19.76,0:47:20.88,Default,,0,0,0,,this concept of a point.
Dialogue: 0,0:47:21.35,0:47:22.64,Default,,0,0,0,,And point has two values, and it
Dialogue: 0,0:47:22.64,0:47:23.56,Default,,0,0,0,,should be an array of two
Dialogue: 0,0:47:23.56,0:47:24.79,Default,,0,0,0,,numeric entries in JSON.
Dialogue: 0,0:47:25.08,0:47:26.31,Default,,0,0,0,,So in order to make that work,
Dialogue: 0,0:47:26.64,0:47:28.83,Default,,0,0,0,,I'm going to adopt encodable and
Dialogue: 0,0:47:28.90,0:47:30.43,Default,,0,0,0,,implement the encode to encoder
Dialogue: 0,0:47:30.47,0:47:32.21,Default,,0,0,0,,to use a unkeyed container.
Dialogue: 0,0:47:32.32,0:47:33.17,Default,,0,0,0,,And you'll notice, of course,
Dialogue: 0,0:47:33.17,0:47:34.80,Default,,0,0,0,,there's no key argument to this
Dialogue: 0,0:47:34.80,0:47:35.27,Default,,0,0,0,,container.
Dialogue: 0,0:47:35.76,0:47:37.16,Default,,0,0,0,,And when I encode, I use no
Dialogue: 0,0:47:37.16,0:47:37.62,Default,,0,0,0,,keys.
Dialogue: 0,0:47:37.76,0:47:39.47,Default,,0,0,0,,And the result looks something
Dialogue: 0,0:47:39.47,0:47:40.51,Default,,0,0,0,,like this in JSON.
Dialogue: 0,0:47:41.66,0:47:43.12,Default,,0,0,0,,We also support nested
Dialogue: 0,0:47:43.12,0:47:43.62,Default,,0,0,0,,containers.
Dialogue: 0,0:47:44.08,0:47:45.68,Default,,0,0,0,,So let's say that maybe the
Dialogue: 0,0:47:45.68,0:47:47.07,Default,,0,0,0,,second entry in my dictionary
Dialogue: 0,0:47:47.07,0:47:48.23,Default,,0,0,0,,actually needed to be an array
Dialogue: 0,0:47:48.23,0:47:48.90,Default,,0,0,0,,of three values.
Dialogue: 0,0:47:49.11,0:47:50.94,Default,,0,0,0,,So we support nesting unkeyed
Dialogue: 0,0:47:50.94,0:47:52.29,Default,,0,0,0,,containers and keyed containers,
Dialogue: 0,0:47:52.29,0:47:53.89,Default,,0,0,0,,as you see here, or any other
Dialogue: 0,0:47:53.89,0:47:55.46,Default,,0,0,0,,combination of keyed, unkeyed,
Dialogue: 0,0:47:55.46,0:47:56.27,Default,,0,0,0,,and single value.
Dialogue: 0,0:47:57.13,0:47:58.35,Default,,0,0,0,,The primary use case for nested
Dialogue: 0,0:47:58.35,0:48:00.10,Default,,0,0,0,,containers is actually classes.
Dialogue: 0,0:48:00.51,0:48:01.93,Default,,0,0,0,,We've talked a lot about structs
Dialogue: 0,0:48:02.38,0:48:04.93,Default,,0,0,0,,so far, but nested containers
Dialogue: 0,0:48:04.93,0:48:06.53,Default,,0,0,0,,gives us a natural mechanism for
Dialogue: 0,0:48:06.53,0:48:08.07,Default,,0,0,0,,encapsulating our superclass
Dialogue: 0,0:48:08.07,0:48:09.41,Default,,0,0,0,,data from our own data as a
Dialogue: 0,0:48:09.41,0:48:10.89,Default,,0,0,0,,subclass, which is a change from
Dialogue: 0,0:48:10.89,0:48:11.35,Default,,0,0,0,,NSCoding.
Dialogue: 0,0:48:12.12,0:48:13.01,Default,,0,0,0,,Let's look at an example.
Dialogue: 0,0:48:13.55,0:48:14.64,Default,,0,0,0,,Here's everyone's favorite
Dialogue: 0,0:48:14.77,0:48:15.82,Default,,0,0,0,,object-oriented example,
Dialogue: 0,0:48:15.82,0:48:16.29,Default,,0,0,0,,animals.
Dialogue: 0,0:48:16.43,0:48:17.96,Default,,0,0,0,,So animals have a leg count,
Dialogue: 0,0:48:18.34,0:48:18.79,Default,,0,0,0,,naturally.
Dialogue: 0,0:48:19.18,0:48:21.30,Default,,0,0,0,,And its own coding keys.
Dialogue: 0,0:48:21.41,0:48:23.31,Default,,0,0,0,,And here you can see that on
Dialogue: 0,0:48:23.31,0:48:24.37,Default,,0,0,0,,this class, when I implement
Dialogue: 0,0:48:24.37,0:48:25.44,Default,,0,0,0,,init from decoder, it is a
Dialogue: 0,0:48:25.44,0:48:26.47,Default,,0,0,0,,required initializer.
Dialogue: 0,0:48:27.73,0:48:29.38,Default,,0,0,0,,Here I create a keyed contained
Dialogue: 0,0:48:29.38,0:48:30.81,Default,,0,0,0,,using the animal's coding keys
Dialogue: 0,0:48:30.81,0:48:31.86,Default,,0,0,0,,and decode my leg count.
Dialogue: 0,0:48:32.00,0:48:32.79,Default,,0,0,0,,Pretty similar to what we've
Dialogue: 0,0:48:32.79,0:48:33.47,Default,,0,0,0,,seen so far.
Dialogue: 0,0:48:34.58,0:48:35.77,Default,,0,0,0,,Now, let's subclass it.
Dialogue: 0,0:48:36.53,0:48:37.79,Default,,0,0,0,,Dogs is a kind of animal that
Dialogue: 0,0:48:37.79,0:48:39.05,Default,,0,0,0,,has a best friend, which is the
Dialogue: 0,0:48:39.05,0:48:40.19,Default,,0,0,0,,kid from our birthday party
Dialogue: 0,0:48:40.19,0:48:40.57,Default,,0,0,0,,earlier.
Dialogue: 0,0:48:41.26,0:48:42.93,Default,,0,0,0,,Now, you notice that dog also
Dialogue: 0,0:48:42.93,0:48:44.26,Default,,0,0,0,,has a private enum called
Dialogue: 0,0:48:44.26,0:48:46.49,Default,,0,0,0,,CodingKeys, and yet, even though
Dialogue: 0,0:48:46.49,0:48:47.55,Default,,0,0,0,,it has the same name as the one
Dialogue: 0,0:48:47.55,0:48:48.96,Default,,0,0,0,,from the superclass, because
Dialogue: 0,0:48:48.96,0:48:50.54,Default,,0,0,0,,it's private, it doesn't
Dialogue: 0,0:48:50.54,0:48:52.15,Default,,0,0,0,,conflict with the one that
Dialogue: 0,0:48:52.15,0:48:52.90,Default,,0,0,0,,animal uses.
Dialogue: 0,0:48:53.38,0:48:55.00,Default,,0,0,0,,So when I implement the dog's
Dialogue: 0,0:48:55.00,0:48:56.32,Default,,0,0,0,,init from decoder and get a
Dialogue: 0,0:48:56.32,0:48:58.05,Default,,0,0,0,,container with its own coding
Dialogue: 0,0:48:58.05,0:48:59.70,Default,,0,0,0,,keys, I can decode it in a
Dialogue: 0,0:48:59.70,0:49:01.51,Default,,0,0,0,,type-safe way with the keys that
Dialogue: 0,0:49:01.51,0:49:03.13,Default,,0,0,0,,are important to it, not its
Dialogue: 0,0:49:03.13,0:49:03.79,Default,,0,0,0,,superclass.
Dialogue: 0,0:49:04.53,0:49:05.52,Default,,0,0,0,,Now, we do need to finish that
Dialogue: 0,0:49:05.52,0:49:05.93,Default,,0,0,0,,nesting.
Dialogue: 0,0:49:06.56,0:49:08.52,Default,,0,0,0,,So we could call superclass, our
Dialogue: 0,0:49:08.52,0:49:09.96,Default,,0,0,0,,superclasses init from decoder
Dialogue: 0,0:49:09.96,0:49:10.99,Default,,0,0,0,,with the decoder that we
Dialogue: 0,0:49:10.99,0:49:11.55,Default,,0,0,0,,received.
Dialogue: 0,0:49:12.03,0:49:13.78,Default,,0,0,0,,However, that doesn't give the
Dialogue: 0,0:49:13.78,0:49:16.27,Default,,0,0,0,,container a chance to nest that
Dialogue: 0,0:49:16.27,0:49:17.15,Default,,0,0,0,,superclass data.
Dialogue: 0,0:49:17.64,0:49:19.23,Default,,0,0,0,,So the easiest way to do that is
Dialogue: 0,0:49:19.23,0:49:20.47,Default,,0,0,0,,to use this convenience API --
Dialogue: 0,0:49:21.05,0:49:22.41,Default,,0,0,0,,it's called superDecoder -- that
Dialogue: 0,0:49:22.41,0:49:23.97,Default,,0,0,0,,gets a new decoder that we could
Dialogue: 0,0:49:23.97,0:49:25.11,Default,,0,0,0,,pass to our superclass.
Dialogue: 0,0:49:25.39,0:49:27.42,Default,,0,0,0,,And by calling super, we finish
Dialogue: 0,0:49:27.87,0:49:29.55,Default,,0,0,0,,satisfying Swift's rules for
Dialogue: 0,0:49:29.55,0:49:30.91,Default,,0,0,0,,creating an initializer that
Dialogue: 0,0:49:31.04,0:49:32.56,Default,,0,0,0,,results in a finally initialized
Dialogue: 0,0:49:32.61,0:49:33.88,Default,,0,0,0,,type that's ready for use.
Dialogue: 0,0:49:36.78,0:49:38.17,Default,,0,0,0,,Finally, we have our third
Dialogue: 0,0:49:38.17,0:49:39.67,Default,,0,0,0,,pillar, and that is abstracting
Dialogue: 0,0:49:39.67,0:49:41.68,Default,,0,0,0,,the encoded format from these
Dialogue: 0,0:49:41.71,0:49:42.23,Default,,0,0,0,,types.
Dialogue: 0,0:49:43.61,0:49:44.72,Default,,0,0,0,,We felt it was important to be
Dialogue: 0,0:49:44.72,0:49:46.82,Default,,0,0,0,,able to reuse one implementation
Dialogue: 0,0:49:46.88,0:49:48.29,Default,,0,0,0,,of these protocols.
Dialogue: 0,0:49:49.19,0:49:50.22,Default,,0,0,0,,We didn't want to wind up in a
Dialogue: 0,0:49:50.22,0:49:51.91,Default,,0,0,0,,situation where we had many
Dialogue: 0,0:49:52.16,0:49:53.04,Default,,0,0,0,,almost duplicated
Dialogue: 0,0:49:53.04,0:49:55.26,Default,,0,0,0,,implementations of encodable and
Dialogue: 0,0:49:55.26,0:49:56.66,Default,,0,0,0,,decodable to support new
Dialogue: 0,0:49:56.66,0:49:57.28,Default,,0,0,0,,formats.
Dialogue: 0,0:49:57.99,0:50:00.64,Default,,0,0,0,,So by abstracting the format, we
Dialogue: 0,0:50:00.64,0:50:02.05,Default,,0,0,0,,can allow brand-new formats
Dialogue: 0,0:50:02.05,0:50:03.44,Default,,0,0,0,,without any library changes.
Dialogue: 0,0:50:03.63,0:50:04.89,Default,,0,0,0,,Those formats can come from us,
Dialogue: 0,0:50:05.22,0:50:06.84,Default,,0,0,0,,or from you, or even from Swift
Dialogue: 0,0:50:06.84,0:50:09.64,Default,,0,0,0,,Packages, and those formats can
Dialogue: 0,0:50:09.64,0:50:10.66,Default,,0,0,0,,work with types that come from
Dialogue: 0,0:50:10.66,0:50:12.28,Default,,0,0,0,,us, or from you, or with Swift
Dialogue: 0,0:50:12.28,0:50:12.87,Default,,0,0,0,,Packages.
Dialogue: 0,0:50:13.84,0:50:15.15,Default,,0,0,0,,We do understand, though, that
Dialogue: 0,0:50:15.15,0:50:16.92,Default,,0,0,0,,different formats have different
Dialogue: 0,0:50:16.92,0:50:18.58,Default,,0,0,0,,fundamental types and different
Dialogue: 0,0:50:18.58,0:50:19.26,Default,,0,0,0,,conventions.
Dialogue: 0,0:50:19.91,0:50:21.20,Default,,0,0,0,,So the mechanism we have for
Dialogue: 0,0:50:21.20,0:50:22.12,Default,,0,0,0,,working with that is called
Dialogue: 0,0:50:22.12,0:50:23.14,Default,,0,0,0,,encoding strategies.
Dialogue: 0,0:50:23.50,0:50:24.54,Default,,0,0,0,,These are encoder- and
Dialogue: 0,0:50:24.54,0:50:26.27,Default,,0,0,0,,decoder-specific customizations
Dialogue: 0,0:50:26.60,0:50:27.75,Default,,0,0,0,,for certain types.
Dialogue: 0,0:50:27.91,0:50:29.70,Default,,0,0,0,,For example, in JSON, we saw one
Dialogue: 0,0:50:29.70,0:50:30.56,Default,,0,0,0,,already for date.
Dialogue: 0,0:50:31.02,0:50:32.60,Default,,0,0,0,,In our GitHub example, the date
Dialogue: 0,0:50:32.60,0:50:34.43,Default,,0,0,0,,was encoded as an iso8601
Dialogue: 0,0:50:34.43,0:50:34.82,Default,,0,0,0,,string.
Dialogue: 0,0:50:35.49,0:50:36.91,Default,,0,0,0,,But there are other conventions
Dialogue: 0,0:50:37.01,0:50:38.05,Default,,0,0,0,,that are possible.
Dialogue: 0,0:50:38.10,0:50:39.24,Default,,0,0,0,,For example, the number of
Dialogue: 0,0:50:39.24,0:50:40.73,Default,,0,0,0,,seconds since a reference date,
Dialogue: 0,0:50:40.99,0:50:42.24,Default,,0,0,0,,the number of milliseconds since
Dialogue: 0,0:50:42.24,0:50:43.79,Default,,0,0,0,,a reference date, or you can
Dialogue: 0,0:50:43.79,0:50:45.22,Default,,0,0,0,,even specify a completely custom
Dialogue: 0,0:50:45.22,0:50:46.55,Default,,0,0,0,,date formatter if you have
Dialogue: 0,0:50:46.55,0:50:47.73,Default,,0,0,0,,something very specialized in
Dialogue: 0,0:50:47.73,0:50:48.03,Default,,0,0,0,,mind.
Dialogue: 0,0:50:49.07,0:50:50.28,Default,,0,0,0,,The JSON encoder and decoder
Dialogue: 0,0:50:50.28,0:50:51.20,Default,,0,0,0,,support other kinds of
Dialogue: 0,0:50:51.20,0:50:51.76,Default,,0,0,0,,strategies.
Dialogue: 0,0:50:51.76,0:50:53.35,Default,,0,0,0,,For example, for data.
Dialogue: 0,0:50:53.96,0:50:55.36,Default,,0,0,0,,In JSON, it's very common to
Dialogue: 0,0:50:55.45,0:50:56.82,Default,,0,0,0,,Base64 encode your data.
Dialogue: 0,0:50:57.77,0:50:59.12,Default,,0,0,0,,But we also allow you to
Dialogue: 0,0:50:59.12,0:51:00.26,Default,,0,0,0,,customize this by choosing a
Dialogue: 0,0:51:00.26,0:51:02.64,Default,,0,0,0,,strategy that encodes it as an
Dialogue: 0,0:51:02.64,0:51:04.13,Default,,0,0,0,,array of bytes, or you can
Dialogue: 0,0:51:04.13,0:51:05.18,Default,,0,0,0,,specify something completely
Dialogue: 0,0:51:05.18,0:51:06.58,Default,,0,0,0,,custom, like this one, which
Dialogue: 0,0:51:06.58,0:51:07.89,Default,,0,0,0,,turns all zeros into sheep and
Dialogue: 0,0:51:07.89,0:51:08.87,Default,,0,0,0,,everything else into a dog.
Dialogue: 0,0:51:09.51,0:51:11.07,Default,,0,0,0,,I don't know why you'd do this,
Dialogue: 0,0:51:11.07,0:51:13.20,Default,,0,0,0,,but it's possible, so there you
Dialogue: 0,0:51:13.20,0:51:13.37,Default,,0,0,0,,go.
Dialogue: 0,0:51:13.98,0:51:16.20,Default,,0,0,0,,Now, this abstraction helps us
Dialogue: 0,0:51:16.26,0:51:17.51,Default,,0,0,0,,with different formats as well.
Dialogue: 0,0:51:17.51,0:51:18.25,Default,,0,0,0,,So we've seen, we've talked a
Dialogue: 0,0:51:18.25,0:51:19.74,Default,,0,0,0,,lot about JSON today, but
Dialogue: 0,0:51:19.74,0:51:20.53,Default,,0,0,0,,actually, we are also
Dialogue: 0,0:51:20.53,0:51:21.81,Default,,0,0,0,,introducing a property list
Dialogue: 0,0:51:21.81,0:51:22.76,Default,,0,0,0,,encoder and decoder.
Dialogue: 0,0:51:23.40,0:51:25.19,Default,,0,0,0,,And property lists, unlike JSON,
Dialogue: 0,0:51:25.19,0:51:27.07,Default,,0,0,0,,have native types for data and
Dialogue: 0,0:51:27.07,0:51:27.49,Default,,0,0,0,,for date.
Dialogue: 0,0:51:28.10,0:51:29.79,Default,,0,0,0,,And so when these encoders and
Dialogue: 0,0:51:29.79,0:51:31.33,Default,,0,0,0,,decoders encounter these objects
Dialogue: 0,0:51:31.33,0:51:32.34,Default,,0,0,0,,either in the object graph that
Dialogue: 0,0:51:32.34,0:51:33.71,Default,,0,0,0,,it's encoding or in the data
Dialogue: 0,0:51:33.71,0:51:35.66,Default,,0,0,0,,that it's unarchiving, we can
Dialogue: 0,0:51:35.66,0:51:36.51,Default,,0,0,0,,convert them into the right
Dialogue: 0,0:51:36.51,0:51:37.72,Default,,0,0,0,,types that are proper for that
Dialogue: 0,0:51:37.72,0:51:38.08,Default,,0,0,0,,format.
Dialogue: 0,0:51:38.49,0:51:40.88,Default,,0,0,0,,Because of these abstractions,
Dialogue: 0,0:51:40.88,0:51:42.00,Default,,0,0,0,,we're able to adopt the codable
Dialogue: 0,0:51:42.00,0:51:43.70,Default,,0,0,0,,protocols on a wide variety of
Dialogue: 0,0:51:43.70,0:51:45.07,Default,,0,0,0,,Foundation types, including all
Dialogue: 0,0:51:45.07,0:51:45.84,Default,,0,0,0,,the ones you see here.
Dialogue: 0,0:51:45.84,0:51:48.42,Default,,0,0,0,,Now, we've talked about a lot of
Dialogue: 0,0:51:48.42,0:51:49.29,Default,,0,0,0,,codable API.
Dialogue: 0,0:51:49.29,0:51:51.10,Default,,0,0,0,,I want to give you a visual
Dialogue: 0,0:51:51.10,0:51:52.95,Default,,0,0,0,,overview to help you understand
Dialogue: 0,0:51:52.99,0:51:54.01,Default,,0,0,0,,what the big picture is.
Dialogue: 0,0:51:54.12,0:51:54.87,Default,,0,0,0,,So we're going to start, of
Dialogue: 0,0:51:54.87,0:51:55.85,Default,,0,0,0,,course, with your type.
Dialogue: 0,0:51:56.62,0:51:58.84,Default,,0,0,0,,Your type adopts two protocols.
Dialogue: 0,0:51:58.90,0:52:00.17,Default,,0,0,0,,They're called encodable and
Dialogue: 0,0:52:00.17,0:52:00.75,Default,,0,0,0,,decodable.
Dialogue: 0,0:52:01.92,0:52:03.12,Default,,0,0,0,,These have a function and an
Dialogue: 0,0:52:03.12,0:52:04.48,Default,,0,0,0,,initializer, which give you
Dialogue: 0,0:52:04.48,0:52:06.55,Default,,0,0,0,,access to an encoder and a
Dialogue: 0,0:52:06.55,0:52:07.15,Default,,0,0,0,,decoder.
Dialogue: 0,0:52:08.27,0:52:09.69,Default,,0,0,0,,These provide you access to
Dialogue: 0,0:52:09.69,0:52:10.74,Default,,0,0,0,,containers, and that's what
Dialogue: 0,0:52:10.74,0:52:11.98,Default,,0,0,0,,actually holds the values that
Dialogue: 0,0:52:11.98,0:52:12.73,Default,,0,0,0,,are in the archive.
Dialogue: 0,0:52:13.22,0:52:14.09,Default,,0,0,0,,In the case of a keyed
Dialogue: 0,0:52:14.09,0:52:16.09,Default,,0,0,0,,container, we use the coding
Dialogue: 0,0:52:16.09,0:52:17.65,Default,,0,0,0,,keys that are defined by your
Dialogue: 0,0:52:17.65,0:52:18.02,Default,,0,0,0,,type.
Dialogue: 0,0:52:19.22,0:52:20.75,Default,,0,0,0,,And finally, the encoders and
Dialogue: 0,0:52:20.75,0:52:22.03,Default,,0,0,0,,containers provide an
Dialogue: 0,0:52:22.03,0:52:23.61,Default,,0,0,0,,abstraction for encoded formats
Dialogue: 0,0:52:23.61,0:52:25.77,Default,,0,0,0,,like JSON, property list, and
Dialogue: 0,0:52:25.81,0:52:26.08,Default,,0,0,0,,more.
Dialogue: 0,0:52:26.66,0:52:30.00,Default,,0,0,0,,All right, so we started today
Dialogue: 0,0:52:30.00,0:52:31.63,Default,,0,0,0,,by going over some new API and
Dialogue: 0,0:52:31.63,0:52:32.78,Default,,0,0,0,,improved performance in this
Dialogue: 0,0:52:32.78,0:52:33.90,Default,,0,0,0,,year's release of Foundation.
Dialogue: 0,0:52:34.48,0:52:35.98,Default,,0,0,0,,After that, we looked at the new
Dialogue: 0,0:52:36.25,0:52:37.48,Default,,0,0,0,,strongly typed key paths for
Dialogue: 0,0:52:37.48,0:52:38.97,Default,,0,0,0,,Swift, including one really cool
Dialogue: 0,0:52:38.97,0:52:40.64,Default,,0,0,0,,use case, our brand-new,
Dialogue: 0,0:52:40.72,0:52:42.19,Default,,0,0,0,,closure-based KVO API.
Dialogue: 0,0:52:43.13,0:52:44.17,Default,,0,0,0,,And finally, we went over the
Dialogue: 0,0:52:44.17,0:52:46.27,Default,,0,0,0,,new codable protocols, which
Dialogue: 0,0:52:46.44,0:52:47.56,Default,,0,0,0,,make integration with formats
Dialogue: 0,0:52:47.56,0:52:49.79,Default,,0,0,0,,like JSON easy, but also allow
Dialogue: 0,0:52:49.79,0:52:51.57,Default,,0,0,0,,you the opportunity for powerful
Dialogue: 0,0:52:51.57,0:52:52.31,Default,,0,0,0,,customization.
Dialogue: 0,0:52:53.32,0:52:54.72,Default,,0,0,0,,For more information, check out
Dialogue: 0,0:52:54.72,0:52:55.11,Default,,0,0,0,,this link.
Dialogue: 0,0:52:56.12,0:52:57.37,Default,,0,0,0,,We have a couple of related
Dialogue: 0,0:52:57.37,0:52:58.27,Default,,0,0,0,,sessions that we've talked
Dialogue: 0,0:52:58.27,0:52:58.57,Default,,0,0,0,,about.
Dialogue: 0,0:52:58.57,0:53:01.10,Default,,0,0,0,,Thank you so much.
Dialogue: 0,0:53:02.52,0:53:05.50,Default,,0,0,0,,[ Applause ]
