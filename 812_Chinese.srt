1
00:00:21,088 --> 00:00:24,491
以前针对iOS的设计要简单很多

2
00:00:24,558 --> 00:00:26,260
当时只有一部电话

3
00:00:26,960 --> 00:00:30,297
现在 我们有三种不同的
iPhone屏幕尺寸

4
00:00:30,864 --> 00:00:32,598
三种iPad尺寸

5
00:00:33,300 --> 00:00:35,169
有着不同的屏幕方向

6
00:00:35,702 --> 00:00:38,805
分屏和多任务屏幕

7
00:00:39,706 --> 00:00:43,177
似乎有很多不同的屏幕尺寸需要考虑

8
00:00:43,243 --> 00:00:46,780
不过 在设计和构建应用方面
存在基本框架

9
00:00:46,847 --> 00:00:48,782
可以简化流程

10
00:00:49,116 --> 00:00:50,684
这样可以节省时间

11
00:00:50,751 --> 00:00:53,020
应用的外观也会很棒

12
00:00:53,086 --> 00:00:55,956
不论人们所用的设备是什么

13
00:00:56,823 --> 00:00:58,592
需要考虑的主要内容

14
00:00:58,659 --> 00:01:02,062
是要把屏幕分为不同的尺寸类别

15
00:01:02,596 --> 00:01:04,298
可以使用动态类别

16
00:01:04,798 --> 00:01:08,001
并利用标准UI元素来实现

17
00:01:08,168 --> 00:01:10,671
所有这些都可以帮助你

18
00:01:10,737 --> 00:01:12,706
更简便地设计和构建应用

19
00:01:13,807 --> 00:01:16,210
首先 来看尺寸类别

20
00:01:16,877 --> 00:01:22,449
所有iOS屏幕尺寸均可
分为两种尺寸类型

21
00:01:22,516 --> 00:01:24,484
紧凑型或常规型

22
00:01:24,952 --> 00:01:26,520
考虑这个问题有个简单方法

23
00:01:26,587 --> 00:01:31,325
就是较窄的屏幕宽度属于
紧凑型尺寸 比如iPhone布局

24
00:01:31,391 --> 00:01:35,796
较宽的屏幕宽度属于常规型
例如iPad的宽度

25
00:01:36,530 --> 00:01:39,433
如果将所有的屏幕彼此叠放在一起

26
00:01:39,499 --> 00:01:43,637
有竖直和水平方向的两种

27
00:01:43,704 --> 00:01:47,307
你会发现尺寸类型适合两种宽度和高度

28
00:01:47,941 --> 00:01:50,444
创建这两种尺寸类型的目标

29
00:01:50,511 --> 00:01:53,146
是为了可以灵活布局

30
00:01:53,213 --> 00:01:57,317
元素可以与相应的屏幕尺寸相适配

31
00:01:58,252 --> 00:02:00,254
我来提供两个例子

32
00:02:00,320 --> 00:02:03,190
说明这对布局有着怎样的意义

33
00:02:04,258 --> 00:02:08,662
iPhone 7 Plus的横款
属于常规型宽度

34
00:02:09,763 --> 00:02:13,567
使其可以使用分屏功能
和所有iPad一样

35
00:02:14,434 --> 00:02:19,573
两款较小的横款手机
在宽度和高度上都属于紧凑型

36
00:02:20,274 --> 00:02:23,610
这表明它们的水平条高度较短

37
00:02:23,844 --> 00:02:26,346
不及竖款中的标准高度

38
00:02:28,048 --> 00:02:31,018
屏幕宽度也可定义UIKit间距

39
00:02:31,118 --> 00:02:34,454
间距宽度可以是标准的

40
00:02:34,621 --> 00:02:38,392
或像这款iPad
对较宽屏幕比较宽松

41
00:02:39,059 --> 00:02:42,129
不过在本例中 还有许多其他的例子中

42
00:02:42,196 --> 00:02:46,366
如果文字无边框放入UIKit间距

43
00:02:46,433 --> 00:02:48,769
文字行则显得太长

44
00:02:48,836 --> 00:02:53,607
当看到行结尾时 眼睛很难向下移动

45
00:02:54,875 --> 00:02:56,777
所以我们使用具有可读性的间距

46
00:02:56,844 --> 00:02:59,813
在更大的设备上限制行的长度

47
00:03:00,080 --> 00:03:04,051
这些间距很灵活
因为可以根据文本大小而变化

48
00:03:04,751 --> 00:03:08,322
较小文本需要较窄小的可读性长度

49
00:03:08,488 --> 00:03:11,158
较大文本可以有着较长的长度

50
00:03:11,525 --> 00:03:14,728
如果使用具备可读性间距的动态类型

51
00:03:14,795 --> 00:03:15,863
那么使用应用的用户

52
00:03:15,929 --> 00:03:18,599
则会有着更舒适的阅读体验

53
00:03:19,766 --> 00:03:22,035
我们来说说动态类型

54
00:03:22,102 --> 00:03:25,539
它具体是什么
以及怎样帮助他们使用应用

55
00:03:27,040 --> 00:03:32,546
动态类型预定义了文本样式
可以在设备上调整大小

56
00:03:32,613 --> 00:03:36,650
这样用户可以按照
最舒适的大小来看文本

57
00:03:36,950 --> 00:03:40,287
有许多人觉得应用上的

58
00:03:40,354 --> 00:03:42,189
文本字体太小 不适合阅读

59
00:03:43,357 --> 00:03:44,591
使用动态类型

60
00:03:44,658 --> 00:03:48,161
可以自动放大缩小文本

61
00:03:48,228 --> 00:03:50,197
而不会影响布局

62
00:03:50,764 --> 00:03:53,934
还可以选择辅助功能设置

63
00:03:54,001 --> 00:03:56,837
定为更大类型 更便于阅读

64
00:03:58,105 --> 00:04:00,707
还可以无缝本地化应用

65
00:04:00,807 --> 00:04:03,443
文本可以调整字体或行的高度

66
00:04:03,510 --> 00:04:05,579
根据文字的高度来决定

67
00:04:05,646 --> 00:04:09,616
使用这些特性
会带来更多便利 让更多人使用应用

68
00:04:11,552 --> 00:04:13,887
这是我们的动态类型图表

69
00:04:14,021 --> 00:04:17,824
今年 我们对现有文本样式做了些调整

70
00:04:17,891 --> 00:04:22,029
通过提升标题大小的重量
从轻磅变到常规

71
00:04:22,429 --> 00:04:23,730
在大多情况下

72
00:04:23,797 --> 00:04:28,669
我们推荐在每屏使用两到三种文本样式

73
00:04:29,036 --> 00:04:31,805
但是有着十种不同文本样式可供选择

74
00:04:31,872 --> 00:04:35,042
会有无数种组合和很多灵活性

75
00:04:35,209 --> 00:04:36,810
来设计应用

76
00:04:38,278 --> 00:04:41,215
文本样式的名称需要具有描述性

77
00:04:41,281 --> 00:04:45,652
表明采用了最适当的具体样式

78
00:04:45,919 --> 00:04:49,923
例如 正文旨在用于

79
00:04:49,990 --> 00:04:52,359
需要大量文本的地方

80
00:04:52,426 --> 00:04:55,762
正文页是我们在整个系统中
使用的默认状态

81
00:04:56,597 --> 00:04:57,431
从这里开始

82
00:04:57,497 --> 00:05:00,534
我们可以引入较小和较大的样式

83
00:05:00,601 --> 00:05:02,169
或在本例中 需要加粗

84
00:05:02,736 --> 00:05:04,171
来创建层次感

85
00:05:05,572 --> 00:05:08,375
但是 如果要在设计中
使用自定义字体会怎样？

86
00:05:09,042 --> 00:05:11,812
今年 使用新款API

87
00:05:11,879 --> 00:05:15,983
我们可以将自定义字体
也变成动态 这非常棒

88
00:05:16,116 --> 00:05:21,588
记住 你必须为每种文本样式
安排不同的点数大小

89
00:05:21,688 --> 00:05:24,625
因为并非所有字体
都有着同样的比例组成

90
00:05:25,158 --> 00:05:29,229
保持文本在视觉上
是相同大小 这很重要

91
00:05:30,364 --> 00:05:33,934
Etsy是应用使用
动态类型的很好例子

92
00:05:34,001 --> 00:05:36,236
这里是默认的大小

93
00:05:37,004 --> 00:05:39,439
这里是更大的尺寸

94
00:05:39,506 --> 00:05:40,874
效果很好

95
00:05:42,342 --> 00:05:46,180
最后一点同样重要
我们来谈谈UIKit元素

96
00:05:47,214 --> 00:05:51,051
没有关注人们已经

97
00:05:51,118 --> 00:05:53,320
熟悉的任务或功能设计

98
00:05:53,387 --> 00:05:57,724
但我们希望
你能专注于让应用独树一帜

99
00:05:58,292 --> 00:06:01,428
我们有许多标准UI元素
你可以在应用中使用

100
00:06:01,495 --> 00:06:05,098
可以自动适合所有屏幕大小

101
00:06:05,165 --> 00:06:07,167
这包括表格视图等内容

102
00:06:07,234 --> 00:06:10,037
这不仅可以通过动态类型
很好地调节大小

103
00:06:10,103 --> 00:06:13,707
它也继承了可读性间距和标准互动功能

104
00:06:13,774 --> 00:06:16,143
例如滑动操作和编辑模式

105
00:06:17,144 --> 00:06:21,315
有许多其他资源 可以帮助实施一致性

106
00:06:21,381 --> 00:06:24,151
并可以在不同设备中实现无缝适配

107
00:06:24,818 --> 00:06:29,623
需要注意 所有这些组件
都针对iOS 7调整大小

108
00:06:30,090 --> 00:06:33,627
我们推荐开始新设计所用的尺寸大小

109
00:06:34,795 --> 00:06:36,763
一旦有了iPhone设计

110
00:06:36,830 --> 00:06:39,900
我们为适配iPad有几个建议

111
00:06:41,001 --> 00:06:42,536
回顾一下

112
00:06:42,603 --> 00:06:46,473
我们知道常规尺寸类别或iPad

113
00:06:46,540 --> 00:06:48,108
可以使用分屏

114
00:06:48,308 --> 00:06:52,246
并在iPhone和iPad之间
保持内容层次

115
00:06:52,312 --> 00:06:54,748
考虑如何能让应用传播出去

116
00:06:55,883 --> 00:07:00,053
分屏的左侧是指主视图

117
00:07:00,654 --> 00:07:02,956
右侧是详细视图

118
00:07:03,223 --> 00:07:05,592
iPhone的详细视图

119
00:07:05,893 --> 00:07:09,029
可以成为深入发展的页面

120
00:07:10,197 --> 00:07:15,969
记住 iPad将分享
iPad和iPhone的具体布局

121
00:07:16,203 --> 00:07:19,406
iPad布局应保持相同的层次感

122
00:07:19,473 --> 00:07:20,774
与iPhone布局相同

123
00:07:20,841 --> 00:07:24,678
包括标准导航 工具条和标签条

124
00:07:25,279 --> 00:07:27,481
如果应用启动了多任务功能

125
00:07:27,548 --> 00:07:32,152
在应用需要与另外的应用共存时
这可以创建一致性

126
00:07:33,253 --> 00:07:34,755
在进行多任务处理时

127
00:07:34,821 --> 00:07:40,460
应用将在iPhone布局
或紧凑型之间来回过渡

128
00:07:40,928 --> 00:07:45,399
并返回常规尺寸类别
具体取决于目前的屏幕宽度

129
00:07:46,900 --> 00:07:48,502
来重申重点

130
00:07:48,902 --> 00:07:50,370
在为iOS设计时

131
00:07:50,437 --> 00:07:53,006
需要记住三个问题

132
00:07:53,841 --> 00:07:57,377
考虑一下尺寸类别
会让应用效果非常棒

133
00:07:57,444 --> 00:08:00,480
无论人们在用什么设备

134
00:08:01,014 --> 00:08:05,452
使用动态类型会让文本大小调整更容易

135
00:08:05,519 --> 00:08:07,821
并翻译成不同的语言

136
00:08:07,888 --> 00:08:10,924
这会让更多人使用应用

137
00:08:12,192 --> 00:08:14,995
并充分利用现有UI元素

138
00:08:15,062 --> 00:08:18,365
这会让你从重新设计
和重建特性的工作中解放出来

139
00:08:18,432 --> 00:08:21,034
这些人们也许已经很熟悉

140
00:08:21,969 --> 00:08:24,204
我们鼓励大家利用这些工具

141
00:08:24,271 --> 00:08:26,006
这不仅会节省时间

142
00:08:26,106 --> 00:08:30,310
并且适用于人们所用的任何iOS应用

143
00:08:30,377 --> 00:08:32,679
你的应用体验都是无缝

144
00:08:33,013 --> 00:08:33,847
谢谢

