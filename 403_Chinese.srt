1
00:00:22,856 --> 00:00:23,690
大家下午好

2
00:00:26,159 --> 00:00:29,162
很高兴与大家见面

3
00:00:30,264 --> 00:00:32,165
今天我们有很多精彩的内容与大家分享

4
00:00:35,669 --> 00:00:40,908
去年我们推出自动签名
这是一项很不错的功能

5
00:00:42,776 --> 00:00:45,712
自动签名极大地增强易用性

6
00:00:45,812 --> 00:00:47,080
帮助你进行应用签名

7
00:00:48,615 --> 00:00:51,151
今天 我们更进一步

8
00:00:52,019 --> 00:00:55,722
将自动签名用于分发

9
00:00:56,557 --> 00:00:59,259
Xcode Build和Xcode Server

10
00:01:01,361 --> 00:01:03,931
那么 今天我们将讨论什么呢？

11
00:01:05,632 --> 00:01:07,935
首先 我要简要回顾

12
00:01:08,001 --> 00:01:10,871
签名基础知识
以及它如何在我们的平台上工作

13
00:01:11,939 --> 00:01:15,742
接下来 我将展示
如何设置Xcode Server

14
00:01:16,243 --> 00:01:17,611
以进行开发签名

15
00:01:17,678 --> 00:01:20,280
让你能够在设备上定期执行测试

16
00:01:21,748 --> 00:01:22,950
然后 我会介绍

17
00:01:23,016 --> 00:01:25,886
我们对手动签名
进行的一些重要更改

18
00:01:27,287 --> 00:01:30,457
毅太将会上台
为大家这些展示这些有价值的更改

19
00:01:30,524 --> 00:01:33,126
另外我们还对分发和
分发签名进行更改

20
00:01:34,261 --> 00:01:37,264
然后布兰特将会上台
为大家展示如何设置Xcode Server

21
00:01:37,331 --> 00:01:39,666
并且首次执行分发签名

22
00:01:41,802 --> 00:01:43,437
在我们深入探讨之前

23
00:01:43,504 --> 00:01:46,240
我想花点时间
来说明我们为什么要这样做

24
00:01:46,340 --> 00:01:47,341
我们为什么要进行代码签名

25
00:01:48,509 --> 00:01:51,845
答案很简单
代码签名会保护我们

26
00:01:52,646 --> 00:01:55,949
它保护用户
保护开发者

27
00:01:56,316 --> 00:01:59,486
我们所有人都是用户
我们都从App Store下载应用

28
00:01:59,553 --> 00:02:02,422
我们都知道
这些应用来自于编写程序的开发者

29
00:02:02,623 --> 00:02:03,624
因为它们使用代码签名

30
00:02:05,025 --> 00:02:07,694
我们从商店下载的每个应用

31
00:02:08,061 --> 00:02:10,597
我们都知道它们经过Apple的审批

32
00:02:11,131 --> 00:02:13,634
应用被允许
使用一些特殊系统服务

33
00:02:14,835 --> 00:02:18,305
我们允许它们
使用设备的安全和隐私服务

34
00:02:18,372 --> 00:02:19,540
因为它们使用代码签名

35
00:02:20,941 --> 00:02:22,176
签名是如何工作的？

36
00:02:22,776 --> 00:02:24,478
每个应用都有一个代码签名

37
00:02:24,945 --> 00:02:27,648
当应用运行时
系统检查一些项目

38
00:02:27,714 --> 00:02:30,317
它首先检查签名是否有效

39
00:02:30,851 --> 00:02:33,921
在原始开发者分发之后
是否经过撰改

40
00:02:35,122 --> 00:02:39,593
如果有效 将允许应用使用
特殊系统服务 比如应用群组

41
00:02:41,094 --> 00:02:44,665
签名还告诉我们
它是否用于本设备

42
00:02:44,731 --> 00:02:45,866
是否用于开发

43
00:02:46,066 --> 00:02:48,368
是否用于多个设备

44
00:02:48,435 --> 00:02:49,937
是否用于App Store

45
00:02:50,504 --> 00:02:52,773
代码签名指示
它可以运行在任何设备上

46
00:02:54,174 --> 00:02:59,179
在生成签名时
Xcode使用三个重要组件

47
00:02:59,580 --> 00:03:01,982
包括签名证书

48
00:03:03,016 --> 00:03:05,986
配置文件和授权

49
00:03:07,154 --> 00:03:09,423
我不会详细介绍

50
00:03:09,656 --> 00:03:10,958
它们是如何工作的

51
00:03:11,225 --> 00:03:14,695
我希望你们观看去年的演讲

52
00:03:14,895 --> 00:03:16,563
Xcode应用签名有哪些新特性

53
00:03:16,797 --> 00:03:19,700
我们将会详细论述
签名如何在我们的平台上工作

54
00:03:19,766 --> 00:03:21,502
如何配合Xcode 8工作

55
00:03:23,837 --> 00:03:27,741
我要说的是
收集所有这些资源

56
00:03:28,242 --> 00:03:31,311
是一项枯燥而且复杂的工作

57
00:03:31,879 --> 00:03:33,847
因此在Xcode 8中

58
00:03:33,947 --> 00:03:36,717
我们引入一个解决方案
来管理所有这些复杂问题

59
00:03:37,918 --> 00:03:38,819
自动签名

60
00:03:40,254 --> 00:03:42,322
当你启用自动托管签名时

61
00:03:42,389 --> 00:03:45,125
Xcode将自动创建应用ID

62
00:03:45,192 --> 00:03:48,562
将会创建证书
更新配置文件

63
00:03:48,795 --> 00:03:49,930
更新授权

64
00:03:49,997 --> 00:03:52,399
帮你完成所有繁琐的事情

65
00:03:52,733 --> 00:03:54,468
让你专注于你的开发工作

66
00:03:55,836 --> 00:03:58,272
启用自动签名是很好的做法

67
00:03:59,540 --> 00:04:02,976
我高兴地宣布
在Xcode 9中

68
00:04:03,477 --> 00:04:07,281
所有这些功能
都可以在Xcode Server中使用

69
00:04:08,682 --> 00:04:11,485
我们知道在一些情况下

70
00:04:11,552 --> 00:04:14,755
你需要直接操作签名配置

71
00:04:15,055 --> 00:04:18,692
为此我们在Xcode Server中
加入手动签名支持

72
00:04:21,228 --> 00:04:24,164
我希望你们知道

73
00:04:24,231 --> 00:04:27,401
Xcode Server是连续性集成服务
受到Xcode的大力支持

74
00:04:29,002 --> 00:04:31,138
现在它已经集成到Xcode之中

75
00:04:31,205 --> 00:04:33,373
不再需要安装Server程序

76
00:04:33,440 --> 00:04:36,243
如果你以前用过Xcode
将会十分方便

77
00:04:36,410 --> 00:04:39,313
使用连续集成将会让工作变得更简单

78
00:04:41,448 --> 00:04:45,352
Xcode Server让你能够
在模拟器和设备上

79
00:04:45,419 --> 00:04:47,888
非常轻松地设置测试

80
00:04:49,456 --> 00:04:52,459
现在 在设备上测试
需要代码签名

81
00:04:53,794 --> 00:04:55,362
我想解释

82
00:04:55,729 --> 00:04:58,565
代码签名如何融入
Xcode Server的大环境

83
00:05:00,133 --> 00:05:05,506
当你在Xcode中开发应用
你开发项目

84
00:05:05,806 --> 00:05:09,243
并将项目更新上传到远程存储库

85
00:05:10,244 --> 00:05:13,780
然后 你设置Xcode Server
从远程存储库调取数据

86
00:05:14,648 --> 00:05:16,917
构建你的应用
在设备上运行测试

87
00:05:17,985 --> 00:05:20,587
在设备上运行时
需要代码签名

88
00:05:22,022 --> 00:05:25,592
Xcode构建代码签名
使用这些重要组件

89
00:05:25,659 --> 00:05:28,395
配置文件
签名证书

90
00:05:28,462 --> 00:05:31,465
我们如何在Xcode Server上
完成这些工作呢？

91
00:05:32,566 --> 00:05:33,400
呃…

92
00:05:34,268 --> 00:05:37,704
好消息是若你想使用自动签名
启用目标

93
00:05:37,971 --> 00:05:39,306
将会如愿以偿

94
00:05:39,406 --> 00:05:43,076
Xcode Server
将自动创建证书

95
00:05:43,143 --> 00:05:44,845
更新配置文件

96
00:05:44,912 --> 00:05:48,615
注册设备
以执行签名

97
00:05:48,682 --> 00:05:50,017
这非常不错

98
00:05:51,451 --> 00:05:53,954
如果手动设置目标

99
00:05:55,022 --> 00:05:58,158
Xcode Server提供UI
让你从Mac管理员计算机

100
00:05:58,258 --> 00:05:59,893
发送任何证书

101
00:06:00,527 --> 00:06:03,897
到服务器
服务器将执行

102
00:06:03,964 --> 00:06:04,831
代码签名集成

103
00:06:05,432 --> 00:06:10,537
因此Xcode Server现支持
自动和手动签名

104
00:06:13,574 --> 00:06:16,443
现在Xcode Server
能够使用自动签名

105
00:06:16,510 --> 00:06:20,113
因为Xcode Server相当于你的团队成员

106
00:06:20,180 --> 00:06:22,216
如果你是团队代理或管理员

107
00:06:22,549 --> 00:06:24,051
可以这样设置Xcode Server

108
00:06:25,485 --> 00:06:29,089
现在 Xcode Server支持
使用双重身份验证

109
00:06:29,156 --> 00:06:30,624
通过Apple ID登录

110
00:06:32,326 --> 00:06:36,029
Xcode Server提供所有这些有用的功能

111
00:06:36,096 --> 00:06:38,665
因为Xcode Server在后台

112
00:06:38,732 --> 00:06:41,568
调用命令行工具Xcodebuild

113
00:06:42,536 --> 00:06:46,640
这意味着Xcodebuild
现在支持通过命令行

114
00:06:46,707 --> 00:06:49,376
自动修复签名
这是一个巨大的进步

115
00:06:50,577 --> 00:06:53,947
如果你使用第三方
持续集成服务

116
00:06:54,014 --> 00:06:56,683
你应该认真听讲
因为这意味着

117
00:06:57,317 --> 00:06:59,953
Xcodebuild现在能够
更新配置文件

118
00:07:00,020 --> 00:07:02,589
能够下载它们
可以创建证书

119
00:07:02,656 --> 00:07:06,193
UI中的所有工作
现在都可以使用命令行完成

120
00:07:13,500 --> 00:07:15,502
可以通过传递

121
00:07:15,569 --> 00:07:18,338
allowProvisioningUpdates标记
在Xcodebuild中启用此功能

122
00:07:19,473 --> 00:07:21,341
我们增加一些额外的自动化功能

123
00:07:21,408 --> 00:07:23,477
若你有一台设备
连接到你的Mac计算机

124
00:07:24,244 --> 00:07:27,514
你可以将它自动注册到你的团队
而不需要进行交互

125
00:07:27,581 --> 00:07:31,318
如果你传递这个allow
ProvisioningDeviceRegistration标记

126
00:07:32,352 --> 00:07:33,187
这很不错

127
00:07:35,255 --> 00:07:38,625
前面我说过
设置Xcode Server非常简单

128
00:07:38,692 --> 00:07:41,228
现在它已经内置在Xcode 9中

129
00:07:41,461 --> 00:07:44,398
让我们来看
如何设置Xcode Server

130
00:07:44,464 --> 00:07:47,401
以演示如何为服务器设置签名

131
00:07:48,569 --> 00:07:53,073
首先打开Xcode首选项

132
00:07:53,140 --> 00:07:56,076
转入右侧
有一个新标签页“Server and Bots”

133
00:07:56,276 --> 00:07:58,011
在这里可以启用Xcode Server

134
00:07:59,613 --> 00:08:02,349
接下来 打开账户窗格

135
00:08:03,016 --> 00:08:05,385
可以添加一些客户账户

136
00:08:05,652 --> 00:08:08,155
然后就可以看到服务器处于运行状态

137
00:08:10,190 --> 00:08:11,825
接下来 打开项目

138
00:08:11,892 --> 00:08:14,494
使用“Product”菜单
创建一个机器人

139
00:08:15,662 --> 00:08:17,130
然后在报告导航器中

140
00:08:17,197 --> 00:08:20,200
可以看到机器已经运行的所有集成

141
00:08:20,667 --> 00:08:22,469
可以看到所有服务器和机器人

142
00:08:22,669 --> 00:08:25,672
在每个集成上 能够看到
你的项目是否已经生成

143
00:08:26,607 --> 00:08:28,742
测试是否已经运行

144
00:08:28,809 --> 00:08:31,612
是否成功或失败
可以看到这些信息

145
00:08:34,280 --> 00:08:36,350
当你设置Xcode Server时

146
00:08:36,482 --> 00:08:39,385
有一个新标签页 签名标签页
看上去是这样的

147
00:08:40,287 --> 00:08:44,024
这里很多选项
用于设置Xcode Server

148
00:08:44,091 --> 00:08:46,627
以支持使用自动签名

149
00:08:47,027 --> 00:08:50,931
第一个复选框“允许Xcode Server
管理我的证书和配置文件”

150
00:08:50,998 --> 00:08:54,134
这将让Xcode Server
能够将自动签名

151
00:08:54,368 --> 00:08:56,236
用于它所启用的
任何目标

152
00:08:57,037 --> 00:08:59,773
可以通过将Xcode Server添加
到你的团队

153
00:08:59,840 --> 00:09:01,508
再次授权
进行自动签名

154
00:09:02,910 --> 00:09:04,378
还有另外一个复选框

155
00:09:04,478 --> 00:09:07,181
“自动添加缺失设备到
我的开发者团队”

156
00:09:07,247 --> 00:09:10,784
这将自动注册
任何连接到你的Mac计算机的设备

157
00:09:11,418 --> 00:09:12,419
而不需要进行交互

158
00:09:12,486 --> 00:09:15,789
然后UI中的两个复选框
镜像显示这些标记

159
00:09:16,056 --> 00:09:17,291
allowProvisioningUpdates

160
00:09:17,357 --> 00:09:19,193
和allow
ProvisioningDeviceRegistration

161
00:09:19,259 --> 00:09:20,427
用于Xcodebuild

162
00:09:21,828 --> 00:09:22,663
我已经说了很多

163
00:09:22,863 --> 00:09:24,298
为什么不演示其工作过程呢？

164
00:09:24,364 --> 00:09:26,333
（演示）

165
00:09:29,603 --> 00:09:31,471
好了…

166
00:09:32,539 --> 00:09:35,676
我已经打开Xcode
调出我的项目Chocolate Chip

167
00:09:37,110 --> 00:09:40,414
我已经设置服务器机器人

168
00:09:40,714 --> 00:09:43,417
以便在模拟器上执行集成

169
00:09:43,951 --> 00:09:46,119
我刚购买这台新设备

170
00:09:46,186 --> 00:09:48,388
我在设备上运行测试

171
00:09:48,889 --> 00:09:51,725
为此 我需要启用Xcode Server

172
00:09:51,792 --> 00:09:53,360
以使用自动签名

173
00:09:53,961 --> 00:09:57,531
第一步是点击报告导航器

174
00:09:57,598 --> 00:10:00,501
在这里你可以看到
我创建的服务器 机器人

175
00:10:00,701 --> 00:10:02,336
运行的集成

176
00:10:03,136 --> 00:10:07,140
我进行控制点击
调出机器人编辑器

177
00:10:08,075 --> 00:10:10,477
第一步是点击“设备”标签页

178
00:10:10,544 --> 00:10:12,913
可以看到
我已经设置Xcode Server

179
00:10:13,247 --> 00:10:16,049
以在iPhone SE模拟器上运行测试

180
00:10:16,250 --> 00:10:17,651
我要进行更改

181
00:10:17,718 --> 00:10:20,220
以便在连接到此Mac计算机的
的任何设备上运行

182
00:10:21,188 --> 00:10:25,025
接下来 在签名标签页
可以看到我们所说的内容

183
00:10:25,692 --> 00:10:30,063
我允许Xcode Server
创建证书和配置文件

184
00:10:30,364 --> 00:10:33,267
将Xcode Server添加到我的团队

185
00:10:34,067 --> 00:10:35,869
允许Xcode Server

186
00:10:35,936 --> 00:10:38,405
自动注册
连接的任何设备

187
00:10:38,472 --> 00:10:39,406
包括这台设备

188
00:10:40,574 --> 00:10:44,044
然后 我们准备在这台设备上进行测试

189
00:10:44,178 --> 00:10:46,747
我要手动启动一个集成

190
00:10:48,015 --> 00:10:49,149
Xcode Server将会

191
00:10:49,216 --> 00:10:53,687
从存储库下载项目

192
00:10:53,754 --> 00:10:57,157
生成应用 创建证书

193
00:10:57,224 --> 00:11:00,561
注册我的设备
添加设备到配置文件中

194
00:11:00,627 --> 00:11:02,496
下载配置文件 进行签名

195
00:11:03,197 --> 00:11:05,299
让我们能够在这台设备上运行测试

196
00:11:05,999 --> 00:11:07,167
通常我会说

197
00:11:07,668 --> 00:11:09,603
“不要理会机器人
那没有什么意思”

198
00:11:09,670 --> 00:11:12,606
一切可以自己完成

199
00:11:12,906 --> 00:11:17,110
用不了多长时间
任务就会完成

200
00:11:20,681 --> 00:11:23,483
然后我们看到
两个测试都通过了

201
00:11:23,717 --> 00:11:24,785
而我却没有费什么力气

202
00:11:30,691 --> 00:11:34,361
可以看到
你可以设置Xcode Server

203
00:11:35,128 --> 00:11:37,297
自动执行开发签名

204
00:11:37,598 --> 00:11:39,833
让你能在设备上运行测试

205
00:11:42,369 --> 00:11:45,639
自动签名真不错

206
00:11:45,706 --> 00:11:50,143
你不需要管理所有这些资产

207
00:11:50,210 --> 00:11:52,846
让你专心编码工作

208
00:11:53,780 --> 00:11:55,549
我个人喜欢设置自动签名

209
00:11:55,816 --> 00:11:57,084
希望你们也这样做

210
00:11:58,252 --> 00:12:00,621
但是 在一些情况下

211
00:12:00,687 --> 00:12:03,156
你需要直接

212
00:12:03,223 --> 00:12:04,558
操作签名配置

213
00:12:04,725 --> 00:12:08,228
为此我们提供手动签名
现在我们对它进行改进

214
00:12:10,264 --> 00:12:14,234
我们对证书表单中的

215
00:12:14,701 --> 00:12:16,136
账户首选项进行改进

216
00:12:16,737 --> 00:12:18,872
现在 此表将告诉你

217
00:12:19,006 --> 00:12:23,677
你在Mac计算机和你拥有的
其它Mac计算机上创建了哪些证书

218
00:12:25,279 --> 00:12:27,147
上面是开发者证书

219
00:12:27,247 --> 00:12:31,118
在下面部分 可以看到所有分发证书

220
00:12:31,485 --> 00:12:33,453
它们是你的团队成员创建的

221
00:12:34,054 --> 00:12:35,556
无论它们是否在你的计算机上

222
00:12:35,856 --> 00:12:37,424
我们还改进外观

223
00:12:37,491 --> 00:12:38,759
现在你可以看到…

224
00:12:39,359 --> 00:12:42,629
证书缺少私钥…
或者已经作废

225
00:12:42,829 --> 00:12:45,032
甚至可以包含证书的创建者

226
00:12:45,098 --> 00:12:47,734
你可以在表单中
发送电子邮件给

227
00:12:47,801 --> 00:12:50,337
证书的创建者
请求他们允许你使用证书

228
00:12:56,577 --> 00:12:58,879
在项目编辑器中
当你使用手动模式时

229
00:12:58,946 --> 00:13:00,814
可以自己选择配置文件

230
00:13:00,914 --> 00:13:03,750
我们增加一个新菜单项目
“下载配置文件”

231
00:13:03,817 --> 00:13:05,686
这会显示一个表单
看起来像这样

232
00:13:06,253 --> 00:13:07,788
可以看到 在左侧

233
00:13:07,855 --> 00:13:12,025
是我在门户上
创建的可使用配置文件

234
00:13:12,426 --> 00:13:15,395
这些配置文件可用于我的目标

235
00:13:15,929 --> 00:13:19,533
我选择一个配置文件
可以看到该文件的详情视图

236
00:13:19,600 --> 00:13:21,568
查看它如何与你的目标进行比较

237
00:13:22,135 --> 00:13:23,770
功能是否匹配

238
00:13:23,971 --> 00:13:25,305
以及设备是否已经连接

239
00:13:25,372 --> 00:13:27,307
可以看到
设备是否在配置文件之中

240
00:13:27,541 --> 00:13:30,310
这是重要的改进
便于找到正确的配置文件

241
00:13:30,577 --> 00:13:32,446
然后选中并使用它进行签名

242
00:13:32,880 --> 00:13:35,749
如果已经选择一个配置文件

243
00:13:36,783 --> 00:13:38,919
但是没有本地安装在计算机上

244
00:13:38,986 --> 00:13:41,822
Xcode将会为你下载配置文件

245
00:13:42,623 --> 00:13:43,790
如果你知道它是正确的

246
00:13:44,291 --> 00:13:45,792
我们知道你仍处于手动操作状态

247
00:13:45,859 --> 00:13:48,529
我们并不会访问
你的项目状态或门户状态

248
00:13:48,595 --> 00:13:50,097
我们很清楚这种区别

249
00:13:50,163 --> 00:13:52,199
这真的非常方便

250
00:13:53,834 --> 00:13:57,371
Xcode Server支持手动操作

251
00:13:58,205 --> 00:14:00,674
在签名标签页下方

252
00:14:00,741 --> 00:14:02,376
有一个“证书和配置文件”标签页

253
00:14:02,442 --> 00:14:05,646
可以看到安装在本地计算机上的

254
00:14:05,712 --> 00:14:07,781
证书和配置文件列表

255
00:14:07,881 --> 00:14:11,018
可以将它们发送到服务器
以执行手动签名

256
00:14:11,251 --> 00:14:15,155
当你使用手动签名时

257
00:14:15,222 --> 00:14:19,393
建议使用“常规”标签页
来更改签名设置

258
00:14:20,160 --> 00:14:23,297
如果使用自动签名

259
00:14:23,430 --> 00:14:26,466
或者不想使用UI

260
00:14:27,401 --> 00:14:30,170
则可以使用内嵌设置

261
00:14:30,404 --> 00:14:33,440
在Xcode 8中 我们推出
Development_Team

262
00:14:33,807 --> 00:14:35,442
用于设置团队标识符

263
00:14:36,610 --> 00:14:40,547
Provisioning_Profile_Specifier
以便按名称设置配置文件

264
00:14:41,381 --> 00:14:44,885
并使用Code_Sign_Identity
设置证书

265
00:14:46,353 --> 00:14:52,326
在Xcode 9中 我们引入
新的生成设置Code_Sign_Style

266
00:14:53,293 --> 00:14:58,966
可以使用Code_Sign_Style
在目标或生成配置级别

267
00:14:59,399 --> 00:15:01,735
将样式设置为自动或手动

268
00:15:02,903 --> 00:15:06,073
我们认为很有意义
但是这主要用于高级用例

269
00:15:06,139 --> 00:15:09,710
大多数情况下 你应该能够
设置你的整个目标

270
00:15:09,776 --> 00:15:11,445
请将它设置为自动

271
00:15:13,213 --> 00:15:17,017
刚才所讲的内部全部是关于开发签名的

272
00:15:17,451 --> 00:15:18,986
我们对分发和分发签名

273
00:15:19,052 --> 00:15:21,288
也进行大量的改进

274
00:15:21,688 --> 00:15:22,556
关于这一部分

275
00:15:22,656 --> 00:15:26,260
请欢迎我的朋友毅太罗姆

276
00:15:34,067 --> 00:15:36,136
谢谢 克里斯 大家下午好

277
00:15:36,870 --> 00:15:39,206
克里斯为我们介绍了

278
00:15:39,473 --> 00:15:41,074
开发签名方面的改进

279
00:15:41,375 --> 00:15:44,678
接下来我想谈谈分发

280
00:15:45,779 --> 00:15:47,648
当你准备与其它人分享你的应用时

281
00:15:47,848 --> 00:15:50,317
首先要是做的是生成一个存档

282
00:15:51,485 --> 00:15:54,521
存档是应用的特殊版本

283
00:15:55,055 --> 00:15:56,890
我们建议对它进行开发签名

284
00:15:57,057 --> 00:15:58,725
事实上 这是默认设置

285
00:15:59,293 --> 00:16:01,261
我们建议这样做的原因是

286
00:16:01,395 --> 00:16:04,631
进行签名之后团队中的任何开发者
可以轻松地生成存档

287
00:16:04,698 --> 00:16:07,000
并与其它人分享
而不需要访问

288
00:16:07,067 --> 00:16:09,703
任何专用分发签名证书

289
00:16:11,839 --> 00:16:14,942
存档包含应用的机器代码和Bitcode

290
00:16:15,008 --> 00:16:18,912
以及调试符号
全部捆绑在一起

291
00:16:19,279 --> 00:16:20,547
生成存档之后

292
00:16:20,914 --> 00:16:24,184
可以使用Xcode的组织器窗口
生成一个IPA

293
00:16:24,251 --> 00:16:25,752
然后上传到App Store

294
00:16:27,020 --> 00:16:28,589
当你生成IPA时

295
00:16:28,755 --> 00:16:33,160
Xcode将根据App Store要求
对你的应用进行分发签名

296
00:16:33,427 --> 00:16:36,597
你可以对存档进行开发签名

297
00:16:36,663 --> 00:16:39,666
因为当你分发你的应用时
Xcode可以对你的应用进行签名

298
00:16:40,534 --> 00:16:43,537
其实可以通过多种方式分发你的存档

299
00:16:44,071 --> 00:16:46,273
可以进行专门分发签名

300
00:16:46,607 --> 00:16:48,942
如果你想与团队成员中的其它人员

301
00:16:49,009 --> 00:16:50,277
或QA工程师分享应用

302
00:16:50,744 --> 00:16:53,280
或者如果你是企业开发者计划成员

303
00:16:53,547 --> 00:16:54,815
可以进行企业签名

304
00:16:55,415 --> 00:16:57,818
与其它公司员工分享应用

305
00:16:59,486 --> 00:17:01,588
现在 除了这种分发方法

306
00:17:01,855 --> 00:17:03,390
当你分发应用时

307
00:17:03,457 --> 00:17:04,558
还有许多其它选择

308
00:17:05,492 --> 00:17:06,859
你需要选择签名方式

309
00:17:06,926 --> 00:17:09,363
使用哪些配置文件
使用哪些授权

310
00:17:09,863 --> 00:17:13,901
如果使用Bitcode、应用瘦身
或按需资源

311
00:17:14,101 --> 00:17:16,737
那么你需要决定
如何处理这些特性

312
00:17:16,803 --> 00:17:18,338
如果你上传到App Store

313
00:17:18,405 --> 00:17:19,239
那么你需要决定

314
00:17:19,306 --> 00:17:20,907
是否包含符号

315
00:17:21,942 --> 00:17:23,577
这可能变得十分复杂

316
00:17:24,744 --> 00:17:26,512
我很高兴地宣布 在Xcode 9中

317
00:17:26,579 --> 00:17:29,316
我们对分发流程进行重大改进

318
00:17:29,449 --> 00:17:32,486
让应用分享变得比以前更加容易

319
00:17:33,053 --> 00:17:36,056
同时让你更好地控制流程

320
00:17:36,690 --> 00:17:39,726
首先 我们添加自动签名

321
00:17:42,095 --> 00:17:44,164
与开发过程中一样

322
00:17:44,231 --> 00:17:47,367
Xcode将会为你处理分发签名细节

323
00:17:47,634 --> 00:17:49,336
让你专注于其它任务

324
00:17:50,103 --> 00:17:51,738
除了自动签名之外

325
00:17:52,573 --> 00:17:54,007
如果你们需要完全的控制

326
00:17:54,074 --> 00:17:57,010
我们还将手动签名
添加到分发流程

327
00:17:57,911 --> 00:18:00,180
现在 你可以创建自己的分发配置文件

328
00:18:00,247 --> 00:18:01,882
并告诉Xcode应使用哪些配置文件

329
00:18:02,082 --> 00:18:05,385
但是Xcode将不会创建
或修改任何配置文件

330
00:18:08,388 --> 00:18:10,257
除了自动和手动签名之外

331
00:18:10,324 --> 00:18:11,925
我们还进行许多改进

332
00:18:12,125 --> 00:18:14,161
我们简化分发流程

333
00:18:14,328 --> 00:18:16,296
例如 Xcode不会询问

334
00:18:16,363 --> 00:18:18,298
你想使用哪个开发团队

335
00:18:18,565 --> 00:18:19,900
因为它已经知道答案

336
00:18:26,440 --> 00:18:28,876
我们还改进错误显示

337
00:18:29,076 --> 00:18:30,978
当你遇到错误时

338
00:18:31,044 --> 00:18:33,714
更容易发现错误
和解决错误

339
00:18:35,549 --> 00:18:39,419
我们还增强导出功能
现在Xcode 9中

340
00:18:39,486 --> 00:18:41,989
当你上传应用到App Store后

341
00:18:42,189 --> 00:18:43,857
可以保存IPA副本

342
00:18:43,924 --> 00:18:45,826
便于以后使用它

343
00:18:46,860 --> 00:18:50,631
最后 我们增强Xcodebuild中
的命令行支持

344
00:18:50,797 --> 00:18:53,166
让你可以利用

345
00:18:53,333 --> 00:18:54,468
所有这些自动化新功能的好处

346
00:18:56,136 --> 00:18:58,405
让我们更详细探讨自动签名

347
00:18:59,206 --> 00:19:01,275
其工作原理类似于开发签名

348
00:19:01,475 --> 00:19:05,045
Xcode将创建
Xcode托管分发配置文件

349
00:19:05,312 --> 00:19:08,215
有多个配置文件
它们完全受到Xcode的控制

350
00:19:09,449 --> 00:19:10,484
Xcode只会将这些配置文件

351
00:19:10,551 --> 00:19:13,187
用于自动分发签名

352
00:19:13,520 --> 00:19:16,557
它不会访问或使用
任何手动创建的配置文件

353
00:19:17,858 --> 00:19:20,027
另外 Xcode让创建和分享

354
00:19:20,093 --> 00:19:21,428
分发证书变得更加简单

355
00:19:21,728 --> 00:19:23,630
这些证书不同于开发证书

356
00:19:23,697 --> 00:19:25,899
因为签名资产归它们的团队所有

357
00:19:26,099 --> 00:19:29,503
很重要的一点是 你应该知道
应该创建并保存证书

358
00:19:29,870 --> 00:19:32,372
让你能够在以后重新安装
或者与其他人分享

359
00:19:32,940 --> 00:19:34,908
最后但非不重要的是

360
00:19:35,242 --> 00:19:39,046
对于在Xcode9中
认真进行签名设置的开发者来说

361
00:19:39,112 --> 00:19:42,015
Xcode将不会调用分发证书

362
00:19:45,719 --> 00:19:47,621
对此我们感到满意

363
00:19:47,888 --> 00:19:50,757
你们不必担心团队中的任何企业成员

364
00:19:50,824 --> 00:19:53,627
通过Xcode破坏你的精心设置

365
00:19:55,762 --> 00:19:57,898
这是一个错误显示改进例子

366
00:19:57,965 --> 00:20:01,168
这是一种常见而且可能产生困惑的情况

367
00:20:01,435 --> 00:20:04,371
一些团队成员已经创建分发证书

368
00:20:04,671 --> 00:20:06,206
但是你不必拥有证书

369
00:20:06,573 --> 00:20:09,109
更常见的情况是
你没有证书的私钥

370
00:20:09,776 --> 00:20:12,946
现在 Xcode 9告诉你
谁创建了这些证书

371
00:20:13,213 --> 00:20:14,982
让你能够联系他们

372
00:20:15,282 --> 00:20:17,885
让你获得需要的信息
来完成工作流程

373
00:20:18,785 --> 00:20:20,654
这只是一个例子
还有很多的例子

374
00:20:20,787 --> 00:20:23,357
在整个分发流程中
我们改进了错误处理机制

375
00:20:25,659 --> 00:20:27,227
前面我说过

376
00:20:27,794 --> 00:20:29,162
我们增强导出功能

377
00:20:29,463 --> 00:20:31,765
现在上传应用到App Store后

378
00:20:31,832 --> 00:20:34,067
很容易保存IPA副本

379
00:20:34,168 --> 00:20:35,235
还有很多其它改进

380
00:20:35,736 --> 00:20:37,638
我们为你提供
DistributionSummary.plist

381
00:20:37,704 --> 00:20:41,108
与收条一样
它显示IPA中的所有内容

382
00:20:41,275 --> 00:20:44,311
Xcode如何重新签名
有哪些授权等等

383
00:20:45,712 --> 00:20:48,215
另外还有Packaging.log
它类似于Build.log

384
00:20:48,415 --> 00:20:51,985
逐步显示
将你的存档转化为IPA时

385
00:20:52,119 --> 00:20:55,088
Xcode发出的所有命令

386
00:20:56,290 --> 00:20:59,159
你会获得一个ExportOptions.plist

387
00:20:59,960 --> 00:21:02,696
它值得说道一番

388
00:21:03,430 --> 00:21:05,566
ExportOptions.plist类似于收条

389
00:21:05,866 --> 00:21:09,770
它描述你希望
如何将存档转化为IPA

390
00:21:11,205 --> 00:21:13,707
如果你想要自动执行IPA生成流程

391
00:21:13,774 --> 00:21:15,576
你需要调用Xcodebuild

392
00:21:15,642 --> 00:21:18,145
为它提供一个ExportOptions.plist

393
00:21:18,512 --> 00:21:20,848
在Xcode 9中
很容易创建plist

394
00:21:21,081 --> 00:21:23,817
因为分发流程将会自动为你生成

395
00:21:24,084 --> 00:21:26,520
你再也不必手动编辑这些plist

396
00:21:27,721 --> 00:21:28,889
这里有一个例子

397
00:21:29,857 --> 00:21:31,825
这是一个十分简单的
ExportOptions.plist

398
00:21:31,892 --> 00:21:34,962
可以看到
我已经设置自动签名

399
00:21:35,128 --> 00:21:36,864
我要导出以发送给App Store

400
00:21:37,698 --> 00:21:39,466
它是上传符号中的最后密钥

401
00:21:39,533 --> 00:21:42,369
我不想包含它
因为默认设置为“是”

402
00:21:42,836 --> 00:21:46,039
在这些文件中
可以指定很多的选项

403
00:21:46,340 --> 00:21:49,309
可以在终端调用Xcodebuild-help

404
00:21:49,543 --> 00:21:52,279
以查看在ExportOptions.plist中
包含的所有内容

405
00:21:52,479 --> 00:21:54,615
大多数选项都有合理的默认设置

406
00:21:56,049 --> 00:21:56,984
如果要使用此功能

407
00:21:57,050 --> 00:21:59,987
你只需要
调用Xcodebuild-exportArchive

408
00:22:00,320 --> 00:22:03,390
传递路径给你的存档
并传递路径给ExportOptions.plist

409
00:22:03,957 --> 00:22:06,426
Xcodebuild将会为你生成一个IPA

410
00:22:07,828 --> 00:22:08,829
还有另外一件事情

411
00:22:08,896 --> 00:22:10,631
前面克里斯讲过

412
00:22:11,064 --> 00:22:14,568
我们为Xcodebuild添加一个标记
其名称为allowProvisioningUpdates

413
00:22:14,768 --> 00:22:16,336
在这里 你可以使用它

414
00:22:16,470 --> 00:22:18,805
这样 Xcodebuild
将会自动生成

415
00:22:19,006 --> 00:22:21,108
分发配置文件

416
00:22:21,375 --> 00:22:24,011
提供生成IPA所需要的全部内容

417
00:22:25,646 --> 00:22:28,248
让我们来演示新分发流程

418
00:22:28,315 --> 00:22:29,917
（演示）

419
00:22:35,589 --> 00:22:37,524
这是我们开发的

420
00:22:37,591 --> 00:22:39,159
Chocolate Chip程序

421
00:22:39,826 --> 00:22:42,563
你可以看到
两个测试套件已经通过

422
00:22:42,629 --> 00:22:44,631
我们准备将它们上传到App Store

423
00:22:45,399 --> 00:22:47,467
让我开始操作
点击“生产”

424
00:22:48,335 --> 00:22:49,536
创建一个存档

425
00:22:50,737 --> 00:22:52,840
Xcode准备生成发布版本

426
00:22:53,140 --> 00:22:55,742
进行捆绑
在组织器窗口中完成之后

427
00:22:55,809 --> 00:22:58,111
为我显示一个存档

428
00:22:59,179 --> 00:23:01,682
然后我可以方便地上传到App Store

429
00:23:01,748 --> 00:23:05,519
只需要点击这个小蓝色按钮即可

430
00:23:06,587 --> 00:23:07,421
当我点击之后

431
00:23:07,487 --> 00:23:09,189
分发流程开始执行

432
00:23:09,957 --> 00:23:13,727
Xcode开始分析存档中的内容

433
00:23:13,994 --> 00:23:15,829
包括我的应用的签名方式

434
00:23:15,896 --> 00:23:18,565
让Xcode知道我使用哪个开发团队

435
00:23:18,832 --> 00:23:21,335
它读取存档应用的签名

436
00:23:22,369 --> 00:23:25,506
并确定在下一屏幕显示哪些选项

437
00:23:26,073 --> 00:23:29,476
根据你的存档中的内容
以及你选择的分发方法

438
00:23:29,643 --> 00:23:31,778
显示的选项有所不同

439
00:23:32,045 --> 00:23:34,181
如果我选择专门分发

440
00:23:34,581 --> 00:23:36,517
这里我看到一些不同的选项

441
00:23:37,484 --> 00:23:41,021
在本例中 有一个Bitcode选项
因为我应用包含bitcode

442
00:23:41,722 --> 00:23:45,926
另外还有一个
新Strip Swift Symbols选项

443
00:23:46,860 --> 00:23:49,663
它允许App Store

444
00:23:49,830 --> 00:23:51,465
从应用中的Swift标准库中

445
00:23:51,565 --> 00:23:53,634
提取Swift符号

446
00:23:54,168 --> 00:23:55,402
这将会极大地减少

447
00:23:55,469 --> 00:23:57,638
用户使用应用时的数据下载量

448
00:23:57,938 --> 00:23:59,006
因此我要启用这个选项

449
00:24:00,007 --> 00:24:02,009
另外还有一个上传符号

450
00:24:02,409 --> 00:24:05,412
允许我从Apple接受
符号标注崩溃报告

451
00:24:05,479 --> 00:24:07,748
我也会启用它
然后点击“下一步”

452
00:24:09,082 --> 00:24:11,618
下一步 我选择如何重新签名我的应用

453
00:24:12,119 --> 00:24:14,821
后面我将会详细讨论手动签名

454
00:24:15,088 --> 00:24:16,523
现在 我们仍然使用自动签名

455
00:24:17,658 --> 00:24:20,160
Xcode开始与开发者网站对话

456
00:24:20,294 --> 00:24:23,096
确定如何重新签名我的应用

457
00:24:23,564 --> 00:24:26,633
首先 Xcode查找分发签名证书

458
00:24:27,100 --> 00:24:29,670
在本例中 我的团队实际上
还没有创建证书

459
00:24:30,237 --> 00:24:33,807
因此Xcode告知我这一情况
并询问我是否想要创建证书

460
00:24:34,441 --> 00:24:36,476
Xcode不会在后台
创建证书

461
00:24:36,543 --> 00:24:39,279
我完全知道
我将拥有一个分发证书

462
00:24:39,880 --> 00:24:42,349
我需要做的事情是
为Xcode提供权限 然后点击“下一步”

463
00:24:42,783 --> 00:24:44,017
然后Xcode将生成证书

464
00:24:44,785 --> 00:24:48,555
然后 Xcode将询问我
是否导出证书

465
00:24:48,822 --> 00:24:50,591
前面我说过
导出证书很重要

466
00:24:50,691 --> 00:24:52,960
因为这些是团队共有资产

467
00:24:53,093 --> 00:24:56,330
团队中的其他人可能
也需要进行分发签名

468
00:24:56,563 --> 00:24:58,899
以后我也可能要重新安装证书

469
00:24:59,132 --> 00:25:01,902
因此我们强烈建议导出证书副本

470
00:25:02,503 --> 00:25:05,005
由于这是一个演示
因此我点击“下一步”

471
00:25:06,507 --> 00:25:08,742
Xcode将会继续
与门户对话

472
00:25:08,942 --> 00:25:11,445
生成我的分发配置文件

473
00:25:11,912 --> 00:25:14,882
我允许代码签名
使用我新创建的签名证书

474
00:25:14,948 --> 00:25:17,150
这是一个实时过程

475
00:25:18,785 --> 00:25:19,786
Xcode完成这些工作之后

476
00:25:19,853 --> 00:25:22,623
显示所创建的IPA的详细信息

477
00:25:23,090 --> 00:25:26,393
我可以看到我的IPA中的所有内容
包括我的框架

478
00:25:26,760 --> 00:25:29,429
应用扩展
以及我的启动应用

479
00:25:29,496 --> 00:25:30,898
可以查看签名方式

480
00:25:31,164 --> 00:25:33,233
再次确认授权是否正确

481
00:25:33,834 --> 00:25:37,037
确保在上传到App Store之前

482
00:25:37,104 --> 00:25:39,306
我的应用没有错误

483
00:25:40,374 --> 00:25:42,776
在确定没有错误之后
我点击“上传”

484
00:25:43,010 --> 00:25:44,912
Xcode将我的应用上传到商店

485
00:25:45,579 --> 00:25:47,915
在过去 这些工作完成后

486
00:25:48,615 --> 00:25:50,617
Xcode中的流程就结束了

487
00:25:51,385 --> 00:25:54,488
但是现在还有另外一件事情
在这里 我可以导出

488
00:25:55,756 --> 00:25:56,957
当我选择“导出”

489
00:25:58,325 --> 00:25:59,760
并保存到桌面时

490
00:26:01,595 --> 00:26:06,633
Xcode将生成一个新目录
保存我的IPA

491
00:26:06,934 --> 00:26:08,435
以及所有其它文件

492
00:26:08,502 --> 00:26:11,171
包括前面提到的ExportOptions.plist

493
00:26:13,640 --> 00:26:17,711
这就是Xcode 9中
使用自动签名的新流程

494
00:26:18,745 --> 00:26:20,681
现在让我们来看手动签名

495
00:26:23,684 --> 00:26:26,587
手动签名的流程也类似于开发阶段

496
00:26:27,254 --> 00:26:30,390
你或团队中的人员
创建配置文件

497
00:26:30,691 --> 00:26:34,027
然后在Xcode分发流程中
你可以选择它们

498
00:26:35,162 --> 00:26:38,932
Xcode不会创建或修改
任何手动配置文件

499
00:26:38,999 --> 00:26:40,200
一切都在你的控制之中

500
00:26:42,135 --> 00:26:43,971
这与Xcodebuild完全兼容

501
00:26:44,171 --> 00:26:47,074
如果你使用手动签名

502
00:26:47,140 --> 00:26:48,575
你可以自动创建IPA

503
00:26:48,742 --> 00:26:52,279
但是请注意 如果你在生成存档时
对存档进行手动签名

504
00:26:52,479 --> 00:26:54,882
在分发时也必须手动签名

505
00:26:56,083 --> 00:26:57,451
如何使用手动签名？

506
00:26:58,886 --> 00:27:01,455
这是刚才的屏幕内容

507
00:27:01,755 --> 00:27:03,624
如果选择手动签名 点击“下一步”

508
00:27:04,658 --> 00:27:06,360
然后会进入这个界面

509
00:27:06,693 --> 00:27:09,663
这非常类似于
Xcode的项目编辑器中的

510
00:27:09,730 --> 00:27:11,899
“常规”选项页中的签名UI

511
00:27:12,432 --> 00:27:14,768
可以选择想要使用的分发证书

512
00:27:15,102 --> 00:27:18,005
和应用中每个项目的配置文件

513
00:27:19,306 --> 00:27:21,041
打开这些弹出菜单时

514
00:27:21,542 --> 00:27:23,977
可以看到配置文件
包括合格或不合格的

515
00:27:24,044 --> 00:27:27,481
在分发流程中
可以直接从门户

516
00:27:27,748 --> 00:27:29,650
导入或下载配置文件

517
00:27:30,651 --> 00:27:32,586
如果选择不合格配置文件

518
00:27:32,753 --> 00:27:35,055
将会看到与该选择相关的问题

519
00:27:35,255 --> 00:27:36,690
位于你的选择的正下方

520
00:27:37,624 --> 00:27:40,260
选择有效的配置文件之后

521
00:27:40,327 --> 00:27:42,496
可以点击“下一步”
继续工作流程

522
00:27:44,598 --> 00:27:47,968
前面我说过 此流程
完全兼容Xcodebuild

523
00:27:48,035 --> 00:27:50,671
你需要做的是
在你的ExportOptions.plist中

524
00:27:50,737 --> 00:27:52,306
指定一些附加密钥

525
00:27:52,739 --> 00:27:55,776
这里可以看到
我将签名方式设置为手动

526
00:27:56,543 --> 00:27:59,546
我已经提供一个配置文件条目

527
00:27:59,746 --> 00:28:01,315
按捆绑包标识符

528
00:28:01,615 --> 00:28:04,384
列出我的应用中的所有项目
和我想要使用的所有配置文件

529
00:28:04,751 --> 00:28:07,187
现在 我已经设置自动流程

530
00:28:09,189 --> 00:28:11,491
这就是Xcode 9中的新分发流程

531
00:28:11,658 --> 00:28:13,060
你们肯定会喜欢这个特性

532
00:28:13,427 --> 00:28:15,295
现在我想邀请布兰特上台

533
00:28:15,362 --> 00:28:17,931
为大家介绍
Xcode Server中的分发签名

534
00:28:23,504 --> 00:28:26,206
谢谢大家
很高兴来到这里

535
00:28:26,306 --> 00:28:28,509
这是我们首次公开展示

536
00:28:28,709 --> 00:28:31,178
如何使用Xcode Server

537
00:28:31,645 --> 00:28:35,282
自动创建分发签名IPA

538
00:28:35,349 --> 00:28:37,951
这是长期以来缺失的功能

539
00:28:38,552 --> 00:28:40,521
我们最终实现了这个功能
这真的很不错

540
00:28:40,921 --> 00:28:43,423
我们是如何做到的？

541
00:28:43,924 --> 00:28:45,592
在Xcode 8和Xcode 9上

542
00:28:45,659 --> 00:28:48,428
我们在Xcode中引入
新自动签名流程

543
00:28:49,029 --> 00:28:51,398
然后将它加入到Xcode Server

544
00:28:51,899 --> 00:28:54,334
同样地
所有分发流程

545
00:28:54,401 --> 00:28:58,906
和底层技术
都从Xcode移植到Xcode Server

546
00:28:59,139 --> 00:29:01,875
现在我们有自动签名
分发

547
00:29:01,975 --> 00:29:02,976
还有Xcode Server

548
00:29:03,110 --> 00:29:06,480
我们开发高效率的开发和分发签名流程

549
00:29:09,082 --> 00:29:10,050
所有这些是如何运作的？

550
00:29:10,217 --> 00:29:13,420
克里斯展示了这张幻灯片

551
00:29:13,620 --> 00:29:16,857
我们必须了解
Xcode Server如何完成这些工作

552
00:29:17,558 --> 00:29:20,427
为了对存档进行签名

553
00:29:20,928 --> 00:29:23,297
并且创建IPA以用于分发

554
00:29:23,597 --> 00:29:26,900
Xcode Server需要一些专用资源
这与开发签名相同

555
00:29:27,134 --> 00:29:30,304
它需要签名证书
需要配置文件

556
00:29:30,771 --> 00:29:33,207
幸运的是 我们进行简化

557
00:29:33,607 --> 00:29:34,808
如果你允许Xcode Server

558
00:29:34,875 --> 00:29:37,811
与开发者门户通信

559
00:29:38,712 --> 00:29:40,147
它可以为你获得这些资源

560
00:29:40,214 --> 00:29:42,549
自动获取配置文件

561
00:29:43,283 --> 00:29:44,518
但是它不能获取

562
00:29:44,585 --> 00:29:46,920
分发签名证书

563
00:29:47,487 --> 00:29:49,857
这并不是很重要

564
00:29:49,990 --> 00:29:51,391
因为你可以很方便地与服务器共享证书

565
00:29:51,859 --> 00:29:55,095
在Xcode Server获取所有这些资产后

566
00:29:55,395 --> 00:29:58,232
可以生成存档
然后将存档转化为IPA

567
00:29:58,465 --> 00:30:02,536
以分发到App Store

568
00:30:06,240 --> 00:30:07,908
那么 你需要做什么？

569
00:30:08,342 --> 00:30:10,844
你需要复制
分发证书到服务器

570
00:30:11,178 --> 00:30:14,515
需要确保
自动签名已经启用

571
00:30:14,581 --> 00:30:16,550
这也适用于手动签名
我将演示给你们看

572
00:30:17,050 --> 00:30:19,319
第三
还有这个ExportOptions.plist

573
00:30:19,386 --> 00:30:21,522
前面毅太已经介绍过
它的作用是什么呢？

574
00:30:22,890 --> 00:30:25,692
ExportOptions.plist
是一个简单的方案

575
00:30:25,792 --> 00:30:29,696
告诉Xcode Server
如何将存档转化为IPA

576
00:30:29,930 --> 00:30:32,065
这个方案可能比较简单
但是也可以扩展为

577
00:30:32,266 --> 00:30:35,736
一些更复杂的手动签名方案

578
00:30:37,171 --> 00:30:39,740
我还多次谈到App Store
但是需要强调的是

579
00:30:40,307 --> 00:30:41,375
这里生成的内容

580
00:30:41,441 --> 00:30:44,645
可以使用所有分发方法进行分发

581
00:30:44,711 --> 00:30:47,548
你可以进行企业分发
分发到App Store

582
00:30:47,614 --> 00:30:49,783
或进行其它分发

583
00:30:50,951 --> 00:30:52,419
让我们来看演示

584
00:30:55,155 --> 00:30:56,590
（演示）

585
00:30:59,059 --> 00:31:02,563
这是我们的Chocolate Chip机器人
它尽责地生成我们的应用

586
00:31:02,996 --> 00:31:05,999
在设备上运行测试

587
00:31:06,400 --> 00:31:08,735
我要做的是
更改这个机器人的任务

588
00:31:08,936 --> 00:31:11,638
让它为我生成IPA

589
00:31:11,905 --> 00:31:13,841
现在我们推荐一个最佳实践

590
00:31:13,907 --> 00:31:16,076
建议你为这个任务
创建一个专用机器人

591
00:31:16,143 --> 00:31:18,946
用来创建IPA
为了进行演示

592
00:31:19,213 --> 00:31:20,581
我要进行更改

593
00:31:20,914 --> 00:31:22,549
我将会编辑机器人

594
00:31:22,950 --> 00:31:24,451
机器人编辑器中
有许多的选项

595
00:31:24,551 --> 00:31:26,420
但是我们要做的事情很简单

596
00:31:26,720 --> 00:31:28,889
首先 我们打开“配置”选项卡

597
00:31:29,556 --> 00:31:31,692
在这里
我们启用“生成存档”

598
00:31:32,292 --> 00:31:35,028
请记住 从Xcode 5开始
在我们推出Xcode Server之后

599
00:31:35,195 --> 00:31:37,264
就已经能够为你创建存档

600
00:31:37,431 --> 00:31:39,266
这里有许多很好用的工作流程

601
00:31:39,566 --> 00:31:41,001
例如 你可以创建存档

602
00:31:41,068 --> 00:31:43,804
然后使用Xcode Server进行安装

603
00:31:44,037 --> 00:31:45,672
你可以这样做

604
00:31:45,939 --> 00:31:48,575
我们还添加一个新选项

605
00:31:48,942 --> 00:31:50,711
启用后 Xcode Server

606
00:31:50,878 --> 00:31:54,081
为你创建分发签名IPA

607
00:31:54,481 --> 00:31:57,918
这是最后一个选项
“使用自定义ExportOptions.plist”

608
00:31:58,318 --> 00:31:59,753
如何获得这样的自定义plist呢？

609
00:32:00,487 --> 00:32:02,222
还好 毅太为我们导出了

610
00:32:02,289 --> 00:32:05,225
一个这样的文件

611
00:32:05,492 --> 00:32:07,794
那是在他上传应用到App Store后

612
00:32:08,161 --> 00:32:10,097
现在我会选择它

613
00:32:11,331 --> 00:32:12,699
你应该检查

614
00:32:12,766 --> 00:32:15,202
它是否是正确的ExportOptions.plist

615
00:32:15,269 --> 00:32:17,571
你可以方便地点击它

616
00:32:18,138 --> 00:32:21,341
这是一个简单
的ExportOptions.plist例子

617
00:32:21,875 --> 00:32:23,777
前面毅太的幻灯片里讲过

618
00:32:23,844 --> 00:32:27,214
如果你添加更复杂的工作流程

619
00:32:27,714 --> 00:32:29,550
你将需要

620
00:32:29,683 --> 00:32:32,019
专门的配置文件

621
00:32:32,085 --> 00:32:34,054
你还可以做其它一些事情

622
00:32:34,154 --> 00:32:36,590
应确保这是正确
的ExportOptions.plist

623
00:32:36,957 --> 00:32:37,824
这些工作就完成了

624
00:32:38,725 --> 00:32:40,294
这是“配置”选项里的操作

625
00:32:41,028 --> 00:32:42,229
然后我们进入“签名”选项卡

626
00:32:43,664 --> 00:32:45,632
这是Xcode 9中的全新功能
这是很不错的功能

627
00:32:45,699 --> 00:32:48,268
因为现在你可以配置
Xcode Server

628
00:32:48,335 --> 00:32:50,804
同时进行开发签名
和分发签名

629
00:32:51,638 --> 00:32:55,242
最上方有两个复选框
克里斯已经为我们选中

630
00:32:55,442 --> 00:32:56,276
最上方的选项

631
00:32:56,343 --> 00:32:59,980
命令Xcode Server与
开发者网站进行通信

632
00:33:00,380 --> 00:33:02,049
我的团队已经被添加到服务器

633
00:33:02,216 --> 00:33:05,052
即使你使用手动分发流程

634
00:33:05,219 --> 00:33:08,088
也应该选中这个复选框

635
00:33:08,856 --> 00:33:11,725
我们访问“证书和配置文件”选项卡

636
00:33:12,259 --> 00:33:13,093
这里是什么？

637
00:33:13,894 --> 00:33:15,162
最上方有两个选项卡

638
00:33:15,596 --> 00:33:17,931
显示计算机上安装的所有证书

639
00:33:17,998 --> 00:33:20,167
底部是配置文件

640
00:33:20,534 --> 00:33:22,269
我需要做的是

641
00:33:22,402 --> 00:33:24,371
和我的服务器共享分发证书

642
00:33:24,805 --> 00:33:27,774
这非常简单
只需点击“添加到服务器”

643
00:33:27,908 --> 00:33:28,775
就可以了

644
00:33:28,842 --> 00:33:32,012
Xcode Server现能够访问
分发证书

645
00:33:32,179 --> 00:33:35,315
因为我允许它代表我
与开发者网站通信

646
00:33:36,016 --> 00:33:38,719
可以获取所有必要的资产
以创建IPA

647
00:33:39,786 --> 00:33:43,257
我可能会想
应该如何处理配置文件表格

648
00:33:43,323 --> 00:33:46,093
对你们大多数人来说
如果你们进行自动代码签名

649
00:33:46,326 --> 00:33:47,861
而且进行App Store分发

650
00:33:47,961 --> 00:33:48,962
将不需要做任何事情

651
00:33:49,329 --> 00:33:52,566
但是如果使用其它分发方法

652
00:33:52,833 --> 00:33:55,035
或者已经在ExportOptions.plist中

653
00:33:55,102 --> 00:33:57,304
指定专用的配置文件

654
00:33:57,671 --> 00:33:58,872
那么你必须确保

655
00:33:58,939 --> 00:34:01,008
你的服务器具有这些配置文件

656
00:34:01,141 --> 00:34:02,342
这些工作十分简单

657
00:34:02,643 --> 00:34:05,212
如果想要共享任何配置文件
只需要点击“添加到服务器”

658
00:34:05,512 --> 00:34:07,114
就可以与服务器共享

659
00:34:07,814 --> 00:34:11,150
“签名”选项卡和
“配置”选项卡中的工作就完成了

660
00:34:11,217 --> 00:34:13,687
接下来是你期待的时刻

661
00:34:13,920 --> 00:34:16,989
让我们集成这个机器人
观看它创建两个项目

662
00:34:17,056 --> 00:34:18,257
它会创建存档

663
00:34:18,492 --> 00:34:20,127
然后将存档转化为

664
00:34:20,561 --> 00:34:23,063
分销签名IPA

665
00:34:23,297 --> 00:34:25,098
可以将它上传到App Store

666
00:34:30,637 --> 00:34:32,472
这样就完成了

667
00:34:32,739 --> 00:34:34,641
这是Xcode Server的

668
00:34:34,875 --> 00:34:35,809
一项重要进步

669
00:34:35,943 --> 00:34:37,277
将为你节省大量的时间

670
00:34:45,652 --> 00:34:48,355
代码签名很重要

671
00:34:48,688 --> 00:34:51,058
对于使用我们平台的开发者和用户来说

672
00:34:51,158 --> 00:34:53,260
代码签名已经成为

673
00:34:53,493 --> 00:34:55,529
这些平台的组成部分

674
00:34:56,029 --> 00:34:58,432
它保护我们的安全性

675
00:34:58,832 --> 00:34:59,933
我们知道这不容易做到

676
00:35:00,167 --> 00:35:03,303
但是在Xcode 8和Xcode 9中

677
00:35:03,403 --> 00:35:05,639
我们付出很多的努力
为你们提供好用的解决方案

678
00:35:05,873 --> 00:35:07,107
从而简化你们的工作

679
00:35:07,641 --> 00:35:10,077
Xcode Server
现提供开发签名功能

680
00:35:10,143 --> 00:35:12,813
便于你进行日常开发
和在设备上测试

681
00:35:14,114 --> 00:35:16,083
我们还完成很多手动签名工作

682
00:35:16,149 --> 00:35:17,718
因为我们知道
这对你们来说很重要

683
00:35:17,784 --> 00:35:22,623
我们对Xcode中的分发流程
进行重大改进

684
00:35:22,856 --> 00:35:23,690
当然

685
00:35:23,757 --> 00:35:26,393
我们还将分发流程
添加到Xcode Server之中

686
00:35:27,361 --> 00:35:28,195
今天的演讲就是这些

687
00:35:28,428 --> 00:35:31,999
本周还有更多
关于本主题的演讲

688
00:35:32,366 --> 00:35:34,034
谢谢大家的参与 祝本周过得愉快

