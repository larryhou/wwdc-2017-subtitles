1
00:00:23,423 --> 00:00:25,926
下午好 欢迎大家来到我们的演讲

2
00:00:26,326 --> 00:00:29,329
用户通知的最佳实践和新特性

3
00:00:29,963 --> 00:00:33,300
我是Kritarth Jain
是iOS通知团队的初级工程师

4
00:00:33,734 --> 00:00:36,303
今天我会和同事Teja一起演讲

5
00:00:38,172 --> 00:00:42,075
今天我们从通知概述开始

6
00:00:42,276 --> 00:00:45,746
以及作为应用开发者可用的各种API

7
00:00:45,812 --> 00:00:48,215
为了在应用中使用通知功能

8
00:00:49,149 --> 00:00:50,217
然后我们会讲解四个

9
00:00:50,450 --> 00:00:53,053
不同的关于通知的用例

10
00:00:53,820 --> 00:00:56,390
首先我们介绍一个全新的概念

11
00:00:56,456 --> 00:01:00,127
在iOS通知中 关于隐藏通知内容

12
00:01:00,561 --> 00:01:02,429
我们认为你们会非常感兴趣

13
00:01:03,430 --> 00:01:05,566
然后我们会讲解第二个用户实例

14
00:01:05,632 --> 00:01:09,703
是关于在发送给用户之前
修改推送通知内容

15
00:01:10,571 --> 00:01:13,340
然后我们会讲自定义丰富通知

16
00:01:13,574 --> 00:01:17,811
以及如何全权拥有
这些通知的UI和感觉

17
00:01:18,445 --> 00:01:21,582
最后我们会讲和这些丰富通知相关的

18
00:01:21,815 --> 00:01:23,984
用户输入自定义

19
00:01:25,552 --> 00:01:27,988
首先开始讲通知概述

20
00:01:28,956 --> 00:01:31,992
我肯定你们大家都知道
通知分为两种类型

21
00:01:32,326 --> 00:01:33,594
本地通知

22
00:01:33,927 --> 00:01:36,797
它们在应用里计划

23
00:01:37,130 --> 00:01:40,534
在设备本身 然后显示给用户

24
00:01:41,034 --> 00:01:43,103
当用户处理这些通知时

25
00:01:43,170 --> 00:01:45,906
你的应用可以处理回应

26
00:01:45,973 --> 00:01:47,207
（本地通知）

27
00:01:47,274 --> 00:01:50,177
另一类通知是远程通知

28
00:01:50,477 --> 00:01:53,146
和远程服务器相关联

29
00:01:53,714 --> 00:01:58,318
之后发送通知负载至应用推送通知服务

30
00:01:58,986 --> 00:02:01,088
现在 如果负载有内容

31
00:02:01,455 --> 00:02:04,491
则该通知会发送到用户设备

32
00:02:04,791 --> 00:02:05,959
显示给用户

33
00:02:06,293 --> 00:02:08,562
再次说明 如果用户处理该通知

34
00:02:08,895 --> 00:02:10,898
你可以应用中处理回应

35
00:02:11,965 --> 00:02:14,868
远程通知的另一类是静音通知

36
00:02:15,235 --> 00:02:18,272
它们不会显示给用户

37
00:02:18,572 --> 00:02:21,909
但它们可以让应用在后台启动

38
00:02:22,142 --> 00:02:24,878
并做些应用想要的额外工作

39
00:02:25,078 --> 00:02:27,147
和远程站点应用相关

40
00:02:28,615 --> 00:02:30,584
远程通知很重要的一点

41
00:02:30,851 --> 00:02:34,755
是使用最新的HTTPS2认证方法

42
00:02:35,022 --> 00:02:36,857
无论在哪里进行远程通知

43
00:02:38,692 --> 00:02:42,162
通知内容包含不同的属性

44
00:02:42,229 --> 00:02:43,830
可以在通知中设置这些属性

45
00:02:44,331 --> 00:02:47,868
包括标题 副标题 正文

46
00:02:48,535 --> 00:02:51,605
以及媒体附件 都可以在通知中设置

47
00:02:51,672 --> 00:02:52,673
（标题——通知）

48
00:02:52,739 --> 00:02:53,941
（副标题——内容预览）

49
00:02:54,007 --> 00:02:55,175
（正文——这里是通知正文）

50
00:02:55,242 --> 00:02:56,410
（在右边可以看到媒体附件）

51
00:02:57,010 --> 00:02:58,612
通知触发器决定

52
00:02:58,679 --> 00:03:01,481
何时将通知发送给用户

53
00:03:01,882 --> 00:03:05,285
所有远程通知都和推送触发器相关联

54
00:03:05,953 --> 00:03:09,122
本地通知则可以选择使用

55
00:03:09,189 --> 00:03:11,992
间隔时间 日历或基于位置的触发器

56
00:03:12,059 --> 00:03:13,660
（通知触发器 推送
间隔时间 日历 位置）

57
00:03:14,027 --> 00:03:17,531
这些通知以不同的方式显示给用户

58
00:03:18,131 --> 00:03:22,603
在iOS 11
我们把通知列表整合成一个列表

59
00:03:23,036 --> 00:03:26,006
如果用户唤醒设备 或从顶部下拉

60
00:03:26,340 --> 00:03:28,475
会看到同一个通知列表

61
00:03:28,842 --> 00:03:30,744
当用户处于该状态时

62
00:03:31,044 --> 00:03:33,547
通知即被添加到该列表

63
00:03:33,947 --> 00:03:35,616
如果想查看以前的通知

64
00:03:35,682 --> 00:03:38,552
只需将列表向上滑 查看通知历史

65
00:03:39,987 --> 00:03:41,455
如果用户设备已被解锁

66
00:03:41,788 --> 00:03:43,857
如果用户在主屏幕或别的应用里

67
00:03:44,224 --> 00:03:46,793
通知会以横幅形式从顶部滚动下来

68
00:03:48,195 --> 00:03:50,330
如果应用处于前台

69
00:03:50,497 --> 00:03:51,532
可以选择

70
00:03:51,598 --> 00:03:54,067
就在当前显示通知横幅

71
00:03:55,068 --> 00:03:57,004
随着不同的显示模型

72
00:03:57,171 --> 00:03:59,573
也可以选择声音提醒

73
00:03:59,640 --> 00:04:01,608
以及标记应用图标

74
00:04:04,044 --> 00:04:07,648
通知操作可以使其具有更强的互动性

75
00:04:08,215 --> 00:04:11,351
用户可以用3D Touch获取通知

76
00:04:11,418 --> 00:04:13,320
可以看到所有操作列表

77
00:04:13,387 --> 00:04:14,788
以及取消操作

78
00:04:15,622 --> 00:04:18,024
当用户采取任何一种操作

79
00:04:18,192 --> 00:04:20,726
同样在应用中可以获得回应

80
00:04:20,928 --> 00:04:22,896
并按照合适的情况处理该操作

81
00:04:25,799 --> 00:04:28,802
使用这些通知有不同的机制

82
00:04:29,369 --> 00:04:32,539
通知更新允许修改通知

83
00:04:32,706 --> 00:04:35,676
那些你已计划推送或发布给用户的通知

84
00:04:36,610 --> 00:04:39,947
在本例中 可以看到我们在集中

85
00:04:40,013 --> 00:04:41,882
那些社交媒体帖子的点赞

86
00:04:42,583 --> 00:04:45,819
一段时间以后 这个数字发生改变

87
00:04:46,320 --> 00:04:49,790
可以直接更新通知

88
00:04:50,257 --> 00:04:53,360
用户的通知列表不会变乱

89
00:04:53,427 --> 00:04:54,595
也不会显得冗余

90
00:04:54,661 --> 00:04:56,563
（通知更新）

91
00:04:57,030 --> 00:05:00,400
同样 也可以删除通知

92
00:05:01,068 --> 00:05:05,172
在本例中
有一个关于发送给你的视频信息

93
00:05:05,572 --> 00:05:08,475
一旦你看过了该视频 可以直接

94
00:05:08,542 --> 00:05:11,578
在本地应用里删除该通知

95
00:05:11,645 --> 00:05:13,947
（删除通知）

96
00:05:14,314 --> 00:05:18,285
在iOS 10引入了通知扩展

97
00:05:18,752 --> 00:05:20,387
通知扩展有两种类型

98
00:05:20,921 --> 00:05:23,023
第一种即为 服务扩展

99
00:05:23,991 --> 00:05:26,894
服务扩展允许应用做的事情是

100
00:05:27,127 --> 00:05:31,231
在发送给用户之前 拦截通知

101
00:05:32,232 --> 00:05:34,801
可以修改通知内容

102
00:05:35,102 --> 00:05:38,839
或处理别的可能和通知相关的

103
00:05:38,906 --> 00:05:41,108
后台工作 就在该服务扩展中

104
00:05:41,675 --> 00:05:44,978
我们将在一个用例中深入了解服务扩展

105
00:05:45,045 --> 00:05:46,446
（通知扩展 服务扩展）

106
00:05:46,847 --> 00:05:49,249
另一个扩展点是内容扩展

107
00:05:49,550 --> 00:05:51,852
将允许自定义什么样的通知

108
00:05:52,085 --> 00:05:54,488
同样 今天也会用一个用例来说明

109
00:05:55,455 --> 00:05:58,392
来自第一方应用的内容扩展示例

110
00:05:58,592 --> 00:06:01,962
包括信息应用 包括完整的信息线程

111
00:06:02,429 --> 00:06:04,665
就在通知里面 因此可以进行回复

112
00:06:04,898 --> 00:06:07,434
并从通知里得到回应

113
00:06:07,501 --> 00:06:09,203
不用进入别的应用当中

114
00:06:09,269 --> 00:06:10,604
（通知扩展 内容扩展）

115
00:06:10,671 --> 00:06:12,773
日历应用显示完整的计划

116
00:06:12,840 --> 00:06:16,310
以及接受或拒绝某个请求的选项

117
00:06:17,411 --> 00:06:21,615
照片应用在通知本身发送一张照片

118
00:06:21,915 --> 00:06:23,784
并可以点赞或写下评论

119
00:06:24,885 --> 00:06:28,522
再次说明 我们将看看该如何
使用这些不同的工具

120
00:06:28,589 --> 00:06:32,593
来为所有的应用创建通知样式

121
00:06:34,494 --> 00:06:38,298
watchOS通知和iOS通知同步

122
00:06:38,765 --> 00:06:41,301
所有发送给用户手机上的通知

123
00:06:41,635 --> 00:06:45,472
都会发送到用户的手表
如果当时手机处于锁屏

124
00:06:45,539 --> 00:06:46,507
（watchOS通知）

125
00:06:46,573 --> 00:06:49,710
如果用户的手表不在手机范围内

126
00:06:49,776 --> 00:06:52,980
则可以计划通知

127
00:06:53,180 --> 00:06:54,882
就在watchOS应用上

128
00:06:57,351 --> 00:07:02,155
那么 如何访问
通知所有这些不同的功能？

129
00:07:02,322 --> 00:07:04,925
为此 去年我们推出了两个全新的框架

130
00:07:05,259 --> 00:07:08,095
即UserNotifications
和UserNotificationsUI

131
00:07:09,830 --> 00:07:12,633
我们深入覆盖了所有不同的API

132
00:07:12,699 --> 00:07:15,736
在去年的WWDC 我们强烈建议大家

133
00:07:15,802 --> 00:07:17,804
看一下去年的这两场演讲

134
00:07:18,038 --> 00:07:20,207
里面包含了更多信息

135
00:07:20,374 --> 00:07:21,875
关于在概述里提到的所有内容

136
00:07:23,911 --> 00:07:26,980
好了 进入到我们的用例

137
00:07:27,147 --> 00:07:30,617
从第一个开始 关于隐藏通知内容

138
00:07:31,018 --> 00:07:33,320
为大家详细讲解这部分内容 欢迎Teja

139
00:07:40,260 --> 00:07:42,729
大家好 我是Teja Kondapalli

140
00:07:43,063 --> 00:07:45,365
我也是通知团队的一名工程师

141
00:07:45,699 --> 00:07:49,603
你们刚刚听到的 是对去年我们
所宣布的API很好的回顾

142
00:07:49,937 --> 00:07:53,774
现在我将讲讲今年我们要宣布的API

143
00:07:54,775 --> 00:07:56,944
今年 我们决定关注一个功能

144
00:07:57,344 --> 00:08:00,514
称为隐藏通知内容

145
00:08:01,181 --> 00:08:05,752
即一种让用户隐藏隐私信息的方法

146
00:08:05,819 --> 00:08:08,989
在通知里 当不需要被看到时

147
00:08:11,825 --> 00:08:13,026
为何我们这么在乎这个？

148
00:08:15,062 --> 00:08:17,798
因为用户在乎自己的隐私

149
00:08:18,999 --> 00:08:21,602
我们都知道 通知很容易被看见

150
00:08:22,135 --> 00:08:24,638
它们的内容也比以前更丰富

151
00:08:25,105 --> 00:08:29,376
这意味着我们必须小心保护

152
00:08:29,743 --> 00:08:30,878
可能出现在通知里的敏感信息

153
00:08:32,379 --> 00:08:36,149
实际上 你们都在iOS 10里
感受到了这一点

154
00:08:37,417 --> 00:08:41,488
锁屏上通知信息看上去可能是这样

155
00:08:42,789 --> 00:08:47,294
如果进入“设置”——“通知”

156
00:08:48,161 --> 00:08:53,634
设置信息应用
只想在锁定屏幕上显示预览

157
00:08:56,003 --> 00:09:01,108
现在可以看到该信息的内容被隐藏了

158
00:09:01,508 --> 00:09:04,444
这是因为用户没有认证

159
00:09:05,179 --> 00:09:06,647
一旦用户得到认证

160
00:09:07,247 --> 00:09:09,750
信息的内容就会被显示

161
00:09:10,884 --> 00:09:13,420
我很激动地宣布 今年

162
00:09:13,487 --> 00:09:18,992
我们将这个功能扩大支持所有应用
包括第三方应用

163
00:09:19,059 --> 00:09:20,928
（隐藏通知内容 新功能）

164
00:09:20,994 --> 00:09:23,330
（扩大支持所有应用）

165
00:09:25,132 --> 00:09:27,901
我们也为用户提供了一个全局设置

166
00:09:28,569 --> 00:09:31,939
用户可以方便地进入设置——通知

167
00:09:32,573 --> 00:09:34,308
就在最上方 可以选择

168
00:09:34,374 --> 00:09:36,210
是否想显示预览

169
00:09:36,577 --> 00:09:39,079
总是解锁时还是关闭

170
00:09:39,346 --> 00:09:43,350
这将应用于所有应用的所有通知

171
00:09:45,052 --> 00:09:49,389
我们也提供给用户一个方法
为每一个应用自定义设置

172
00:09:50,023 --> 00:09:52,626
还是在设置里

173
00:09:53,293 --> 00:09:55,796
用户可以简单进入特定的应用

174
00:09:56,697 --> 00:10:00,801
对该应用的预览选择隐私设置

175
00:10:01,134 --> 00:10:02,603
他们想要进行微调

176
00:10:02,836 --> 00:10:06,273
因为某些应用可能在通知里

177
00:10:06,540 --> 00:10:08,475
和别的应用相比 显示更为敏感的信息

178
00:10:11,378 --> 00:10:14,715
现在 因为完全由用户决定

179
00:10:14,982 --> 00:10:19,353
在某个时间点 显示还是隐藏通知内容

180
00:10:19,686 --> 00:10:24,391
我们还为应用开发者
提供了一个API用于自定义

181
00:10:24,458 --> 00:10:26,760
隐藏通知看上去是什么样

182
00:10:28,795 --> 00:10:31,598
来看一下我写的这个应用

183
00:10:31,665 --> 00:10:33,300
发给我了一些通知

184
00:10:33,700 --> 00:10:37,437
在这里可以看到
该通知包含一些丰富信息

185
00:10:38,138 --> 00:10:40,741
如果我的用户关闭了预览

186
00:10:41,608 --> 00:10:44,211
这是我的通知看上去的样子

187
00:10:46,914 --> 00:10:49,816
可以看到 所有内容都隐藏了

188
00:10:50,150 --> 00:10:52,286
标题 副标题和正文

189
00:10:52,686 --> 00:10:54,821
正文被占位符所代替

190
00:10:55,322 --> 00:10:58,025
占位符的默认值是 “通知”

191
00:10:59,993 --> 00:11:01,028
但是

192
00:11:01,094 --> 00:11:02,529
（正文占位符）

193
00:11:03,197 --> 00:11:07,201
如果我有很多和该应用相关的通知

194
00:11:07,534 --> 00:11:08,735
可以在这清楚地看到

195
00:11:08,802 --> 00:11:10,704
同时有两个不同的线程

196
00:11:11,071 --> 00:11:14,441
一个关于工作 另一个关于泰国度假

197
00:11:15,275 --> 00:11:17,311
如果用户关闭了预览

198
00:11:18,145 --> 00:11:20,881
通知列表可能会是这样

199
00:11:21,448 --> 00:11:24,351
为了避免出现该情况 我们更进了一步

200
00:11:24,718 --> 00:11:29,256
我们通过线程标识符
自动折叠了这些通知

201
00:11:30,057 --> 00:11:33,293
如果已经在通知中使用线程标识符

202
00:11:33,594 --> 00:11:35,629
它将自动为你完成这些工作

203
00:11:37,064 --> 00:11:39,366
来看一个我的线程

204
00:11:39,833 --> 00:11:43,270
在这里可以看到显示“两个通知”
它们是默认占位符

205
00:11:43,637 --> 00:11:46,940
这个线程是关于泰国度假的

206
00:11:47,841 --> 00:11:49,142
这些是评论

207
00:11:49,209 --> 00:11:52,112
我想更进一步自定义 是可以做到的

208
00:11:53,780 --> 00:11:56,316
在设置和通知相关的

209
00:11:56,383 --> 00:11:58,819
通知类别时

210
00:11:59,653 --> 00:12:03,490
可以给一个新属性传递一个新值

211
00:12:03,991 --> 00:12:06,593
在这里设置
commentCategory

212
00:12:07,294 --> 00:12:11,398
同时也设置hiddenPreviewsBody
Placeholder

213
00:12:11,865 --> 00:12:15,235
只传递一个常规字符串
为“Comment”

214
00:12:15,602 --> 00:12:18,338
现在我的通知是这个样子

215
00:12:19,406 --> 00:12:21,074
还是不怎么对

216
00:12:21,375 --> 00:12:23,577
因为我知道有两个通知

217
00:12:23,644 --> 00:12:26,613
被折叠了
但这里只显示“Comment”

218
00:12:27,347 --> 00:12:31,485
因此 我决定传递一个格式字符串

219
00:12:33,620 --> 00:12:34,488
非常好

220
00:12:34,821 --> 00:12:38,425
现在我的通知看上去是对的
显示“2 Comments”

221
00:12:39,092 --> 00:12:42,296
但是这不适用于单数的情况

222
00:12:42,963 --> 00:12:47,301
如果只有一条通知
就会显示为“1 Comments”

223
00:12:48,068 --> 00:12:50,871
幸好有办法解决

224
00:12:50,938 --> 00:12:56,710
单复数问题
Foundation支持该方法

225
00:12:57,010 --> 00:12:59,146
即字符串词典

226
00:13:00,981 --> 00:13:04,885
字符串词典是一个
位于项目的p-list文件

227
00:13:05,319 --> 00:13:07,254
它看起来像这样

228
00:13:07,654 --> 00:13:09,990
首先在这里可以看到

229
00:13:10,390 --> 00:13:13,227
一行写着COMMENT_KEY

230
00:13:13,493 --> 00:13:18,866
它将指示系统
去哪里可以找到该复数规则

231
00:13:19,433 --> 00:13:20,567
在它下面

232
00:13:21,502 --> 00:13:24,238
可以看到有一个

233
00:13:24,304 --> 00:13:26,840
匹配单数和复数规则的键值

234
00:13:26,907 --> 00:13:29,877
写着“one”的格式字符串值
是“Comment”

235
00:13:30,244 --> 00:13:33,881
“other”的格式字符串值
是“Comments”

236
00:13:33,947 --> 00:13:35,449
（复数形式）

237
00:13:35,516 --> 00:13:37,584
使用字符串词典很重要

238
00:13:37,651 --> 00:13:40,821
因为不是所有语言都有

239
00:13:40,888 --> 00:13:43,023
单复数的差异

240
00:13:43,524 --> 00:13:48,629
比如 阿拉伯语的字符串词典是这样

241
00:13:50,831 --> 00:13:53,367
可以看到有很多其他的选项

242
00:13:53,433 --> 00:13:55,569
除了单复数之外

243
00:13:55,769 --> 00:13:59,840
所以 要解决复数形式和本地化问题

244
00:14:00,107 --> 00:14:02,643
使用字符串词典非常重要

245
00:14:03,210 --> 00:14:05,312
现在已经设置好字符串词典

246
00:14:07,447 --> 00:14:09,082
当设置commentCategory时

247
00:14:09,149 --> 00:14:11,118
不再传递一个格式字符串

248
00:14:11,518 --> 00:14:13,520
而是传递一个NSLocalizedString

249
00:14:13,787 --> 00:14:17,491
传递的第一个参数是“COMMENT_KEY”

250
00:14:17,758 --> 00:14:20,794
它和复数规则相关联

251
00:14:20,861 --> 00:14:22,196
是和它相关联的键

252
00:14:22,696 --> 00:14:25,999
传递的第二个参数只是一个注释

253
00:14:26,066 --> 00:14:27,935
关于这个字符串是什么

254
00:14:31,004 --> 00:14:33,574
想了解更多本地化的内容

255
00:14:33,807 --> 00:14:39,313
早些时候我们在WWDC聊过
可以去看一下这个视频

256
00:14:39,580 --> 00:14:42,316
我们的文档里也有很好的资源

257
00:14:44,084 --> 00:14:47,221
现在我的通知正确显示
“2 Comments”

258
00:14:47,287 --> 00:14:49,857
我很确定它将会显示
“1 Comment”

259
00:14:50,190 --> 00:14:52,593
如果只有一条评论的话

260
00:14:55,629 --> 00:14:56,930
但如果我们更进一步

261
00:14:58,332 --> 00:15:00,300
实际上珍给我发了一张照片

262
00:15:00,367 --> 00:15:03,637
她没有发给我评论 我想表明这一点

263
00:15:03,737 --> 00:15:05,439
也可以做到

264
00:15:05,939 --> 00:15:09,643
commentCategory
设置完成后

265
00:15:10,110 --> 00:15:12,913
也用同样方法设置一个
imageCategory

266
00:15:13,413 --> 00:15:17,651
将珍的通知和图片类别相关联

267
00:15:17,918 --> 00:15:20,220
约翰的通知和评论类别相关联

268
00:15:20,687 --> 00:15:24,758
现在我有两个通知分属两个不同类别

269
00:15:25,092 --> 00:15:27,394
但它们被发送到同一线程

270
00:15:27,928 --> 00:15:31,031
因此折叠将自动生效

271
00:15:31,265 --> 00:15:34,368
正确显示一张图片和一条评论

272
00:15:37,504 --> 00:15:39,773
如果进一步回想 这都是一个线程

273
00:15:39,840 --> 00:15:43,143
也许我想区分这个线程和

274
00:15:43,410 --> 00:15:46,847
也属于这个应用通知的另一线程

275
00:15:47,414 --> 00:15:48,415
也是可以实现的

276
00:15:48,815 --> 00:15:51,318
在这里可以看到标题为“泰国度假”

277
00:15:51,385 --> 00:15:53,620
这标明了所在线程

278
00:15:55,055 --> 00:15:56,423
也许我想显示出来

279
00:15:57,624 --> 00:16:00,794
再一次 在设置类别时

280
00:16:01,128 --> 00:16:05,499
可以传递一个或两个新的选项

281
00:16:05,899 --> 00:16:10,070
HiddenPreviewsShowTitle
以及HiddenPreviewsShowSubtitle

282
00:16:10,604 --> 00:16:13,106
这里我只传递

283
00:16:14,141 --> 00:16:15,709
只传递标题

284
00:16:15,776 --> 00:16:19,446
因为显示副标题会泄漏太多信息

285
00:16:19,513 --> 00:16:20,881
我只想显示标题

286
00:16:22,115 --> 00:16:25,886
现在我的通知正确显示“泰国度假”

287
00:16:25,953 --> 00:16:29,423
并标明了线程 一张图片和一条评论

288
00:16:32,526 --> 00:16:36,396
现在我们知道如何自定义
隐藏通知内容

289
00:16:36,864 --> 00:16:39,766
重要的是要记住
这是一个用户自定义设置

290
00:16:40,300 --> 00:16:42,703
用户可以在任何时间点做出决定

291
00:16:42,970 --> 00:16:46,340
是否隐藏或显示一个通知内容

292
00:16:47,374 --> 00:16:51,278
我们已经提供了一个
找到用户设置的方法

293
00:16:51,612 --> 00:16:55,415
可以通过showPreviewsSetting来检索

294
00:16:55,782 --> 00:16:57,851
在UNNotification设置里

295
00:16:57,918 --> 00:16:59,953
（最佳实践）

296
00:17:00,020 --> 00:17:02,222
使用线程标识符也很重要

297
00:17:02,289 --> 00:17:04,858
利用自动折叠

298
00:17:04,925 --> 00:17:07,361
我们已经支持该功能

299
00:17:08,729 --> 00:17:10,897
使用字符串词典也很重要

300
00:17:11,098 --> 00:17:14,902
来解决复数和本地化问题

301
00:17:18,704 --> 00:17:22,709
我们已经看完关于
隐藏通知内容的第一个用例

302
00:17:23,143 --> 00:17:26,914
第二个用例是我知道
你们之中很多人都会做的

303
00:17:26,980 --> 00:17:29,950
即发送推送通知到应用里

304
00:17:30,284 --> 00:17:33,253
对于推送通知也可以做很多有趣的事

305
00:17:33,587 --> 00:17:37,291
只要我们可以修改它们
比如附件或加密

306
00:17:37,891 --> 00:17:39,359
我这么说的意思是

307
00:17:41,461 --> 00:17:45,999
想象我想在远程通知里发送一些媒体

308
00:17:46,366 --> 00:17:49,036
但是该媒体不适合推送负载

309
00:17:49,803 --> 00:17:53,507
我可以采取另一种方法
即发送该媒体的某些元数据

310
00:17:53,574 --> 00:17:55,642
比如可以找到它的URL

311
00:17:56,410 --> 00:18:01,281
然后在设备上可以下载该媒体

312
00:18:01,348 --> 00:18:02,850
然后显示通知

313
00:18:05,919 --> 00:18:07,120
另一个非常好的例子

314
00:18:07,921 --> 00:18:12,025
是如果服务端
想在通知里加密一部分内容

315
00:18:12,426 --> 00:18:16,029
应该在设备上先将其解密
然后再显示给用户

316
00:18:16,096 --> 00:18:17,965
（修改推送内容用例）

317
00:18:18,031 --> 00:18:19,666
另一个非常好的应用

318
00:18:19,733 --> 00:18:24,204
是在通知里添加上下文相关信息

319
00:18:25,138 --> 00:18:28,308
比如位置 时间或健康数据

320
00:18:29,109 --> 00:18:31,912
该信息只显示在用户的设备上

321
00:18:32,179 --> 00:18:36,250
在显示给用户之前
可以把这些附加在通知里

322
00:18:37,751 --> 00:18:41,221
为了实现该功能
我们将使用一个服务扩展

323
00:18:41,588 --> 00:18:43,257
是我们在去年推出的

324
00:18:45,192 --> 00:18:47,594
让我们深入看一个例子

325
00:18:48,195 --> 00:18:51,498
我想在远程通知里发送一个视频

326
00:18:52,766 --> 00:18:57,504
远程服务器会发送给APNS
一个推送负载

327
00:18:58,105 --> 00:19:00,941
在该负载里
打包一些关于视频的元数据

328
00:19:01,008 --> 00:19:02,509
（修改推送内容 示例）

329
00:19:02,576 --> 00:19:05,279
之后通知会发送到我的设备

330
00:19:05,579 --> 00:19:08,048
服务扩展可以

331
00:19:08,115 --> 00:19:09,950
拦截该通知

332
00:19:10,484 --> 00:19:13,220
到那时 我可以和远程服务器通话

333
00:19:14,087 --> 00:19:18,725
并在附加视频到通知之前
先下载视频预览

334
00:19:19,359 --> 00:19:21,028
并将预览显示给用户

335
00:19:21,895 --> 00:19:23,430
来看如何在代码中实现

336
00:19:25,933 --> 00:19:28,502
远程负载看起来像这样

337
00:19:29,236 --> 00:19:32,206
设置“mutable-content”标识很重要

338
00:19:32,539 --> 00:19:34,341
它将向设备标明

339
00:19:34,541 --> 00:19:36,810
需要启动服务扩展

340
00:19:37,477 --> 00:19:39,279
在显示通知之前

341
00:19:40,147 --> 00:19:43,016
还有一些额外的元数据

342
00:19:43,617 --> 00:19:46,787
比如该媒体的类型 视频URL

343
00:19:47,221 --> 00:19:53,260
拍摄位置以及上载该视频的用户信息

344
00:19:55,395 --> 00:19:57,431
当设置服务扩展时

345
00:19:57,764 --> 00:20:00,567
只需进入Xcode 创建一个新目标

346
00:20:00,634 --> 00:20:04,071
选择通知服务扩展模板

347
00:20:05,472 --> 00:20:08,242
会得到一个像这样的模板

348
00:20:08,542 --> 00:20:12,613
在服务扩展里 当通知被发送时

349
00:20:13,747 --> 00:20:16,116
会收到一个调用包含内容处理程序的

350
00:20:16,183 --> 00:20:17,718
didReceive_request函数

351
00:20:18,051 --> 00:20:19,786
我要做的第一件事

352
00:20:19,953 --> 00:20:21,822
就是保存内容处理程序

353
00:20:21,889 --> 00:20:24,758
和发送的远程内容

354
00:20:25,425 --> 00:20:28,896
以防万一我无法完成操作
这是我的备份

355
00:20:29,463 --> 00:20:30,697
保存好了

356
00:20:32,199 --> 00:20:33,200
然后

357
00:20:34,034 --> 00:20:36,703
可以用自己想要的方式处理请求

358
00:20:37,671 --> 00:20:41,542
在这里首先要做的 是提取视频URL

359
00:20:42,042 --> 00:20:43,911
从远程负载上

360
00:20:43,977 --> 00:20:47,147
因为这是一些自定义元数据

361
00:20:47,214 --> 00:20:51,185
我使用用户信息词典访问该值

362
00:20:52,719 --> 00:20:55,656
接下来是从URL下载

363
00:20:55,722 --> 00:20:57,791
采用任何想要的机制

364
00:20:58,392 --> 00:21:02,462
然后传递一个
完成处理程序给download函数

365
00:21:02,996 --> 00:21:06,066
该函数我想在下载完成后执行

366
00:21:07,601 --> 00:21:11,538
下载结束后 提取该文件并创建

367
00:21:11,605 --> 00:21:12,906
一个附件

368
00:21:13,507 --> 00:21:19,813
把它添加到通知内容 然后发送出去

369
00:21:21,715 --> 00:21:23,984
现在我的通知看上去很不错

370
00:21:24,051 --> 00:21:28,055
它有一个附件 一个视频附件

371
00:21:29,156 --> 00:21:33,393
但是如果我无法在指定时间

372
00:21:33,727 --> 00:21:34,595
完成下载该怎么办？

373
00:21:34,661 --> 00:21:36,496
在服务扩展上的时间

374
00:21:36,563 --> 00:21:38,665
是有限的

375
00:21:39,633 --> 00:21:42,369
如果我无法完成 将会产生一个回退

376
00:21:42,603 --> 00:21:46,106
该函数也在服务扩展中调用

377
00:21:46,273 --> 00:21:48,675
函数名为serviceExtensionTime
WillExpire

378
00:21:49,776 --> 00:21:53,614
在这里 可以利用两个内容处理程序

379
00:21:53,680 --> 00:21:55,816
以及之前保存的内容

380
00:21:59,553 --> 00:22:03,724
第一件事是提取媒体类型

381
00:22:03,790 --> 00:22:06,426
也和元数据打包在一起

382
00:22:06,827 --> 00:22:08,862
只需设置标题为

383
00:22:09,530 --> 00:22:12,799
“传入的媒体”或“传入的视频”

384
00:22:13,333 --> 00:22:15,536
然后把通知发送出去

385
00:22:17,571 --> 00:22:20,207
现在 我们了解了如何使用服务扩展

386
00:22:21,041 --> 00:22:22,309
请记住几件事

387
00:22:22,376 --> 00:22:25,279
那就是有很短的执行时间

388
00:22:25,345 --> 00:22:28,515
执行时间是有限的 内存也是有限的

389
00:22:29,283 --> 00:22:34,655
但是 请利用回退 尽可能通知到位

390
00:22:34,788 --> 00:22:38,091
如果无法完成操作的话

391
00:22:38,959 --> 00:22:41,395
还有很重要的一点需要注意

392
00:22:41,495 --> 00:22:43,630
服务扩展可以处理的通知

393
00:22:43,697 --> 00:22:46,967
都是UI通知 会显示给用户

394
00:22:48,135 --> 00:22:50,771
它们和静音通知不同

395
00:22:51,772 --> 00:22:53,273
我这么说的意思是

396
00:22:53,807 --> 00:22:58,145
当APNS把通知发送至设备时

397
00:22:58,612 --> 00:23:01,782
服务扩展可以拦截它

398
00:23:01,849 --> 00:23:02,783
如之前所见

399
00:23:03,183 --> 00:23:06,153
在服务扩展上的任何以及所有工作

400
00:23:06,220 --> 00:23:08,889
都应该和传入的通知相关联

401
00:23:09,156 --> 00:23:11,458
应该没有额外的

402
00:23:11,892 --> 00:23:14,194
关于应用的后台工作在这里执行

403
00:23:14,595 --> 00:23:18,465
所有工作都应该是 要么修改
要么增强该通知

404
00:23:19,099 --> 00:23:21,902
服务扩展也没有权力

405
00:23:21,969 --> 00:23:25,973
删除该通知或阻止其被显示

406
00:23:26,206 --> 00:23:29,610
该通知会被发送到设备上

407
00:23:30,677 --> 00:23:33,747
换一个方式

408
00:23:33,814 --> 00:23:36,517
如果你想在后台运行应用
并执行一些额外的处理

409
00:23:37,217 --> 00:23:39,720
可以发送一个静音通知

410
00:23:40,454 --> 00:23:43,223
也可以发送一个静音通知后

411
00:23:43,724 --> 00:23:45,125
在后台启动应用

412
00:23:45,192 --> 00:23:47,694
你的应用可以决定是否

413
00:23:47,761 --> 00:23:51,798
计划一个本地通知
如果想显示一个条件通知

414
00:23:54,268 --> 00:23:57,471
现在我有一个很好的带附件的通知

415
00:23:57,838 --> 00:24:01,008
现利用3D Touch进入丰富通知

416
00:24:01,475 --> 00:24:04,044
什么都不做 这是默认的样子

417
00:24:04,578 --> 00:24:07,314
看上去不错 但我想对通知自定义

418
00:24:08,515 --> 00:24:11,385
为了向大家演示如何自定义这些视图

419
00:24:11,552 --> 00:24:14,154
我将邀请Kritarth再次上台

420
00:24:16,156 --> 00:24:17,691
（自定义丰富通知）

421
00:24:19,960 --> 00:24:20,894
谢谢 Teja

422
00:24:21,161 --> 00:24:23,697
到目前为止 我们已经看了前两个用例

423
00:24:23,964 --> 00:24:26,233
第一个是关于隐藏通知内容

424
00:24:26,300 --> 00:24:27,801
以及如何自定义它们

425
00:24:28,368 --> 00:24:31,271
第二个是关于修改推送通知内容

426
00:24:32,105 --> 00:24:35,609
接下来看第三个用例
关于自定义丰富通知

427
00:24:36,476 --> 00:24:38,812
如前所见

428
00:24:38,879 --> 00:24:43,350
这是一个带媒体附件的
丰富通知的默认外观

429
00:24:43,917 --> 00:24:46,019
播放按钮覆盖在视频之上

430
00:24:46,086 --> 00:24:49,189
这样用户可以当即播放媒体

431
00:24:49,256 --> 00:24:52,092
并且默认内容显示在其下方

432
00:24:52,759 --> 00:24:54,728
如果没有附加媒体

433
00:24:54,795 --> 00:24:58,565
则丰富通知的全部将显示为默认内容

434
00:24:59,633 --> 00:25:03,270
但是 如果想自定义该丰富通知

435
00:25:03,604 --> 00:25:07,541
并且给予它属于应用特有的观感
该怎么做？

436
00:25:08,876 --> 00:25:13,280
如果想完全自定义
该通知内容的显示方式

437
00:25:13,447 --> 00:25:14,581
按照自己的想法 该怎么做？

438
00:25:15,549 --> 00:25:18,619
并且 在过程中 你将这些通知变得

439
00:25:18,685 --> 00:25:21,755
对用户来说 互动性很强和多样化

440
00:25:21,822 --> 00:25:25,492
用户可以就在通知里完成这些操作

441
00:25:25,559 --> 00:25:27,895
而不需要回到应用当中

442
00:25:28,428 --> 00:25:30,531
以上都可以实现

443
00:25:30,831 --> 00:25:34,668
为此 我们使用内容扩展的
第二个扩展点

444
00:25:35,169 --> 00:25:38,272
来看一下如何设置内容扩展

445
00:25:39,573 --> 00:25:41,909
目前 我们看到服务扩展

446
00:25:41,975 --> 00:25:43,544
在下载媒体的地方

447
00:25:43,610 --> 00:25:46,680
然后通知显示在用户设备上

448
00:25:47,481 --> 00:25:50,150
如果已经设置好一个内容扩展

449
00:25:50,317 --> 00:25:53,487
它和通知拥有相同的类别标识符

450
00:25:53,687 --> 00:25:56,223
那么 系统将会启动该内容扩展

451
00:25:56,423 --> 00:25:59,026
并设置所有不同的
和该内容扩展相关的

452
00:25:59,092 --> 00:26:04,398
视图和视图控制器
在打开该丰富通知之前

453
00:26:04,565 --> 00:26:06,133
然后 使用这些视图控制器

454
00:26:06,200 --> 00:26:09,970
显示该自定义丰富通知的用户界面

455
00:26:12,005 --> 00:26:14,341
你可以自定义哪些不同的东西

456
00:26:14,408 --> 00:26:16,310
作为这些丰富通知的一部分？

457
00:26:16,910 --> 00:26:20,247
可以改变标题 正位于内容上方

458
00:26:21,315 --> 00:26:24,451
也可以完全自定义内容和显示方式

459
00:26:24,518 --> 00:26:25,853
（自定义标题 自定义UI）

460
00:26:25,919 --> 00:26:28,722
还可以选择删除默认内容

461
00:26:28,789 --> 00:26:32,192
如果已经将该信息包含到自定义部分

462
00:26:32,259 --> 00:26:33,360
（删除默认内容）

463
00:26:34,394 --> 00:26:36,830
为了设置内容扩展

464
00:26:36,897 --> 00:26:39,833
Xcode提供了
一个默认模板让你开始

465
00:26:39,900 --> 00:26:41,368
（通知内容扩展）

466
00:26:41,702 --> 00:26:44,238
在这个自定义过程里
第一个要看的地方

467
00:26:44,304 --> 00:26:45,439
是info.plist

468
00:26:45,973 --> 00:26:49,009
当然 要做的第一件事是
设置正确的类别

469
00:26:49,076 --> 00:26:51,578
为所有想要

470
00:26:51,645 --> 00:26:53,013
和该内容扩展相关联的通知

471
00:26:54,381 --> 00:26:56,450
在这里有一些很简单的类别

472
00:26:56,517 --> 00:26:59,419
只需把默认内容隐藏标识设为是

473
00:26:59,853 --> 00:27:02,456
这将直接删除默认内容

474
00:27:02,523 --> 00:27:04,892
在自定义UI下方

475
00:27:06,093 --> 00:27:08,929
并且 若要覆盖默认标题

476
00:27:09,296 --> 00:27:12,032
可以通过简单设置这个标识即可

477
00:27:14,201 --> 00:27:16,236
当我们看代码时

478
00:27:16,503 --> 00:27:19,039
可以看到
NotificationViewController类

479
00:27:19,106 --> 00:27:22,476
实施了UNNotification
ContentExtension协议

480
00:27:23,744 --> 00:27:26,380
进入该内容扩展的方法

481
00:27:26,446 --> 00:27:28,782
是didReceive_notification方法

482
00:27:29,383 --> 00:27:32,186
这里的UNNotification对象包含

483
00:27:32,252 --> 00:27:34,154
和该通知相关的所有信息

484
00:27:35,155 --> 00:27:37,791
所以 我们做的第一件事是直接

485
00:27:37,858 --> 00:27:39,760
从该通知中提取内容

486
00:27:40,694 --> 00:27:42,896
然后 可以继续提取

487
00:27:42,963 --> 00:27:45,499
在服务扩展里下载的附件

488
00:27:46,900 --> 00:27:49,803
然后 设置自定义媒体播放器

489
00:27:49,870 --> 00:27:51,605
该播放器在自定义UI里设置

490
00:27:53,307 --> 00:27:55,843
在该自定义里还可以做更多事

491
00:27:55,909 --> 00:27:59,680
其中一件就是 设置被覆盖的标题

492
00:27:59,746 --> 00:28:01,548
在内容扩展的顶部

493
00:28:03,116 --> 00:28:06,453
userInfo对象
是一个键值对类型

494
00:28:06,520 --> 00:28:09,156
可以和通知负载相关联

495
00:28:09,523 --> 00:28:12,492
它允许发送更多信息

496
00:28:12,926 --> 00:28:15,963
因此通知并不局限于标题 副标题

497
00:28:16,029 --> 00:28:17,965
和正文

498
00:28:18,398 --> 00:28:21,568
在这里的例子里 我们打包不同的

499
00:28:21,635 --> 00:28:25,706
和该通知相关的信息
比如发布该视频的用户

500
00:28:25,973 --> 00:28:28,442
拍摄地点

501
00:28:28,509 --> 00:28:30,010
以及可能的相关描述

502
00:28:30,077 --> 00:28:33,413
只需从userInfo对象
直接提取这些信息

503
00:28:34,915 --> 00:28:38,118
还可以设置自定义标签

504
00:28:38,185 --> 00:28:41,822
它也已经绑定了
和内容扩展相关的故事板

505
00:28:45,292 --> 00:28:47,461
现在 在代码中已经设置完成

506
00:28:47,528 --> 00:28:49,763
看一下自定义UI的样子

507
00:28:50,497 --> 00:28:53,967
用户在该通知里使用3D Touch

508
00:28:54,401 --> 00:28:57,771
可以看到整个UI已经完全不一样

509
00:28:57,838 --> 00:29:01,108
有些类似一个应用

510
00:29:02,643 --> 00:29:05,179
因此 我们从这种界面

511
00:29:06,413 --> 00:29:08,448
变成这种完全自定义的界面

512
00:29:09,850 --> 00:29:11,852
顶部有自定义标题

513
00:29:13,620 --> 00:29:15,222
完全自定义的UI

514
00:29:15,289 --> 00:29:19,126
视频被所有相关信息包围

515
00:29:19,193 --> 00:29:21,595
你想把这些信息显示为通知的一部分

516
00:29:22,863 --> 00:29:25,566
并且 我们隐藏了默认内容
因为已经包含在

517
00:29:25,632 --> 00:29:28,769
自定义内容中

518
00:29:30,838 --> 00:29:32,105
（默认内容不存在）

519
00:29:33,140 --> 00:29:36,243
好了 再来看一下转换

520
00:29:36,443 --> 00:29:40,113
请注意该内容扩展的初始尺寸

521
00:29:40,180 --> 00:29:41,481
在这里加载的时候

522
00:29:44,651 --> 00:29:47,621
也许已经注意到一开始
它的尺寸较大

523
00:29:47,688 --> 00:29:51,525
然后慢慢缩小
变成和内容扩展完全相同的尺寸

524
00:29:51,925 --> 00:29:55,095
这对用户来说也许不是一个好的体验

525
00:29:55,162 --> 00:29:57,564
如果他们3D Touch后
进入内容扩展

526
00:29:57,998 --> 00:30:01,001
我们也有办法解决这个问题

527
00:30:01,235 --> 00:30:03,637
为此 我们回到info.plist

528
00:30:05,205 --> 00:30:07,674
在那里可以设置一个属性

529
00:30:07,741 --> 00:30:09,276
即ContentSizeRatio

530
00:30:09,910 --> 00:30:11,879
该比例是最好的估测

531
00:30:12,279 --> 00:30:13,847
可以告诉系统

532
00:30:13,914 --> 00:30:17,584
关于内容扩展的高宽比

533
00:30:18,085 --> 00:30:21,555
系统知道了想要加载的

534
00:30:21,622 --> 00:30:22,990
内容扩展的初始尺寸

535
00:30:23,657 --> 00:30:26,226
本例将该值设为0.8

536
00:30:27,461 --> 00:30:29,162
设置完成后

537
00:30:30,797 --> 00:30:33,867
进行转换 现在视频加载非常正确完美

538
00:30:33,934 --> 00:30:35,335
完全符合内容尺寸

539
00:30:35,569 --> 00:30:38,071
对于用户来说 这是种更好的体验

540
00:30:40,340 --> 00:30:43,443
在我们继续之前 来看一下一些关于

541
00:30:43,510 --> 00:30:45,612
自定义这些丰富通知的最佳实践

542
00:30:47,047 --> 00:30:50,017
我们已经强调 可以自定义UI元素

543
00:30:50,551 --> 00:30:52,486
可以显示所有相关信息

544
00:30:52,553 --> 00:30:54,621
利用这些你认为合适的元素

545
00:30:56,290 --> 00:30:59,126
也可以简单地重用应用的视图控制器

546
00:30:59,193 --> 00:31:01,295
在这些通知内容扩展里

547
00:31:01,395 --> 00:31:03,397
不用重复任何工作

548
00:31:03,597 --> 00:31:05,132
它们只是视图控制器

549
00:31:07,568 --> 00:31:09,603
正确的尺寸也很重要

550
00:31:09,670 --> 00:31:13,740
初始加载尺寸也应该

551
00:31:13,807 --> 00:31:15,776
符合内容 符合自定义内容

552
00:31:17,477 --> 00:31:21,548
最后 内容的快速加载和布局也很重要

553
00:31:22,082 --> 00:31:25,485
因为 我们的确想让从通知到

554
00:31:25,552 --> 00:31:28,889
到丰富通知的转换
对用户显得非常自然

555
00:31:31,925 --> 00:31:35,829
好 这就是最终的自定义UI

556
00:31:36,163 --> 00:31:38,165
这里附加了一个视频

557
00:31:38,298 --> 00:31:41,001
然而 无法播放

558
00:31:41,802 --> 00:31:44,972
这看上去很来自某个社交媒体流

559
00:31:45,038 --> 00:31:46,940
但无法和它互动

560
00:31:47,841 --> 00:31:51,645
我们可以在通知里加上
所有这些不同的机制

561
00:31:51,979 --> 00:31:55,616
这将引出最后一个用例
用户自定义输入

562
00:31:56,416 --> 00:31:58,151
（用户自定义输入）

563
00:31:58,218 --> 00:31:59,486
你们其中有些人也许已经了解

564
00:31:59,553 --> 00:32:03,090
内容扩展正文不允许任何轻触动作

565
00:32:03,891 --> 00:32:04,791
然而 别担心

566
00:32:04,858 --> 00:32:08,028
我们提供了多重输入机制

567
00:32:08,095 --> 00:32:11,431
可以让这些通知可互动

568
00:32:12,299 --> 00:32:16,537
它们是媒体按钮 通知操作

569
00:32:17,037 --> 00:32:18,305
和自定义用户输入

570
00:32:18,672 --> 00:32:21,975
来看一下所有这三种不同的互动模型

571
00:32:22,042 --> 00:32:23,243
在本演讲中

572
00:32:25,312 --> 00:32:28,482
如果可以在视频上

573
00:32:28,549 --> 00:32:30,551
覆盖一个播放按钮 不是很好吗

574
00:32:31,518 --> 00:32:33,120
可以这么做

575
00:32:33,187 --> 00:32:37,424
内容扩展允许在内容上覆盖媒体按钮

576
00:32:37,891 --> 00:32:40,360
看一下如何在代码里设置

577
00:32:41,562 --> 00:32:44,331
在这里 我们回到

578
00:32:44,398 --> 00:32:46,834
实施内容扩展协议的类

579
00:32:47,034 --> 00:32:50,771
要取得这些媒体按钮
还需要实施一些方法

580
00:32:51,772 --> 00:32:54,708
第一个是mediaPlayPauseButtonFrame

581
00:32:54,775 --> 00:32:58,378
它将告知系统该媒体按钮

582
00:32:58,445 --> 00:33:00,647
在自定内容中覆盖的确切位置

583
00:33:01,915 --> 00:33:05,152
也可以自定义该媒体按钮的观感

584
00:33:05,219 --> 00:33:07,888
通过指定颜色和类型

585
00:33:08,222 --> 00:33:10,023
本例采用默认值

586
00:33:12,593 --> 00:33:15,128
为了知道用户什么时候真正按下

587
00:33:15,195 --> 00:33:18,365
播放或暂停按钮 还可以回调方法

588
00:33:19,032 --> 00:33:20,701
名为mediaPlay
和mediaPause

589
00:33:21,034 --> 00:33:23,637
本例只转发该调用

590
00:33:23,704 --> 00:33:25,873
至自定义内容的媒体播放器

591
00:33:29,443 --> 00:33:31,879
好 现在媒体按钮已经设置完成

592
00:33:31,945 --> 00:33:34,181
看一下运行时如何运作

593
00:33:35,782 --> 00:33:38,585
用户进入自定义内容

594
00:33:38,886 --> 00:33:40,854
只需通过按下播放按钮

595
00:33:40,921 --> 00:33:43,223
开始播放视频 就这么简单

596
00:33:46,293 --> 00:33:49,563
让我们继续添加更多的互动到通知

597
00:33:50,297 --> 00:33:52,032
如前所述 这是一个媒体发布

598
00:33:52,099 --> 00:33:56,637
我们想得到用户的反馈

599
00:33:56,870 --> 00:34:00,374
用类似点赞或留言的操作

600
00:34:01,141 --> 00:34:02,976
来看如何设置

601
00:34:04,011 --> 00:34:06,246
通常的操作处理是

602
00:34:06,313 --> 00:34:09,016
当用户有了一个操作
你会在主应用里

603
00:34:09,081 --> 00:34:10,317
收到回应

604
00:34:11,018 --> 00:34:13,853
然而 如果已经设置了一个内容扩展

605
00:34:14,021 --> 00:34:16,623
则可以拦截该操作

606
00:34:16,690 --> 00:34:18,192
就在内容扩展里

607
00:34:18,625 --> 00:34:22,062
可以对此采取行动 更新UI

608
00:34:22,129 --> 00:34:23,496
按照你想要的方式

609
00:34:24,231 --> 00:34:26,733
也可以只是转发该操作

610
00:34:26,800 --> 00:34:28,936
至应用 如果想把所有的

611
00:34:29,002 --> 00:34:30,270
操作处理都进行集中

612
00:34:31,737 --> 00:34:33,940
来看如何在代码中设置

613
00:34:35,074 --> 00:34:37,444
在这里创建了两个操作

614
00:34:37,511 --> 00:34:40,112
一个是为了点赞
是一个简单的UNNotificationAction

615
00:34:40,848 --> 00:34:43,951
为评论操作 创建一个文本输入操作

616
00:34:45,719 --> 00:34:49,322
然后用刚创建的两个操作设置类别

617
00:34:49,889 --> 00:34:52,592
给它与相关内容扩展

618
00:34:52,659 --> 00:34:54,094
相同的标识符

619
00:34:56,463 --> 00:34:59,132
回到内容扩展代码

620
00:34:59,199 --> 00:35:02,269
为处理操作而实施的主方法

621
00:35:02,336 --> 00:35:05,506
是didReceive(_response:
completionHandler方法

622
00:35:06,240 --> 00:35:08,609
UNNotificationResponse对象

623
00:35:08,675 --> 00:35:11,845
包含所有已执行操作的信息

624
00:35:11,912 --> 00:35:15,215
以及该操作面向的通知请求

625
00:35:16,850 --> 00:35:18,886
我们在示例中做的第一件事

626
00:35:18,952 --> 00:35:21,054
是将该响应发布给服务器

627
00:35:21,221 --> 00:35:24,458
因为我们只想在内容扩展里处理操作

628
00:35:24,525 --> 00:35:26,026
而不用发给应用

629
00:35:27,194 --> 00:35:30,797
然后 查看操作标识符
并确定它是一个点赞操作

630
00:35:31,431 --> 00:35:34,535
然后直接更新自定义UI

631
00:35:34,601 --> 00:35:35,636
用点赞表情

632
00:35:37,337 --> 00:35:41,008
最后 调用带doNotDismiss选项的
completionHandler

633
00:35:41,308 --> 00:35:44,545
因为我们想让用户继续内容互动

634
00:35:44,611 --> 00:35:48,315
因为在用户完成该操作后
视频可能还在播放

635
00:35:50,250 --> 00:35:54,021
所以 设置好该操作后 看一下结果

636
00:35:56,190 --> 00:35:57,224
（点赞和评论）

637
00:35:57,558 --> 00:36:00,827
用户开始播放视频 进行点赞操作

638
00:36:00,928 --> 00:36:02,563
我们更新了UI

639
00:36:02,763 --> 00:36:05,732
用户得到了良好的反馈

640
00:36:05,799 --> 00:36:07,634
他们正参与该内容其中

641
00:36:07,701 --> 00:36:10,737
视频继续播放 内容并未消失

642
00:36:12,172 --> 00:36:14,975
继续来看添加的下一个操作

643
00:36:15,042 --> 00:36:16,443
即评论操作

644
00:36:16,610 --> 00:36:18,679
在这里 还是查看操作标识符

645
00:36:18,745 --> 00:36:20,848
确定它是评论操作

646
00:36:21,582 --> 00:36:24,751
因为我们知道
已经将它设为文本输入操作

647
00:36:24,818 --> 00:36:28,055
首先检查响应是否和文本响应相关

648
00:36:29,456 --> 00:36:32,559
提取用户可能已经输入的文本

649
00:36:32,626 --> 00:36:33,894
作为该操作的一部分

650
00:36:34,261 --> 00:36:37,698
然后在自定义标签里设置

651
00:36:37,764 --> 00:36:38,899
该标签也和自定义UI相关

652
00:36:40,000 --> 00:36:43,871
再次调用completionHandler
并让通知不会消失

653
00:36:45,606 --> 00:36:47,441
设置完成后

654
00:36:47,975 --> 00:36:51,879
用户又开始播放视频 按下评论按钮

655
00:36:52,112 --> 00:36:53,981
只需在那里添加评论

656
00:36:54,314 --> 00:36:57,918
一经发布 我们就马上更新内容

657
00:36:58,685 --> 00:37:01,121
用户获得当前操作

658
00:37:01,188 --> 00:37:04,291
的实时反馈并且非常参与到

659
00:37:04,358 --> 00:37:07,027
和通知相关的内容当中
并且 他们不需要

660
00:37:07,094 --> 00:37:09,096
进入到应用完成这些操作

661
00:37:12,599 --> 00:37:14,034
好的

662
00:37:14,101 --> 00:37:18,105
所以我们已经设置完成这两个操作
但有时候 一个赞

663
00:37:18,338 --> 00:37:20,674
是不够的 而评论又太过

664
00:37:21,808 --> 00:37:24,578
对于社交媒体发布 也许我们想要

665
00:37:24,745 --> 00:37:27,014
用户给出自己的反应

666
00:37:27,714 --> 00:37:31,685
一种方式是把所有这些不同的反应

667
00:37:31,952 --> 00:37:34,788
添加到和通知相关的操作中

668
00:37:35,422 --> 00:37:38,258
然而 看上去不太美观
而且选项非常多

669
00:37:38,325 --> 00:37:39,726
造成重复

670
00:37:40,861 --> 00:37:44,531
把这些替换为
自定义用户输入视图 怎么样

671
00:37:45,032 --> 00:37:48,335
就显示在用户键盘的位置

672
00:37:49,336 --> 00:37:50,904
像这样？

673
00:37:52,005 --> 00:37:54,474
确实可以这么做

674
00:37:54,808 --> 00:37:58,812
实现它可以采用一个现有的
UIkit API名为UIResponder

675
00:38:00,047 --> 00:38:03,016
来看一下如何在代码中设置

676
00:38:03,283 --> 00:38:05,085
现在为反应创建一个新操作

677
00:38:05,752 --> 00:38:08,589
即一个简单的UNNotificationAction

678
00:38:08,655 --> 00:38:12,292
然后用这个创建的操作更新类别

679
00:38:15,229 --> 00:38:20,400
在实施了内容扩展协议的类中

680
00:38:20,634 --> 00:38:23,737
只需覆盖一些方法 告知系统

681
00:38:24,037 --> 00:38:26,440
你正在提供自定义输入源

682
00:38:26,607 --> 00:38:28,609
第一个要覆盖的方法

683
00:38:28,675 --> 00:38:31,812
是canBecomeFirstResponder
并返回值真

684
00:38:32,846 --> 00:38:35,082
然后覆盖inputView方法

685
00:38:35,148 --> 00:38:37,417
返回自定义输入字段

686
00:38:38,018 --> 00:38:41,755
你对如何设置该输入视图
有着完全的掌控

687
00:38:41,922 --> 00:38:45,859
以及所有可能和通知相关的

688
00:38:45,926 --> 00:38:47,394
操作和不同的互动

689
00:38:47,461 --> 00:38:51,198
不用回到默认通知操作处理

690
00:38:51,265 --> 00:38:53,333
因为这是你的自定义输入视图

691
00:38:56,870 --> 00:38:58,238
设置完成后

692
00:38:58,505 --> 00:39:02,075
回到didReceive
回应操作方法

693
00:39:02,342 --> 00:39:06,113
在这里 确定该操作和回应相关

694
00:39:07,014 --> 00:39:10,250
我们只需调用
self.becomeFirstResponder

695
00:39:11,151 --> 00:39:13,754
仅此而已 该调用会告知系统

696
00:39:13,820 --> 00:39:17,024
显示自定义输入视图在键盘位置

697
00:39:18,225 --> 00:39:22,062
在私有的handle
ReactionButtonPress方法中

698
00:39:22,396 --> 00:39:23,997
更新自定义标签

699
00:39:24,198 --> 00:39:27,100
并调用resignFirstResponder

700
00:39:27,167 --> 00:39:29,403
将会关闭自定义输入视图

701
00:39:30,904 --> 00:39:33,240
我知道代码很多

702
00:39:33,307 --> 00:39:35,409
看一下如何它实际上如何工作

703
00:39:36,076 --> 00:39:39,546
可以看到在这里 我们有新的反应操作

704
00:39:42,449 --> 00:39:44,151
当用户按下这个

705
00:39:44,218 --> 00:39:46,587
自定义输入视图会显示在底部

706
00:39:46,887 --> 00:39:50,757
任何点击表情的操作发生
我们就更新自定义UI

707
00:39:53,427 --> 00:39:56,597
这是一个非常自定义的方法

708
00:39:56,663 --> 00:39:58,131
让用户和内容
以你想要的方式进行互动

709
00:39:58,198 --> 00:40:01,735
而不是局限于
只按些简单的操作按钮

710
00:40:03,103 --> 00:40:05,539
我们从这样的界面

711
00:40:06,740 --> 00:40:10,244
变成这样更简洁
以及有着更好的用户体验的界面

712
00:40:13,380 --> 00:40:17,050
用户输入自定义的最佳实践有哪些？

713
00:40:18,418 --> 00:40:21,355
让我强调一下 媒体按钮是唯一

714
00:40:21,421 --> 00:40:24,758
可以覆盖控制的机制 需要时请采用

715
00:40:24,925 --> 00:40:27,794
可以和它们关联视频以及某些播放

716
00:40:29,196 --> 00:40:32,633
确保操作只针对通知的上下文

717
00:40:32,900 --> 00:40:36,403
这样用户才能知道他们操作的是什么

718
00:40:38,505 --> 00:40:41,175
你可以决定是否取消内容扩展

719
00:40:41,241 --> 00:40:44,044
根据你想要表达的参与形式

720
00:40:44,111 --> 00:40:46,847
作为通知的一部分

721
00:40:48,282 --> 00:40:51,285
然后 用户自定义视图会提供完全控制

722
00:40:51,451 --> 00:40:54,821
这些通知的输入机制

723
00:40:57,090 --> 00:41:00,861
在今天结束之前 我们想展示几个应用

724
00:41:00,928 --> 00:41:04,164
我们觉得真正利用了这些API

725
00:41:04,665 --> 00:41:07,067
大部分都在去年的WWDC上宣布过

726
00:41:07,134 --> 00:41:10,804
并展示它们如何用不同的方式
以及这些不同的API

727
00:41:12,105 --> 00:41:13,807
MIC News应用

728
00:41:14,141 --> 00:41:19,613
提供非常丰富的界面和媒体
以及新闻标题

729
00:41:20,113 --> 00:41:22,816
和关于该内容的短评

730
00:41:23,083 --> 00:41:25,252
并提供了如何和该内容互动的

731
00:41:25,319 --> 00:41:26,386
选择操作

732
00:41:28,188 --> 00:41:31,959
Castro Podcast应用显示
接下来要播放的podcast

733
00:41:32,025 --> 00:41:35,562
并提供修改podcast列表的选项

734
00:41:35,629 --> 00:41:38,232
也是利用通知操作

735
00:41:40,067 --> 00:41:43,203
然后是Shazam内容扩展提供了播放按钮

736
00:41:43,270 --> 00:41:45,138
可以播放最后录制的歌曲

737
00:41:45,205 --> 00:41:47,674
就从通知里选择 还提供了

738
00:41:47,741 --> 00:41:49,743
购买和分享该媒体的选择

739
00:41:52,513 --> 00:41:56,350
好了 总结一下今天演讲的全部内容

740
00:41:56,884 --> 00:41:59,786
首先进行了通知概述

741
00:41:59,853 --> 00:42:03,257
以及所有不同的 可用于通知的API

742
00:42:03,323 --> 00:42:04,424
在你的应用里

743
00:42:05,292 --> 00:42:08,529
然后介绍了关于隐藏通知内容的新概念

744
00:42:08,595 --> 00:42:13,033
以及如何完全自定义显示给用户的观感

745
00:42:14,535 --> 00:42:17,571
然后讲了修改通知推送内容

746
00:42:17,738 --> 00:42:18,972
利用服务扩展

747
00:42:20,641 --> 00:42:23,510
然后讲了自定义丰富通知界面

748
00:42:23,577 --> 00:42:25,112
利用内容扩展

749
00:42:26,246 --> 00:42:29,883
紧接着我们讲了和该丰富通知相关联的

750
00:42:29,950 --> 00:42:32,386
自定义用户输入

751
00:42:32,886 --> 00:42:35,355
我们非常激动看到大家勇往直前

752
00:42:35,422 --> 00:42:38,859
充分利用这些不同的工具

753
00:42:38,926 --> 00:42:41,094
为用户创造更丰富的通知体验

754
00:42:42,296 --> 00:42:45,432
关于本次演讲的更多信息
请查看该网站

755
00:42:45,499 --> 00:42:46,433
（更多信息）

756
00:42:46,733 --> 00:42:49,403
这就是今天演讲的全部内容
非常感谢大家的到来

757
00:42:49,469 --> 00:42:50,671
祝在WWDC过得愉快

