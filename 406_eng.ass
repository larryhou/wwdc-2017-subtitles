[Script Info]
; Script generated by FFmpeg/Lavc57.89.100
ScriptType: v4.00+
PlayResX: 384
PlayResY: 288

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,16,&Hffffff,&Hffffff,&H0,&H0,0,0,0,0,100,100,0,0,1,1,0,2,10,10,10,0

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:24.19,0:00:26.90,Default,,0,0,0,,Hi, and welcome to finding bugs
Dialogue: 0,0:00:27.09,0:00:29.15,Default,,0,0,0,,using Xcode Runtime tools.
Dialogue: 0,0:00:29.90,0:00:31.74,Default,,0,0,0,,My name is Kuba, I am an
Dialogue: 0,0:00:31.74,0:00:33.26,Default,,0,0,0,,engineer on the program, another
Dialogue: 0,0:00:33.26,0:00:35.02,Default,,0,0,0,,system inside developer tools.
Dialogue: 0,0:00:35.60,0:00:37.24,Default,,0,0,0,,And today we will be talking
Dialogue: 0,0:00:37.24,0:00:39.11,Default,,0,0,0,,about finding bugs at the
Dialogue: 0,0:00:39.18,0:00:41.25,Default,,0,0,0,,program runtime and the tools
Dialogue: 0,0:00:41.25,0:00:41.97,Default,,0,0,0,,for that.
Dialogue: 0,0:00:42.17,0:00:44.54,Default,,0,0,0,,So, let's jump in.
Dialogue: 0,0:00:44.74,0:00:46.85,Default,,0,0,0,,Xcode already has several ways
Dialogue: 0,0:00:46.85,0:00:47.94,Default,,0,0,0,,of telling you that you have
Dialogue: 0,0:00:47.94,0:00:49.04,Default,,0,0,0,,some bug in your program.
Dialogue: 0,0:00:49.33,0:00:50.94,Default,,0,0,0,,For example, with compiler
Dialogue: 0,0:00:50.94,0:00:51.56,Default,,0,0,0,,errors.
Dialogue: 0,0:00:52.07,0:00:52.98,Default,,0,0,0,,Compiler warnings.
Dialogue: 0,0:00:53.70,0:00:54.66,Default,,0,0,0,,Analyzer warnings.
Dialogue: 0,0:00:55.30,0:00:56.05,Default,,0,0,0,,Or test failures.
Dialogue: 0,0:00:57.20,0:00:59.01,Default,,0,0,0,,Last year in Xcode 8 we have
Dialogue: 0,0:00:59.05,0:01:00.42,Default,,0,0,0,,added a whole new category
Dialogue: 0,0:01:01.05,0:01:02.34,Default,,0,0,0,,called Runtime Issues.
Dialogue: 0,0:01:03.44,0:01:05.25,Default,,0,0,0,,Those issues are found at the
Dialogue: 0,0:01:05.25,0:01:07.39,Default,,0,0,0,,program runtime by several
Dialogue: 0,0:01:08.01,0:01:09.12,Default,,0,0,0,,different tools.
Dialogue: 0,0:01:09.30,0:01:10.50,Default,,0,0,0,,When you run and debug your
Dialogue: 0,0:01:10.50,0:01:12.28,Default,,0,0,0,,applications as you are used to,
Dialogue: 0,0:01:12.45,0:01:14.63,Default,,0,0,0,,these tools find and detect bugs
Dialogue: 0,0:01:14.63,0:01:16.38,Default,,0,0,0,,at runtime and they display them
Dialogue: 0,0:01:16.88,0:01:18.33,Default,,0,0,0,,in the Runtime Issues Navigator
Dialogue: 0,0:01:18.38,0:01:19.14,Default,,0,0,0,,in Xcode.
Dialogue: 0,0:01:20.32,0:01:22.49,Default,,0,0,0,,If you are not actively watching
Dialogue: 0,0:01:22.57,0:01:24.93,Default,,0,0,0,,this navigator, Xcode also
Dialogue: 0,0:01:24.93,0:01:26.30,Default,,0,0,0,,indicates that it found some
Dialogue: 0,0:01:26.30,0:01:28.52,Default,,0,0,0,,runtime issue by showing this
Dialogue: 0,0:01:28.52,0:01:30.64,Default,,0,0,0,,purple warning icon.
Dialogue: 0,0:01:31.25,0:01:34.45,Default,,0,0,0,,You can click any of these
Dialogue: 0,0:01:34.45,0:01:36.82,Default,,0,0,0,,issues in the Navigator and the
Dialogue: 0,0:01:36.96,0:01:38.82,Default,,0,0,0,,editor will tell you which line
Dialogue: 0,0:01:38.82,0:01:40.75,Default,,0,0,0,,of code contains the bug.
Dialogue: 0,0:01:42.07,0:01:43.84,Default,,0,0,0,,The source of this bug can vary
Dialogue: 0,0:01:43.84,0:01:45.28,Default,,0,0,0,,because different tools report
Dialogue: 0,0:01:45.28,0:01:47.41,Default,,0,0,0,,different types of bugs but all
Dialogue: 0,0:01:47.41,0:01:48.35,Default,,0,0,0,,these tools that we're going to
Dialogue: 0,0:01:48.35,0:01:50.30,Default,,0,0,0,,talk today in this session, you
Dialogue: 0,0:01:50.30,0:01:51.85,Default,,0,0,0,,can find in the diagnostic step
Dialogue: 0,0:01:51.98,0:01:52.81,Default,,0,0,0,,in the scheme editor.
Dialogue: 0,0:01:53.52,0:01:55.49,Default,,0,0,0,,And in Xcode 9, it now contains
Dialogue: 0,0:01:55.49,0:01:56.20,Default,,0,0,0,,some new features.
Dialogue: 0,0:01:56.79,0:01:58.50,Default,,0,0,0,,So, you'll see that it now has
Dialogue: 0,0:01:58.64,0:02:00.09,Default,,0,0,0,,address sanitizer, threat
Dialogue: 0,0:02:00.09,0:02:02.59,Default,,0,0,0,,sanitizer, undefined behavior
Dialogue: 0,0:02:02.59,0:02:04.69,Default,,0,0,0,,sanitizer and also main thread
Dialogue: 0,0:02:04.69,0:02:05.05,Default,,0,0,0,,checker.
Dialogue: 0,0:02:05.74,0:02:07.76,Default,,0,0,0,,So, these tools, which all find
Dialogue: 0,0:02:07.76,0:02:09.79,Default,,0,0,0,,bugs at program runtime, are
Dialogue: 0,0:02:10.13,0:02:11.46,Default,,0,0,0,,what we're going to talk today
Dialogue: 0,0:02:11.64,0:02:12.34,Default,,0,0,0,,in this session.
Dialogue: 0,0:02:13.10,0:02:14.90,Default,,0,0,0,,So, first I will introduce main
Dialogue: 0,0:02:14.90,0:02:16.30,Default,,0,0,0,,thread checker, a completely new
Dialogue: 0,0:02:16.30,0:02:17.44,Default,,0,0,0,,tool in Xcode 9.
Dialogue: 0,0:02:18.76,0:02:20.58,Default,,0,0,0,,Then I will talk about address
Dialogue: 0,0:02:20.58,0:02:22.17,Default,,0,0,0,,sanitizer and thread sanitizer
Dialogue: 0,0:02:22.34,0:02:23.72,Default,,0,0,0,,and the improvement that we have
Dialogue: 0,0:02:23.72,0:02:25.36,Default,,0,0,0,,made to these tools this year.
Dialogue: 0,0:02:26.54,0:02:27.94,Default,,0,0,0,,We will introduce another
Dialogue: 0,0:02:27.94,0:02:29.61,Default,,0,0,0,,completely new tool, undefined
Dialogue: 0,0:02:29.61,0:02:30.71,Default,,0,0,0,,behavior sanitizer.
Dialogue: 0,0:02:30.71,0:02:33.28,Default,,0,0,0,,And finally we will provide tips
Dialogue: 0,0:02:33.32,0:02:35.39,Default,,0,0,0,,and best practices, how you
Dialogue: 0,0:02:35.39,0:02:36.39,Default,,0,0,0,,should be using those tools
Dialogue: 0,0:02:36.39,0:02:36.99,Default,,0,0,0,,effectively.
Dialogue: 0,0:02:37.86,0:02:39.56,Default,,0,0,0,,So, let's jump in.
Dialogue: 0,0:02:40.64,0:02:42.74,Default,,0,0,0,,The main thread checker is a
Dialogue: 0,0:02:42.74,0:02:44.43,Default,,0,0,0,,completely new tool in Xcode 9
Dialogue: 0,0:02:44.50,0:02:46.50,Default,,0,0,0,,and it detects violations of
Dialogue: 0,0:02:46.50,0:02:47.74,Default,,0,0,0,,some commonly used APIs.
Dialogue: 0,0:02:47.74,0:02:50.84,Default,,0,0,0,,And specifically it focuses on
Dialogue: 0,0:02:50.84,0:02:52.60,Default,,0,0,0,,UI updates and multithreading.
Dialogue: 0,0:02:53.76,0:02:56.34,Default,,0,0,0,,Some APIs require that you only
Dialogue: 0,0:02:56.34,0:02:58.17,Default,,0,0,0,,use them from the main thread.
Dialogue: 0,0:02:58.76,0:03:00.59,Default,,0,0,0,,For example, that's the case for
Dialogue: 0,0:03:00.59,0:03:02.27,Default,,0,0,0,,many APIs from the AppKit and
Dialogue: 0,0:03:02.27,0:03:03.26,Default,,0,0,0,,UIKit frameworks.
Dialogue: 0,0:03:04.09,0:03:05.28,Default,,0,0,0,,And they are used by most
Dialogue: 0,0:03:05.28,0:03:06.74,Default,,0,0,0,,graphical macOS and iOS
Dialogue: 0,0:03:06.74,0:03:07.43,Default,,0,0,0,,applications.
Dialogue: 0,0:03:07.75,0:03:08.87,Default,,0,0,0,,And I assume that if you are
Dialogue: 0,0:03:08.87,0:03:10.63,Default,,0,0,0,,using those frameworks, you
Dialogue: 0,0:03:10.63,0:03:11.69,Default,,0,0,0,,already know about this
Dialogue: 0,0:03:11.69,0:03:13.20,Default,,0,0,0,,restriction that you have to
Dialogue: 0,0:03:13.20,0:03:14.53,Default,,0,0,0,,call those APIs from the main
Dialogue: 0,0:03:14.53,0:03:14.74,Default,,0,0,0,,thread.
Dialogue: 0,0:03:14.74,0:03:16.83,Default,,0,0,0,,And that's easy to do.
Dialogue: 0,0:03:16.90,0:03:18.13,Default,,0,0,0,,We just make sure that we will
Dialogue: 0,0:03:18.19,0:03:19.52,Default,,0,0,0,,call those APIs on the main
Dialogue: 0,0:03:19.52,0:03:20.04,Default,,0,0,0,,thread only.
Dialogue: 0,0:03:21.52,0:03:23.16,Default,,0,0,0,,But there are tasks that you
Dialogue: 0,0:03:23.16,0:03:24.62,Default,,0,0,0,,don't want to be executed on the
Dialogue: 0,0:03:24.62,0:03:26.52,Default,,0,0,0,,main thread, like file downloads
Dialogue: 0,0:03:26.52,0:03:27.72,Default,,0,0,0,,where you need to wait for some
Dialogue: 0,0:03:27.72,0:03:29.76,Default,,0,0,0,,data or image processing, which
Dialogue: 0,0:03:29.92,0:03:31.07,Default,,0,0,0,,usually involves some, like,
Dialogue: 0,0:03:31.07,0:03:32.13,Default,,0,0,0,,heavy computations.
Dialogue: 0,0:03:33.26,0:03:34.98,Default,,0,0,0,,So, these tasks need to be moved
Dialogue: 0,0:03:35.15,0:03:36.75,Default,,0,0,0,,off the main thread so that the
Dialogue: 0,0:03:36.75,0:03:39.41,Default,,0,0,0,,UI is still responsive and your
Dialogue: 0,0:03:39.41,0:03:40.66,Default,,0,0,0,,user interaction is not blocked
Dialogue: 0,0:03:40.66,0:03:41.14,Default,,0,0,0,,in your app.
Dialogue: 0,0:03:42.06,0:03:44.13,Default,,0,0,0,,However, these tasks also need
Dialogue: 0,0:03:44.13,0:03:45.68,Default,,0,0,0,,to trigger UI updates.
Dialogue: 0,0:03:46.76,0:03:48.83,Default,,0,0,0,,And if those UI updates involve
Dialogue: 0,0:03:48.83,0:03:50.94,Default,,0,0,0,,calling AppKit or UI kit APIs,
Dialogue: 0,0:03:51.36,0:03:52.90,Default,,0,0,0,,that update needs to happen from
Dialogue: 0,0:03:52.90,0:03:53.38,Default,,0,0,0,,the main thread.
Dialogue: 0,0:03:53.57,0:03:55.03,Default,,0,0,0,,And it's very easy to make a
Dialogue: 0,0:03:55.03,0:03:56.62,Default,,0,0,0,,mistake, to accidently call this
Dialogue: 0,0:03:56.62,0:03:58.25,Default,,0,0,0,,UI update from the wrong thread.
Dialogue: 0,0:03:59.15,0:04:00.06,Default,,0,0,0,,And it can have serious
Dialogue: 0,0:04:00.06,0:04:01.99,Default,,0,0,0,,consequences such as missed UI
Dialogue: 0,0:04:01.99,0:04:03.70,Default,,0,0,0,,updates where the UI just does
Dialogue: 0,0:04:03.70,0:04:05.62,Default,,0,0,0,,not update at all or other
Dialogue: 0,0:04:05.62,0:04:06.34,Default,,0,0,0,,visual defects.
Dialogue: 0,0:04:06.92,0:04:08.01,Default,,0,0,0,,But even more serious things
Dialogue: 0,0:04:08.01,0:04:09.29,Default,,0,0,0,,like data corruptions or
Dialogue: 0,0:04:09.29,0:04:09.66,Default,,0,0,0,,crashes.
Dialogue: 0,0:04:10.09,0:04:12.21,Default,,0,0,0,,So, to avoid this problem we
Dialogue: 0,0:04:12.21,0:04:13.36,Default,,0,0,0,,need to make sure that this UI
Dialogue: 0,0:04:13.36,0:04:15.04,Default,,0,0,0,,update only happens from the
Dialogue: 0,0:04:15.04,0:04:15.44,Default,,0,0,0,,main thread.
Dialogue: 0,0:04:16.63,0:04:18.39,Default,,0,0,0,,So, with that, I'd like to
Dialogue: 0,0:04:18.39,0:04:19.48,Default,,0,0,0,,introduce Main Thread Checker
Dialogue: 0,0:04:19.48,0:04:21.00,Default,,0,0,0,,and show it to you right now.
Dialogue: 0,0:04:30.44,0:04:31.96,Default,,0,0,0,,So, what I have here is a very
Dialogue: 0,0:04:31.96,0:04:33.13,Default,,0,0,0,,simple application which
Dialogue: 0,0:04:33.13,0:04:34.39,Default,,0,0,0,,downloads some data from the
Dialogue: 0,0:04:34.39,0:04:34.82,Default,,0,0,0,,internet.
Dialogue: 0,0:04:35.39,0:04:36.74,Default,,0,0,0,,It's actually downloading a file
Dialogue: 0,0:04:36.74,0:04:38.87,Default,,0,0,0,,from this long URL which is
Dialogue: 0,0:04:38.91,0:04:39.45,Default,,0,0,0,,present on the
Dialogue: 0,0:04:39.45,0:04:40.86,Default,,0,0,0,,developer.apple.com website.
Dialogue: 0,0:04:41.30,0:04:42.74,Default,,0,0,0,,It's some sample code that Apple
Dialogue: 0,0:04:42.74,0:04:44.50,Default,,0,0,0,,has published in 2013.
Dialogue: 0,0:04:45.04,0:04:46.18,Default,,0,0,0,,And it's a zip file.
Dialogue: 0,0:04:46.18,0:04:48.36,Default,,0,0,0,,It's several megabytes large and
Dialogue: 0,0:04:48.36,0:04:49.70,Default,,0,0,0,,it will serve as an example file
Dialogue: 0,0:04:49.70,0:04:50.52,Default,,0,0,0,,if you want to download.
Dialogue: 0,0:04:51.71,0:04:53.22,Default,,0,0,0,,To download this file, I'm using
Dialogue: 0,0:04:53.22,0:04:56.04,Default,,0,0,0,,a class called URLSession that's
Dialogue: 0,0:04:56.04,0:04:57.50,Default,,0,0,0,,provided by Foundation and it's
Dialogue: 0,0:04:57.50,0:04:58.59,Default,,0,0,0,,a very convenient way of
Dialogue: 0,0:04:58.62,0:04:59.40,Default,,0,0,0,,downloading files.
Dialogue: 0,0:05:01.78,0:05:03.74,Default,,0,0,0,,The UI of my application is very
Dialogue: 0,0:05:03.74,0:05:04.45,Default,,0,0,0,,simple.
Dialogue: 0,0:05:05.28,0:05:05.95,Default,,0,0,0,,Let's take a look.
Dialogue: 0,0:05:05.95,0:05:07.81,Default,,0,0,0,,It contains a single button and
Dialogue: 0,0:05:07.81,0:05:08.60,Default,,0,0,0,,a progress bar.
Dialogue: 0,0:05:08.60,0:05:10.58,Default,,0,0,0,,So, I have actually implemented
Dialogue: 0,0:05:10.58,0:05:12.09,Default,,0,0,0,,the progress callback of
Dialogue: 0,0:05:12.09,0:05:12.78,Default,,0,0,0,,URLSession.
Dialogue: 0,0:05:12.78,0:05:14.12,Default,,0,0,0,,And from this callback I am
Dialogue: 0,0:05:14.12,0:05:15.39,Default,,0,0,0,,updating the value on this
Dialogue: 0,0:05:15.43,0:05:16.03,Default,,0,0,0,,progress bar.
Dialogue: 0,0:05:16.37,0:05:17.88,Default,,0,0,0,,So, let's run the application
Dialogue: 0,0:05:18.16,0:05:20.51,Default,,0,0,0,,and see if it shows the progress
Dialogue: 0,0:05:20.51,0:05:22.21,Default,,0,0,0,,of the download as it's supposed
Dialogue: 0,0:05:22.21,0:05:22.42,Default,,0,0,0,,to.
Dialogue: 0,0:05:22.90,0:05:24.71,Default,,0,0,0,,Let me now click the button to
Dialogue: 0,0:05:24.71,0:05:25.74,Default,,0,0,0,,start the download.
Dialogue: 0,0:05:26.13,0:05:26.98,Default,,0,0,0,,And you might see that
Dialogue: 0,0:05:27.01,0:05:28.30,Default,,0,0,0,,something's not quite right,
Dialogue: 0,0:05:28.45,0:05:30.04,Default,,0,0,0,,because the progress bar is just
Dialogue: 0,0:05:30.04,0:05:31.08,Default,,0,0,0,,stuck at the beginning.
Dialogue: 0,0:05:31.62,0:05:33.60,Default,,0,0,0,,And now it has for some reason
Dialogue: 0,0:05:33.60,0:05:34.79,Default,,0,0,0,,jumped straight to the end.
Dialogue: 0,0:05:35.96,0:05:37.37,Default,,0,0,0,,So, now I might be wondering
Dialogue: 0,0:05:37.37,0:05:38.58,Default,,0,0,0,,that there's some bug in my
Dialogue: 0,0:05:38.58,0:05:40.49,Default,,0,0,0,,application or URLSession may
Dialogue: 0,0:05:40.49,0:05:41.67,Default,,0,0,0,,not be working correctly.
Dialogue: 0,0:05:42.55,0:05:43.42,Default,,0,0,0,,So, the best thing about this
Dialogue: 0,0:05:43.42,0:05:44.50,Default,,0,0,0,,feature is that I don't need to
Dialogue: 0,0:05:44.50,0:05:46.48,Default,,0,0,0,,guess what wrong - Xcode has
Dialogue: 0,0:05:46.48,0:05:47.50,Default,,0,0,0,,already found the problem.
Dialogue: 0,0:05:48.20,0:05:49.81,Default,,0,0,0,,If we take a look back into
Dialogue: 0,0:05:49.81,0:05:51.17,Default,,0,0,0,,Xcode, we'll see that it's
Dialogue: 0,0:05:51.17,0:05:53.83,Default,,0,0,0,,informing us that it has found a
Dialogue: 0,0:05:53.83,0:05:54.52,Default,,0,0,0,,Runtime issue.
Dialogue: 0,0:05:55.60,0:05:57.10,Default,,0,0,0,,Let me click this Runtime issue
Dialogue: 0,0:05:57.23,0:05:58.71,Default,,0,0,0,,to get some details, and you'll
Dialogue: 0,0:05:58.71,0:05:59.85,Default,,0,0,0,,see that the navigator has now
Dialogue: 0,0:05:59.94,0:06:01.47,Default,,0,0,0,,switched to the Runtime Issues
Dialogue: 0,0:06:01.47,0:06:02.08,Default,,0,0,0,,navigator.
Dialogue: 0,0:06:02.62,0:06:04.41,Default,,0,0,0,,And it's informing me that I'm
Dialogue: 0,0:06:04.41,0:06:06.66,Default,,0,0,0,,calling some UI API from a
Dialogue: 0,0:06:06.66,0:06:07.29,Default,,0,0,0,,background thread.
Dialogue: 0,0:06:08.76,0:06:11.09,Default,,0,0,0,,I'll click this issue to go to
Dialogue: 0,0:06:11.18,0:06:12.66,Default,,0,0,0,,the code which contains the
Dialogue: 0,0:06:12.66,0:06:13.79,Default,,0,0,0,,invalid API code.
Dialogue: 0,0:06:14.44,0:06:16.36,Default,,0,0,0,,And in this case we can see that
Dialogue: 0,0:06:16.36,0:06:18.12,Default,,0,0,0,,we are actually setting a new
Dialogue: 0,0:06:18.12,0:06:20.00,Default,,0,0,0,,value on the progress indicator
Dialogue: 0,0:06:20.26,0:06:21.80,Default,,0,0,0,,from a background thread and
Dialogue: 0,0:06:21.80,0:06:23.71,Default,,0,0,0,,that has to be done only from
Dialogue: 0,0:06:23.71,0:06:25.65,Default,,0,0,0,,the main thread.
Dialogue: 0,0:06:25.78,0:06:26.92,Default,,0,0,0,,So, that's a bit unexpected
Dialogue: 0,0:06:26.92,0:06:28.46,Default,,0,0,0,,because I'm not trying to run
Dialogue: 0,0:06:28.46,0:06:29.73,Default,,0,0,0,,this code on a background
Dialogue: 0,0:06:29.73,0:06:29.93,Default,,0,0,0,,thread.
Dialogue: 0,0:06:30.32,0:06:31.31,Default,,0,0,0,,I'm actually not doing any
Dialogue: 0,0:06:31.31,0:06:32.73,Default,,0,0,0,,threading in my code at all.
Dialogue: 0,0:06:32.73,0:06:35.64,Default,,0,0,0,,So, the real problem is that I
Dialogue: 0,0:06:35.64,0:06:36.87,Default,,0,0,0,,actually made a mistake when I
Dialogue: 0,0:06:36.87,0:06:39.22,Default,,0,0,0,,was grading my URLSession class,
Dialogue: 0,0:06:39.46,0:06:40.08,Default,,0,0,0,,sorry, object.
Dialogue: 0,0:06:40.66,0:06:42.31,Default,,0,0,0,,On this line, where I'm creating
Dialogue: 0,0:06:42.31,0:06:44.48,Default,,0,0,0,,the URLSession, I'm supposed to
Dialogue: 0,0:06:44.48,0:06:46.78,Default,,0,0,0,,specify which view should be
Dialogue: 0,0:06:46.78,0:06:48.47,Default,,0,0,0,,used for the callbacks for both
Dialogue: 0,0:06:48.47,0:06:49.77,Default,,0,0,0,,the progress and download
Dialogue: 0,0:06:49.77,0:06:50.91,Default,,0,0,0,,finished callback.
Dialogue: 0,0:06:51.09,0:06:52.66,Default,,0,0,0,,Instead of providing a queue, I
Dialogue: 0,0:06:52.92,0:06:53.91,Default,,0,0,0,,just said nil.
Dialogue: 0,0:06:53.91,0:06:54.90,Default,,0,0,0,,That means I don't care.
Dialogue: 0,0:06:54.90,0:06:56.86,Default,,0,0,0,,And URLSession will probably
Dialogue: 0,0:06:57.29,0:06:59.51,Default,,0,0,0,,involve those callbacks from a
Dialogue: 0,0:06:59.90,0:07:01.57,Default,,0,0,0,,background queue.
Dialogue: 0,0:07:01.74,0:07:04.07,Default,,0,0,0,,So, now we know why these
Dialogue: 0,0:07:04.07,0:07:05.22,Default,,0,0,0,,callbacks are called from a
Dialogue: 0,0:07:05.22,0:07:05.83,Default,,0,0,0,,background thread.
Dialogue: 0,0:07:06.35,0:07:08.23,Default,,0,0,0,,To fix this, I could either use
Dialogue: 0,0:07:08.31,0:07:10.63,Default,,0,0,0,,GCD and dispatch the UIUpdates
Dialogue: 0,0:07:10.63,0:07:11.47,Default,,0,0,0,,back to the main thread.
Dialogue: 0,0:07:12.16,0:07:13.93,Default,,0,0,0,,Or in this simple case I could
Dialogue: 0,0:07:13.93,0:07:15.95,Default,,0,0,0,,just ask URLSession to directly
Dialogue: 0,0:07:16.32,0:07:17.79,Default,,0,0,0,,call my callbacks on the main
Dialogue: 0,0:07:17.79,0:07:18.03,Default,,0,0,0,,queue.
Dialogue: 0,0:07:18.03,0:07:19.15,Default,,0,0,0,,So, let's do that instead.
Dialogue: 0,0:07:20.52,0:07:23.09,Default,,0,0,0,,I'll just ask it to call my
Dialogue: 0,0:07:23.09,0:07:24.76,Default,,0,0,0,,callbacks on the main queue and
Dialogue: 0,0:07:25.04,0:07:26.25,Default,,0,0,0,,let's run the application one
Dialogue: 0,0:07:26.25,0:07:27.79,Default,,0,0,0,,more time to see if that fixed
Dialogue: 0,0:07:27.79,0:07:28.38,Default,,0,0,0,,our problem.
Dialogue: 0,0:07:29.60,0:07:31.17,Default,,0,0,0,,If I click the button this time,
Dialogue: 0,0:07:31.55,0:07:32.76,Default,,0,0,0,,we'll see that the progress bar
Dialogue: 0,0:07:32.76,0:07:33.92,Default,,0,0,0,,now animates smoothly and it
Dialogue: 0,0:07:34.16,0:07:35.41,Default,,0,0,0,,indicates the progress of our
Dialogue: 0,0:07:35.41,0:07:35.85,Default,,0,0,0,,download.
Dialogue: 0,0:07:39.52,0:07:43.05,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:07:43.55,0:07:44.47,Default,,0,0,0,,Sorry, I need to switch back to
Dialogue: 0,0:07:44.47,0:07:44.89,Default,,0,0,0,,my slide.
Dialogue: 0,0:07:45.25,0:07:49.50,Default,,0,0,0,,There we go.
Dialogue: 0,0:07:51.60,0:07:55.03,Default,,0,0,0,,So, we've seen an example of how
Dialogue: 0,0:07:55.03,0:07:56.26,Default,,0,0,0,,Main Thread Checker helps us
Dialogue: 0,0:07:56.45,0:07:58.54,Default,,0,0,0,,find and fix a bug where we're
Dialogue: 0,0:07:58.54,0:07:59.92,Default,,0,0,0,,calling some API from the wrong
Dialogue: 0,0:07:59.92,0:08:00.10,Default,,0,0,0,,thread.
Dialogue: 0,0:08:00.89,0:08:02.91,Default,,0,0,0,,Notice, that I didn't need to
Dialogue: 0,0:08:02.96,0:08:04.58,Default,,0,0,0,,turn these two on because it's
Dialogue: 0,0:08:04.58,0:08:06.07,Default,,0,0,0,,actually enabled by default
Dialogue: 0,0:08:06.27,0:08:07.64,Default,,0,0,0,,whenever you are using the Xcode
Dialogue: 0,0:08:07.64,0:08:08.02,Default,,0,0,0,,debugger.
Dialogue: 0,0:08:08.73,0:08:11.74,Default,,0,0,0,,But if you want to find this
Dialogue: 0,0:08:11.74,0:08:13.80,Default,,0,0,0,,code in Xcode, you'll see that
Dialogue: 0,0:08:13.80,0:08:15.71,Default,,0,0,0,,it's available in the diagnostic
Dialogue: 0,0:08:15.71,0:08:17.54,Default,,0,0,0,,step again and you'll notice
Dialogue: 0,0:08:17.54,0:08:19.70,Default,,0,0,0,,that now in Xcode 9 we have this
Dialogue: 0,0:08:19.75,0:08:21.37,Default,,0,0,0,,checkbox called Main Thread
Dialogue: 0,0:08:21.37,0:08:21.72,Default,,0,0,0,,Checker.
Dialogue: 0,0:08:22.61,0:08:23.62,Default,,0,0,0,,So, this is the place where you
Dialogue: 0,0:08:23.62,0:08:25.06,Default,,0,0,0,,can turn the two on or off.
Dialogue: 0,0:08:26.30,0:08:27.81,Default,,0,0,0,,If you want to make the debugger
Dialogue: 0,0:08:28.07,0:08:29.79,Default,,0,0,0,,stop on a violation of this
Dialogue: 0,0:08:29.79,0:08:31.73,Default,,0,0,0,,rule, you can use the pause on
Dialogue: 0,0:08:31.73,0:08:34.01,Default,,0,0,0,,issues checkbox and with that,
Dialogue: 0,0:08:34.01,0:08:35.20,Default,,0,0,0,,the debugger will stop when it
Dialogue: 0,0:08:35.20,0:08:37.05,Default,,0,0,0,,detects an issue and you can
Dialogue: 0,0:08:37.05,0:08:38.32,Default,,0,0,0,,inspect your current program
Dialogue: 0,0:08:38.32,0:08:40.10,Default,,0,0,0,,state and to figure out what
Dialogue: 0,0:08:40.10,0:08:40.55,Default,,0,0,0,,went wrong.
Dialogue: 0,0:08:40.55,0:08:44.53,Default,,0,0,0,,Now, let's talk about some
Dialogue: 0,0:08:44.53,0:08:47.06,Default,,0,0,0,,common mistakes that leap to the
Dialogue: 0,0:08:47.06,0:08:48.22,Default,,0,0,0,,bugs that Main Thread Checker
Dialogue: 0,0:08:48.22,0:08:48.63,Default,,0,0,0,,detects.
Dialogue: 0,0:08:49.49,0:08:50.65,Default,,0,0,0,,So, as you saw in the demo,
Dialogue: 0,0:08:51.05,0:08:52.36,Default,,0,0,0,,networking callbacks is one
Dialogue: 0,0:08:52.36,0:08:55.45,Default,,0,0,0,,place where we, is a place which
Dialogue: 0,0:08:55.50,0:08:56.70,Default,,0,0,0,,often happens from the main
Dialogue: 0,0:08:56.70,0:08:57.64,Default,,0,0,0,,threads, sorry, from the
Dialogue: 0,0:08:57.64,0:08:58.20,Default,,0,0,0,,background thread.
Dialogue: 0,0:08:59.25,0:09:00.27,Default,,0,0,0,,So, you need to be careful and
Dialogue: 0,0:09:00.27,0:09:01.81,Default,,0,0,0,,you need to dispatch your
Dialogue: 0,0:09:01.81,0:09:03.32,Default,,0,0,0,,UIUpdates back to the main
Dialogue: 0,0:09:03.32,0:09:03.59,Default,,0,0,0,,threads.
Dialogue: 0,0:09:04.64,0:09:05.57,Default,,0,0,0,,Another common place for
Dialogue: 0,0:09:05.57,0:09:06.40,Default,,0,0,0,,mistakes is when you are
Dialogue: 0,0:09:06.40,0:09:08.28,Default,,0,0,0,,creating and destroying NSView
Dialogue: 0,0:09:08.28,0:09:09.34,Default,,0,0,0,,or UIView objects.
Dialogue: 0,0:09:09.34,0:09:11.05,Default,,0,0,0,,This also needs to happen only
Dialogue: 0,0:09:11.05,0:09:12.43,Default,,0,0,0,,from the main thread.
Dialogue: 0,0:09:13.30,0:09:15.89,Default,,0,0,0,,If you are writing libraries or
Dialogue: 0,0:09:15.89,0:09:17.52,Default,,0,0,0,,frameworks and you are providing
Dialogue: 0,0:09:17.58,0:09:18.87,Default,,0,0,0,,some asynchronous API.
Dialogue: 0,0:09:19.66,0:09:20.82,Default,,0,0,0,,You should be very careful when
Dialogue: 0,0:09:20.82,0:09:21.85,Default,,0,0,0,,designing those APIs.
Dialogue: 0,0:09:22.51,0:09:23.38,Default,,0,0,0,,Let's take a look.
Dialogue: 0,0:09:23.79,0:09:27.20,Default,,0,0,0,,Let's say that we want to have
Dialogue: 0,0:09:27.20,0:09:29.37,Default,,0,0,0,,an API that performs some long
Dialogue: 0,0:09:29.37,0:09:30.50,Default,,0,0,0,,and heavy computation.
Dialogue: 0,0:09:30.50,0:09:32.00,Default,,0,0,0,,So, it does that in an
Dialogue: 0,0:09:32.04,0:09:33.05,Default,,0,0,0,,asynchronous fashion.
Dialogue: 0,0:09:34.57,0:09:36.15,Default,,0,0,0,,Here the caller of the API needs
Dialogue: 0,0:09:36.15,0:09:38.65,Default,,0,0,0,,to provide a closure to the API
Dialogue: 0,0:09:38.65,0:09:40.44,Default,,0,0,0,,and the closure will be used as
Dialogue: 0,0:09:40.44,0:09:41.40,Default,,0,0,0,,a completion handler.
Dialogue: 0,0:09:41.53,0:09:42.96,Default,,0,0,0,,So, when the task is completed,
Dialogue: 0,0:09:43.63,0:09:45.58,Default,,0,0,0,,you, the API will call the
Dialogue: 0,0:09:45.58,0:09:46.34,Default,,0,0,0,,provided closure.
Dialogue: 0,0:09:47.27,0:09:48.64,Default,,0,0,0,,However, in this code sample,
Dialogue: 0,0:09:48.64,0:09:50.76,Default,,0,0,0,,it's not obvious which queue or
Dialogue: 0,0:09:50.76,0:09:51.94,Default,,0,0,0,,thread will be used for this
Dialogue: 0,0:09:51.94,0:09:52.33,Default,,0,0,0,,closure.
Dialogue: 0,0:09:53.24,0:09:54.80,Default,,0,0,0,,And it can easily lead to a
Dialogue: 0,0:09:54.80,0:09:56.16,Default,,0,0,0,,mistake where some code is
Dialogue: 0,0:09:56.16,0:09:57.52,Default,,0,0,0,,executed from the wrong thread.
Dialogue: 0,0:10:01.22,0:10:04.00,Default,,0,0,0,,Good APIs let or even force
Dialogue: 0,0:10:04.00,0:10:05.99,Default,,0,0,0,,their users to specify which
Dialogue: 0,0:10:06.09,0:10:07.74,Default,,0,0,0,,view should be used for the
Dialogue: 0,0:10:07.74,0:10:08.51,Default,,0,0,0,,completion handle.
Dialogue: 0,0:10:08.56,0:10:09.84,Default,,0,0,0,,So, if you read this code
Dialogue: 0,0:10:09.84,0:10:11.94,Default,,0,0,0,,example, it's obvious that the
Dialogue: 0,0:10:11.94,0:10:13.37,Default,,0,0,0,,closure will be called on the
Dialogue: 0,0:10:13.37,0:10:14.77,Default,,0,0,0,,provided queue and you don't
Dialogue: 0,0:10:14.77,0:10:15.73,Default,,0,0,0,,even need to read the
Dialogue: 0,0:10:15.73,0:10:19.94,Default,,0,0,0,,documentation for the API to
Dialogue: 0,0:10:20.20,0:10:20.56,Default,,0,0,0,,learn that.
Dialogue: 0,0:10:20.56,0:10:21.79,Default,,0,0,0,,So, as I said, Main Thread
Dialogue: 0,0:10:21.79,0:10:23.34,Default,,0,0,0,,Checker detects violations of
Dialogue: 0,0:10:23.34,0:10:24.41,Default,,0,0,0,,API threading rules.
Dialogue: 0,0:10:25.26,0:10:27.54,Default,,0,0,0,,It supports AppKit, UIKit and
Dialogue: 0,0:10:27.54,0:10:28.99,Default,,0,0,0,,WebKit which are three very
Dialogue: 0,0:10:28.99,0:10:30.46,Default,,0,0,0,,commonly used frameworks and
Dialogue: 0,0:10:30.46,0:10:32.54,Default,,0,0,0,,they all have the same main
Dialogue: 0,0:10:32.54,0:10:34.64,Default,,0,0,0,,thread only requirement on a lot
Dialogue: 0,0:10:34.64,0:10:35.14,Default,,0,0,0,,of their APIs.
Dialogue: 0,0:10:35.14,0:10:38.51,Default,,0,0,0,,The tool supports both Swift and
Dialogue: 0,0:10:38.57,0:10:39.26,Default,,0,0,0,,C languages.
Dialogue: 0,0:10:39.78,0:10:41.09,Default,,0,0,0,,And in contrast to the other
Dialogue: 0,0:10:41.09,0:10:42.44,Default,,0,0,0,,tools that we are going to talk
Dialogue: 0,0:10:42.44,0:10:44.55,Default,,0,0,0,,about today, it does not require
Dialogue: 0,0:10:44.55,0:10:45.34,Default,,0,0,0,,recompilation.
Dialogue: 0,0:10:46.01,0:10:46.96,Default,,0,0,0,,So, you can even use it on
Dialogue: 0,0:10:46.96,0:10:47.96,Default,,0,0,0,,existing binaries.
Dialogue: 0,0:10:48.54,0:10:51.02,Default,,0,0,0,,The best part is that is
Dialogue: 0,0:10:51.02,0:10:52.58,Default,,0,0,0,,actually enabled by default.
Dialogue: 0,0:10:52.58,0:10:53.68,Default,,0,0,0,,So, you don't need to do
Dialogue: 0,0:10:53.68,0:10:55.00,Default,,0,0,0,,anything to start getting these
Dialogue: 0,0:10:55.00,0:10:55.93,Default,,0,0,0,,warnings from the tool.
Dialogue: 0,0:10:55.93,0:10:57.02,Default,,0,0,0,,It's actually enabled whenever
Dialogue: 0,0:10:57.02,0:10:58.40,Default,,0,0,0,,you're using the Xcode debugger.
Dialogue: 0,0:10:59.66,0:11:00.73,Default,,0,0,0,,So, that was Main Thread
Dialogue: 0,0:11:00.73,0:11:02.89,Default,,0,0,0,,Checker, a completely new tool
Dialogue: 0,0:11:03.72,0:11:04.72,Default,,0,0,0,,in Xcode 9.
Dialogue: 0,0:11:06.52,0:11:11.58,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:11:12.08,0:11:13.84,Default,,0,0,0,,Now let's talk about another
Dialogue: 0,0:11:13.88,0:11:15.89,Default,,0,0,0,,large source of problems -
Dialogue: 0,0:11:16.20,0:11:16.86,Default,,0,0,0,,memory issues.
Dialogue: 0,0:11:17.29,0:11:18.48,Default,,0,0,0,,And let's talk about Address
Dialogue: 0,0:11:18.48,0:11:20.39,Default,,0,0,0,,Sanitizer, which finds those
Dialogue: 0,0:11:20.44,0:11:20.81,Default,,0,0,0,,issues.
Dialogue: 0,0:11:22.20,0:11:24.11,Default,,0,0,0,,Address Sanitizer has been
Dialogue: 0,0:11:24.11,0:11:25.97,Default,,0,0,0,,introduced in Xcode 7, two years
Dialogue: 0,0:11:25.97,0:11:26.35,Default,,0,0,0,,ago.
Dialogue: 0,0:11:26.35,0:11:28.10,Default,,0,0,0,,And it's proven to be a great
Dialogue: 0,0:11:28.10,0:11:29.05,Default,,0,0,0,,tool because it finds
Dialogue: 0,0:11:29.36,0:11:30.57,Default,,0,0,0,,security-critical issues.
Dialogue: 0,0:11:30.68,0:11:32.15,Default,,0,0,0,,For example, use after free bugs
Dialogue: 0,0:11:32.61,0:11:33.47,Default,,0,0,0,,and buffer overflows.
Dialogue: 0,0:11:34.71,0:11:36.23,Default,,0,0,0,,It's also very helpful when
Dialogue: 0,0:11:36.35,0:11:37.71,Default,,0,0,0,,trying to diagnose hard to
Dialogue: 0,0:11:37.71,0:11:38.57,Default,,0,0,0,,reproduce crashes.
Dialogue: 0,0:11:38.57,0:11:40.00,Default,,0,0,0,,Because it often makes those
Dialogue: 0,0:11:40.00,0:11:42.46,Default,,0,0,0,,crashes deterministic and it
Dialogue: 0,0:11:42.46,0:11:44.22,Default,,0,0,0,,finds memory corruptions when
Dialogue: 0,0:11:44.22,0:11:45.41,Default,,0,0,0,,they actually happen and not
Dialogue: 0,0:11:45.46,0:11:46.66,Default,,0,0,0,,some time later when the
Dialogue: 0,0:11:46.71,0:11:47.68,Default,,0,0,0,,corruption affects some
Dialogue: 0,0:11:47.68,0:11:48.52,Default,,0,0,0,,unrelated code.
Dialogue: 0,0:11:49.42,0:11:51.07,Default,,0,0,0,,If you'd like to know about how
Dialogue: 0,0:11:51.07,0:11:52.76,Default,,0,0,0,,this tool works and which exact
Dialogue: 0,0:11:52.86,0:11:54.27,Default,,0,0,0,,bugs can it find, I recommend
Dialogue: 0,0:11:54.27,0:11:56.20,Default,,0,0,0,,that you watch a WWDC from two
Dialogue: 0,0:11:56.20,0:11:57.80,Default,,0,0,0,,years ago called advanced
Dialogue: 0,0:11:57.84,0:11:59.80,Default,,0,0,0,,debugging and Address Sanitizer.
Dialogue: 0,0:12:00.67,0:12:01.60,Default,,0,0,0,,In that session, we have
Dialogue: 0,0:12:01.66,0:12:02.90,Default,,0,0,0,,introduced the tool and we have
Dialogue: 0,0:12:02.90,0:12:04.66,Default,,0,0,0,,also talked about how it works
Dialogue: 0,0:12:04.66,0:12:05.81,Default,,0,0,0,,under the hood.
Dialogue: 0,0:12:06.65,0:12:08.25,Default,,0,0,0,,Address Sanitizer is also
Dialogue: 0,0:12:08.25,0:12:10.42,Default,,0,0,0,,integrated into Xcode UI and
Dialogue: 0,0:12:10.42,0:12:11.14,Default,,0,0,0,,into Debugger.
Dialogue: 0,0:12:11.14,0:12:12.45,Default,,0,0,0,,Let's take a look.
Dialogue: 0,0:12:12.51,0:12:13.82,Default,,0,0,0,,If you want to use Address
Dialogue: 0,0:12:13.82,0:12:15.36,Default,,0,0,0,,Sanitizer, all you have to do is
Dialogue: 0,0:12:15.44,0:12:16.65,Default,,0,0,0,,again go to the scheme editor
Dialogue: 0,0:12:16.65,0:12:18.15,Default,,0,0,0,,and you'll find that there's a
Dialogue: 0,0:12:18.15,0:12:19.16,Default,,0,0,0,,checkbox called Address
Dialogue: 0,0:12:19.16,0:12:20.97,Default,,0,0,0,,Sanitizer which can be used to
Dialogue: 0,0:12:20.97,0:12:21.72,Default,,0,0,0,,enable this tool.
Dialogue: 0,0:12:22.82,0:12:24.59,Default,,0,0,0,,In Xcode 9 we have added another
Dialogue: 0,0:12:24.74,0:12:26.43,Default,,0,0,0,,checkbox that turns on an
Dialogue: 0,0:12:26.43,0:12:28.56,Default,,0,0,0,,optional check of use of stack
Dialogue: 0,0:12:28.56,0:12:30.05,Default,,0,0,0,,after return, and I will
Dialogue: 0,0:12:30.05,0:12:31.05,Default,,0,0,0,,describe this feature later.
Dialogue: 0,0:12:31.95,0:12:33.69,Default,,0,0,0,,But you can also notice that we
Dialogue: 0,0:12:33.69,0:12:35.02,Default,,0,0,0,,have now added compatibility
Dialogue: 0,0:12:35.02,0:12:35.86,Default,,0,0,0,,with Malloc Scribble.
Dialogue: 0,0:12:35.86,0:12:38.15,Default,,0,0,0,,So, you can enable both of these
Dialogue: 0,0:12:38.15,0:12:41.11,Default,,0,0,0,,tools at the same time.
Dialogue: 0,0:12:41.11,0:12:42.86,Default,,0,0,0,,You can then run and debug your
Dialogue: 0,0:12:42.86,0:12:44.57,Default,,0,0,0,,application as you are used to.
Dialogue: 0,0:12:45.17,0:12:47.78,Default,,0,0,0,,And if your program doesn't have
Dialogue: 0,0:12:47.78,0:12:49.05,Default,,0,0,0,,any memory issues and if it's
Dialogue: 0,0:12:49.05,0:12:50.25,Default,,0,0,0,,not touching any memory that
Dialogue: 0,0:12:50.25,0:12:52.72,Default,,0,0,0,,it's not supposed to, then good.
Dialogue: 0,0:12:52.72,0:12:53.82,Default,,0,0,0,,Address Sanitizer will not
Dialogue: 0,0:12:53.82,0:12:55.12,Default,,0,0,0,,interrupt your work flow.
Dialogue: 0,0:12:55.47,0:12:57.61,Default,,0,0,0,,But if it finds a problem, it
Dialogue: 0,0:12:57.61,0:12:59.01,Default,,0,0,0,,will stop the program and it
Dialogue: 0,0:12:59.01,0:13:00.25,Default,,0,0,0,,will describe what the issue is.
Dialogue: 0,0:13:00.36,0:13:02.20,Default,,0,0,0,,So, in this case we are
Dialogue: 0,0:13:02.20,0:13:03.35,Default,,0,0,0,,accidently using some
Dialogue: 0,0:13:03.35,0:13:04.42,Default,,0,0,0,,deallocated memory.
Dialogue: 0,0:13:04.46,0:13:06.46,Default,,0,0,0,,And that's a serious bug.
Dialogue: 0,0:13:07.06,0:13:08.47,Default,,0,0,0,,And when Address Sanitizer finds
Dialogue: 0,0:13:08.47,0:13:10.32,Default,,0,0,0,,this bug, it will also display
Dialogue: 0,0:13:10.62,0:13:12.02,Default,,0,0,0,,some additional information
Dialogue: 0,0:13:12.19,0:13:13.34,Default,,0,0,0,,about that memory that we're
Dialogue: 0,0:13:13.34,0:13:13.87,Default,,0,0,0,,accessing.
Dialogue: 0,0:13:14.45,0:13:15.81,Default,,0,0,0,,And we'll get not just its
Dialogue: 0,0:13:15.81,0:13:17.82,Default,,0,0,0,,address but we'll also get some
Dialogue: 0,0:13:17.82,0:13:18.86,Default,,0,0,0,,description of it.
Dialogue: 0,0:13:18.86,0:13:21.24,Default,,0,0,0,,How large the heap region is and
Dialogue: 0,0:13:21.24,0:13:22.49,Default,,0,0,0,,which byte out of it are we
Dialogue: 0,0:13:22.49,0:13:23.05,Default,,0,0,0,,accessing.
Dialogue: 0,0:13:23.70,0:13:25.51,Default,,0,0,0,,And we also get the allocation
Dialogue: 0,0:13:25.51,0:13:27.59,Default,,0,0,0,,and deallocation backtrace of
Dialogue: 0,0:13:27.59,0:13:29.23,Default,,0,0,0,,how that memory was allocated.
Dialogue: 0,0:13:29.23,0:13:31.48,Default,,0,0,0,,So, this is super useful
Dialogue: 0,0:13:31.48,0:13:32.56,Default,,0,0,0,,information when you're dealing
Dialogue: 0,0:13:32.56,0:13:33.94,Default,,0,0,0,,with use after free bugs,
Dialogue: 0,0:13:34.53,0:13:35.97,Default,,0,0,0,,because this really helps to
Dialogue: 0,0:13:35.97,0:13:37.83,Default,,0,0,0,,diagnose them, right?
Dialogue: 0,0:13:39.46,0:13:41.73,Default,,0,0,0,,So, we've seen what Address
Dialogue: 0,0:13:41.73,0:13:43.03,Default,,0,0,0,,Sanitizer is but now let's talk
Dialogue: 0,0:13:43.03,0:13:44.21,Default,,0,0,0,,about some new features that we
Dialogue: 0,0:13:44.21,0:13:45.17,Default,,0,0,0,,have added this year.
Dialogue: 0,0:13:45.55,0:13:47.35,Default,,0,0,0,,It now detects two new classes
Dialogue: 0,0:13:47.35,0:13:48.16,Default,,0,0,0,,of bugs.
Dialogue: 0,0:13:48.16,0:13:49.81,Default,,0,0,0,,Use after scope and use after
Dialogue: 0,0:13:49.81,0:13:50.24,Default,,0,0,0,,return.
Dialogue: 0,0:13:50.24,0:13:51.95,Default,,0,0,0,,And it's also now compatible
Dialogue: 0,0:13:51.95,0:13:52.73,Default,,0,0,0,,with Malloc Scribble.
Dialogue: 0,0:13:52.96,0:13:53.74,Default,,0,0,0,,Let's take a look at some
Dialogue: 0,0:13:53.74,0:13:54.26,Default,,0,0,0,,examples.
Dialogue: 0,0:13:54.92,0:13:58.92,Default,,0,0,0,,In this code sample, let's say
Dialogue: 0,0:13:58.92,0:14:00.49,Default,,0,0,0,,we have a variable that is
Dialogue: 0,0:14:00.61,0:14:02.39,Default,,0,0,0,,defined inside the body of an if
Dialogue: 0,0:14:02.39,0:14:02.86,Default,,0,0,0,,statement.
Dialogue: 0,0:14:04.48,0:14:06.47,Default,,0,0,0,,We take a pointer to this
Dialogue: 0,0:14:06.47,0:14:09.58,Default,,0,0,0,,variable and then later outside
Dialogue: 0,0:14:09.78,0:14:11.81,Default,,0,0,0,,that if statement, we are using
Dialogue: 0,0:14:11.81,0:14:12.96,Default,,0,0,0,,that pointer to save a new
Dialogue: 0,0:14:12.96,0:14:13.46,Default,,0,0,0,,value.
Dialogue: 0,0:14:14.23,0:14:15.39,Default,,0,0,0,,So, this is any value because we
Dialogue: 0,0:14:15.39,0:14:16.80,Default,,0,0,0,,are, the pointer is no longer
Dialogue: 0,0:14:16.80,0:14:17.38,Default,,0,0,0,,valid here.
Dialogue: 0,0:14:17.67,0:14:19.04,Default,,0,0,0,,And address sanitizer is now
Dialogue: 0,0:14:19.04,0:14:20.70,Default,,0,0,0,,able to detect and describe the
Dialogue: 0,0:14:20.70,0:14:21.31,Default,,0,0,0,,issue for you.
Dialogue: 0,0:14:21.79,0:14:26.55,Default,,0,0,0,,Another type of bug happens when
Dialogue: 0,0:14:26.55,0:14:28.54,Default,,0,0,0,,you're returning, when you're
Dialogue: 0,0:14:28.54,0:14:30.48,Default,,0,0,0,,using a pointer out, after
Dialogue: 0,0:14:30.48,0:14:31.84,Default,,0,0,0,,returning from a function.
Dialogue: 0,0:14:31.84,0:14:33.48,Default,,0,0,0,,So, in this case the function
Dialogue: 0,0:14:33.48,0:14:34.99,Default,,0,0,0,,returns a pointer to its local
Dialogue: 0,0:14:34.99,0:14:37.45,Default,,0,0,0,,variable which means that once
Dialogue: 0,0:14:37.45,0:14:38.97,Default,,0,0,0,,the function returns, that
Dialogue: 0,0:14:38.97,0:14:40.22,Default,,0,0,0,,pointer is no longer valid.
Dialogue: 0,0:14:40.22,0:14:42.70,Default,,0,0,0,,And if we try to use it, we are
Dialogue: 0,0:14:42.70,0:14:44.05,Default,,0,0,0,,again accessing garbage memory
Dialogue: 0,0:14:44.05,0:14:45.43,Default,,0,0,0,,and the Address Sanitizer is
Dialogue: 0,0:14:45.43,0:14:47.31,Default,,0,0,0,,able to detect that and describe
Dialogue: 0,0:14:47.31,0:14:48.14,Default,,0,0,0,,that issue for you.
Dialogue: 0,0:14:48.80,0:14:50.55,Default,,0,0,0,,However, this check is not
Dialogue: 0,0:14:50.55,0:14:52.39,Default,,0,0,0,,enabled by default and because
Dialogue: 0,0:14:52.39,0:14:53.68,Default,,0,0,0,,it has some extra overhead and
Dialogue: 0,0:14:53.68,0:14:54.60,Default,,0,0,0,,you have to opt into it.
Dialogue: 0,0:14:55.01,0:14:56.75,Default,,0,0,0,,To do so, you can use that extra
Dialogue: 0,0:14:56.75,0:14:58.23,Default,,0,0,0,,checkbox in the scheme editor
Dialogue: 0,0:14:58.29,0:14:59.50,Default,,0,0,0,,that I mentioned and showed
Dialogue: 0,0:14:59.50,0:14:59.85,Default,,0,0,0,,earlier.
Dialogue: 0,0:15:04.03,0:15:05.94,Default,,0,0,0,,Now, if your projects are
Dialogue: 0,0:15:05.94,0:15:07.85,Default,,0,0,0,,written in Swift, you might be
Dialogue: 0,0:15:07.85,0:15:09.61,Default,,0,0,0,,wondering why should I care
Dialogue: 0,0:15:09.61,0:15:10.69,Default,,0,0,0,,about Address Sanitizer?
Dialogue: 0,0:15:11.29,0:15:13.73,Default,,0,0,0,,Swift is a much safer language
Dialogue: 0,0:15:13.81,0:15:15.14,Default,,0,0,0,,but the reality is that a lot of
Dialogue: 0,0:15:15.14,0:15:16.56,Default,,0,0,0,,projects are still mixed and
Dialogue: 0,0:15:16.56,0:15:18.14,Default,,0,0,0,,they have bugs written in C and
Dialogue: 0,0:15:18.14,0:15:18.79,Default,,0,0,0,,Objective C.
Dialogue: 0,0:15:19.04,0:15:20.76,Default,,0,0,0,,And for those parts that are
Dialogue: 0,0:15:20.76,0:15:21.96,Default,,0,0,0,,written in C and Objective C,
Dialogue: 0,0:15:22.27,0:15:23.51,Default,,0,0,0,,address sanitizer is still a
Dialogue: 0,0:15:23.51,0:15:24.87,Default,,0,0,0,,very effective tool and it will
Dialogue: 0,0:15:24.87,0:15:26.43,Default,,0,0,0,,find memory issues in that, in
Dialogue: 0,0:15:26.43,0:15:29.03,Default,,0,0,0,,these parts of your project.
Dialogue: 0,0:15:29.10,0:15:30.65,Default,,0,0,0,,Some of you might also be using
Dialogue: 0,0:15:30.65,0:15:32.91,Default,,0,0,0,,unsafe pointer types which, as
Dialogue: 0,0:15:32.91,0:15:35.23,Default,,0,0,0,,their name suggests, are not
Dialogue: 0,0:15:35.23,0:15:36.29,Default,,0,0,0,,memory safe and you have to be
Dialogue: 0,0:15:36.35,0:15:37.39,Default,,0,0,0,,careful when using those.
Dialogue: 0,0:15:37.73,0:15:38.52,Default,,0,0,0,,So, let's take code as an
Dialogue: 0,0:15:38.52,0:15:39.01,Default,,0,0,0,,example.
Dialogue: 0,0:15:40.45,0:15:42.42,Default,,0,0,0,,In this code, I have a string,
Dialogue: 0,0:15:42.42,0:15:43.16,Default,,0,0,0,,Hello, World.
Dialogue: 0,0:15:43.16,0:15:45.13,Default,,0,0,0,,And I am trying to convert it
Dialogue: 0,0:15:45.16,0:15:47.89,Default,,0,0,0,,into a C-style string using
Dialogue: 0,0:15:47.89,0:15:48.54,Default,,0,0,0,,unsafe windows.
Dialogue: 0,0:15:49.90,0:15:51.28,Default,,0,0,0,,So what I'll do is that I will
Dialogue: 0,0:15:51.28,0:15:53.25,Default,,0,0,0,,call this API called with C
Dialogue: 0,0:15:53.32,0:15:55.28,Default,,0,0,0,,string and it will create an
Dialogue: 0,0:15:55.28,0:15:56.29,Default,,0,0,0,,unsafe pointer for me.
Dialogue: 0,0:15:56.84,0:15:59.02,Default,,0,0,0,,And this will provide this
Dialogue: 0,0:15:59.02,0:16:00.42,Default,,0,0,0,,unsafe pointer to me in this
Dialogue: 0,0:16:00.48,0:16:01.83,Default,,0,0,0,,closure that I am passing
Dialogue: 0,0:16:01.83,0:16:02.09,Default,,0,0,0,,through it.
Dialogue: 0,0:16:03.31,0:16:05.54,Default,,0,0,0,,If I store this pointer outside
Dialogue: 0,0:16:05.54,0:16:07.60,Default,,0,0,0,,of the closure, I am violating
Dialogue: 0,0:16:07.60,0:16:08.78,Default,,0,0,0,,the rules of the C string.
Dialogue: 0,0:16:08.78,0:16:10.37,Default,,0,0,0,,And that means that when I try
Dialogue: 0,0:16:10.37,0:16:13.01,Default,,0,0,0,,to use this leak unsafe pointer
Dialogue: 0,0:16:13.41,0:16:15.11,Default,,0,0,0,,later, I am again accessing
Dialogue: 0,0:16:15.11,0:16:15.86,Default,,0,0,0,,invalid memory.
Dialogue: 0,0:16:15.99,0:16:17.70,Default,,0,0,0,,And Address Sanitizer is able to
Dialogue: 0,0:16:17.70,0:16:19.39,Default,,0,0,0,,detect invalid uses of unsafe
Dialogue: 0,0:16:19.39,0:16:20.62,Default,,0,0,0,,pointers like this, even in
Dialogue: 0,0:16:20.62,0:16:21.12,Default,,0,0,0,,Swift code.
Dialogue: 0,0:16:24.78,0:16:26.35,Default,,0,0,0,,To fix this, we need to make
Dialogue: 0,0:16:26.35,0:16:27.66,Default,,0,0,0,,sure that we only use that
Dialogue: 0,0:16:27.76,0:16:30.09,Default,,0,0,0,,provided unsafe pointer within
Dialogue: 0,0:16:30.09,0:16:31.32,Default,,0,0,0,,the closure that we are passing
Dialogue: 0,0:16:31.41,0:16:32.08,Default,,0,0,0,,with C string.
Dialogue: 0,0:16:32.12,0:16:34.29,Default,,0,0,0,,So, if we move the code into the
Dialogue: 0,0:16:34.29,0:16:35.90,Default,,0,0,0,,closure like this, that fixes
Dialogue: 0,0:16:35.90,0:16:36.52,Default,,0,0,0,,the problem.
Dialogue: 0,0:16:36.52,0:16:38.23,Default,,0,0,0,,And in this case, we can
Dialogue: 0,0:16:38.29,0:16:39.80,Default,,0,0,0,,simplify the code even further
Dialogue: 0,0:16:39.80,0:16:41.14,Default,,0,0,0,,and just remove that local
Dialogue: 0,0:16:41.14,0:16:42.09,Default,,0,0,0,,variable completely.
Dialogue: 0,0:16:42.57,0:16:44.13,Default,,0,0,0,,It is generally a good idea
Dialogue: 0,0:16:44.74,0:16:46.49,Default,,0,0,0,,never to store unsafe pointers
Dialogue: 0,0:16:46.49,0:16:47.79,Default,,0,0,0,,into local variables or
Dialogue: 0,0:16:47.79,0:16:48.49,Default,,0,0,0,,properties.
Dialogue: 0,0:16:49.89,0:16:51.48,Default,,0,0,0,,So, if you are using unsafe
Dialogue: 0,0:16:51.48,0:16:52.91,Default,,0,0,0,,pointers in your Swift projects,
Dialogue: 0,0:16:53.37,0:16:54.63,Default,,0,0,0,,I definitely will recommend that
Dialogue: 0,0:16:54.63,0:16:56.10,Default,,0,0,0,,you turn Address Sanitizer on in
Dialogue: 0,0:16:56.10,0:16:57.62,Default,,0,0,0,,your projects just to make sure
Dialogue: 0,0:16:57.62,0:16:58.68,Default,,0,0,0,,that you are not accidently
Dialogue: 0,0:16:58.68,0:17:00.00,Default,,0,0,0,,using unsafe pointers wrong.
Dialogue: 0,0:17:03.12,0:17:05.16,Default,,0,0,0,,So we've seen how Address
Dialogue: 0,0:17:05.16,0:17:07.63,Default,,0,0,0,,Sanitizer helps you find and fix
Dialogue: 0,0:17:07.63,0:17:07.94,Default,,0,0,0,,bugs.
Dialogue: 0,0:17:07.94,0:17:09.57,Default,,0,0,0,,But it can also be a very
Dialogue: 0,0:17:09.57,0:17:11.03,Default,,0,0,0,,helpful tool for general
Dialogue: 0,0:17:11.03,0:17:12.19,Default,,0,0,0,,debugging as well.
Dialogue: 0,0:17:13.21,0:17:15.23,Default,,0,0,0,,Because have, if you, when you
Dialogue: 0,0:17:15.23,0:17:16.47,Default,,0,0,0,,are debugging your projects,
Dialogue: 0,0:17:16.47,0:17:18.99,Default,,0,0,0,,have you ever wondered where was
Dialogue: 0,0:17:18.99,0:17:20.06,Default,,0,0,0,,this memory allocated?
Dialogue: 0,0:17:20.87,0:17:21.86,Default,,0,0,0,,Well, I have some good news for
Dialogue: 0,0:17:21.86,0:17:22.20,Default,,0,0,0,,you.
Dialogue: 0,0:17:22.41,0:17:23.48,Default,,0,0,0,,If you are running with Address
Dialogue: 0,0:17:23.48,0:17:26.22,Default,,0,0,0,,Sanitizer, it's actually enabled
Dialogue: 0,0:17:26.22,0:17:27.55,Default,,0,0,0,,to tell you the allocation
Dialogue: 0,0:17:27.59,0:17:28.76,Default,,0,0,0,,backtraces of any memory that
Dialogue: 0,0:17:28.76,0:17:29.24,Default,,0,0,0,,you ask it.
Dialogue: 0,0:17:30.13,0:17:31.26,Default,,0,0,0,,And it can also provide the
Dialogue: 0,0:17:31.26,0:17:32.77,Default,,0,0,0,,deallocation backtraces for
Dialogue: 0,0:17:32.77,0:17:33.77,Default,,0,0,0,,memory that's already
Dialogue: 0,0:17:33.77,0:17:34.36,Default,,0,0,0,,deallocated.
Dialogue: 0,0:17:35.25,0:17:36.44,Default,,0,0,0,,And furthermore, it can show you
Dialogue: 0,0:17:36.44,0:17:38.08,Default,,0,0,0,,which bytes of memory are valid
Dialogue: 0,0:17:38.08,0:17:38.69,Default,,0,0,0,,and invalid.
Dialogue: 0,0:17:38.75,0:17:40.95,Default,,0,0,0,,So, let's take a look.
Dialogue: 0,0:17:41.33,0:17:43.15,Default,,0,0,0,,This time we are not
Dialogue: 0,0:17:43.15,0:17:44.25,Default,,0,0,0,,investigating a crash.
Dialogue: 0,0:17:44.50,0:17:46.48,Default,,0,0,0,,This is just a regular debugging
Dialogue: 0,0:17:46.53,0:17:48.22,Default,,0,0,0,,session where I'm stepping over
Dialogue: 0,0:17:48.22,0:17:49.28,Default,,0,0,0,,the lines in a function.
Dialogue: 0,0:17:49.85,0:17:52.83,Default,,0,0,0,,I can control click any variable
Dialogue: 0,0:17:52.83,0:17:53.70,Default,,0,0,0,,in the variable view.
Dialogue: 0,0:17:53.70,0:17:55.60,Default,,0,0,0,,And if that variable is a
Dialogue: 0,0:17:55.60,0:17:58.23,Default,,0,0,0,,pointer, I can select view
Dialogue: 0,0:17:58.23,0:17:59.53,Default,,0,0,0,,memory of.
Dialogue: 0,0:18:00.82,0:18:02.54,Default,,0,0,0,,Normally this would just give me
Dialogue: 0,0:18:02.54,0:18:04.87,Default,,0,0,0,,the view of, into the bytes of
Dialogue: 0,0:18:04.87,0:18:05.65,Default,,0,0,0,,that memory object.
Dialogue: 0,0:18:06.68,0:18:07.51,Default,,0,0,0,,But if you are running with
Dialogue: 0,0:18:07.51,0:18:09.21,Default,,0,0,0,,Address Sanitizer enabled, you
Dialogue: 0,0:18:09.21,0:18:11.34,Default,,0,0,0,,can expand the memory item in
Dialogue: 0,0:18:11.34,0:18:13.15,Default,,0,0,0,,that navigator and it will
Dialogue: 0,0:18:13.15,0:18:14.22,Default,,0,0,0,,display the allocation and
Dialogue: 0,0:18:14.22,0:18:15.61,Default,,0,0,0,,deallocation backtrace for that
Dialogue: 0,0:18:15.61,0:18:16.00,Default,,0,0,0,,memory.
Dialogue: 0,0:18:16.59,0:18:19.76,Default,,0,0,0,,You can also notice that some of
Dialogue: 0,0:18:19.76,0:18:21.25,Default,,0,0,0,,the bytes in this memory view
Dialogue: 0,0:18:21.25,0:18:22.98,Default,,0,0,0,,are grey and some are displayed
Dialogue: 0,0:18:22.98,0:18:23.84,Default,,0,0,0,,in black.
Dialogue: 0,0:18:24.60,0:18:26.32,Default,,0,0,0,,The greyed-out bytes indicate
Dialogue: 0,0:18:26.46,0:18:28.21,Default,,0,0,0,,invalid memory and, or as we
Dialogue: 0,0:18:28.21,0:18:29.66,Default,,0,0,0,,say, poisoned memory.
Dialogue: 0,0:18:30.09,0:18:30.85,Default,,0,0,0,,Which means that your
Dialogue: 0,0:18:30.85,0:18:31.93,Default,,0,0,0,,application must not be
Dialogue: 0,0:18:31.93,0:18:33.46,Default,,0,0,0,,accessing those bytes and if it
Dialogue: 0,0:18:33.46,0:18:34.66,Default,,0,0,0,,does so, that is a bug.
Dialogue: 0,0:18:34.66,0:18:36.21,Default,,0,0,0,,And Address Sanitizer will find
Dialogue: 0,0:18:36.21,0:18:37.49,Default,,0,0,0,,it and detect it.
Dialogue: 0,0:18:38.88,0:18:40.83,Default,,0,0,0,,You can also access the
Dialogue: 0,0:18:40.83,0:18:42.32,Default,,0,0,0,,information about the allocation
Dialogue: 0,0:18:42.32,0:18:43.60,Default,,0,0,0,,and deallocation of memory
Dialogue: 0,0:18:43.60,0:18:45.14,Default,,0,0,0,,objects in the [inaudible] text
Dialogue: 0,0:18:45.14,0:18:45.67,Default,,0,0,0,,console.
Dialogue: 0,0:18:45.94,0:18:47.27,Default,,0,0,0,,We can use this command called
Dialogue: 0,0:18:47.27,0:18:49.47,Default,,0,0,0,,memory history and pass it any
Dialogue: 0,0:18:49.47,0:18:50.82,Default,,0,0,0,,expression that evaluates to a
Dialogue: 0,0:18:50.82,0:18:51.24,Default,,0,0,0,,pointer.
Dialogue: 0,0:18:52.64,0:18:54.35,Default,,0,0,0,,So, let's use the pointer value
Dialogue: 0,0:18:54.35,0:18:56.07,Default,,0,0,0,,directly in this example and the
Dialogue: 0,0:18:56.07,0:18:58.00,Default,,0,0,0,,text console will print out to
Dialogue: 0,0:18:58.00,0:18:59.28,Default,,0,0,0,,allocation and deallocation
Dialogue: 0,0:18:59.34,0:19:00.52,Default,,0,0,0,,backtraces in text output.
Dialogue: 0,0:19:00.52,0:19:05.32,Default,,0,0,0,,So, I hope that I have convinced
Dialogue: 0,0:19:05.37,0:19:06.52,Default,,0,0,0,,you that Address Sanitizer is
Dialogue: 0,0:19:06.52,0:19:08.59,Default,,0,0,0,,great tool and that it's useful
Dialogue: 0,0:19:08.59,0:19:10.37,Default,,0,0,0,,for both C languages and also
Dialogue: 0,0:19:10.37,0:19:10.71,Default,,0,0,0,,Swift.
Dialogue: 0,0:19:10.71,0:19:12.60,Default,,0,0,0,,And that it helps with memory
Dialogue: 0,0:19:12.60,0:19:13.60,Default,,0,0,0,,corruptions and crashes.
Dialogue: 0,0:19:14.25,0:19:15.86,Default,,0,0,0,,But also that it's a very useful
Dialogue: 0,0:19:15.86,0:19:17.22,Default,,0,0,0,,tool for general debugging as
Dialogue: 0,0:19:17.22,0:19:17.72,Default,,0,0,0,,well.
Dialogue: 0,0:19:18.64,0:19:20.00,Default,,0,0,0,,But now let's talk, let's take a
Dialogue: 0,0:19:20.00,0:19:22.62,Default,,0,0,0,,look at another large source of
Dialogue: 0,0:19:22.62,0:19:24.23,Default,,0,0,0,,crashes and mysterious memory
Dialogue: 0,0:19:24.23,0:19:25.20,Default,,0,0,0,,corruptions, which is
Dialogue: 0,0:19:25.20,0:19:25.80,Default,,0,0,0,,multithreading.
Dialogue: 0,0:19:26.46,0:19:27.87,Default,,0,0,0,,And let's talk about Thread
Dialogue: 0,0:19:27.87,0:19:29.23,Default,,0,0,0,,Sanitizer which detects those
Dialogue: 0,0:19:29.27,0:19:29.65,Default,,0,0,0,,issues.
Dialogue: 0,0:19:30.13,0:19:33.59,Default,,0,0,0,,So, as I said, Thread Sanitizer
Dialogue: 0,0:19:33.59,0:19:35.51,Default,,0,0,0,,is able to find multithreading
Dialogue: 0,0:19:35.51,0:19:35.86,Default,,0,0,0,,issues.
Dialogue: 0,0:19:35.96,0:19:37.34,Default,,0,0,0,,For example, data races.
Dialogue: 0,0:19:38.61,0:19:40.00,Default,,0,0,0,,However, these issues,
Dialogue: 0,0:19:40.00,0:19:41.83,Default,,0,0,0,,multithreading issues, are
Dialogue: 0,0:19:42.27,0:19:43.56,Default,,0,0,0,,usually very sensitive to
Dialogue: 0,0:19:43.56,0:19:44.11,Default,,0,0,0,,timing.
Dialogue: 0,0:19:44.62,0:19:46.85,Default,,0,0,0,,Which means that they are very
Dialogue: 0,0:19:46.85,0:19:47.83,Default,,0,0,0,,hard to reproduce.
Dialogue: 0,0:19:48.33,0:19:50.72,Default,,0,0,0,,So, Thread Sanitizer is not only
Dialogue: 0,0:19:50.72,0:19:52.68,Default,,0,0,0,,able to find races where the two
Dialogue: 0,0:19:52.68,0:19:53.78,Default,,0,0,0,,memory accesses actually
Dialogue: 0,0:19:53.78,0:19:55.42,Default,,0,0,0,,collide, but it can also find
Dialogue: 0,0:19:55.42,0:19:57.85,Default,,0,0,0,,races that did not manifest
Dialogue: 0,0:19:57.85,0:19:59.34,Default,,0,0,0,,during that particular program
Dialogue: 0,0:19:59.34,0:19:59.55,Default,,0,0,0,,run.
Dialogue: 0,0:20:00.11,0:20:02.99,Default,,0,0,0,,Even if the racing memory
Dialogue: 0,0:20:02.99,0:20:04.55,Default,,0,0,0,,accesses happened at different
Dialogue: 0,0:20:04.55,0:20:05.72,Default,,0,0,0,,times but there's no
Dialogue: 0,0:20:05.72,0:20:06.97,Default,,0,0,0,,synchronization between them,
Dialogue: 0,0:20:07.35,0:20:08.41,Default,,0,0,0,,that is still a race.
Dialogue: 0,0:20:08.58,0:20:10.06,Default,,0,0,0,,And Thread Sanitizer is able to
Dialogue: 0,0:20:10.06,0:20:10.48,Default,,0,0,0,,find it.
Dialogue: 0,0:20:11.50,0:20:13.45,Default,,0,0,0,,That's because the next time you
Dialogue: 0,0:20:13.45,0:20:15.81,Default,,0,0,0,,run your application, the timing
Dialogue: 0,0:20:15.81,0:20:17.28,Default,,0,0,0,,will be different and it might
Dialogue: 0,0:20:17.28,0:20:18.83,Default,,0,0,0,,be just right to trigger a
Dialogue: 0,0:20:18.83,0:20:19.59,Default,,0,0,0,,memory corruption.
Dialogue: 0,0:20:20.20,0:20:21.39,Default,,0,0,0,,So, Thread Sanitizer is able to
Dialogue: 0,0:20:21.39,0:20:22.76,Default,,0,0,0,,find races even when they do not
Dialogue: 0,0:20:22.76,0:20:23.21,Default,,0,0,0,,manifest.
Dialogue: 0,0:20:23.76,0:20:27.67,Default,,0,0,0,,The tool works on 64-bit macOS
Dialogue: 0,0:20:27.67,0:20:29.09,Default,,0,0,0,,and 64-bit simulators.
Dialogue: 0,0:20:29.09,0:20:30.36,Default,,0,0,0,,And if you want to learn more
Dialogue: 0,0:20:30.36,0:20:31.76,Default,,0,0,0,,about the underlying technology,
Dialogue: 0,0:20:31.76,0:20:34.07,Default,,0,0,0,,I recommend that you watch a
Dialogue: 0,0:20:34.07,0:20:36.30,Default,,0,0,0,,WWDC from last year called
Dialogue: 0,0:20:36.30,0:20:37.55,Default,,0,0,0,,Thread Sanitizer and static
Dialogue: 0,0:20:37.55,0:20:38.03,Default,,0,0,0,,analysis.
Dialogue: 0,0:20:40.82,0:20:42.35,Default,,0,0,0,,So, I mentioned data races.
Dialogue: 0,0:20:42.91,0:20:43.90,Default,,0,0,0,,But let's see what they are.
Dialogue: 0,0:20:45.80,0:20:48.43,Default,,0,0,0,,Any shared data, any mutable
Dialogue: 0,0:20:48.43,0:20:49.65,Default,,0,0,0,,data that is shared between
Dialogue: 0,0:20:49.65,0:20:51.39,Default,,0,0,0,,multiple threads needs access
Dialogue: 0,0:20:51.39,0:20:52.08,Default,,0,0,0,,synchronization.
Dialogue: 0,0:20:52.86,0:20:53.55,Default,,0,0,0,,If you are missing
Dialogue: 0,0:20:53.55,0:20:54.93,Default,,0,0,0,,synchronization on your shared
Dialogue: 0,0:20:55.08,0:20:57.02,Default,,0,0,0,,mutable variables, that means
Dialogue: 0,0:20:57.02,0:20:57.77,Default,,0,0,0,,you have data races.
Dialogue: 0,0:20:58.00,0:20:59.37,Default,,0,0,0,,And data races are undefined
Dialogue: 0,0:20:59.37,0:20:59.87,Default,,0,0,0,,behavior.
Dialogue: 0,0:21:01.33,0:21:02.92,Default,,0,0,0,,And in presence of data races,
Dialogue: 0,0:21:02.92,0:21:04.16,Default,,0,0,0,,our programs can have memory
Dialogue: 0,0:21:04.16,0:21:05.96,Default,,0,0,0,,corruptions and crashes and all
Dialogue: 0,0:21:05.96,0:21:07.42,Default,,0,0,0,,of these problems apply to C
Dialogue: 0,0:21:07.42,0:21:08.96,Default,,0,0,0,,languages but also to SWF code
Dialogue: 0,0:21:08.96,0:21:09.36,Default,,0,0,0,,as well.
Dialogue: 0,0:21:09.36,0:21:10.86,Default,,0,0,0,,So, let's take a look at an
Dialogue: 0,0:21:10.86,0:21:13.92,Default,,0,0,0,,example in Swift.
Dialogue: 0,0:21:14.07,0:21:16.05,Default,,0,0,0,,So, in this case we have a class
Dialogue: 0,0:21:16.05,0:21:18.46,Default,,0,0,0,,called event log which just has
Dialogue: 0,0:21:18.46,0:21:20.95,Default,,0,0,0,,a simple function called log
Dialogue: 0,0:21:21.32,0:21:22.47,Default,,0,0,0,,that prints out some text
Dialogue: 0,0:21:22.47,0:21:23.60,Default,,0,0,0,,message to the output.
Dialogue: 0,0:21:24.50,0:21:27.07,Default,,0,0,0,,But it also tracks which was the
Dialogue: 0,0:21:27.07,0:21:28.67,Default,,0,0,0,,last event source that called
Dialogue: 0,0:21:28.67,0:21:29.35,Default,,0,0,0,,that log.
Dialogue: 0,0:21:30.04,0:21:31.45,Default,,0,0,0,,And it saves that information
Dialogue: 0,0:21:31.70,0:21:33.56,Default,,0,0,0,,into a stored property called
Dialogue: 0,0:21:33.56,0:21:35.90,Default,,0,0,0,,last event stores which is an
Dialogue: 0,0:21:35.90,0:21:38.48,Default,,0,0,0,,optional and at the beginning
Dialogue: 0,0:21:38.48,0:21:39.98,Default,,0,0,0,,it's nil but as soon as someone
Dialogue: 0,0:21:39.98,0:21:42.61,Default,,0,0,0,,calls log, it will be perfectly
Dialogue: 0,0:21:42.61,0:21:43.94,Default,,0,0,0,,will be populated with that
Dialogue: 0,0:21:43.94,0:21:45.14,Default,,0,0,0,,particular log source.
Dialogue: 0,0:21:46.00,0:21:46.87,Default,,0,0,0,,And now let's say that we have
Dialogue: 0,0:21:46.95,0:21:48.56,Default,,0,0,0,,two threads which are both
Dialogue: 0,0:21:48.63,0:21:50.48,Default,,0,0,0,,trying to call that log at the
Dialogue: 0,0:21:50.54,0:21:51.05,Default,,0,0,0,,same time.
Dialogue: 0,0:21:51.38,0:21:53.22,Default,,0,0,0,,Let's say that thread one is our
Dialogue: 0,0:21:53.22,0:21:54.53,Default,,0,0,0,,networking subsystem and it's
Dialogue: 0,0:21:54.53,0:21:55.66,Default,,0,0,0,,logging that some download has
Dialogue: 0,0:21:55.72,0:21:56.05,Default,,0,0,0,,finished.
Dialogue: 0,0:21:56.74,0:21:58.38,Default,,0,0,0,,While the second thread, which
Dialogue: 0,0:21:58.38,0:21:59.42,Default,,0,0,0,,represents our database
Dialogue: 0,0:21:59.42,0:22:01.28,Default,,0,0,0,,subsystem, is logging that query
Dialogue: 0,0:22:01.28,0:22:01.89,Default,,0,0,0,,is completed.
Dialogue: 0,0:22:03.28,0:22:04.32,Default,,0,0,0,,That is a data race.
Dialogue: 0,0:22:05.37,0:22:06.82,Default,,0,0,0,,Because we're accessing the same
Dialogue: 0,0:22:06.82,0:22:08.37,Default,,0,0,0,,memory location at the same
Dialogue: 0,0:22:08.37,0:22:08.68,Default,,0,0,0,,time.
Dialogue: 0,0:22:09.97,0:22:11.60,Default,,0,0,0,,And Thread Sanitizer will warn
Dialogue: 0,0:22:12.32,0:22:13.33,Default,,0,0,0,,about this.
Dialogue: 0,0:22:13.53,0:22:15.68,Default,,0,0,0,,So, to fix this we need to
Dialogue: 0,0:22:15.89,0:22:17.33,Default,,0,0,0,,introduce synchronization.
Dialogue: 0,0:22:17.51,0:22:18.70,Default,,0,0,0,,And the easiest way to do that
Dialogue: 0,0:22:19.15,0:22:20.77,Default,,0,0,0,,is by using a serial dispatch
Dialogue: 0,0:22:20.80,0:22:21.01,Default,,0,0,0,,queue.
Dialogue: 0,0:22:21.82,0:22:22.89,Default,,0,0,0,,Now, because this queue is
Dialogue: 0,0:22:23.14,0:22:25.53,Default,,0,0,0,,serial, it will only execute one
Dialogue: 0,0:22:25.53,0:22:26.84,Default,,0,0,0,,work item at a time.
Dialogue: 0,0:22:27.94,0:22:31.06,Default,,0,0,0,,So, if we wrap the body of the
Dialogue: 0,0:22:31.06,0:22:33.28,Default,,0,0,0,,log function into queue.asynch,
Dialogue: 0,0:22:34.28,0:22:35.30,Default,,0,0,0,,this will provide the correct
Dialogue: 0,0:22:35.30,0:22:36.05,Default,,0,0,0,,synchronization.
Dialogue: 0,0:22:36.42,0:22:38.17,Default,,0,0,0,,And note that I am using asynch
Dialogue: 0,0:22:38.17,0:22:39.76,Default,,0,0,0,,here because we don't need to
Dialogue: 0,0:22:39.76,0:22:41.31,Default,,0,0,0,,wait for the result of this
Dialogue: 0,0:22:41.31,0:22:42.20,Default,,0,0,0,,function to complete.
Dialogue: 0,0:22:42.20,0:22:43.99,Default,,0,0,0,,Because this function does not
Dialogue: 0,0:22:43.99,0:22:45.14,Default,,0,0,0,,provide any results so it
Dialogue: 0,0:22:45.14,0:22:46.15,Default,,0,0,0,,doesn't make sense to wait for
Dialogue: 0,0:22:46.15,0:22:46.22,Default,,0,0,0,,it.
Dialogue: 0,0:22:46.76,0:22:48.28,Default,,0,0,0,,So, this not only fixes that
Dialogue: 0,0:22:48.28,0:22:49.78,Default,,0,0,0,,race but it also improves
Dialogue: 0,0:22:50.89,0:22:52.04,Default,,0,0,0,,[inaudible] because now whoever
Dialogue: 0,0:22:52.04,0:22:54.15,Default,,0,0,0,,calls log will no longer need to
Dialogue: 0,0:22:54.15,0:22:55.34,Default,,0,0,0,,wait for this printing to
Dialogue: 0,0:22:55.34,0:22:55.76,Default,,0,0,0,,finish.
Dialogue: 0,0:22:56.30,0:22:59.86,Default,,0,0,0,,And this way this whole class is
Dialogue: 0,0:22:59.86,0:23:01.19,Default,,0,0,0,,now thread safe and we can use,
Dialogue: 0,0:23:01.39,0:23:02.97,Default,,0,0,0,,we can call log from multiple
Dialogue: 0,0:23:05.00,0:23:05.52,Default,,0,0,0,,threads.
Dialogue: 0,0:23:05.52,0:23:06.55,Default,,0,0,0,,Dispatch queues, which are
Dialogue: 0,0:23:06.55,0:23:08.16,Default,,0,0,0,,provided by Grand Central
Dialogue: 0,0:23:08.16,0:23:10.90,Default,,0,0,0,,Dispatch or GCD for short, are
Dialogue: 0,0:23:10.90,0:23:12.14,Default,,0,0,0,,readily available in Swift and
Dialogue: 0,0:23:12.14,0:23:13.33,Default,,0,0,0,,they should be your first choice
Dialogue: 0,0:23:13.33,0:23:14.19,Default,,0,0,0,,of synchronization.
Dialogue: 0,0:23:14.84,0:23:16.10,Default,,0,0,0,,Even though there's other
Dialogue: 0,0:23:16.10,0:23:17.66,Default,,0,0,0,,mechanisms of providing
Dialogue: 0,0:23:17.69,0:23:19.44,Default,,0,0,0,,synchronization, GCD is very
Dialogue: 0,0:23:19.44,0:23:20.99,Default,,0,0,0,,lightweight and it's very easy
Dialogue: 0,0:23:20.99,0:23:21.77,Default,,0,0,0,,to use from Swift.
Dialogue: 0,0:23:22.79,0:23:24.42,Default,,0,0,0,,A good idea is to associate your
Dialogue: 0,0:23:24.42,0:23:26.24,Default,,0,0,0,,data with serial dispatch
Dialogue: 0,0:23:26.28,0:23:26.62,Default,,0,0,0,,queues.
Dialogue: 0,0:23:26.97,0:23:28.51,Default,,0,0,0,,And only accessing the data from
Dialogue: 0,0:23:28.51,0:23:30.21,Default,,0,0,0,,those queues, which will
Dialogue: 0,0:23:30.21,0:23:32.14,Default,,0,0,0,,guarantee that you're only using
Dialogue: 0,0:23:32.17,0:23:33.81,Default,,0,0,0,,your data in a synchronized way.
Dialogue: 0,0:23:34.34,0:23:35.71,Default,,0,0,0,,And if you'd like to learn more
Dialogue: 0,0:23:35.71,0:23:37.63,Default,,0,0,0,,about how to use concurrency
Dialogue: 0,0:23:37.63,0:23:39.79,Default,,0,0,0,,with GCD, I recommend that you
Dialogue: 0,0:23:39.79,0:23:41.82,Default,,0,0,0,,watch another WWDC from last
Dialogue: 0,0:23:41.82,0:23:42.81,Default,,0,0,0,,year called concurrent
Dialogue: 0,0:23:42.85,0:23:44.21,Default,,0,0,0,,programming with GCD and Swift
Dialogue: 0,0:23:44.27,0:23:44.51,Default,,0,0,0,,3.
Dialogue: 0,0:23:45.05,0:23:48.05,Default,,0,0,0,,But now let's take a look at
Dialogue: 0,0:23:48.05,0:23:49.15,Default,,0,0,0,,some new features that we have
Dialogue: 0,0:23:49.15,0:23:50.80,Default,,0,0,0,,added to Thread Sanitizer in
Dialogue: 0,0:23:50.83,0:23:51.48,Default,,0,0,0,,Xcode 9.
Dialogue: 0,0:23:52.15,0:23:53.89,Default,,0,0,0,,It's now able to detect races on
Dialogue: 0,0:23:53.89,0:23:57.59,Default,,0,0,0,,collections and also a whole new
Dialogue: 0,0:23:57.59,0:23:59.71,Default,,0,0,0,,class of bugs that is specific
Dialogue: 0,0:23:59.80,0:24:02.21,Default,,0,0,0,,to Swift code.
Dialogue: 0,0:24:02.41,0:24:04.34,Default,,0,0,0,,Previously Thread Sanitizer was
Dialogue: 0,0:24:04.42,0:24:06.48,Default,,0,0,0,,only able to find races on the
Dialogue: 0,0:24:06.48,0:24:08.35,Default,,0,0,0,,raw memory accesses like we saw
Dialogue: 0,0:24:08.35,0:24:09.61,Default,,0,0,0,,in the previous example where we
Dialogue: 0,0:24:09.61,0:24:10.83,Default,,0,0,0,,were just directly accessing
Dialogue: 0,0:24:11.08,0:24:12.15,Default,,0,0,0,,some stored property.
Dialogue: 0,0:24:13.44,0:24:14.62,Default,,0,0,0,,But synchronization is often
Dialogue: 0,0:24:14.62,0:24:15.98,Default,,0,0,0,,needed even for larger data
Dialogue: 0,0:24:16.04,0:24:16.47,Default,,0,0,0,,structures.
Dialogue: 0,0:24:16.47,0:24:17.51,Default,,0,0,0,,For example, collections.
Dialogue: 0,0:24:18.24,0:24:20.00,Default,,0,0,0,,Consider this code example where
Dialogue: 0,0:24:20.67,0:24:22.26,Default,,0,0,0,,in Objective C we are using an
Dialogue: 0,0:24:22.26,0:24:23.89,Default,,0,0,0,,instance of an NS mutable
Dialogue: 0,0:24:23.89,0:24:24.35,Default,,0,0,0,,dictionary.
Dialogue: 0,0:24:25.07,0:24:26.53,Default,,0,0,0,,And two threads are using the
Dialogue: 0,0:24:26.53,0:24:27.23,Default,,0,0,0,,same instance.
Dialogue: 0,0:24:27.30,0:24:28.99,Default,,0,0,0,,Let's say thread one is looking
Dialogue: 0,0:24:28.99,0:24:30.32,Default,,0,0,0,,up a value in the dictionary
Dialogue: 0,0:24:30.60,0:24:31.64,Default,,0,0,0,,while the second thread is
Dialogue: 0,0:24:31.68,0:24:32.82,Default,,0,0,0,,trying to write into it.
Dialogue: 0,0:24:33.71,0:24:35.43,Default,,0,0,0,,So, it is a problem and newly in
Dialogue: 0,0:24:35.43,0:24:36.90,Default,,0,0,0,,Xcode 9 we are now able to
Dialogue: 0,0:24:36.90,0:24:38.15,Default,,0,0,0,,detect this race.
Dialogue: 0,0:24:41.20,0:24:42.99,Default,,0,0,0,,Races in collection are a very
Dialogue: 0,0:24:42.99,0:24:43.74,Default,,0,0,0,,common mistake.
Dialogue: 0,0:24:44.90,0:24:46.87,Default,,0,0,0,,So, in Xcode 9 we are now able
Dialogue: 0,0:24:46.87,0:24:48.52,Default,,0,0,0,,to detect them in both Objective
Dialogue: 0,0:24:48.62,0:24:49.69,Default,,0,0,0,,C and Swift.
Dialogue: 0,0:24:50.31,0:24:51.70,Default,,0,0,0,,Note that this requires that you
Dialogue: 0,0:24:51.70,0:24:53.51,Default,,0,0,0,,are using macOS, High Sierra and
Dialogue: 0,0:24:53.51,0:24:54.17,Default,,0,0,0,,iOS 11.
Dialogue: 0,0:24:54.46,0:24:55.81,Default,,0,0,0,,But we are able to detect races
Dialogue: 0,0:24:55.81,0:24:57.47,Default,,0,0,0,,on NS mutable array and NS
Dialogue: 0,0:24:57.51,0:24:59.29,Default,,0,0,0,,mutable dictionary and also on
Dialogue: 0,0:24:59.29,0:25:00.16,Default,,0,0,0,,Swift array and Swift
Dialogue: 0,0:25:00.16,0:25:00.64,Default,,0,0,0,,dictionary.
Dialogue: 0,0:25:01.67,0:25:02.97,Default,,0,0,0,,And with that, I'd like to show
Dialogue: 0,0:25:02.97,0:25:05.00,Default,,0,0,0,,you how this works in practice.
Dialogue: 0,0:25:20.18,0:25:22.33,Default,,0,0,0,,So, I was able to get the source
Dialogue: 0,0:25:22.39,0:25:25.25,Default,,0,0,0,,code of a very old version of
Dialogue: 0,0:25:25.25,0:25:27.64,Default,,0,0,0,,the WWDC app before it adopted
Dialogue: 0,0:25:27.72,0:25:28.27,Default,,0,0,0,,Swift code.
Dialogue: 0,0:25:28.40,0:25:30.38,Default,,0,0,0,,So, this version that I have is
Dialogue: 0,0:25:30.38,0:25:31.42,Default,,0,0,0,,still completely written in
Dialogue: 0,0:25:31.42,0:25:33.07,Default,,0,0,0,,Objective C, as you can tell
Dialogue: 0,0:25:33.07,0:25:34.69,Default,,0,0,0,,from this copyright header.
Dialogue: 0,0:25:34.69,0:25:38.32,Default,,0,0,0,,It was mostly written in 2011.
Dialogue: 0,0:25:38.40,0:25:39.56,Default,,0,0,0,,So, because it was written
Dialogue: 0,0:25:40.39,0:25:41.78,Default,,0,0,0,,several years ago, it's using
Dialogue: 0,0:25:41.82,0:25:43.49,Default,,0,0,0,,some outdated concepts like an
Dialogue: 0,0:25:43.49,0:25:44.60,Default,,0,0,0,,explicit threat for
Dialogue: 0,0:25:44.60,0:25:46.13,Default,,0,0,0,,synchronization instead of GCD.
Dialogue: 0,0:25:46.44,0:25:47.35,Default,,0,0,0,,But I'd like to show you that
Dialogue: 0,0:25:47.70,0:25:49.24,Default,,0,0,0,,thread sanitizer works just fine
Dialogue: 0,0:25:49.24,0:25:50.81,Default,,0,0,0,,even with other synchronization
Dialogue: 0,0:25:50.81,0:25:51.36,Default,,0,0,0,,mechanisms.
Dialogue: 0,0:25:52.03,0:25:54.95,Default,,0,0,0,,So, this file that I'm showing
Dialogue: 0,0:25:54.95,0:25:56.96,Default,,0,0,0,,to you is implementing a class
Dialogue: 0,0:25:56.96,0:25:59.24,Default,,0,0,0,,called WWDC URLConnection, which
Dialogue: 0,0:25:59.24,0:26:01.21,Default,,0,0,0,,serves as a base class for all
Dialogue: 0,0:26:01.21,0:26:02.47,Default,,0,0,0,,networking done from this
Dialogue: 0,0:26:02.47,0:26:03.09,Default,,0,0,0,,application.
Dialogue: 0,0:26:03.54,0:26:05.00,Default,,0,0,0,,And what I did is that I have
Dialogue: 0,0:26:05.34,0:26:07.36,Default,,0,0,0,,planted a multithreading bug in
Dialogue: 0,0:26:07.36,0:26:07.83,Default,,0,0,0,,this code.
Dialogue: 0,0:26:08.36,0:26:09.31,Default,,0,0,0,,And let's see if the Thread
Dialogue: 0,0:26:09.39,0:26:10.82,Default,,0,0,0,,Sanitizer can find this bug.
Dialogue: 0,0:26:12.01,0:26:13.41,Default,,0,0,0,,So, first let me make sure that
Dialogue: 0,0:26:13.41,0:26:14.62,Default,,0,0,0,,I have Thread Sanitizer enabled
Dialogue: 0,0:26:14.68,0:26:17.19,Default,,0,0,0,,by going to product scheme, edit
Dialogue: 0,0:26:17.19,0:26:17.64,Default,,0,0,0,,scheme.
Dialogue: 0,0:26:18.36,0:26:20.75,Default,,0,0,0,,Which brings out, brings the
Dialogue: 0,0:26:20.85,0:26:21.45,Default,,0,0,0,,scheme editor.
Dialogue: 0,0:26:21.57,0:26:23.05,Default,,0,0,0,,And you'll see that I have
Dialogue: 0,0:26:23.12,0:26:24.17,Default,,0,0,0,,Thread Sanitizer enabled.
Dialogue: 0,0:26:24.66,0:26:26.67,Default,,0,0,0,,So, let's now run this app in
Dialogue: 0,0:26:26.67,0:26:27.33,Default,,0,0,0,,the simulator.
Dialogue: 0,0:26:27.89,0:26:31.93,Default,,0,0,0,,And as soon as the app launches
Dialogue: 0,0:26:31.93,0:26:33.06,Default,,0,0,0,,in the simulator, it will
Dialogue: 0,0:26:33.06,0:26:35.08,Default,,0,0,0,,already initiate several network
Dialogue: 0,0:26:35.08,0:26:35.59,Default,,0,0,0,,connections.
Dialogue: 0,0:26:37.01,0:26:38.60,Default,,0,0,0,,So, it should already exercise
Dialogue: 0,0:26:38.89,0:26:40.24,Default,,0,0,0,,this file that I'm showing you.
Dialogue: 0,0:26:41.12,0:26:42.83,Default,,0,0,0,,And you can notice that Xcode is
Dialogue: 0,0:26:42.83,0:26:45.67,Default,,0,0,0,,already reporting a race in the
Dialogue: 0,0:26:45.67,0:26:46.43,Default,,0,0,0,,issue navigator.
Dialogue: 0,0:26:47.03,0:26:49.31,Default,,0,0,0,,So, this issue is reporting that
Dialogue: 0,0:26:49.31,0:26:50.00,Default,,0,0,0,,we have a race.
Dialogue: 0,0:26:50.00,0:26:51.35,Default,,0,0,0,,So, let me click it so we can
Dialogue: 0,0:26:51.35,0:26:52.83,Default,,0,0,0,,get to the line of code that
Dialogue: 0,0:26:52.89,0:26:54.21,Default,,0,0,0,,contains this race.
Dialogue: 0,0:26:54.47,0:26:55.64,Default,,0,0,0,,So, in this case we see that we
Dialogue: 0,0:26:55.64,0:26:58.13,Default,,0,0,0,,are adding some object into a
Dialogue: 0,0:26:58.13,0:26:58.81,Default,,0,0,0,,mutable array.
Dialogue: 0,0:27:00.30,0:27:02.00,Default,,0,0,0,,The purpose of this code is to
Dialogue: 0,0:27:02.00,0:27:03.42,Default,,0,0,0,,maintain a list of active,
Dialogue: 0,0:27:03.47,0:27:04.70,Default,,0,0,0,,currently active connections.
Dialogue: 0,0:27:04.70,0:27:06.29,Default,,0,0,0,,So, we are tracking that for
Dialogue: 0,0:27:06.29,0:27:07.19,Default,,0,0,0,,debugging purposes.
Dialogue: 0,0:27:08.63,0:27:10.27,Default,,0,0,0,,So, as soon as we're creating
Dialogue: 0,0:27:10.27,0:27:11.89,Default,,0,0,0,,some new URL connection, we will
Dialogue: 0,0:27:11.89,0:27:12.88,Default,,0,0,0,,add it to this list.
Dialogue: 0,0:27:14.06,0:27:15.17,Default,,0,0,0,,But this can happen from any
Dialogue: 0,0:27:15.17,0:27:15.38,Default,,0,0,0,,thread.
Dialogue: 0,0:27:15.69,0:27:17.62,Default,,0,0,0,,Any thread can create a new URL
Dialogue: 0,0:27:17.62,0:27:18.12,Default,,0,0,0,,connection.
Dialogue: 0,0:27:18.84,0:27:19.81,Default,,0,0,0,,And if we take a look at the
Dialogue: 0,0:27:19.81,0:27:21.02,Default,,0,0,0,,details of the issue one more
Dialogue: 0,0:27:21.02,0:27:22.54,Default,,0,0,0,,time in the navigator, we will
Dialogue: 0,0:27:22.61,0:27:23.68,Default,,0,0,0,,see that that is the case.
Dialogue: 0,0:27:23.73,0:27:25.24,Default,,0,0,0,,Because there's thread three
Dialogue: 0,0:27:25.49,0:27:26.93,Default,,0,0,0,,trying to call add object.
Dialogue: 0,0:27:27.50,0:27:29.17,Default,,0,0,0,,And thread five, also trying to
Dialogue: 0,0:27:29.17,0:27:31.25,Default,,0,0,0,,call add object into the same
Dialogue: 0,0:27:31.64,0:27:32.31,Default,,0,0,0,,mutable array.
Dialogue: 0,0:27:33.26,0:27:34.27,Default,,0,0,0,,And if we take a look at the
Dialogue: 0,0:27:34.34,0:27:36.50,Default,,0,0,0,,callers of that API, we will see
Dialogue: 0,0:27:36.50,0:27:39.20,Default,,0,0,0,,that they all both point to the
Dialogue: 0,0:27:39.20,0:27:40.09,Default,,0,0,0,,same line of code.
Dialogue: 0,0:27:41.08,0:27:42.03,Default,,0,0,0,,So, that is a problem.
Dialogue: 0,0:27:42.03,0:27:44.08,Default,,0,0,0,,We are accessing this mutable
Dialogue: 0,0:27:44.08,0:27:45.60,Default,,0,0,0,,array from multiple threads
Dialogue: 0,0:27:45.60,0:27:46.78,Default,,0,0,0,,without any synchronization.
Dialogue: 0,0:27:47.86,0:27:49.32,Default,,0,0,0,,And to fix it, I can actually
Dialogue: 0,0:27:49.69,0:27:50.62,Default,,0,0,0,,fix it very easily.
Dialogue: 0,0:27:50.68,0:27:52.82,Default,,0,0,0,,Because I have noticed that the
Dialogue: 0,0:27:52.87,0:27:54.46,Default,,0,0,0,,code right after this line is
Dialogue: 0,0:27:54.46,0:27:55.29,Default,,0,0,0,,already doing some
Dialogue: 0,0:27:55.29,0:27:56.08,Default,,0,0,0,,synchronization.
Dialogue: 0,0:27:56.16,0:27:57.63,Default,,0,0,0,,It's using this API called
Dialogue: 0,0:27:57.70,0:27:59.76,Default,,0,0,0,,perform block that dispatches
Dialogue: 0,0:27:59.76,0:28:01.34,Default,,0,0,0,,some work onto a specific
Dialogue: 0,0:28:01.38,0:28:01.63,Default,,0,0,0,,thread.
Dialogue: 0,0:28:01.85,0:28:02.82,Default,,0,0,0,,In this case, it's called
Dialogue: 0,0:28:03.06,0:28:03.72,Default,,0,0,0,,connection thread.
Dialogue: 0,0:28:04.37,0:28:05.72,Default,,0,0,0,,So, which is an explicit thread
Dialogue: 0,0:28:05.76,0:28:06.54,Default,,0,0,0,,that is used for
Dialogue: 0,0:28:06.54,0:28:07.33,Default,,0,0,0,,synchronization.
Dialogue: 0,0:28:07.86,0:28:09.55,Default,,0,0,0,,And since it's a single thread,
Dialogue: 0,0:28:09.60,0:28:11.93,Default,,0,0,0,,it will provide synchronization
Dialogue: 0,0:28:11.93,0:28:13.42,Default,,0,0,0,,exactly with the work serially
Dialogue: 0,0:28:13.80,0:28:14.90,Default,,0,0,0,,simply because it's a single
Dialogue: 0,0:28:14.90,0:28:15.76,Default,,0,0,0,,thread and there's no
Dialogue: 0,0:28:16.11,0:28:16.59,Default,,0,0,0,,[inaudible] going on.
Dialogue: 0,0:28:17.32,0:28:18.99,Default,,0,0,0,,So, to fix this I can just move
Dialogue: 0,0:28:19.59,0:28:22.36,Default,,0,0,0,,this call to add object into
Dialogue: 0,0:28:22.36,0:28:24.02,Default,,0,0,0,,that synchronized block like
Dialogue: 0,0:28:24.02,0:28:26.01,Default,,0,0,0,,this and that should fix our
Dialogue: 0,0:28:26.01,0:28:26.29,Default,,0,0,0,,race.
Dialogue: 0,0:28:26.29,0:28:28.46,Default,,0,0,0,,Because now we will also only be
Dialogue: 0,0:28:28.46,0:28:30.01,Default,,0,0,0,,accessing the active connection
Dialogue: 0,0:28:30.27,0:28:31.93,Default,,0,0,0,,array within the synchronized
Dialogue: 0,0:28:31.93,0:28:33.63,Default,,0,0,0,,block which is only executed
Dialogue: 0,0:28:33.63,0:28:34.10,Default,,0,0,0,,serially.
Dialogue: 0,0:28:34.32,0:28:35.83,Default,,0,0,0,,So, now let's run the app in the
Dialogue: 0,0:28:35.83,0:28:37.75,Default,,0,0,0,,simulator one more time to see
Dialogue: 0,0:28:37.75,0:28:39.28,Default,,0,0,0,,if that fixes our race.
Dialogue: 0,0:28:40.88,0:28:41.87,Default,,0,0,0,,And again, once the app
Dialogue: 0,0:28:41.87,0:28:44.00,Default,,0,0,0,,launches, it already triggers
Dialogue: 0,0:28:44.00,0:28:45.21,Default,,0,0,0,,several network connections.
Dialogue: 0,0:28:45.63,0:28:47.16,Default,,0,0,0,,So now when it's up and running
Dialogue: 0,0:28:47.76,0:28:49.24,Default,,0,0,0,,we'll see that Xcode is no
Dialogue: 0,0:28:49.24,0:28:51.33,Default,,0,0,0,,longer reporting any Runtime
Dialogue: 0,0:28:54.58,0:28:54.77,Default,,0,0,0,,issues.
Dialogue: 0,0:28:56.52,0:29:01.02,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:29:01.52,0:29:03.02,Default,,0,0,0,,So, you've seen how Thread
Dialogue: 0,0:29:03.02,0:29:04.82,Default,,0,0,0,,Sanitizer finds a race in
Dialogue: 0,0:29:04.82,0:29:05.65,Default,,0,0,0,,Objective C code.
Dialogue: 0,0:29:06.46,0:29:07.06,Default,,0,0,0,,What about Swift?
Dialogue: 0,0:29:08.48,0:29:09.66,Default,,0,0,0,,The same detection works in
Dialogue: 0,0:29:09.66,0:29:10.70,Default,,0,0,0,,Swift code as well.
Dialogue: 0,0:29:11.01,0:29:12.31,Default,,0,0,0,,So, in this case if we have an
Dialogue: 0,0:29:12.41,0:29:14.63,Default,,0,0,0,,array of strings and we have two
Dialogue: 0,0:29:14.63,0:29:16.05,Default,,0,0,0,,threads, let's say one thread is
Dialogue: 0,0:29:16.05,0:29:17.25,Default,,0,0,0,,looking up the value from this
Dialogue: 0,0:29:17.47,0:29:19.50,Default,,0,0,0,,array while some other thread is
Dialogue: 0,0:29:19.50,0:29:20.06,Default,,0,0,0,,writing to it.
Dialogue: 0,0:29:20.95,0:29:22.12,Default,,0,0,0,,We'll detect this race and
Dialogue: 0,0:29:22.12,0:29:23.76,Default,,0,0,0,,Thread Sanitizer will find this.
Dialogue: 0,0:29:25.27,0:29:26.94,Default,,0,0,0,,Fixing this again can involve
Dialogue: 0,0:29:26.98,0:29:28.71,Default,,0,0,0,,using a serial dispatch queue
Dialogue: 0,0:29:29.24,0:29:30.70,Default,,0,0,0,,and then making sure that the
Dialogue: 0,0:29:30.70,0:29:33.77,Default,,0,0,0,,only access that array within
Dialogue: 0,0:29:33.85,0:29:34.75,Default,,0,0,0,,some synchronized blocks.
Dialogue: 0,0:29:34.89,0:29:36.54,Default,,0,0,0,,So, in this case thread one,
Dialogue: 0,0:29:36.65,0:29:39.89,Default,,0,0,0,,we'll be using queue.synch which
Dialogue: 0,0:29:40.67,0:29:41.84,Default,,0,0,0,,is necessary in this case
Dialogue: 0,0:29:41.84,0:29:44.52,Default,,0,0,0,,because we need the output value
Dialogue: 0,0:29:44.52,0:29:45.54,Default,,0,0,0,,from this computation to
Dialogue: 0,0:29:45.54,0:29:46.03,Default,,0,0,0,,continue.
Dialogue: 0,0:29:46.03,0:29:47.53,Default,,0,0,0,,We need that lookup in the
Dialogue: 0,0:29:47.53,0:29:49.13,Default,,0,0,0,,dictionary to give us an answer.
Dialogue: 0,0:29:49.13,0:29:50.34,Default,,0,0,0,,So, we need to wait for the
Dialogue: 0,0:29:50.34,0:29:50.72,Default,,0,0,0,,result.
Dialogue: 0,0:29:50.79,0:29:52.27,Default,,0,0,0,,So, I'm using queue.synch here.
Dialogue: 0,0:29:52.66,0:29:54.20,Default,,0,0,0,,But for the second thread, I can
Dialogue: 0,0:29:54.20,0:29:56.14,Default,,0,0,0,,use queue.asynch because that
Dialogue: 0,0:29:56.14,0:29:58.05,Default,,0,0,0,,block is not providing any
Dialogue: 0,0:29:58.05,0:29:59.52,Default,,0,0,0,,output so we don't need to wait
Dialogue: 0,0:29:59.52,0:30:02.00,Default,,0,0,0,,for it to finish.
Dialogue: 0,0:30:03.32,0:30:04.47,Default,,0,0,0,,So, you might have noticed that
Dialogue: 0,0:30:04.47,0:30:06.09,Default,,0,0,0,,in the previous example I did
Dialogue: 0,0:30:06.09,0:30:07.64,Default,,0,0,0,,not call the problem a data
Dialogue: 0,0:30:07.64,0:30:07.87,Default,,0,0,0,,race.
Dialogue: 0,0:30:08.50,0:30:10.34,Default,,0,0,0,,Instead, the warning said it's a
Dialogue: 0,0:30:10.43,0:30:11.44,Default,,0,0,0,,Swift access race.
Dialogue: 0,0:30:13.03,0:30:14.85,Default,,0,0,0,,Swift access races are
Dialogue: 0,0:30:14.85,0:30:16.29,Default,,0,0,0,,violations of a more general
Dialogue: 0,0:30:16.29,0:30:18.34,Default,,0,0,0,,rule which applies to all
Dialogue: 0,0:30:18.34,0:30:20.18,Default,,0,0,0,,structs, not just arrays and
Dialogue: 0,0:30:20.18,0:30:21.62,Default,,0,0,0,,dictionaries but all structs.
Dialogue: 0,0:30:21.62,0:30:22.84,Default,,0,0,0,,Even the ones that you define.
Dialogue: 0,0:30:23.64,0:30:24.93,Default,,0,0,0,,So, this is a new rule that is
Dialogue: 0,0:30:25.22,0:30:26.40,Default,,0,0,0,,now present in Swift 4.
Dialogue: 0,0:30:27.26,0:30:29.23,Default,,0,0,0,,And part of it states that
Dialogue: 0,0:30:29.28,0:30:31.10,Default,,0,0,0,,mutating methods on structs
Dialogue: 0,0:30:31.64,0:30:33.03,Default,,0,0,0,,require that you have exclusive
Dialogue: 0,0:30:33.08,0:30:34.28,Default,,0,0,0,,access to the whole struct.
Dialogue: 0,0:30:35.77,0:30:37.04,Default,,0,0,0,,This does not apply to classes
Dialogue: 0,0:30:37.04,0:30:38.20,Default,,0,0,0,,because classes don't have
Dialogue: 0,0:30:38.20,0:30:39.05,Default,,0,0,0,,mutating methods.
Dialogue: 0,0:30:39.42,0:30:41.00,Default,,0,0,0,,And any methods on a class can
Dialogue: 0,0:30:41.37,0:30:43.11,Default,,0,0,0,,change any property and it only
Dialogue: 0,0:30:43.11,0:30:45.54,Default,,0,0,0,,needs to have exclusive access
Dialogue: 0,0:30:45.58,0:30:47.14,Default,,0,0,0,,to the properties that the
Dialogue: 0,0:30:47.14,0:30:47.84,Default,,0,0,0,,method changes.
Dialogue: 0,0:30:48.35,0:30:51.57,Default,,0,0,0,,So, this new rule that's applied
Dialogue: 0,0:30:51.57,0:30:54.12,Default,,0,0,0,,to structs is now being even
Dialogue: 0,0:30:54.12,0:30:55.55,Default,,0,0,0,,enforced by the compiler, both
Dialogue: 0,0:30:55.61,0:30:57.20,Default,,0,0,0,,statically at compile time and
Dialogue: 0,0:30:57.20,0:30:58.51,Default,,0,0,0,,dynamically at run time.
Dialogue: 0,0:30:59.66,0:31:00.93,Default,,0,0,0,,But this enforcement mostly
Dialogue: 0,0:31:00.93,0:31:02.02,Default,,0,0,0,,applies to single-threaded
Dialogue: 0,0:31:02.02,0:31:02.66,Default,,0,0,0,,violations.
Dialogue: 0,0:31:03.00,0:31:04.26,Default,,0,0,0,,And Thread Sanitizer is here to
Dialogue: 0,0:31:04.26,0:31:05.56,Default,,0,0,0,,help you with the multithreaded
Dialogue: 0,0:31:05.56,0:31:05.95,Default,,0,0,0,,cases.
Dialogue: 0,0:31:06.26,0:31:07.66,Default,,0,0,0,,And if you'd like to learn more
Dialogue: 0,0:31:07.66,0:31:08.87,Default,,0,0,0,,about these new rules in Swift
Dialogue: 0,0:31:08.98,0:31:10.45,Default,,0,0,0,,4, I recommend that you watch
Dialogue: 0,0:31:10.88,0:31:12.29,Default,,0,0,0,,the What's New in Swift session.
Dialogue: 0,0:31:13.24,0:31:15.38,Default,,0,0,0,,And explicitly a session that
Dialogue: 0,0:31:15.38,0:31:16.70,Default,,0,0,0,,was called Exclusive Access to
Dialogue: 0,0:31:16.70,0:31:18.06,Default,,0,0,0,,Memory which describes what the
Dialogue: 0,0:31:18.06,0:31:18.93,Default,,0,0,0,,new rules are.
Dialogue: 0,0:31:18.93,0:31:21.09,Default,,0,0,0,,And it also talks about what is
Dialogue: 0,0:31:21.09,0:31:21.59,Default,,0,0,0,,enforced.
Dialogue: 0,0:31:22.72,0:31:23.71,Default,,0,0,0,,But let's take a look at one
Dialogue: 0,0:31:23.71,0:31:24.35,Default,,0,0,0,,more example.
Dialogue: 0,0:31:25.63,0:31:26.84,Default,,0,0,0,,Let's say that a friend has
Dialogue: 0,0:31:26.84,0:31:28.75,Default,,0,0,0,,asked me to write some software
Dialogue: 0,0:31:28.75,0:31:29.58,Default,,0,0,0,,for his spaceship.
Dialogue: 0,0:31:30.62,0:31:32.02,Default,,0,0,0,,So, we'll have this struct which
Dialogue: 0,0:31:32.07,0:31:33.29,Default,,0,0,0,,describes the location of this
Dialogue: 0,0:31:33.36,0:31:33.87,Default,,0,0,0,,spaceship.
Dialogue: 0,0:31:34.40,0:31:35.45,Default,,0,0,0,,So, it will have some stored
Dialogue: 0,0:31:35.45,0:31:36.90,Default,,0,0,0,,properties to describe the
Dialogue: 0,0:31:36.90,0:31:39.12,Default,,0,0,0,,coordinates in both space and
Dialogue: 0,0:31:39.15,0:31:39.93,Default,,0,0,0,,time of course.
Dialogue: 0,0:31:40.74,0:31:41.92,Default,,0,0,0,,And will have some methods on
Dialogue: 0,0:31:41.92,0:31:43.40,Default,,0,0,0,,this struct as well.
Dialogue: 0,0:31:43.89,0:31:45.11,Default,,0,0,0,,Because the spaceship can
Dialogue: 0,0:31:45.11,0:31:46.38,Default,,0,0,0,,teleport to a different planet.
Dialogue: 0,0:31:46.66,0:31:47.99,Default,,0,0,0,,It can also fly to a different
Dialogue: 0,0:31:47.99,0:31:48.97,Default,,0,0,0,,city on the same planet.
Dialogue: 0,0:31:49.70,0:31:51.66,Default,,0,0,0,,And of course it can travel in
Dialogue: 0,0:31:52.80,0:31:52.92,Default,,0,0,0,,time.
Dialogue: 0,0:31:53.13,0:31:54.42,Default,,0,0,0,,And since these methods are
Dialogue: 0,0:31:54.42,0:31:56.01,Default,,0,0,0,,changing the coordinates, they
Dialogue: 0,0:31:56.01,0:31:57.25,Default,,0,0,0,,need to be mutating methods.
Dialogue: 0,0:31:57.76,0:31:58.68,Default,,0,0,0,,And that also means that the
Dialogue: 0,0:31:58.68,0:31:59.86,Default,,0,0,0,,rules that I just mentioned
Dialogue: 0,0:31:59.86,0:32:00.83,Default,,0,0,0,,apply to these methods.
Dialogue: 0,0:32:01.49,0:32:02.59,Default,,0,0,0,,So, if you have two threads,
Dialogue: 0,0:32:02.59,0:32:04.95,Default,,0,0,0,,which are both trying to change
Dialogue: 0,0:32:04.95,0:32:06.25,Default,,0,0,0,,the location of our spaceship.
Dialogue: 0,0:32:06.25,0:32:07.44,Default,,0,0,0,,Let's say thread one is trying
Dialogue: 0,0:32:07.44,0:32:09.22,Default,,0,0,0,,to teleport it to a different
Dialogue: 0,0:32:09.22,0:32:11.20,Default,,0,0,0,,planet while the second thread
Dialogue: 0,0:32:11.20,0:32:12.55,Default,,0,0,0,,is trying to move it in time.
Dialogue: 0,0:32:13.23,0:32:15.69,Default,,0,0,0,,That is a Swift access race.
Dialogue: 0,0:32:16.29,0:32:18.63,Default,,0,0,0,,And notice that it doesn't
Dialogue: 0,0:32:18.63,0:32:20.50,Default,,0,0,0,,matter which stored properties
Dialogue: 0,0:32:20.55,0:32:22.56,Default,,0,0,0,,are these functions, these
Dialogue: 0,0:32:22.56,0:32:24.60,Default,,0,0,0,,methods accessing or changing.
Dialogue: 0,0:32:25.25,0:32:27.18,Default,,0,0,0,,Even if teleport only changes X,
Dialogue: 0,0:32:27.18,0:32:29.23,Default,,0,0,0,,Y and Z while the other method
Dialogue: 0,0:32:29.23,0:32:31.76,Default,,0,0,0,,only changes time, it's still a
Dialogue: 0,0:32:31.76,0:32:32.59,Default,,0,0,0,,Swift access race.
Dialogue: 0,0:32:33.24,0:32:35.07,Default,,0,0,0,,The rules simply state that you
Dialogue: 0,0:32:35.07,0:32:36.90,Default,,0,0,0,,need to have exclusive access to
Dialogue: 0,0:32:36.90,0:32:38.03,Default,,0,0,0,,the whole object when you are
Dialogue: 0,0:32:38.03,0:32:39.50,Default,,0,0,0,,calling a mutating function,
Dialogue: 0,0:32:39.50,0:32:41.07,Default,,0,0,0,,sorry, to the whole struct.
Dialogue: 0,0:32:42.91,0:32:44.08,Default,,0,0,0,,It's also important to
Dialogue: 0,0:32:44.08,0:32:46.11,Default,,0,0,0,,understand that if we try to fix
Dialogue: 0,0:32:46.11,0:32:48.43,Default,,0,0,0,,this problem by introducing some
Dialogue: 0,0:32:48.43,0:32:50.08,Default,,0,0,0,,synchronization into that
Dialogue: 0,0:32:50.18,0:32:50.47,Default,,0,0,0,,struct.
Dialogue: 0,0:32:50.75,0:32:51.85,Default,,0,0,0,,Let's say that we will try to
Dialogue: 0,0:32:52.27,0:32:53.59,Default,,0,0,0,,use a dispatch queue inside of
Dialogue: 0,0:32:53.59,0:32:54.84,Default,,0,0,0,,that struct and protecting the
Dialogue: 0,0:32:54.84,0:32:57.53,Default,,0,0,0,,bodies of the mutating functions
Dialogue: 0,0:32:57.53,0:32:59.55,Default,,0,0,0,,inside them, that's not enough.
Dialogue: 0,0:32:59.98,0:33:02.12,Default,,0,0,0,,That's not a correct fix and
Dialogue: 0,0:33:02.12,0:33:03.65,Default,,0,0,0,,it's still a violation and still
Dialogue: 0,0:33:03.65,0:33:04.86,Default,,0,0,0,,a Swift access race.
Dialogue: 0,0:33:05.24,0:33:06.46,Default,,0,0,0,,Because we need to have that
Dialogue: 0,0:33:06.46,0:33:07.84,Default,,0,0,0,,exclusive access to the struct
Dialogue: 0,0:33:08.52,0:33:10.06,Default,,0,0,0,,in order to call that mutating
Dialogue: 0,0:33:10.06,0:33:10.53,Default,,0,0,0,,function.
Dialogue: 0,0:33:10.65,0:33:11.82,Default,,0,0,0,,And it's not enough to try to
Dialogue: 0,0:33:11.82,0:33:13.13,Default,,0,0,0,,introduce the synchronization
Dialogue: 0,0:33:13.22,0:33:14.31,Default,,0,0,0,,inside that function.
Dialogue: 0,0:33:14.94,0:33:18.99,Default,,0,0,0,,The correct fix is to move the
Dialogue: 0,0:33:18.99,0:33:21.16,Default,,0,0,0,,synchronization to the caller of
Dialogue: 0,0:33:21.16,0:33:22.17,Default,,0,0,0,,those mutating methods.
Dialogue: 0,0:33:23.04,0:33:24.03,Default,,0,0,0,,So, let's say that we have a
Dialogue: 0,0:33:24.09,0:33:25.98,Default,,0,0,0,,class that describes the whole
Dialogue: 0,0:33:26.04,0:33:26.49,Default,,0,0,0,,spaceship.
Dialogue: 0,0:33:27.79,0:33:28.82,Default,,0,0,0,,And it's a good idea to use a
Dialogue: 0,0:33:28.82,0:33:30.65,Default,,0,0,0,,class here because this
Dialogue: 0,0:33:30.65,0:33:32.60,Default,,0,0,0,,spaceship has some identity.
Dialogue: 0,0:33:32.60,0:33:33.52,Default,,0,0,0,,It doesn't make sense to make
Dialogue: 0,0:33:33.52,0:33:34.09,Default,,0,0,0,,copies of it.
Dialogue: 0,0:33:34.81,0:33:36.47,Default,,0,0,0,,So, in this case the spaceship
Dialogue: 0,0:33:36.47,0:33:39.05,Default,,0,0,0,,can protect the location stored
Dialogue: 0,0:33:39.08,0:33:40.26,Default,,0,0,0,,property with a queue.
Dialogue: 0,0:33:40.70,0:33:42.07,Default,,0,0,0,,And if we make sure that the
Dialogue: 0,0:33:42.07,0:33:44.36,Default,,0,0,0,,methods are only accessing that
Dialogue: 0,0:33:44.46,0:33:46.16,Default,,0,0,0,,struct within synchronized
Dialogue: 0,0:33:46.16,0:33:48.15,Default,,0,0,0,,blocks such as queue.synch here.
Dialogue: 0,0:33:48.42,0:33:50.11,Default,,0,0,0,,That will make the whole class
Dialogue: 0,0:33:50.86,0:33:53.26,Default,,0,0,0,,thread safe.
Dialogue: 0,0:33:53.46,0:33:55.15,Default,,0,0,0,,So, we've learned that you need
Dialogue: 0,0:33:55.15,0:33:57.03,Default,,0,0,0,,to synchronize access to your
Dialogue: 0,0:33:57.09,0:33:58.17,Default,,0,0,0,,shared mutable variable.
Dialogue: 0,0:33:58.66,0:33:59.98,Default,,0,0,0,,And you can use GCD for that
Dialogue: 0,0:34:00.02,0:34:02.00,Default,,0,0,0,,task and it's often as simple as
Dialogue: 0,0:34:02.00,0:34:03.46,Default,,0,0,0,,just associating your data with
Dialogue: 0,0:34:03.74,0:34:05.39,Default,,0,0,0,,some serial queue and then only
Dialogue: 0,0:34:05.39,0:34:06.96,Default,,0,0,0,,accessing the data from that
Dialogue: 0,0:34:07.01,0:34:07.25,Default,,0,0,0,,queue.
Dialogue: 0,0:34:08.51,0:34:10.00,Default,,0,0,0,,Thread Sanitizer is an amazing
Dialogue: 0,0:34:10.05,0:34:11.43,Default,,0,0,0,,tool that helps find you the
Dialogue: 0,0:34:11.43,0:34:12.76,Default,,0,0,0,,places where you are missing the
Dialogue: 0,0:34:12.76,0:34:13.56,Default,,0,0,0,,synchronization.
Dialogue: 0,0:34:14.17,0:34:15.65,Default,,0,0,0,,Which is, you know, a problem
Dialogue: 0,0:34:15.65,0:34:18.41,Default,,0,0,0,,that is very easy to make.
Dialogue: 0,0:34:18.62,0:34:20.34,Default,,0,0,0,,And with that, I'm very excited
Dialogue: 0,0:34:20.34,0:34:21.83,Default,,0,0,0,,to tell you that we're, this
Dialogue: 0,0:34:21.83,0:34:22.96,Default,,0,0,0,,year, introducing another
Dialogue: 0,0:34:22.96,0:34:24.75,Default,,0,0,0,,sanitizer to help you catch even
Dialogue: 0,0:34:24.75,0:34:25.64,Default,,0,0,0,,more types of bugs.
Dialogue: 0,0:34:25.74,0:34:27.12,Default,,0,0,0,,And here's Verdant to tell you
Dialogue: 0,0:34:27.12,0:34:28.35,Default,,0,0,0,,about it.
Dialogue: 0,0:34:29.52,0:34:32.98,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:34:33.48,0:34:34.00,Default,,0,0,0,,It's all yours.
Dialogue: 0,0:34:37.38,0:34:38.24,Default,,0,0,0,,>> All right.
Dialogue: 0,0:34:39.02,0:34:41.02,Default,,0,0,0,,Hello. My name is Verdant and I
Dialogue: 0,0:34:41.02,0:34:42.10,Default,,0,0,0,,work on compilers.
Dialogue: 0,0:34:42.10,0:34:43.68,Default,,0,0,0,,And I'm really happy to tell you
Dialogue: 0,0:34:44.07,0:34:45.99,Default,,0,0,0,,that this year in Xcode 9 we're
Dialogue: 0,0:34:45.99,0:34:48.09,Default,,0,0,0,,releasing a new tool, Undefined
Dialogue: 0,0:34:48.09,0:34:49.20,Default,,0,0,0,,Behavior Sanitizer.
Dialogue: 0,0:34:49.41,0:34:50.83,Default,,0,0,0,,And I'm sure it's going to help
Dialogue: 0,0:34:50.83,0:34:54.27,Default,,0,0,0,,you catch lots more bugs.
Dialogue: 0,0:34:55.53,0:34:57.16,Default,,0,0,0,,Okay. What is Undefined Behavior
Dialogue: 0,0:34:57.16,0:34:57.82,Default,,0,0,0,,Sanitizer?
Dialogue: 0,0:34:58.63,0:34:59.92,Default,,0,0,0,,Well, just like the other
Dialogue: 0,0:34:59.92,0:35:01.39,Default,,0,0,0,,Runtime tools you've seen so far
Dialogue: 0,0:35:01.39,0:35:03.13,Default,,0,0,0,,in this talk, it's a Runtime bug
Dialogue: 0,0:35:03.13,0:35:03.77,Default,,0,0,0,,finder.
Dialogue: 0,0:35:04.40,0:35:06.66,Default,,0,0,0,,Now, as the name suggests,
Dialogue: 0,0:35:06.69,0:35:08.37,Default,,0,0,0,,Undefined Behavior Sanitizer
Dialogue: 0,0:35:08.37,0:35:10.44,Default,,0,0,0,,detects undefined behavior for
Dialogue: 0,0:35:10.44,0:35:10.74,Default,,0,0,0,,you.
Dialogue: 0,0:35:11.37,0:35:13.44,Default,,0,0,0,,But so does Address Sanitizer
Dialogue: 0,0:35:13.68,0:35:15.90,Default,,0,0,0,,and so does a Thread Sanitizer.
Dialogue: 0,0:35:17.14,0:35:18.75,Default,,0,0,0,,What's special about Undefined
Dialogue: 0,0:35:18.75,0:35:20.53,Default,,0,0,0,,Behavior Sanitizer is that it
Dialogue: 0,0:35:20.53,0:35:22.56,Default,,0,0,0,,specializes in checking unsafe
Dialogue: 0,0:35:22.56,0:35:24.04,Default,,0,0,0,,constructs in the C language
Dialogue: 0,0:35:24.04,0:35:24.53,Default,,0,0,0,,family.
Dialogue: 0,0:35:25.12,0:35:27.51,Default,,0,0,0,,It's compatible with other
Dialogue: 0,0:35:27.51,0:35:28.37,Default,,0,0,0,,Runtime tools.
Dialogue: 0,0:35:28.48,0:35:29.93,Default,,0,0,0,,It works on all of our devices
Dialogue: 0,0:35:29.93,0:35:30.67,Default,,0,0,0,,and platforms.
Dialogue: 0,0:35:31.33,0:35:32.71,Default,,0,0,0,,And if you're interested in
Dialogue: 0,0:35:32.71,0:35:34.19,Default,,0,0,0,,learning more about undefined
Dialogue: 0,0:35:34.19,0:35:36.07,Default,,0,0,0,,behavior, I highly recommend
Dialogue: 0,0:35:36.21,0:35:37.33,Default,,0,0,0,,that you check out tomorrow
Dialogue: 0,0:35:37.33,0:35:38.79,Default,,0,0,0,,morning's talk about
Dialogue: 0,0:35:38.88,0:35:40.26,Default,,0,0,0,,understanding undefined
Dialogue: 0,0:35:40.26,0:35:42.22,Default,,0,0,0,,behavior, 9 am.
Dialogue: 0,0:35:42.55,0:35:44.16,Default,,0,0,0,,That talk will go over what
Dialogue: 0,0:35:44.16,0:35:45.82,Default,,0,0,0,,undefined behavior is.
Dialogue: 0,0:35:46.63,0:35:47.72,Default,,0,0,0,,Why it exists.
Dialogue: 0,0:35:47.72,0:35:48.70,Default,,0,0,0,,And how it can affect your
Dialogue: 0,0:35:48.70,0:35:49.55,Default,,0,0,0,,applications.
Dialogue: 0,0:35:49.61,0:35:54.19,Default,,0,0,0,,Now, I've got some good news for
Dialogue: 0,0:35:57.28,0:35:57.39,Default,,0,0,0,,you.
Dialogue: 0,0:35:57.60,0:35:59.30,Default,,0,0,0,,Undefined Behavior Sanitizer can
Dialogue: 0,0:35:59.30,0:36:01.75,Default,,0,0,0,,detect over 15 different kinds
Dialogue: 0,0:36:01.75,0:36:02.55,Default,,0,0,0,,of new issues.
Dialogue: 0,0:36:03.48,0:36:05.36,Default,,0,0,0,,Now, this is going to be great
Dialogue: 0,0:36:05.36,0:36:07.05,Default,,0,0,0,,for productivity but for this
Dialogue: 0,0:36:07.05,0:36:08.83,Default,,0,0,0,,talk, just to give you a taste
Dialogue: 0,0:36:08.88,0:36:10.00,Default,,0,0,0,,for what Undefined Behavior
Dialogue: 0,0:36:10.00,0:36:12.43,Default,,0,0,0,,Sanitizer can actually catch and
Dialogue: 0,0:36:12.43,0:36:13.58,Default,,0,0,0,,how it works, we're just going
Dialogue: 0,0:36:13.58,0:36:15.03,Default,,0,0,0,,to focus on three issues.
Dialogue: 0,0:36:15.34,0:36:17.09,Default,,0,0,0,,Integer overflow, alignment
Dialogue: 0,0:36:17.09,0:36:19.08,Default,,0,0,0,,violations and the nonnull
Dialogue: 0,0:36:19.08,0:36:20.35,Default,,0,0,0,,return value violation.
Dialogue: 0,0:36:20.89,0:36:23.41,Default,,0,0,0,,Let's start with integer
Dialogue: 0,0:36:23.41,0:36:23.88,Default,,0,0,0,,overflow.
Dialogue: 0,0:36:25.63,0:36:27.34,Default,,0,0,0,,Integer overflow occurs when
Dialogue: 0,0:36:27.34,0:36:28.27,Default,,0,0,0,,you've got an arithmetic
Dialogue: 0,0:36:28.27,0:36:30.51,Default,,0,0,0,,expression and its result is too
Dialogue: 0,0:36:30.51,0:36:32.04,Default,,0,0,0,,big to fit in a variable.
Dialogue: 0,0:36:32.96,0:36:34.92,Default,,0,0,0,,Now, if this sort of bug occurs
Dialogue: 0,0:36:34.92,0:36:36.99,Default,,0,0,0,,in an indexing expression, such
Dialogue: 0,0:36:36.99,0:36:38.34,Default,,0,0,0,,as, like, if you're indexing
Dialogue: 0,0:36:38.34,0:36:40.23,Default,,0,0,0,,into a buffer or in an
Dialogue: 0,0:36:40.23,0:36:41.56,Default,,0,0,0,,expression used to compute the
Dialogue: 0,0:36:41.56,0:36:43.25,Default,,0,0,0,,size of the buffer, it can
Dialogue: 0,0:36:43.25,0:36:45.17,Default,,0,0,0,,actually be a serious security
Dialogue: 0,0:36:45.17,0:36:46.78,Default,,0,0,0,,hole and it can be exploited.
Dialogue: 0,0:36:48.32,0:36:50.21,Default,,0,0,0,,Integer overflow can also just
Dialogue: 0,0:36:50.21,0:36:51.36,Default,,0,0,0,,sometimes lead to surprising
Dialogue: 0,0:36:51.36,0:36:51.98,Default,,0,0,0,,results.
Dialogue: 0,0:36:52.32,0:36:53.68,Default,,0,0,0,,Like, for example there
Dialogue: 0,0:36:54.51,0:36:56.86,Default,,0,0,0,,additions you can perform that,
Dialogue: 0,0:36:57.57,0:36:58.70,Default,,0,0,0,,well, take a look.
Dialogue: 0,0:36:59.20,0:37:00.70,Default,,0,0,0,,If you've got int max and you
Dialogue: 0,0:37:00.70,0:37:02.88,Default,,0,0,0,,add 1 to it, you actually don't
Dialogue: 0,0:37:02.93,0:37:04.97,Default,,0,0,0,,get a number that's bigger than
Dialogue: 0,0:37:04.97,0:37:06.03,Default,,0,0,0,,what you started out with, which
Dialogue: 0,0:37:06.03,0:37:06.97,Default,,0,0,0,,can be really confusing.
Dialogue: 0,0:37:07.49,0:37:10.45,Default,,0,0,0,,Now, not all kinds of integer
Dialogue: 0,0:37:10.45,0:37:12.34,Default,,0,0,0,,overflow are undefined behavior.
Dialogue: 0,0:37:12.34,0:37:14.51,Default,,0,0,0,,In fact, some kinds of overflow
Dialogue: 0,0:37:14.51,0:37:16.29,Default,,0,0,0,,actually have defined semantics,
Dialogue: 0,0:37:16.29,0:37:17.83,Default,,0,0,0,,which is unsigned integer
Dialogue: 0,0:37:17.83,0:37:18.37,Default,,0,0,0,,overflow.
Dialogue: 0,0:37:19.47,0:37:21.35,Default,,0,0,0,,However, unsigned integer
Dialogue: 0,0:37:21.35,0:37:22.63,Default,,0,0,0,,overflow can still be really
Dialogue: 0,0:37:22.63,0:37:23.31,Default,,0,0,0,,surprising.
Dialogue: 0,0:37:23.40,0:37:25.12,Default,,0,0,0,,So, we really recommend that you
Dialogue: 0,0:37:25.16,0:37:27.20,Default,,0,0,0,,opt into this check.
Dialogue: 0,0:37:27.39,0:37:28.37,Default,,0,0,0,,I'll show you how to do that at
Dialogue: 0,0:37:28.37,0:37:31.13,Default,,0,0,0,,the tail end of this topic.
Dialogue: 0,0:37:31.28,0:37:33.46,Default,,0,0,0,,But with that, let's go ahead
Dialogue: 0,0:37:33.46,0:37:34.45,Default,,0,0,0,,and jump into a demo.
Dialogue: 0,0:37:35.19,0:37:37.22,Default,,0,0,0,,All right, now what I've got up
Dialogue: 0,0:37:37.22,0:37:38.77,Default,,0,0,0,,here is a function that all of
Dialogue: 0,0:37:38.77,0:37:40.01,Default,,0,0,0,,us have probably written really
Dialogue: 0,0:37:40.01,0:37:40.74,Default,,0,0,0,,often.
Dialogue: 0,0:37:40.78,0:37:41.89,Default,,0,0,0,,It's an average function.
Dialogue: 0,0:37:42.28,0:37:43.99,Default,,0,0,0,,So, it takes in an array of
Dialogue: 0,0:37:43.99,0:37:45.43,Default,,0,0,0,,integers and a length.
Dialogue: 0,0:37:45.85,0:37:47.02,Default,,0,0,0,,It sets up an accumulator.
Dialogue: 0,0:37:47.30,0:37:48.80,Default,,0,0,0,,It iterates through your array,
Dialogue: 0,0:37:49.20,0:37:50.56,Default,,0,0,0,,adds everything up and divides.
Dialogue: 0,0:37:50.99,0:37:51.82,Default,,0,0,0,,So, it should give you an
Dialogue: 0,0:37:51.82,0:37:52.28,Default,,0,0,0,,average.
Dialogue: 0,0:37:53.22,0:37:54.23,Default,,0,0,0,,Now, we're interested in writing
Dialogue: 0,0:37:54.23,0:37:55.92,Default,,0,0,0,,a test for this so that we know
Dialogue: 0,0:37:55.92,0:37:57.08,Default,,0,0,0,,that it behaves correctly.
Dialogue: 0,0:37:58.13,0:37:58.95,Default,,0,0,0,,So, here we go.
Dialogue: 0,0:37:59.07,0:37:59.97,Default,,0,0,0,,Let's take a look at the test
Dialogue: 0,0:37:59.97,0:38:00.45,Default,,0,0,0,,that we've got.
Dialogue: 0,0:38:01.37,0:38:03.05,Default,,0,0,0,,Test nonnegative average.
Dialogue: 0,0:38:04.21,0:38:05.08,Default,,0,0,0,,The test is really simple.
Dialogue: 0,0:38:05.31,0:38:06.58,Default,,0,0,0,,So, we're going to create an
Dialogue: 0,0:38:06.58,0:38:08.24,Default,,0,0,0,,array of 10,000 integers.
Dialogue: 0,0:38:09.06,0:38:10.19,Default,,0,0,0,,We're going to populate the
Dialogue: 0,0:38:10.19,0:38:11.95,Default,,0,0,0,,array with pseudo random
Dialogue: 0,0:38:12.02,0:38:14.16,Default,,0,0,0,,nonnegative integers and just
Dialogue: 0,0:38:14.16,0:38:15.98,Default,,0,0,0,,check, just do a simple sanity
Dialogue: 0,0:38:15.98,0:38:16.17,Default,,0,0,0,,check.
Dialogue: 0,0:38:16.71,0:38:18.06,Default,,0,0,0,,Just check that the average that
Dialogue: 0,0:38:18.06,0:38:19.90,Default,,0,0,0,,we get back is also nonnegative.
Dialogue: 0,0:38:20.14,0:38:21.55,Default,,0,0,0,,That's this assertion right
Dialogue: 0,0:38:21.68,0:38:21.86,Default,,0,0,0,,here.
Dialogue: 0,0:38:23.27,0:38:25.00,Default,,0,0,0,,All right, so let's go ahead and
Dialogue: 0,0:38:25.00,0:38:25.57,Default,,0,0,0,,run our test.
Dialogue: 0,0:38:25.94,0:38:27.94,Default,,0,0,0,,Let's go up to here.
Dialogue: 0,0:38:28.03,0:38:30.30,Default,,0,0,0,,Hit play. Build succeeded.
Dialogue: 0,0:38:31.59,0:38:33.69,Default,,0,0,0,,And nothing really happened.
Dialogue: 0,0:38:33.69,0:38:34.54,Default,,0,0,0,,We just finished running our
Dialogue: 0,0:38:34.54,0:38:36.11,Default,,0,0,0,,program, the assertion passed.
Dialogue: 0,0:38:36.35,0:38:37.32,Default,,0,0,0,,Everything seems great.
Dialogue: 0,0:38:38.36,0:38:40.57,Default,,0,0,0,,Now, let's just change one small
Dialogue: 0,0:38:40.65,0:38:41.04,Default,,0,0,0,,thing.
Dialogue: 0,0:38:41.33,0:38:42.77,Default,,0,0,0,,And this is going to illustrate
Dialogue: 0,0:38:42.77,0:38:43.96,Default,,0,0,0,,why undefined behavior and
Dialogue: 0,0:38:43.96,0:38:45.17,Default,,0,0,0,,integer overflow in particular
Dialogue: 0,0:38:45.17,0:38:45.97,Default,,0,0,0,,can be really tricky.
Dialogue: 0,0:38:46.41,0:38:47.78,Default,,0,0,0,,Let's change the array length
Dialogue: 0,0:38:48.13,0:38:50.64,Default,,0,0,0,,from 10,000 to 10,0001.
Dialogue: 0,0:38:51.26,0:38:53.53,Default,,0,0,0,,Save it. Go back.
Dialogue: 0,0:38:54.94,0:38:55.94,Default,,0,0,0,,And run our program.
Dialogue: 0,0:38:56.81,0:39:00.64,Default,,0,0,0,,Uh oh. Insertion5 failure.
Dialogue: 0,0:39:01.30,0:39:03.98,Default,,0,0,0,,Now, this is really confusing.
Dialogue: 0,0:39:03.98,0:39:05.00,Default,,0,0,0,,So, you know, I've got
Dialogue: 0,0:39:05.00,0:39:06.31,Default,,0,0,0,,non-negative integers.
Dialogue: 0,0:39:06.82,0:39:08.60,Default,,0,0,0,,I wrote a really sort of
Dialogue: 0,0:39:08.60,0:39:10.32,Default,,0,0,0,,straightforward function that
Dialogue: 0,0:39:10.68,0:39:11.67,Default,,0,0,0,,sums them up.
Dialogue: 0,0:39:11.79,0:39:13.12,Default,,0,0,0,,But all of a sudden I'm getting
Dialogue: 0,0:39:13.12,0:39:14.52,Default,,0,0,0,,this weird failure, this really
Dialogue: 0,0:39:14.59,0:39:15.72,Default,,0,0,0,,basic test that it isn't
Dialogue: 0,0:39:15.72,0:39:16.17,Default,,0,0,0,,passing.
Dialogue: 0,0:39:17.42,0:39:19.12,Default,,0,0,0,,Undefined Behavior Sanitizer can
Dialogue: 0,0:39:19.12,0:39:20.04,Default,,0,0,0,,be really useful in these
Dialogue: 0,0:39:20.04,0:39:21.55,Default,,0,0,0,,situations and clarify what the
Dialogue: 0,0:39:21.55,0:39:22.51,Default,,0,0,0,,actual issue is.
Dialogue: 0,0:39:22.51,0:39:24.22,Default,,0,0,0,,So, we're going to turn it on
Dialogue: 0,0:39:24.40,0:39:25.43,Default,,0,0,0,,just like Kuba has shown you.
Dialogue: 0,0:39:25.68,0:39:27.60,Default,,0,0,0,,We go into the scheme editor
Dialogue: 0,0:39:27.60,0:39:29.29,Default,,0,0,0,,next to it, the diagnostics tab.
Dialogue: 0,0:39:30.94,0:39:32.13,Default,,0,0,0,,Click the right check box.
Dialogue: 0,0:39:32.67,0:39:34.14,Default,,0,0,0,,And we're good to go.
Dialogue: 0,0:39:35.21,0:39:37.52,Default,,0,0,0,,We can hit run again, rebuild
Dialogue: 0,0:39:37.52,0:39:39.01,Default,,0,0,0,,but Undefined Behavior Sanitizer
Dialogue: 0,0:39:39.01,0:39:39.63,Default,,0,0,0,,turned on.
Dialogue: 0,0:39:40.18,0:39:41.59,Default,,0,0,0,,And here we are.
Dialogue: 0,0:39:42.60,0:39:45.25,Default,,0,0,0,,So, Undefined Behavior Sanitizer
Dialogue: 0,0:39:45.35,0:39:47.58,Default,,0,0,0,,has zoomed in on the exact cause
Dialogue: 0,0:39:47.58,0:39:49.26,Default,,0,0,0,,of the issue for us and it's
Dialogue: 0,0:39:49.29,0:39:50.39,Default,,0,0,0,,done so in a relatively
Dialogue: 0,0:39:50.39,0:39:51.03,Default,,0,0,0,,drama-free way.
Dialogue: 0,0:39:51.33,0:39:53.21,Default,,0,0,0,,It tells us what happened.
Dialogue: 0,0:39:53.58,0:39:54.73,Default,,0,0,0,,Assigned integer overflow.
Dialogue: 0,0:39:55.13,0:39:56.30,Default,,0,0,0,,And it tells us the values
Dialogue: 0,0:39:56.30,0:39:57.46,Default,,0,0,0,,involved in the overflow.
Dialogue: 0,0:39:57.60,0:39:59.78,Default,,0,0,0,,As we can see, they're gigantic.
Dialogue: 0,0:39:59.84,0:40:01.25,Default,,0,0,0,,There's no way that these two
Dialogue: 0,0:40:01.25,0:40:02.93,Default,,0,0,0,,values or the sum of them can
Dialogue: 0,0:40:02.93,0:40:04.67,Default,,0,0,0,,fit inside of a 32-bit integer.
Dialogue: 0,0:40:04.67,0:40:06.66,Default,,0,0,0,,And what ended up happening was
Dialogue: 0,0:40:06.66,0:40:08.15,Default,,0,0,0,,that whatever garbled result we
Dialogue: 0,0:40:08.15,0:40:11.17,Default,,0,0,0,,got ended up being, you know, in
Dialogue: 0,0:40:11.17,0:40:12.82,Default,,0,0,0,,two complement representation a
Dialogue: 0,0:40:12.82,0:40:13.76,Default,,0,0,0,,negative number.
Dialogue: 0,0:40:15.18,0:40:17.51,Default,,0,0,0,,So, you can fix this problem in
Dialogue: 0,0:40:17.51,0:40:18.24,Default,,0,0,0,,a couple different ways.
Dialogue: 0,0:40:18.75,0:40:21.16,Default,,0,0,0,,The two I would recommend is to
Dialogue: 0,0:40:21.23,0:40:22.65,Default,,0,0,0,,either use a different algorithm
Dialogue: 0,0:40:22.65,0:40:24.42,Default,,0,0,0,,for computing your average or if
Dialogue: 0,0:40:24.42,0:40:25.25,Default,,0,0,0,,you're in a pinch, just
Dialogue: 0,0:40:25.34,0:40:26.97,Default,,0,0,0,,constrain the set of inputs into
Dialogue: 0,0:40:26.97,0:40:28.86,Default,,0,0,0,,your average function so that
Dialogue: 0,0:40:28.86,0:40:30.45,Default,,0,0,0,,you don't end up with this
Dialogue: 0,0:40:31.34,0:40:31.59,Default,,0,0,0,,problem.
Dialogue: 0,0:40:31.66,0:40:31.96,Default,,0,0,0,,All right.
Dialogue: 0,0:40:32.48,0:40:35.08,Default,,0,0,0,,So, with that said, let's go
Dialogue: 0,0:40:35.08,0:40:36.00,Default,,0,0,0,,back to the slides.
Dialogue: 0,0:40:36.05,0:40:37.86,Default,,0,0,0,,I hope that you've seen that
Dialogue: 0,0:40:37.86,0:40:39.40,Default,,0,0,0,,Undefined Behavior Sanitizer can
Dialogue: 0,0:40:39.40,0:40:41.75,Default,,0,0,0,,make it really easy for you to
Dialogue: 0,0:40:41.75,0:40:44.39,Default,,0,0,0,,find the source of tricky issues
Dialogue: 0,0:40:44.39,0:40:45.72,Default,,0,0,0,,that cause weird failures at
Dialogue: 0,0:40:45.72,0:40:46.07,Default,,0,0,0,,Runtime.
Dialogue: 0,0:40:46.14,0:40:46.75,Default,,0,0,0,,All right.
Dialogue: 0,0:40:47.42,0:40:51.41,Default,,0,0,0,,With that out of the way, let's
Dialogue: 0,0:40:51.41,0:40:52.70,Default,,0,0,0,,talk about the second kind of
Dialogue: 0,0:40:52.73,0:40:54.97,Default,,0,0,0,,issue that we're going to focus
Dialogue: 0,0:40:54.97,0:40:55.19,Default,,0,0,0,,on.
Dialogue: 0,0:40:55.19,0:40:56.67,Default,,0,0,0,,And those are memory alignment
Dialogue: 0,0:40:56.67,0:40:57.59,Default,,0,0,0,,violations.
Dialogue: 0,0:40:58.90,0:41:01.76,Default,,0,0,0,,Now, every type in C has a size
Dialogue: 0,0:41:01.97,0:41:03.32,Default,,0,0,0,,but it also has a required
Dialogue: 0,0:41:03.50,0:41:04.08,Default,,0,0,0,,alignment.
Dialogue: 0,0:41:05.36,0:41:07.15,Default,,0,0,0,,A memory alignment violation
Dialogue: 0,0:41:07.15,0:41:08.61,Default,,0,0,0,,occurs in your program when
Dialogue: 0,0:41:08.61,0:41:10.41,Default,,0,0,0,,there is an unaligned load or
Dialogue: 0,0:41:10.41,0:41:12.75,Default,,0,0,0,,store to a piece of memory.
Dialogue: 0,0:41:14.04,0:41:15.44,Default,,0,0,0,,Now, this can actually be a
Dialogue: 0,0:41:15.44,0:41:18.38,Default,,0,0,0,,really subtle bug to find.
Dialogue: 0,0:41:18.53,0:41:21.98,Default,,0,0,0,,And there's a good chance that
Dialogue: 0,0:41:21.98,0:41:23.71,Default,,0,0,0,,you may never even see it during
Dialogue: 0,0:41:23.71,0:41:24.82,Default,,0,0,0,,your day to day development.
Dialogue: 0,0:41:25.09,0:41:27.11,Default,,0,0,0,,I'm assuming most of you develop
Dialogue: 0,0:41:27.11,0:41:28.73,Default,,0,0,0,,your apps in frameworks and the
Dialogue: 0,0:41:28.73,0:41:30.47,Default,,0,0,0,,debug configuration in Xcode.
Dialogue: 0,0:41:31.00,0:41:32.27,Default,,0,0,0,,And when you're ready to finally
Dialogue: 0,0:41:32.27,0:41:33.96,Default,,0,0,0,,ship your app, you'll, you know,
Dialogue: 0,0:41:33.96,0:41:34.68,Default,,0,0,0,,ship it in the release
Dialogue: 0,0:41:34.68,0:41:35.46,Default,,0,0,0,,configuration.
Dialogue: 0,0:41:35.98,0:41:37.45,Default,,0,0,0,,The problem is because the
Dialogue: 0,0:41:37.45,0:41:39.73,Default,,0,0,0,,compiler really expects you to
Dialogue: 0,0:41:39.97,0:41:41.72,Default,,0,0,0,,not violate alignment
Dialogue: 0,0:41:41.72,0:41:44.33,Default,,0,0,0,,assumptions, the optimizer can
Dialogue: 0,0:41:44.45,0:41:46.53,Default,,0,0,0,,often do things with your code
Dialogue: 0,0:41:46.72,0:41:48.09,Default,,0,0,0,,which cause your program to
Dialogue: 0,0:41:48.20,0:41:50.11,Default,,0,0,0,,crash at Runtime in the release
Dialogue: 0,0:41:50.11,0:41:51.27,Default,,0,0,0,,configuration when these
Dialogue: 0,0:41:51.27,0:41:52.49,Default,,0,0,0,,optimizations are enabled.
Dialogue: 0,0:41:54.05,0:41:55.62,Default,,0,0,0,,Undefined Behavior Sanitizer can
Dialogue: 0,0:41:55.62,0:41:57.48,Default,,0,0,0,,help you catch these issues even
Dialogue: 0,0:41:57.48,0:41:59.26,Default,,0,0,0,,in the debug configuration ahead
Dialogue: 0,0:41:59.26,0:42:00.69,Default,,0,0,0,,of time so you don't end up with
Dialogue: 0,0:42:00.69,0:42:02.43,Default,,0,0,0,,hard to debug failures later
Dialogue: 0,0:42:02.61,0:42:03.06,Default,,0,0,0,,down the road.
Dialogue: 0,0:42:04.42,0:42:05.93,Default,,0,0,0,,Now, this type of failure is
Dialogue: 0,0:42:05.93,0:42:07.51,Default,,0,0,0,,especially common in code that
Dialogue: 0,0:42:07.51,0:42:09.09,Default,,0,0,0,,deals with serializing or
Dialogue: 0,0:42:09.21,0:42:10.41,Default,,0,0,0,,deserializing data from
Dialogue: 0,0:42:10.41,0:42:11.63,Default,,0,0,0,,persistent storage.
Dialogue: 0,0:42:12.20,0:42:14.55,Default,,0,0,0,,So, let's take a closer look at
Dialogue: 0,0:42:14.55,0:42:15.97,Default,,0,0,0,,an example that does exactly
Dialogue: 0,0:42:16.73,0:42:16.83,Default,,0,0,0,,that.
Dialogue: 0,0:42:18.71,0:42:21.29,Default,,0,0,0,,Okay, so in this example, I'm
Dialogue: 0,0:42:21.29,0:42:23.51,Default,,0,0,0,,interested in writing a custom
Dialogue: 0,0:42:23.51,0:42:24.79,Default,,0,0,0,,network protocol for a chat
Dialogue: 0,0:42:24.79,0:42:26.07,Default,,0,0,0,,application that I'm developing.
Dialogue: 0,0:42:26.59,0:42:28.86,Default,,0,0,0,,And one really basic thing that
Dialogue: 0,0:42:28.86,0:42:30.47,Default,,0,0,0,,I've got in my network protocol
Dialogue: 0,0:42:30.73,0:42:32.42,Default,,0,0,0,,is a definition of a packet
Dialogue: 0,0:42:32.42,0:42:32.96,Default,,0,0,0,,structure.
Dialogue: 0,0:42:34.21,0:42:35.41,Default,,0,0,0,,The packet structure contains
Dialogue: 0,0:42:35.41,0:42:36.21,Default,,0,0,0,,three things.
Dialogue: 0,0:42:36.85,0:42:38.64,Default,,0,0,0,,A magic field to identify the
Dialogue: 0,0:42:38.64,0:42:39.89,Default,,0,0,0,,protocol that we're speaking in.
Dialogue: 0,0:42:41.29,0:42:43.75,Default,,0,0,0,,A payload length that tells you
Dialogue: 0,0:42:43.75,0:42:45.16,Default,,0,0,0,,how long the message inside of
Dialogue: 0,0:42:45.16,0:42:45.99,Default,,0,0,0,,the packet is.
Dialogue: 0,0:42:46.56,0:42:48.18,Default,,0,0,0,,And the payload itself.
Dialogue: 0,0:42:48.89,0:42:50.23,Default,,0,0,0,,For the purposes of this
Dialogue: 0,0:42:50.23,0:42:51.29,Default,,0,0,0,,example, I'm just going to
Dialogue: 0,0:42:51.29,0:42:53.12,Default,,0,0,0,,assume that int is a four-byte
Dialogue: 0,0:42:53.23,0:42:53.59,Default,,0,0,0,,integer.
Dialogue: 0,0:42:54.16,0:42:55.51,Default,,0,0,0,,Okay, now with that out of the
Dialogue: 0,0:42:55.51,0:42:58.04,Default,,0,0,0,,way, we've got two things that
Dialogue: 0,0:42:58.04,0:42:59.35,Default,,0,0,0,,we need to focus on in order to
Dialogue: 0,0:42:59.35,0:43:01.57,Default,,0,0,0,,make custom network protocol
Dialogue: 0,0:43:01.57,0:43:02.30,Default,,0,0,0,,work for us.
Dialogue: 0,0:43:02.61,0:43:04.20,Default,,0,0,0,,Sender and a receiver.
Dialogue: 0,0:43:04.54,0:43:06.41,Default,,0,0,0,,We'll get to the sender first.
Dialogue: 0,0:43:07.17,0:43:08.72,Default,,0,0,0,,Now, the sender's got a network
Dialogue: 0,0:43:08.79,0:43:09.21,Default,,0,0,0,,buffer.
Dialogue: 0,0:43:09.42,0:43:10.56,Default,,0,0,0,,This is where it's going to
Dialogue: 0,0:43:10.56,0:43:13.08,Default,,0,0,0,,assemble its packets, get them
Dialogue: 0,0:43:13.08,0:43:13.56,Default,,0,0,0,,all ready.
Dialogue: 0,0:43:13.84,0:43:14.82,Default,,0,0,0,,Get your payload ready.
Dialogue: 0,0:43:15.30,0:43:16.63,Default,,0,0,0,,And then shoot them down the
Dialogue: 0,0:43:16.63,0:43:18.07,Default,,0,0,0,,network so that the receiver can
Dialogue: 0,0:43:18.07,0:43:18.32,Default,,0,0,0,,get it.
Dialogue: 0,0:43:19.22,0:43:22.01,Default,,0,0,0,,Now, for illustrative purposes,
Dialogue: 0,0:43:22.45,0:43:24.47,Default,,0,0,0,,I've broken up the memory inside
Dialogue: 0,0:43:24.47,0:43:25.56,Default,,0,0,0,,of our network buffer into
Dialogue: 0,0:43:25.56,0:43:27.43,Default,,0,0,0,,four-byte chunks and hopefully
Dialogue: 0,0:43:27.55,0:43:29.69,Default,,0,0,0,,you'll see why soon.
Dialogue: 0,0:43:29.89,0:43:31.88,Default,,0,0,0,,Okay, now I really miss Kuba
Dialogue: 0,0:43:31.88,0:43:34.19,Default,,0,0,0,,already just because, you know,
Dialogue: 0,0:43:34.19,0:43:36.09,Default,,0,0,0,,he's been offstage for so long.
Dialogue: 0,0:43:36.65,0:43:37.84,Default,,0,0,0,,So, the first message that I
Dialogue: 0,0:43:37.84,0:43:39.64,Default,,0,0,0,,want to send to Kuba is Hey
Dialogue: 0,0:43:39.64,0:43:39.89,Default,,0,0,0,,Kuba.
Dialogue: 0,0:43:40.76,0:43:42.02,Default,,0,0,0,,So, in order to do that I'm
Dialogue: 0,0:43:42.02,0:43:43.53,Default,,0,0,0,,going to start with a magic
Dialogue: 0,0:43:43.53,0:43:43.89,Default,,0,0,0,,value.
Dialogue: 0,0:43:44.39,0:43:48.21,Default,,0,0,0,,Next I'm going to specify the
Dialogue: 0,0:43:48.21,0:43:49.31,Default,,0,0,0,,length of my message.
Dialogue: 0,0:43:49.50,0:43:50.71,Default,,0,0,0,,It's got nine characters in it.
Dialogue: 0,0:43:51.16,0:43:54.03,Default,,0,0,0,,So, there we go.
Dialogue: 0,0:43:54.23,0:43:56.74,Default,,0,0,0,,Finally I'm going to specify my
Dialogue: 0,0:43:56.74,0:43:58.76,Default,,0,0,0,,message itself which is Hey
Dialogue: 0,0:43:58.76,0:43:59.02,Default,,0,0,0,,Kuba.
Dialogue: 0,0:44:00.50,0:44:02.01,Default,,0,0,0,,Now we're ready to take a look
Dialogue: 0,0:44:02.01,0:44:03.49,Default,,0,0,0,,at what the receiver does.
Dialogue: 0,0:44:04.04,0:44:07.36,Default,,0,0,0,,It's going to take a pointer to
Dialogue: 0,0:44:07.36,0:44:08.83,Default,,0,0,0,,the network byte stream's buffer
Dialogue: 0,0:44:09.38,0:44:11.36,Default,,0,0,0,,and cast it to a pointer to a
Dialogue: 0,0:44:11.44,0:44:12.27,Default,,0,0,0,,packet structure.
Dialogue: 0,0:44:13.86,0:44:16.77,Default,,0,0,0,,Then it's going to look inside
Dialogue: 0,0:44:16.77,0:44:18.70,Default,,0,0,0,,the packet, figure out what the
Dialogue: 0,0:44:18.70,0:44:20.44,Default,,0,0,0,,magic field is, make sure it's
Dialogue: 0,0:44:20.44,0:44:21.67,Default,,0,0,0,,the correct values so that we're
Dialogue: 0,0:44:21.67,0:44:22.81,Default,,0,0,0,,speaking the right protocol.
Dialogue: 0,0:44:23.35,0:44:25.00,Default,,0,0,0,,And then look at the payload.
Dialogue: 0,0:44:25.06,0:44:27.39,Default,,0,0,0,,All right, so that's the first
Dialogue: 0,0:44:27.39,0:44:27.98,Default,,0,0,0,,packet out of the way.
Dialogue: 0,0:44:28.26,0:44:29.23,Default,,0,0,0,,No issues so far.
Dialogue: 0,0:44:30.28,0:44:31.01,Default,,0,0,0,,Let's send another.
Dialogue: 0,0:44:32.34,0:44:33.75,Default,,0,0,0,,The second message is going to
Dialogue: 0,0:44:33.75,0:44:35.52,Default,,0,0,0,,be how's it going?
Dialogue: 0,0:44:36.04,0:44:38.86,Default,,0,0,0,,So, we'll do the same thing.
Dialogue: 0,0:44:39.08,0:44:40.84,Default,,0,0,0,,Toss in a magic value, the same
Dialogue: 0,0:44:40.84,0:44:41.45,Default,,0,0,0,,one as before.
Dialogue: 0,0:44:42.70,0:44:44.17,Default,,0,0,0,,Toss down the length of the
Dialogue: 0,0:44:44.17,0:44:46.98,Default,,0,0,0,,message, 15 characters, and then
Dialogue: 0,0:44:46.98,0:44:48.00,Default,,0,0,0,,the message itself.
Dialogue: 0,0:44:49.30,0:44:50.69,Default,,0,0,0,,Switching back over to the
Dialogue: 0,0:44:50.69,0:44:52.49,Default,,0,0,0,,receiver end, we're going to see
Dialogue: 0,0:44:52.75,0:44:54.14,Default,,0,0,0,,that the problem manifests here.
Dialogue: 0,0:44:54.97,0:44:57.59,Default,,0,0,0,,This time we're looking at index
Dialogue: 0,0:44:57.59,0:44:59.68,Default,,0,0,0,,17 into the network byte stream.
Dialogue: 0,0:45:00.54,0:45:03.14,Default,,0,0,0,,And as soon as we look at the
Dialogue: 0,0:45:03.14,0:45:04.51,Default,,0,0,0,,magic value inside of that
Dialogue: 0,0:45:04.61,0:45:06.98,Default,,0,0,0,,packet structure, we get a
Dialogue: 0,0:45:06.98,0:45:08.41,Default,,0,0,0,,memory alignment violation.
Dialogue: 0,0:45:08.87,0:45:12.68,Default,,0,0,0,,Now, as you can see here, the
Dialogue: 0,0:45:12.80,0:45:14.80,Default,,0,0,0,,magic field of the second packet
Dialogue: 0,0:45:15.00,0:45:16.44,Default,,0,0,0,,isn't aligned to a four-byte
Dialogue: 0,0:45:16.48,0:45:17.02,Default,,0,0,0,,boundary.
Dialogue: 0,0:45:17.44,0:45:19.55,Default,,0,0,0,,So, dereferencing it directly
Dialogue: 0,0:45:19.55,0:45:20.87,Default,,0,0,0,,from the network byte stream is
Dialogue: 0,0:45:20.87,0:45:22.00,Default,,0,0,0,,an alignment violation,
Dialogue: 0,0:45:22.29,0:45:23.32,Default,,0,0,0,,something that undefined
Dialogue: 0,0:45:23.32,0:45:25.02,Default,,0,0,0,,behavior sanitizer can very
Dialogue: 0,0:45:25.02,0:45:26.42,Default,,0,0,0,,precisely diagnose for you.
Dialogue: 0,0:45:30.38,0:45:31.60,Default,,0,0,0,,How do you fix this?
Dialogue: 0,0:45:31.97,0:45:32.88,Default,,0,0,0,,Well, we're going to talk about
Dialogue: 0,0:45:32.88,0:45:34.17,Default,,0,0,0,,two different ways to do it.
Dialogue: 0,0:45:34.40,0:45:36.03,Default,,0,0,0,,The first is to use the packed
Dialogue: 0,0:45:36.31,0:45:38.33,Default,,0,0,0,,attribute in your network packet
Dialogue: 0,0:45:38.33,0:45:39.93,Default,,0,0,0,,structure definition or any
Dialogue: 0,0:45:39.93,0:45:40.92,Default,,0,0,0,,structure that you've got that
Dialogue: 0,0:45:40.92,0:45:41.67,Default,,0,0,0,,you're serializing.
Dialogue: 0,0:45:42.70,0:45:43.65,Default,,0,0,0,,Okay, so let's take a look at
Dialogue: 0,0:45:43.65,0:45:44.28,Default,,0,0,0,,how this works.
Dialogue: 0,0:45:44.78,0:45:47.48,Default,,0,0,0,,You add the packed attribute and
Dialogue: 0,0:45:47.48,0:45:49.29,Default,,0,0,0,,that changes all of the field
Dialogue: 0,0:45:49.29,0:45:50.19,Default,,0,0,0,,alignments inside of your
Dialogue: 0,0:45:50.19,0:45:51.72,Default,,0,0,0,,structure from whatever they
Dialogue: 0,0:45:51.72,0:45:53.48,Default,,0,0,0,,were originally to one byte
Dialogue: 0,0:45:53.48,0:45:53.86,Default,,0,0,0,,aligned.
Dialogue: 0,0:45:54.49,0:45:55.92,Default,,0,0,0,,That's the lowest possible
Dialogue: 0,0:45:55.92,0:45:57.38,Default,,0,0,0,,alignment that you can have
Dialogue: 0,0:45:57.38,0:45:59.01,Default,,0,0,0,,which means that any subsequent
Dialogue: 0,0:45:59.01,0:46:01.66,Default,,0,0,0,,load or store from that field is
Dialogue: 0,0:46:01.66,0:46:02.72,Default,,0,0,0,,always going to be aligned.
Dialogue: 0,0:46:03.59,0:46:04.87,Default,,0,0,0,,Aha, so you may be thinking to
Dialogue: 0,0:46:04.87,0:46:06.15,Default,,0,0,0,,yourself this sounds super
Dialogue: 0,0:46:06.15,0:46:06.63,Default,,0,0,0,,convenient.
Dialogue: 0,0:46:06.63,0:46:07.97,Default,,0,0,0,,I'm just going to toss packed on
Dialogue: 0,0:46:07.97,0:46:08.54,Default,,0,0,0,,everything.
Dialogue: 0,0:46:09.18,0:46:10.61,Default,,0,0,0,,Well, you've got to be careful.
Dialogue: 0,0:46:11.08,0:46:12.71,Default,,0,0,0,,So, using the packed attribute
Dialogue: 0,0:46:12.75,0:46:14.12,Default,,0,0,0,,can actually change the layout
Dialogue: 0,0:46:14.12,0:46:14.92,Default,,0,0,0,,of your structure.
Dialogue: 0,0:46:15.40,0:46:17.44,Default,,0,0,0,,In many cases, it can remove
Dialogue: 0,0:46:17.50,0:46:18.77,Default,,0,0,0,,padding that the compiler has
Dialogue: 0,0:46:18.77,0:46:20.22,Default,,0,0,0,,automatically inserted into your
Dialogue: 0,0:46:20.22,0:46:22.72,Default,,0,0,0,,structure and it can also
Dialogue: 0,0:46:22.72,0:46:24.49,Default,,0,0,0,,degrade your app's performance.
Dialogue: 0,0:46:25.45,0:46:28.02,Default,,0,0,0,,Now, if you find that you're not
Dialogue: 0,0:46:28.02,0:46:29.77,Default,,0,0,0,,in a situation where packed
Dialogue: 0,0:46:29.77,0:46:30.99,Default,,0,0,0,,attribute would work for you,
Dialogue: 0,0:46:31.37,0:46:32.41,Default,,0,0,0,,there is another option.
Dialogue: 0,0:46:33.05,0:46:36.85,Default,,0,0,0,,You can use the mem copy
Dialogue: 0,0:46:36.85,0:46:39.51,Default,,0,0,0,,function to perform an unaligned
Dialogue: 0,0:46:39.51,0:46:41.61,Default,,0,0,0,,copy from the network byte
Dialogue: 0,0:46:41.61,0:46:42.93,Default,,0,0,0,,stream or wherever you're
Dialogue: 0,0:46:42.93,0:46:43.97,Default,,0,0,0,,deserializing from.
Dialogue: 0,0:46:44.86,0:46:47.80,Default,,0,0,0,,Into a aligned variable which
Dialogue: 0,0:46:47.80,0:46:48.89,Default,,0,0,0,,can either be in the stack or
Dialogue: 0,0:46:48.89,0:46:49.24,Default,,0,0,0,,the heap.
Dialogue: 0,0:46:50.00,0:46:52.55,Default,,0,0,0,,This mem copy is safe and the
Dialogue: 0,0:46:52.55,0:46:54.32,Default,,0,0,0,,compiler in many instances can
Dialogue: 0,0:46:54.66,0:46:57.10,Default,,0,0,0,,optimize it so that it's just as
Dialogue: 0,0:46:57.10,0:46:58.97,Default,,0,0,0,,fast as the unaligned access,
Dialogue: 0,0:46:59.43,0:47:00.68,Default,,0,0,0,,the original unaligned access
Dialogue: 0,0:47:00.68,0:47:01.16,Default,,0,0,0,,would've been.
Dialogue: 0,0:47:01.75,0:47:05.12,Default,,0,0,0,,So, that's alignment violation
Dialogue: 0,0:47:05.12,0:47:06.37,Default,,0,0,0,,detection with Undefined
Dialogue: 0,0:47:06.37,0:47:07.30,Default,,0,0,0,,Behavior Sanitizer.
Dialogue: 0,0:47:07.83,0:47:11.32,Default,,0,0,0,,Let's move on and talk about the
Dialogue: 0,0:47:11.32,0:47:12.92,Default,,0,0,0,,third kind of bug.
Dialogue: 0,0:47:13.15,0:47:14.59,Default,,0,0,0,,The nonnull return value
Dialogue: 0,0:47:14.59,0:47:15.27,Default,,0,0,0,,violation.
Dialogue: 0,0:47:15.77,0:47:19.20,Default,,0,0,0,,This kind of issue occurs when
Dialogue: 0,0:47:19.20,0:47:20.44,Default,,0,0,0,,you've got a function whose
Dialogue: 0,0:47:20.44,0:47:22.24,Default,,0,0,0,,return value is annotated with
Dialogue: 0,0:47:22.24,0:47:23.50,Default,,0,0,0,,the nonnull attribute.
Dialogue: 0,0:47:24.53,0:47:25.69,Default,,0,0,0,,Annotation, excuse me.
Dialogue: 0,0:47:26.88,0:47:30.50,Default,,0,0,0,,However, the function breaks the
Dialogue: 0,0:47:30.50,0:47:32.90,Default,,0,0,0,,contract imposed by the nonnull
Dialogue: 0,0:47:32.90,0:47:34.69,Default,,0,0,0,,annotation and returns a nil
Dialogue: 0,0:47:34.69,0:47:35.90,Default,,0,0,0,,value anyway.
Dialogue: 0,0:47:36.66,0:47:38.71,Default,,0,0,0,,Now, this can cause crashes if
Dialogue: 0,0:47:38.71,0:47:40.50,Default,,0,0,0,,you're using Objective C APIs
Dialogue: 0,0:47:40.50,0:47:41.92,Default,,0,0,0,,which, you know, violate the
Dialogue: 0,0:47:41.92,0:47:44.36,Default,,0,0,0,,return value annotation from SWF
Dialogue: 0,0:47:44.36,0:47:44.75,Default,,0,0,0,,code.
Dialogue: 0,0:47:45.48,0:47:46.92,Default,,0,0,0,,And it can also cause other
Dialogue: 0,0:47:46.92,0:47:47.99,Default,,0,0,0,,problems if you're using
Dialogue: 0,0:47:47.99,0:47:50.24,Default,,0,0,0,,Objective C APIs which rely on
Dialogue: 0,0:47:50.24,0:47:51.32,Default,,0,0,0,,nullability connection
Dialogue: 0,0:47:51.58,0:47:55.24,Default,,0,0,0,,correctness more stringently.
Dialogue: 0,0:47:56.57,0:47:57.75,Default,,0,0,0,,That's why we recommend that you
Dialogue: 0,0:47:57.75,0:47:59.21,Default,,0,0,0,,opt into this check if your
Dialogue: 0,0:47:59.21,0:48:00.40,Default,,0,0,0,,application makes use of
Dialogue: 0,0:48:00.44,0:48:01.74,Default,,0,0,0,,nullability annotations.
Dialogue: 0,0:48:03.30,0:48:04.64,Default,,0,0,0,,Let's take a look at an example
Dialogue: 0,0:48:05.18,0:48:08.11,Default,,0,0,0,,of the return value, the nonnull
Dialogue: 0,0:48:08.11,0:48:09.16,Default,,0,0,0,,return value violation.
Dialogue: 0,0:48:10.48,0:48:13.29,Default,,0,0,0,,Okay, so in this example I'm a
Dialogue: 0,0:48:13.29,0:48:15.03,Default,,0,0,0,,budding astronomer and I've got
Dialogue: 0,0:48:15.03,0:48:16.35,Default,,0,0,0,,a model of the solar system.
Dialogue: 0,0:48:16.80,0:48:18.37,Default,,0,0,0,,The first thing that I'm
Dialogue: 0,0:48:18.37,0:48:20.55,Default,,0,0,0,,interested in modelling are the
Dialogue: 0,0:48:20.65,0:48:22.01,Default,,0,0,0,,moons in my solar system.
Dialogue: 0,0:48:22.01,0:48:23.08,Default,,0,0,0,,So, here we go.
Dialogue: 0,0:48:23.08,0:48:25.75,Default,,0,0,0,,We've got planet earth and the
Dialogue: 0,0:48:25.75,0:48:26.83,Default,,0,0,0,,biggest moon on earth is the
Dialogue: 0,0:48:26.83,0:48:28.20,Default,,0,0,0,,moon so let's stick that in.
Dialogue: 0,0:48:28.20,0:48:30.78,Default,,0,0,0,,We've got Mars and we're going
Dialogue: 0,0:48:30.78,0:48:32.77,Default,,0,0,0,,to sort these lists by diameter
Dialogue: 0,0:48:32.87,0:48:33.81,Default,,0,0,0,,in decreasing order.
Dialogue: 0,0:48:33.81,0:48:35.75,Default,,0,0,0,,So, Phobos is the largest moon
Dialogue: 0,0:48:35.75,0:48:36.41,Default,,0,0,0,,of Mars.
Dialogue: 0,0:48:36.41,0:48:37.73,Default,,0,0,0,,Amos is the second largest.
Dialogue: 0,0:48:37.73,0:48:40.12,Default,,0,0,0,,Great, but, uh oh.
Dialogue: 0,0:48:41.34,0:48:42.86,Default,,0,0,0,,It looks like we've got an entry
Dialogue: 0,0:48:42.86,0:48:44.25,Default,,0,0,0,,that snuck in here which
Dialogue: 0,0:48:44.25,0:48:45.41,Default,,0,0,0,,shouldn't be around anymore.
Dialogue: 0,0:48:47.03,0:48:49.25,Default,,0,0,0,,So, this is embarrassing.
Dialogue: 0,0:48:49.65,0:48:50.96,Default,,0,0,0,,Better get rid of it.
Dialogue: 0,0:48:50.96,0:48:52.28,Default,,0,0,0,,All right, that's a lot better.
Dialogue: 0,0:48:52.78,0:48:55.18,Default,,0,0,0,,Okay. So, I got rid of some
Dialogue: 0,0:48:55.18,0:48:56.48,Default,,0,0,0,,legacy code from my example.
Dialogue: 0,0:48:56.60,0:48:59.15,Default,,0,0,0,,Now my list is looking better.
Dialogue: 0,0:49:00.56,0:49:01.11,Default,,0,0,0,,Let's move on.
Dialogue: 0,0:49:01.11,0:49:01.65,Default,,0,0,0,,Let's move on.
Dialogue: 0,0:49:02.01,0:49:05.16,Default,,0,0,0,,Okay, so what I'm really
Dialogue: 0,0:49:05.16,0:49:07.30,Default,,0,0,0,,interested in figuring out are,
Dialogue: 0,0:49:07.45,0:49:09.57,Default,,0,0,0,,is, I want a list of the biggest
Dialogue: 0,0:49:09.57,0:49:10.78,Default,,0,0,0,,moons for all of the planets in
Dialogue: 0,0:49:10.78,0:49:11.52,Default,,0,0,0,,the solar system.
Dialogue: 0,0:49:11.73,0:49:14.32,Default,,0,0,0,,So, I'm going to do that by
Dialogue: 0,0:49:14.84,0:49:16.77,Default,,0,0,0,,constructing an NS mutable array
Dialogue: 0,0:49:17.68,0:49:19.78,Default,,0,0,0,,and then adding the biggest
Dialogue: 0,0:49:19.78,0:49:21.06,Default,,0,0,0,,moons for each planet that I've
Dialogue: 0,0:49:21.10,0:49:21.48,Default,,0,0,0,,looked up.
Dialogue: 0,0:49:22.30,0:49:23.75,Default,,0,0,0,,Now, the problem here is that
Dialogue: 0,0:49:23.75,0:49:25.13,Default,,0,0,0,,I've looked up the biggest moons
Dialogue: 0,0:49:25.13,0:49:27.60,Default,,0,0,0,,for Pluto and that's not an
Dialogue: 0,0:49:27.60,0:49:29.33,Default,,0,0,0,,entry in the NS dictionary I set
Dialogue: 0,0:49:29.33,0:49:29.47,Default,,0,0,0,,up.
Dialogue: 0,0:49:29.57,0:49:30.51,Default,,0,0,0,,So, I get back nil.
Dialogue: 0,0:49:31.37,0:49:33.89,Default,,0,0,0,,Undefined Behavior Sanitizer can
Dialogue: 0,0:49:33.89,0:49:35.05,Default,,0,0,0,,diagnose this issue for you.
Dialogue: 0,0:49:35.58,0:49:40.10,Default,,0,0,0,,Okay, so that's a look at what
Dialogue: 0,0:49:40.24,0:49:41.55,Default,,0,0,0,,kinds of issues Undefined
Dialogue: 0,0:49:41.55,0:49:43.11,Default,,0,0,0,,Behavior Sanitizer can find for
Dialogue: 0,0:49:43.11,0:49:44.82,Default,,0,0,0,,you and how the tool works.
Dialogue: 0,0:49:45.58,0:49:46.97,Default,,0,0,0,,I want to wrap up the section of
Dialogue: 0,0:49:46.97,0:49:48.68,Default,,0,0,0,,the talk by showing you how you
Dialogue: 0,0:49:48.68,0:49:50.44,Default,,0,0,0,,can enable the opt-in check set
Dialogue: 0,0:49:50.44,0:49:50.95,Default,,0,0,0,,I mentioned.
Dialogue: 0,0:49:51.95,0:49:52.86,Default,,0,0,0,,This is the project build
Dialogue: 0,0:49:52.86,0:49:53.57,Default,,0,0,0,,settings editor.
Dialogue: 0,0:49:54.22,0:49:55.69,Default,,0,0,0,,Here's where you can go to turn
Dialogue: 0,0:49:55.69,0:49:57.30,Default,,0,0,0,,on unsigned integer overflow
Dialogue: 0,0:49:57.30,0:49:59.63,Default,,0,0,0,,detection and also your
Dialogue: 0,0:49:59.63,0:50:01.09,Default,,0,0,0,,nullability annotation checks.
Dialogue: 0,0:50:01.71,0:50:03.85,Default,,0,0,0,,So, that's Undefined Behavior
Dialogue: 0,0:50:03.85,0:50:07.58,Default,,0,0,0,,Sanitizer, new in Xcode 9.
Dialogue: 0,0:50:08.52,0:50:13.50,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:50:16.65,0:50:18.02,Default,,0,0,0,,We've taken a look at a lot of
Dialogue: 0,0:50:18.10,0:50:19.16,Default,,0,0,0,,different Runtime tools in
Dialogue: 0,0:50:19.21,0:50:21.18,Default,,0,0,0,,Xcode, some new, some improved.
Dialogue: 0,0:50:21.34,0:50:22.57,Default,,0,0,0,,But it's worth taking a step
Dialogue: 0,0:50:22.57,0:50:24.69,Default,,0,0,0,,back and thinking about software
Dialogue: 0,0:50:24.69,0:50:25.66,Default,,0,0,0,,quality itself.
Dialogue: 0,0:50:25.89,0:50:27.26,Default,,0,0,0,,How do you use these Runtime
Dialogue: 0,0:50:27.26,0:50:28.47,Default,,0,0,0,,tools effectively?
Dialogue: 0,0:50:28.98,0:50:32.49,Default,,0,0,0,,There's two main parts to it.
Dialogue: 0,0:50:33.52,0:50:35.54,Default,,0,0,0,,You've got to exercise more code
Dialogue: 0,0:50:35.54,0:50:36.71,Default,,0,0,0,,with these tools turned on and
Dialogue: 0,0:50:37.44,0:50:38.57,Default,,0,0,0,,you've got to use these tools
Dialogue: 0,0:50:38.57,0:50:38.95,Default,,0,0,0,,together.
Dialogue: 0,0:50:40.15,0:50:44.17,Default,,0,0,0,,Let's take a look.
Dialogue: 0,0:50:44.43,0:50:46.94,Default,,0,0,0,,Runtime tools can only catch
Dialogue: 0,0:50:47.20,0:50:49.17,Default,,0,0,0,,bugs for you when you run the
Dialogue: 0,0:50:49.17,0:50:50.77,Default,,0,0,0,,code that contains the bugs.
Dialogue: 0,0:50:51.30,0:50:52.15,Default,,0,0,0,,Maybe the [inaudible] is not the
Dialogue: 0,0:50:52.15,0:50:55.67,Default,,0,0,0,,best way but you've got to
Dialogue: 0,0:50:55.67,0:50:57.93,Default,,0,0,0,,actually run the line of code
Dialogue: 0,0:50:57.93,0:50:59.57,Default,,0,0,0,,that contains the issue for, in
Dialogue: 0,0:50:59.57,0:51:00.76,Default,,0,0,0,,order to get any sort of useful
Dialogue: 0,0:51:00.76,0:51:01.98,Default,,0,0,0,,diagnostic about the bug.
Dialogue: 0,0:51:01.98,0:51:02.64,Default,,0,0,0,,All right?
Dialogue: 0,0:51:03.05,0:51:05.40,Default,,0,0,0,,So, in order to exercise as much
Dialogue: 0,0:51:05.40,0:51:06.70,Default,,0,0,0,,code as possible and find as
Dialogue: 0,0:51:06.70,0:51:08.55,Default,,0,0,0,,many issues as possible, we
Dialogue: 0,0:51:09.22,0:51:10.77,Default,,0,0,0,,really recommend that you use
Dialogue: 0,0:51:10.77,0:51:11.88,Default,,0,0,0,,Runtime tools for daily
Dialogue: 0,0:51:11.88,0:51:12.51,Default,,0,0,0,,development.
Dialogue: 0,0:51:13.58,0:51:14.83,Default,,0,0,0,,We also recommend that you turn
Dialogue: 0,0:51:14.83,0:51:16.35,Default,,0,0,0,,these tools on at least once
Dialogue: 0,0:51:16.38,0:51:18.43,Default,,0,0,0,,before every software release so
Dialogue: 0,0:51:18.43,0:51:19.49,Default,,0,0,0,,that you can avoid spreading
Dialogue: 0,0:51:19.49,0:51:21.19,Default,,0,0,0,,bugs and possibly security
Dialogue: 0,0:51:21.19,0:51:25.26,Default,,0,0,0,,vulnerabilities to your users.
Dialogue: 0,0:51:25.40,0:51:27.40,Default,,0,0,0,,Using continuous integration can
Dialogue: 0,0:51:27.40,0:51:29.28,Default,,0,0,0,,make using Runtime tools much
Dialogue: 0,0:51:29.31,0:51:31.51,Default,,0,0,0,,easier and it can also really
Dialogue: 0,0:51:31.51,0:51:33.13,Default,,0,0,0,,simplify the process of
Dialogue: 0,0:51:33.13,0:51:34.33,Default,,0,0,0,,exercising as much code as
Dialogue: 0,0:51:34.33,0:51:35.54,Default,,0,0,0,,possible with these tools turned
Dialogue: 0,0:51:35.54,0:51:35.85,Default,,0,0,0,,on.
Dialogue: 0,0:51:37.01,0:51:38.53,Default,,0,0,0,,It can ensure that these bugs,
Dialogue: 0,0:51:38.88,0:51:39.99,Default,,0,0,0,,that bugs in your program are
Dialogue: 0,0:51:39.99,0:51:41.58,Default,,0,0,0,,caught as quickly as possible as
Dialogue: 0,0:51:41.58,0:51:42.65,Default,,0,0,0,,soon as you check in code.
Dialogue: 0,0:51:42.75,0:51:45.26,Default,,0,0,0,,And it can also help you track
Dialogue: 0,0:51:45.32,0:51:46.11,Default,,0,0,0,,code coverage in your
Dialogue: 0,0:51:46.11,0:51:47.41,Default,,0,0,0,,application so you can see
Dialogue: 0,0:51:47.41,0:51:48.88,Default,,0,0,0,,exactly how much code is being
Dialogue: 0,0:51:48.88,0:51:51.50,Default,,0,0,0,,exercised every time your CI
Dialogue: 0,0:51:51.61,0:51:52.14,Default,,0,0,0,,runs.
Dialogue: 0,0:51:53.12,0:51:54.30,Default,,0,0,0,,If you'd like to learn more
Dialogue: 0,0:51:54.39,0:51:55.84,Default,,0,0,0,,about how continuous integration
Dialogue: 0,0:51:55.84,0:51:57.51,Default,,0,0,0,,and code coverage work in Xcode,
Dialogue: 0,0:51:57.51,0:51:59.11,Default,,0,0,0,,I recommend that you check out
Dialogue: 0,0:51:59.11,0:52:03.69,Default,,0,0,0,,the WWDC 2015 talk about that.
Dialogue: 0,0:52:05.52,0:52:07.27,Default,,0,0,0,,The second component to using
Dialogue: 0,0:52:07.27,0:52:08.76,Default,,0,0,0,,Runtime tools effectively is to
Dialogue: 0,0:52:08.93,0:52:09.78,Default,,0,0,0,,use them together.
Dialogue: 0,0:52:10.51,0:52:11.63,Default,,0,0,0,,The more of these tools you turn
Dialogue: 0,0:52:11.63,0:52:13.54,Default,,0,0,0,,on, the more issues you can
Dialogue: 0,0:52:14.57,0:52:14.75,Default,,0,0,0,,find.
Dialogue: 0,0:52:14.93,0:52:15.77,Default,,0,0,0,,There's one exception.
Dialogue: 0,0:52:15.77,0:52:17.64,Default,,0,0,0,,So, Address Sanitizer and Thread
Dialogue: 0,0:52:17.64,0:52:19.06,Default,,0,0,0,,Sanitizer are not mutually
Dialogue: 0,0:52:19.06,0:52:19.70,Default,,0,0,0,,compatible.
Dialogue: 0,0:52:19.81,0:52:21.00,Default,,0,0,0,,You won't be able to turn these
Dialogue: 0,0:52:21.00,0:52:22.70,Default,,0,0,0,,two on together but the rest of
Dialogue: 0,0:52:22.70,0:52:23.31,Default,,0,0,0,,the tools you can.
Dialogue: 0,0:52:24.48,0:52:26.49,Default,,0,0,0,,And as we've seen already, all
Dialogue: 0,0:52:26.49,0:52:27.92,Default,,0,0,0,,of these tools can be turned on
Dialogue: 0,0:52:27.97,0:52:30.17,Default,,0,0,0,,by going into the scheme editor
Dialogue: 0,0:52:30.17,0:52:31.69,Default,,0,0,0,,in Xcode and clicking at the
Dialogue: 0,0:52:31.69,0:52:32.40,Default,,0,0,0,,diagnostics tab.
Dialogue: 0,0:52:33.88,0:52:35.54,Default,,0,0,0,,Now, you may be wondering, This
Dialogue: 0,0:52:35.54,0:52:36.74,Default,,0,0,0,,sounds like a lot of overhead,
Dialogue: 0,0:52:36.74,0:52:36.99,Default,,0,0,0,,right?
Dialogue: 0,0:52:37.63,0:52:40.26,Default,,0,0,0,,I'm here to tell you that that's
Dialogue: 0,0:52:40.49,0:52:42.19,Default,,0,0,0,,not really true, in my
Dialogue: 0,0:52:42.19,0:52:43.00,Default,,0,0,0,,experience at least.
Dialogue: 0,0:52:43.00,0:52:45.45,Default,,0,0,0,,So, we've got some numbers for
Dialogue: 0,0:52:45.45,0:52:46.50,Default,,0,0,0,,you about the execution and
Dialogue: 0,0:52:46.50,0:52:47.94,Default,,0,0,0,,memory overheads of these tools.
Dialogue: 0,0:52:48.82,0:52:49.93,Default,,0,0,0,,And what I've found that, at
Dialogue: 0,0:52:49.93,0:52:52.34,Default,,0,0,0,,least in my own experience, I'm
Dialogue: 0,0:52:52.34,0:52:53.73,Default,,0,0,0,,able to turn multiple Runtime
Dialogue: 0,0:52:53.73,0:52:55.48,Default,,0,0,0,,tools on simultaneously while
Dialogue: 0,0:52:55.48,0:52:57.20,Default,,0,0,0,,debugging the entire Xcode app
Dialogue: 0,0:52:57.20,0:52:58.79,Default,,0,0,0,,and the UI still feels
Dialogue: 0,0:52:58.79,0:52:59.96,Default,,0,0,0,,responsive.
Dialogue: 0,0:53:00.23,0:53:01.79,Default,,0,0,0,,Hopefully this information can
Dialogue: 0,0:53:01.79,0:53:03.19,Default,,0,0,0,,help you make the best decisions
Dialogue: 0,0:53:03.19,0:53:04.83,Default,,0,0,0,,about which tools to turn on in
Dialogue: 0,0:53:04.83,0:53:06.15,Default,,0,0,0,,your local setups versus in
Dialogue: 0,0:53:06.15,0:53:07.19,Default,,0,0,0,,continuous integration.
Dialogue: 0,0:53:07.98,0:53:09.87,Default,,0,0,0,,But I hope that the takeaway
Dialogue: 0,0:53:09.87,0:53:11.73,Default,,0,0,0,,here for you is that all of
Dialogue: 0,0:53:11.73,0:53:13.11,Default,,0,0,0,,these tools re incredibly
Dialogue: 0,0:53:13.11,0:53:13.69,Default,,0,0,0,,valuable.
Dialogue: 0,0:53:13.95,0:53:15.58,Default,,0,0,0,,They all catch different sets of
Dialogue: 0,0:53:15.58,0:53:17.60,Default,,0,0,0,,bugs for you and they're all
Dialogue: 0,0:53:17.60,0:53:19.23,Default,,0,0,0,,really worth turning on in some
Dialogue: 0,0:53:19.23,0:53:23.00,Default,,0,0,0,,form or the other.
Dialogue: 0,0:53:23.23,0:53:24.36,Default,,0,0,0,,So, to wrap it up.
Dialogue: 0,0:53:24.61,0:53:26.11,Default,,0,0,0,,Xcode 9 is going to help you
Dialogue: 0,0:53:26.11,0:53:27.97,Default,,0,0,0,,catch more critical bugs in your
Dialogue: 0,0:53:27.97,0:53:29.10,Default,,0,0,0,,apps and programs than ever
Dialogue: 0,0:53:29.10,0:53:31.23,Default,,0,0,0,,before with new and improved
Dialogue: 0,0:53:31.23,0:53:31.80,Default,,0,0,0,,Runtime Tools.
Dialogue: 0,0:53:32.74,0:53:34.43,Default,,0,0,0,,I really hope that you use them
Dialogue: 0,0:53:34.43,0:53:36.38,Default,,0,0,0,,early and often to save time
Dialogue: 0,0:53:36.38,0:53:38.01,Default,,0,0,0,,while debugging and to keep your
Dialogue: 0,0:53:38.01,0:53:38.69,Default,,0,0,0,,users safe.
Dialogue: 0,0:53:38.85,0:53:40.48,Default,,0,0,0,,And with that, I hope that you
Dialogue: 0,0:53:40.48,0:53:41.65,Default,,0,0,0,,go out and squash some bugs.
Dialogue: 0,0:53:41.76,0:53:43.02,Default,,0,0,0,,If you want to find some more
Dialogue: 0,0:53:43.02,0:53:44.16,Default,,0,0,0,,information about this talk,
Dialogue: 0,0:53:44.64,0:53:46.11,Default,,0,0,0,,we've got a website set up for
Dialogue: 0,0:53:46.11,0:53:47.56,Default,,0,0,0,,you with a lot of helpful links.
Dialogue: 0,0:53:48.35,0:53:49.37,Default,,0,0,0,,There are also some related
Dialogue: 0,0:53:49.37,0:53:50.23,Default,,0,0,0,,sessions coming up.
Dialogue: 0,0:53:50.58,0:53:51.80,Default,,0,0,0,,So, what's new in SWF.
Dialogue: 0,0:53:52.14,0:53:53.50,Default,,0,0,0,,Debugging with Xcode 9.
Dialogue: 0,0:53:54.07,0:53:57.22,Default,,0,0,0,,There's a talk about DCD.
Dialogue: 0,0:53:57.57,0:53:59.72,Default,,0,0,0,,And there's also a talk about
Dialogue: 0,0:53:59.72,0:54:01.23,Default,,0,0,0,,what's new in LDM for those of
Dialogue: 0,0:54:01.29,0:54:02.23,Default,,0,0,0,,you who are interested in the
Dialogue: 0,0:54:02.23,0:54:04.00,Default,,0,0,0,,underlying sanitizer technology
Dialogue: 0,0:54:04.42,0:54:06.85,Default,,0,0,0,,that powers Runtime tools.
Dialogue: 0,0:54:07.99,0:54:10.18,Default,,0,0,0,,So, with that, thank you for
Dialogue: 0,0:54:10.18,0:54:10.54,Default,,0,0,0,,coming.
Dialogue: 0,0:54:10.93,0:54:12.03,Default,,0,0,0,,I hope you have a great
Dialogue: 0,0:54:12.03,0:54:12.98,Default,,0,0,0,,conference.
Dialogue: 0,0:54:13.52,0:54:17.51,Default,,0,0,0,,[ Applause ]
