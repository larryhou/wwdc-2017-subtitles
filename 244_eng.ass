[Script Info]
; Script generated by FFmpeg/Lavc57.89.100
ScriptType: v4.00+
PlayResX: 384
PlayResY: 288

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,16,&Hffffff,&Hffffff,&H0,&H0,0,0,0,0,100,100,0,0,1,1,0,2,10,10,10,0

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:24.59,0:00:25.25,Default,,0,0,0,,>> Good afternoon.
Dialogue: 0,0:00:25.36,0:00:26.61,Default,,0,0,0,,My name is Phillipe Hausler, and
Dialogue: 0,0:00:26.61,0:00:27.73,Default,,0,0,0,,I'm here today, with my
Dialogue: 0,0:00:27.73,0:00:28.69,Default,,0,0,0,,colleague, Donna Tom.
Dialogue: 0,0:00:28.73,0:00:29.82,Default,,0,0,0,,And we're going to talk about
Dialogue: 0,0:00:29.82,0:00:31.00,Default,,0,0,0,,Efficient Interaction with
Dialogue: 0,0:00:31.07,0:00:31.69,Default,,0,0,0,,Frameworks.
Dialogue: 0,0:00:32.57,0:00:34.57,Default,,0,0,0,,Now, we all care very deeply
Dialogue: 0,0:00:34.57,0:00:35.78,Default,,0,0,0,,about performance.
Dialogue: 0,0:00:35.90,0:00:37.60,Default,,0,0,0,,We want our laptops to be fast.
Dialogue: 0,0:00:37.60,0:00:39.38,Default,,0,0,0,,We want our phones and tablets
Dialogue: 0,0:00:39.38,0:00:41.13,Default,,0,0,0,,to have all day battery life.
Dialogue: 0,0:00:41.18,0:00:42.82,Default,,0,0,0,,And we want to do amazing things
Dialogue: 0,0:00:42.82,0:00:43.78,Default,,0,0,0,,with our desktops.
Dialogue: 0,0:00:43.97,0:00:45.48,Default,,0,0,0,,As a matter of fact, all of
Dialogue: 0,0:00:45.48,0:00:46.89,Default,,0,0,0,,these devices should have great
Dialogue: 0,0:00:46.93,0:00:47.64,Default,,0,0,0,,performance.
Dialogue: 0,0:00:48.07,0:00:49.83,Default,,0,0,0,,And it's our jobs to be able to
Dialogue: 0,0:00:49.83,0:00:50.66,Default,,0,0,0,,make that happen.
Dialogue: 0,0:00:52.24,0:00:53.38,Default,,0,0,0,,Now, performance has many
Dialogue: 0,0:00:53.38,0:00:54.07,Default,,0,0,0,,dimensions.
Dialogue: 0,0:00:54.26,0:00:56.40,Default,,0,0,0,,How fast code can run, how much
Dialogue: 0,0:00:56.40,0:00:57.45,Default,,0,0,0,,power it takes.
Dialogue: 0,0:00:57.67,0:00:59.17,Default,,0,0,0,,Or what the memory footprint of
Dialogue: 0,0:00:59.17,0:00:59.78,Default,,0,0,0,,that is.
Dialogue: 0,0:01:00.11,0:01:01.16,Default,,0,0,0,,Since, there are multiple
Dialogue: 0,0:01:01.16,0:01:02.89,Default,,0,0,0,,dimensions, how can we visualize
Dialogue: 0,0:01:02.95,0:01:03.77,Default,,0,0,0,,this a little bit better?
Dialogue: 0,0:01:04.69,0:01:06.30,Default,,0,0,0,,To give you a framework, no pun
Dialogue: 0,0:01:06.30,0:01:08.36,Default,,0,0,0,,intended, for visualizing this.
Dialogue: 0,0:01:08.36,0:01:09.79,Default,,0,0,0,,You can think of it as a graph
Dialogue: 0,0:01:09.92,0:01:11.28,Default,,0,0,0,,with the size of the data that
Dialogue: 0,0:01:11.28,0:01:12.77,Default,,0,0,0,,you're working with on one axis
Dialogue: 0,0:01:13.14,0:01:14.72,Default,,0,0,0,,and the frequency on another.
Dialogue: 0,0:01:15.46,0:01:17.20,Default,,0,0,0,,If you're looking at a lot of
Dialogue: 0,0:01:17.20,0:01:18.90,Default,,0,0,0,,data and code that runs very
Dialogue: 0,0:01:18.90,0:01:20.52,Default,,0,0,0,,frequently, you're going to be
Dialogue: 0,0:01:20.52,0:01:22.36,Default,,0,0,0,,up there in that first quadrant.
Dialogue: 0,0:01:22.65,0:01:24.15,Default,,0,0,0,,And these are going to be things
Dialogue: 0,0:01:24.15,0:01:25.13,Default,,0,0,0,,that are going to be likely to
Dialogue: 0,0:01:25.13,0:01:26.65,Default,,0,0,0,,be able to make a notable impact
Dialogue: 0,0:01:26.65,0:01:27.49,Default,,0,0,0,,upon performance.
Dialogue: 0,0:01:27.89,0:01:29.01,Default,,0,0,0,,And you're going to want to
Dialogue: 0,0:01:29.01,0:01:30.94,Default,,0,0,0,,spend time optimizing these
Dialogue: 0,0:01:30.94,0:01:31.58,Default,,0,0,0,,cases.
Dialogue: 0,0:01:32.49,0:01:33.72,Default,,0,0,0,,But if you're looking at
Dialogue: 0,0:01:33.83,0:01:35.17,Default,,0,0,0,,something that works with just a
Dialogue: 0,0:01:35.17,0:01:36.75,Default,,0,0,0,,little bit of data and runs just
Dialogue: 0,0:01:36.75,0:01:37.54,Default,,0,0,0,,a few times.
Dialogue: 0,0:01:37.54,0:01:38.44,Default,,0,0,0,,You're going to be down there in
Dialogue: 0,0:01:38.44,0:01:39.47,Default,,0,0,0,,that third quadrant.
Dialogue: 0,0:01:39.77,0:01:41.63,Default,,0,0,0,,And to be honest, you really
Dialogue: 0,0:01:41.63,0:01:42.66,Default,,0,0,0,,don't want to spend a whole lot
Dialogue: 0,0:01:42.66,0:01:44.15,Default,,0,0,0,,of time worrying about them, too
Dialogue: 0,0:01:44.15,0:01:44.62,Default,,0,0,0,,much.
Dialogue: 0,0:01:45.55,0:01:47.64,Default,,0,0,0,,It's that second and fourth
Dialogue: 0,0:01:47.64,0:01:48.78,Default,,0,0,0,,quadrant that are a bit
Dialogue: 0,0:01:48.78,0:01:49.32,Default,,0,0,0,,trickier.
Dialogue: 0,0:01:49.73,0:01:51.35,Default,,0,0,0,,These are gray areas that are
Dialogue: 0,0:01:51.35,0:01:52.48,Default,,0,0,0,,highly dependent upon the
Dialogue: 0,0:01:52.48,0:01:53.34,Default,,0,0,0,,situation.
Dialogue: 0,0:01:53.43,0:01:54.77,Default,,0,0,0,,And in these cases, you'll most
Dialogue: 0,0:01:54.77,0:01:55.90,Default,,0,0,0,,certainly want to be able to
Dialogue: 0,0:01:55.90,0:01:57.06,Default,,0,0,0,,measure the performance in a
Dialogue: 0,0:01:57.06,0:01:59.22,Default,,0,0,0,,scenario that reflects actual
Dialogue: 0,0:01:59.22,0:01:59.88,Default,,0,0,0,,usage.
Dialogue: 0,0:02:00.27,0:02:01.81,Default,,0,0,0,,And then, use that information
Dialogue: 0,0:02:01.81,0:02:03.16,Default,,0,0,0,,to be able to evaluate whether
Dialogue: 0,0:02:03.16,0:02:04.45,Default,,0,0,0,,it's worth your time to be able
Dialogue: 0,0:02:04.45,0:02:05.47,Default,,0,0,0,,to make changes.
Dialogue: 0,0:02:06.04,0:02:09.10,Default,,0,0,0,,In this release, we took a deep
Dialogue: 0,0:02:09.16,0:02:10.86,Default,,0,0,0,,look to be able to understand
Dialogue: 0,0:02:10.86,0:02:11.81,Default,,0,0,0,,how we could make performance
Dialogue: 0,0:02:11.81,0:02:12.95,Default,,0,0,0,,better across the operating
Dialogue: 0,0:02:12.95,0:02:13.41,Default,,0,0,0,,system.
Dialogue: 0,0:02:13.69,0:02:15.12,Default,,0,0,0,,But for your apps, as well.
Dialogue: 0,0:02:15.89,0:02:17.47,Default,,0,0,0,,We will go over a few really
Dialogue: 0,0:02:17.47,0:02:18.72,Default,,0,0,0,,awesome changes that we made in
Dialogue: 0,0:02:18.72,0:02:19.36,Default,,0,0,0,,Foundation.
Dialogue: 0,0:02:20.28,0:02:21.53,Default,,0,0,0,,And of course, Swift has been a
Dialogue: 0,0:02:21.67,0:02:23.72,Default,,0,0,0,,big part of this release, as we
Dialogue: 0,0:02:23.72,0:02:25.38,Default,,0,0,0,,took a long hard look at how
Dialogue: 0,0:02:25.38,0:02:26.87,Default,,0,0,0,,bridging works for some of the
Dialogue: 0,0:02:26.87,0:02:27.79,Default,,0,0,0,,Foundation types.
Dialogue: 0,0:02:28.03,0:02:30.30,Default,,0,0,0,,To be able to make them faster
Dialogue: 0,0:02:30.30,0:02:31.35,Default,,0,0,0,,and work better in your
Dialogue: 0,0:02:31.35,0:02:32.23,Default,,0,0,0,,applications.
Dialogue: 0,0:02:33.68,0:02:35.15,Default,,0,0,0,,Now, strings are, of course, are
Dialogue: 0,0:02:35.15,0:02:36.99,Default,,0,0,0,,a huge part of many apps.
Dialogue: 0,0:02:37.09,0:02:38.90,Default,,0,0,0,,They're used as tokens, human
Dialogue: 0,0:02:38.90,0:02:40.47,Default,,0,0,0,,readable data formats, and
Dialogue: 0,0:02:40.47,0:02:41.64,Default,,0,0,0,,displaying to the screen.
Dialogue: 0,0:02:42.07,0:02:44.06,Default,,0,0,0,,And efficient string handling
Dialogue: 0,0:02:44.30,0:02:45.86,Default,,0,0,0,,makes a big impact on many
Dialogue: 0,0:02:45.86,0:02:46.60,Default,,0,0,0,,applications.
Dialogue: 0,0:02:46.69,0:02:48.49,Default,,0,0,0,,And often is a huge part of the
Dialogue: 0,0:02:48.49,0:02:50.33,Default,,0,0,0,,critical content being displayed
Dialogue: 0,0:02:50.33,0:02:51.04,Default,,0,0,0,,to users.
Dialogue: 0,0:02:52.14,0:02:53.09,Default,,0,0,0,,But of course, the reason why
Dialogue: 0,0:02:53.18,0:02:54.99,Default,,0,0,0,,you are here, is you want to
Dialogue: 0,0:02:54.99,0:02:56.59,Default,,0,0,0,,make your app run faster.
Dialogue: 0,0:02:56.75,0:02:58.13,Default,,0,0,0,,You want to use less energy.
Dialogue: 0,0:02:58.44,0:02:59.74,Default,,0,0,0,,You want to get more things done
Dialogue: 0,0:02:59.77,0:03:00.49,Default,,0,0,0,,with less RAM.
Dialogue: 0,0:03:00.53,0:03:02.46,Default,,0,0,0,,And don't worry, we'll get to
Dialogue: 0,0:03:02.46,0:03:04.00,Default,,0,0,0,,that on each of the sections
Dialogue: 0,0:03:04.00,0:03:05.40,Default,,0,0,0,,that we're going to be talking,
Dialogue: 0,0:03:05.40,0:03:06.02,Default,,0,0,0,,today, about.
Dialogue: 0,0:03:06.36,0:03:07.49,Default,,0,0,0,,To give you things to keep in
Dialogue: 0,0:03:07.49,0:03:08.76,Default,,0,0,0,,mind when optimizing for
Dialogue: 0,0:03:09.00,0:03:10.37,Default,,0,0,0,,performance.
Dialogue: 0,0:03:11.60,0:03:13.83,Default,,0,0,0,,Now, as I said, we made a number
Dialogue: 0,0:03:13.83,0:03:14.82,Default,,0,0,0,,of performance improvements
Dialogue: 0,0:03:14.82,0:03:16.22,Default,,0,0,0,,across the operating system.
Dialogue: 0,0:03:16.56,0:03:18.13,Default,,0,0,0,,And in Foundation, we made some
Dialogue: 0,0:03:18.13,0:03:19.28,Default,,0,0,0,,pretty nice changes.
Dialogue: 0,0:03:19.42,0:03:20.74,Default,,0,0,0,,These are just a few of the
Dialogue: 0,0:03:20.74,0:03:21.55,Default,,0,0,0,,highlights.
Dialogue: 0,0:03:22.37,0:03:24.19,Default,,0,0,0,,We overhauled NSCalendar for
Dialogue: 0,0:03:24.19,0:03:25.92,Default,,0,0,0,,date enumeration, not only to
Dialogue: 0,0:03:25.92,0:03:28.12,Default,,0,0,0,,use less memory, but also, it's
Dialogue: 0,0:03:28.12,0:03:29.24,Default,,0,0,0,,much faster, too.
Dialogue: 0,0:03:29.81,0:03:31.13,Default,,0,0,0,,And trust me when I say,
Dialogue: 0,0:03:31.13,0:03:33.21,Default,,0,0,0,,calendrical calculations are
Dialogue: 0,0:03:33.41,0:03:34.69,Default,,0,0,0,,really tricky to get right.
Dialogue: 0,0:03:35.19,0:03:37.70,Default,,0,0,0,,And then, this update, the
Dialogue: 0,0:03:37.70,0:03:39.72,Default,,0,0,0,,NSCalendar implementation is not
Dialogue: 0,0:03:39.72,0:03:41.65,Default,,0,0,0,,only faster, but also, corrects
Dialogue: 0,0:03:41.65,0:03:43.17,Default,,0,0,0,,some outstanding Edge cases that
Dialogue: 0,0:03:43.17,0:03:44.20,Default,,0,0,0,,have been lurking around for a
Dialogue: 0,0:03:44.20,0:03:44.78,Default,,0,0,0,,while, now.
Dialogue: 0,0:03:46.11,0:03:48.31,Default,,0,0,0,,But when making changes, you
Dialogue: 0,0:03:48.31,0:03:49.71,Default,,0,0,0,,have to consider the scale at
Dialogue: 0,0:03:49.71,0:03:50.86,Default,,0,0,0,,which that change will impact.
Dialogue: 0,0:03:51.46,0:03:52.77,Default,,0,0,0,,And in Foundation and Core
Dialogue: 0,0:03:52.77,0:03:54.53,Default,,0,0,0,,Foundation, we took a number of
Dialogue: 0,0:03:54.53,0:03:56.31,Default,,0,0,0,,places where the small things
Dialogue: 0,0:03:56.31,0:03:57.02,Default,,0,0,0,,that would add up.
Dialogue: 0,0:03:57.47,0:03:59.04,Default,,0,0,0,,And we looked at a deep dive of
Dialogue: 0,0:03:59.04,0:04:00.50,Default,,0,0,0,,how thread-safe operations in
Dialogue: 0,0:04:00.50,0:04:01.47,Default,,0,0,0,,Foundation work.
Dialogue: 0,0:04:01.68,0:04:03.19,Default,,0,0,0,,And decided to migrate to using
Dialogue: 0,0:04:03.19,0:04:04.91,Default,,0,0,0,,Atomics and OS and Fairlock,
Dialogue: 0,0:04:05.23,0:04:06.64,Default,,0,0,0,,which in the end, ends up
Dialogue: 0,0:04:06.64,0:04:07.73,Default,,0,0,0,,playing a lot better with
Dialogue: 0,0:04:07.73,0:04:08.87,Default,,0,0,0,,quality of service.
Dialogue: 0,0:04:10.06,0:04:11.97,Default,,0,0,0,,Now, speaking of quality of
Dialogue: 0,0:04:11.97,0:04:13.84,Default,,0,0,0,,service, NSOperation and
Dialogue: 0,0:04:13.84,0:04:15.58,Default,,0,0,0,,OperationQueue have been also
Dialogue: 0,0:04:15.58,0:04:17.72,Default,,0,0,0,,overhauled to have more correct
Dialogue: 0,0:04:17.72,0:04:18.80,Default,,0,0,0,,implementation, whenever it
Dialogue: 0,0:04:18.80,0:04:19.80,Default,,0,0,0,,comes to their quality of
Dialogue: 0,0:04:19.80,0:04:20.39,Default,,0,0,0,,service.
Dialogue: 0,0:04:20.89,0:04:22.02,Default,,0,0,0,,You'll see some pretty neat
Dialogue: 0,0:04:22.02,0:04:23.33,Default,,0,0,0,,performance improvements, as
Dialogue: 0,0:04:23.33,0:04:23.69,Default,,0,0,0,,well.
Dialogue: 0,0:04:24.05,0:04:26.02,Default,,0,0,0,,And in heavy cases, we've seen
Dialogue: 0,0:04:26.02,0:04:28.33,Default,,0,0,0,,up to 25% improvement on
Dialogue: 0,0:04:28.33,0:04:30.12,Default,,0,0,0,,queueing operations, just to
Dialogue: 0,0:04:30.12,0:04:31.35,Default,,0,0,0,,point out one highlight.
Dialogue: 0,0:04:31.90,0:04:34.84,Default,,0,0,0,,And after working for a while,
Dialogue: 0,0:04:34.84,0:04:37.49,Default,,0,0,0,,now, in Swift, we realized that
Dialogue: 0,0:04:37.49,0:04:39.18,Default,,0,0,0,,copy on write is pretty
Dialogue: 0,0:04:39.18,0:04:40.07,Default,,0,0,0,,fantastic.
Dialogue: 0,0:04:40.55,0:04:42.75,Default,,0,0,0,,And in Foundation, a number of
Dialogue: 0,0:04:42.75,0:04:44.79,Default,,0,0,0,,the collection types will now
Dialogue: 0,0:04:44.79,0:04:46.20,Default,,0,0,0,,use copy on write as their
Dialogue: 0,0:04:46.20,0:04:47.25,Default,,0,0,0,,backing storage.
Dialogue: 0,0:04:48.61,0:04:50.49,Default,,0,0,0,,So, what's this whole copy on
Dialogue: 0,0:04:50.49,0:04:51.07,Default,,0,0,0,,write thing?
Dialogue: 0,0:04:51.67,0:04:54.03,Default,,0,0,0,,Copy on write is a mechanism, or
Dialogue: 0,0:04:54.32,0:04:57.43,Default,,0,0,0,,COW for short, where two items
Dialogue: 0,0:04:57.43,0:04:58.73,Default,,0,0,0,,can point to a shared backing
Dialogue: 0,0:04:58.73,0:05:01.02,Default,,0,0,0,,store until a mutation occurs.
Dialogue: 0,0:05:01.66,0:05:03.44,Default,,0,0,0,,And when that mutation happens,
Dialogue: 0,0:05:03.62,0:05:05.65,Default,,0,0,0,,the mutating party copies that
Dialogue: 0,0:05:05.65,0:05:06.95,Default,,0,0,0,,backing storage to be able to
Dialogue: 0,0:05:06.95,0:05:08.41,Default,,0,0,0,,allow for the write to happen.
Dialogue: 0,0:05:08.95,0:05:11.32,Default,,0,0,0,,So, in short, copying isn't
Dialogue: 0,0:05:11.32,0:05:12.44,Default,,0,0,0,,costly, anymore.
Dialogue: 0,0:05:12.93,0:05:14.13,Default,,0,0,0,,This means that whenever you
Dialogue: 0,0:05:14.13,0:05:15.73,Default,,0,0,0,,defensively copy a mutable
Dialogue: 0,0:05:15.73,0:05:17.98,Default,,0,0,0,,container, it's almost free.
Dialogue: 0,0:05:19.06,0:05:20.94,Default,,0,0,0,,And before, copies of
Dialogue: 0,0:05:20.94,0:05:23.07,Default,,0,0,0,,collections were at best, linear
Dialogue: 0,0:05:23.07,0:05:24.10,Default,,0,0,0,,execution time.
Dialogue: 0,0:05:24.56,0:05:26.35,Default,,0,0,0,,And now, whenever you copy them,
Dialogue: 0,0:05:26.51,0:05:28.72,Default,,0,0,0,,they're constant until a shared
Dialogue: 0,0:05:28.72,0:05:29.31,Default,,0,0,0,,mutation.
Dialogue: 0,0:05:30.08,0:05:31.38,Default,,0,0,0,,So, let's pull that apart a
Dialogue: 0,0:05:31.38,0:05:33.38,Default,,0,0,0,,little bit and understand how
Dialogue: 0,0:05:33.38,0:05:34.56,Default,,0,0,0,,it's working, under the hood.
Dialogue: 0,0:05:34.56,0:05:37.47,Default,,0,0,0,,So, in this particular example,
Dialogue: 0,0:05:37.47,0:05:38.87,Default,,0,0,0,,we're creating a new mutable
Dialogue: 0,0:05:38.87,0:05:39.13,Default,,0,0,0,,array.
Dialogue: 0,0:05:39.73,0:05:42.38,Default,,0,0,0,,And when this happens, we
Dialogue: 0,0:05:42.38,0:05:44.03,Default,,0,0,0,,initially have a COW backing
Dialogue: 0,0:05:44.03,0:05:46.01,Default,,0,0,0,,store that holds zero items.
Dialogue: 0,0:05:47.04,0:05:49.48,Default,,0,0,0,,So, we do some extra work and in
Dialogue: 0,0:05:49.67,0:05:51.53,Default,,0,0,0,,our application, we then call
Dialogue: 0,0:05:51.53,0:05:51.95,Default,,0,0,0,,copy.
Dialogue: 0,0:05:52.65,0:05:53.77,Default,,0,0,0,,In this particular case, we're
Dialogue: 0,0:05:53.77,0:05:56.00,Default,,0,0,0,,assigning B as a copy of A.
Dialogue: 0,0:05:56.67,0:05:58.49,Default,,0,0,0,,And whenever that copy has
Dialogue: 0,0:05:58.49,0:06:00.22,Default,,0,0,0,,occurred, the only price that
Dialogue: 0,0:06:00.22,0:06:02.32,Default,,0,0,0,,you pay in your application is
Dialogue: 0,0:06:02.32,0:06:04.28,Default,,0,0,0,,the allocation of the new
Dialogue: 0,0:06:04.28,0:06:04.93,Default,,0,0,0,,collection.
Dialogue: 0,0:06:05.28,0:06:06.70,Default,,0,0,0,,You don't have to actually copy
Dialogue: 0,0:06:06.70,0:06:07.57,Default,,0,0,0,,any of the items.
Dialogue: 0,0:06:07.84,0:06:09.12,Default,,0,0,0,,So, in this case, we're still
Dialogue: 0,0:06:09.12,0:06:10.63,Default,,0,0,0,,pointing to the same backing
Dialogue: 0,0:06:10.63,0:06:13.35,Default,,0,0,0,,store that holds zero items.
Dialogue: 0,0:06:13.86,0:06:16.49,Default,,0,0,0,,So, later on, if we were to make
Dialogue: 0,0:06:16.49,0:06:18.76,Default,,0,0,0,,a mutation, then what will
Dialogue: 0,0:06:18.76,0:06:21.62,Default,,0,0,0,,happen is that the copying party
Dialogue: 0,0:06:21.97,0:06:24.23,Default,,0,0,0,,initially has a reference to
Dialogue: 0,0:06:24.23,0:06:25.89,Default,,0,0,0,,that shared backing store.
Dialogue: 0,0:06:26.25,0:06:27.89,Default,,0,0,0,,So, in order to make a mutation,
Dialogue: 0,0:06:28.06,0:06:29.70,Default,,0,0,0,,it has to copy from that backing
Dialogue: 0,0:06:29.70,0:06:31.26,Default,,0,0,0,,store to be able to make sure
Dialogue: 0,0:06:31.26,0:06:33.11,Default,,0,0,0,,that the mutation is in safe.
Dialogue: 0,0:06:34.35,0:06:35.61,Default,,0,0,0,,But you have to take in
Dialogue: 0,0:06:35.61,0:06:37.09,Default,,0,0,0,,consideration that most
Dialogue: 0,0:06:37.09,0:06:38.54,Default,,0,0,0,,applications are going to be
Dialogue: 0,0:06:38.60,0:06:40.07,Default,,0,0,0,,ending at that point, right
Dialogue: 0,0:06:40.12,0:06:41.78,Default,,0,0,0,,there, whenever you don't have
Dialogue: 0,0:06:41.78,0:06:43.17,Default,,0,0,0,,any further mutations.
Dialogue: 0,0:06:43.64,0:06:46.10,Default,,0,0,0,,So, as you can see, you can end
Dialogue: 0,0:06:46.10,0:06:47.67,Default,,0,0,0,,up having a vast performance
Dialogue: 0,0:06:47.67,0:06:50.67,Default,,0,0,0,,improvement by leveraging this
Dialogue: 0,0:06:50.97,0:06:51.38,Default,,0,0,0,,feature.
Dialogue: 0,0:06:52.29,0:06:53.79,Default,,0,0,0,,Now, let's see how you can
Dialogue: 0,0:06:53.79,0:06:55.08,Default,,0,0,0,,actually use this in your
Dialogue: 0,0:06:55.08,0:06:55.85,Default,,0,0,0,,application.
Dialogue: 0,0:06:56.56,0:06:58.38,Default,,0,0,0,,Now, I'm as guilty as the next
Dialogue: 0,0:06:58.38,0:06:58.91,Default,,0,0,0,,developer.
Dialogue: 0,0:06:59.34,0:07:01.10,Default,,0,0,0,,I've written code like this with
Dialogue: 0,0:07:01.10,0:07:03.56,Default,,0,0,0,,comments, with the hopes that my
Dialogue: 0,0:07:03.56,0:07:04.84,Default,,0,0,0,,colleagues are going to follow
Dialogue: 0,0:07:04.84,0:07:06.66,Default,,0,0,0,,my suggestion, all in the name
Dialogue: 0,0:07:06.66,0:07:07.67,Default,,0,0,0,,of performance.
Dialogue: 0,0:07:08.31,0:07:09.85,Default,,0,0,0,,But there's a little pitfall,
Dialogue: 0,0:07:09.85,0:07:12.15,Default,,0,0,0,,here that if a mutable array
Dialogue: 0,0:07:12.15,0:07:14.84,Default,,0,0,0,,were to have snuck in, then we
Dialogue: 0,0:07:14.84,0:07:15.91,Default,,0,0,0,,would end up sharing mutable
Dialogue: 0,0:07:15.91,0:07:16.44,Default,,0,0,0,,state.
Dialogue: 0,0:07:16.58,0:07:17.63,Default,,0,0,0,,Which means we are going to be
Dialogue: 0,0:07:17.63,0:07:18.65,Default,,0,0,0,,sharing bugs.
Dialogue: 0,0:07:18.99,0:07:19.87,Default,,0,0,0,,Nobody wants that.
Dialogue: 0,0:07:20.78,0:07:22.47,Default,,0,0,0,,But since copies are nearly
Dialogue: 0,0:07:22.47,0:07:24.33,Default,,0,0,0,,free, now, we can do the same
Dialogue: 0,0:07:24.33,0:07:26.35,Default,,0,0,0,,thing every single time and not
Dialogue: 0,0:07:26.42,0:07:27.19,Default,,0,0,0,,have to worry about the
Dialogue: 0,0:07:27.19,0:07:27.98,Default,,0,0,0,,performance hit.
Dialogue: 0,0:07:27.98,0:07:29.25,Default,,0,0,0,,It's pretty great.
Dialogue: 0,0:07:30.48,0:07:31.56,Default,,0,0,0,,But it isn't just the copy
Dialogue: 0,0:07:31.56,0:07:32.79,Default,,0,0,0,,nature of properties.
Dialogue: 0,0:07:33.23,0:07:34.78,Default,,0,0,0,,Many times, mutable containers
Dialogue: 0,0:07:34.78,0:07:35.96,Default,,0,0,0,,are used to build things up.
Dialogue: 0,0:07:36.55,0:07:38.56,Default,,0,0,0,,And in this sample, the author
Dialogue: 0,0:07:38.56,0:07:40.53,Default,,0,0,0,,knew that NSMutableArray is a
Dialogue: 0,0:07:40.53,0:07:41.88,Default,,0,0,0,,subclass of an NSArray.
Dialogue: 0,0:07:42.47,0:07:44.47,Default,,0,0,0,,And the advertised return value
Dialogue: 0,0:07:44.47,0:07:45.49,Default,,0,0,0,,is an NSArray.
Dialogue: 0,0:07:45.72,0:07:48.00,Default,,0,0,0,,So, it's mostly safe, right?
Dialogue: 0,0:07:48.73,0:07:50.43,Default,,0,0,0,,Well, unfortunately, there's
Dialogue: 0,0:07:50.43,0:07:52.29,Default,,0,0,0,,some other consequences that can
Dialogue: 0,0:07:52.29,0:07:52.96,Default,,0,0,0,,happen, here.
Dialogue: 0,0:07:53.36,0:07:54.74,Default,,0,0,0,,If somebody checks the actual
Dialogue: 0,0:07:54.74,0:07:56.94,Default,,0,0,0,,class of the return type, well,
Dialogue: 0,0:07:56.94,0:07:57.51,Default,,0,0,0,,oops.
Dialogue: 0,0:07:57.56,0:07:58.71,Default,,0,0,0,,They could end up having a
Dialogue: 0,0:07:58.71,0:08:00.33,Default,,0,0,0,,mutation of shared state, again.
Dialogue: 0,0:08:00.91,0:08:03.18,Default,,0,0,0,,So instead, you can defensively
Dialogue: 0,0:08:03.18,0:08:05.47,Default,,0,0,0,,copy return values so that it
Dialogue: 0,0:08:05.47,0:08:06.99,Default,,0,0,0,,does the right thing without
Dialogue: 0,0:08:07.05,0:08:08.03,Default,,0,0,0,,having to worry about the
Dialogue: 0,0:08:08.03,0:08:09.19,Default,,0,0,0,,performance costs.
Dialogue: 0,0:08:10.40,0:08:12.27,Default,,0,0,0,,There's actually another case
Dialogue: 0,0:08:12.42,0:08:14.63,Default,,0,0,0,,that's a little bit more hidden.
Dialogue: 0,0:08:14.85,0:08:17.36,Default,,0,0,0,,In the case of Swift, whenever
Dialogue: 0,0:08:17.53,0:08:19.19,Default,,0,0,0,,either of these two APIs were
Dialogue: 0,0:08:19.29,0:08:22.10,Default,,0,0,0,,exported, we have to make a copy
Dialogue: 0,0:08:22.29,0:08:23.81,Default,,0,0,0,,to be able to preserve value
Dialogue: 0,0:08:23.81,0:08:24.45,Default,,0,0,0,,types.
Dialogue: 0,0:08:24.87,0:08:27.23,Default,,0,0,0,,And so, if you cast to an array
Dialogue: 0,0:08:27.23,0:08:29.01,Default,,0,0,0,,of any, from the NSArray for
Dialogue: 0,0:08:29.05,0:08:30.81,Default,,0,0,0,,either of these two APIs, the
Dialogue: 0,0:08:30.81,0:08:32.51,Default,,0,0,0,,previous implementation would
Dialogue: 0,0:08:33.01,0:08:35.41,Default,,0,0,0,,have to spend a linear execution
Dialogue: 0,0:08:35.41,0:08:36.53,Default,,0,0,0,,time to be able to make that
Dialogue: 0,0:08:36.53,0:08:36.93,Default,,0,0,0,,copy.
Dialogue: 0,0:08:37.36,0:08:39.51,Default,,0,0,0,,If you defensively do so, the
Dialogue: 0,0:08:39.51,0:08:41.09,Default,,0,0,0,,copy then, doesn't end up
Dialogue: 0,0:08:41.14,0:08:42.68,Default,,0,0,0,,attributing to some other place
Dialogue: 0,0:08:42.74,0:08:44.10,Default,,0,0,0,,that is unknown performance
Dialogue: 0,0:08:45.25,0:08:45.40,Default,,0,0,0,,costs.
Dialogue: 0,0:08:47.40,0:08:49.96,Default,,0,0,0,,In Swift 3, we introduced a
Dialogue: 0,0:08:49.96,0:08:52.00,Default,,0,0,0,,number of structural types for
Dialogue: 0,0:08:52.00,0:08:52.66,Default,,0,0,0,,Foundation.
Dialogue: 0,0:08:53.26,0:08:54.86,Default,,0,0,0,,One that made a whole lot of
Dialogue: 0,0:08:54.86,0:08:56.89,Default,,0,0,0,,sense was NSData being bridged
Dialogue: 0,0:08:56.89,0:08:58.39,Default,,0,0,0,,to the structural type data.
Dialogue: 0,0:08:59.43,0:09:01.75,Default,,0,0,0,,And we took a long look at data
Dialogue: 0,0:09:01.75,0:09:03.70,Default,,0,0,0,,to be able to understand common
Dialogue: 0,0:09:03.70,0:09:05.39,Default,,0,0,0,,use cases and places that we
Dialogue: 0,0:09:05.39,0:09:06.99,Default,,0,0,0,,could improve data to be able to
Dialogue: 0,0:09:06.99,0:09:08.18,Default,,0,0,0,,make it work better in our
Dialogue: 0,0:09:08.18,0:09:09.07,Default,,0,0,0,,applications.
Dialogue: 0,0:09:09.91,0:09:11.99,Default,,0,0,0,,And in this release, we've got
Dialogue: 0,0:09:12.21,0:09:14.74,Default,,0,0,0,,now data is its own slice type.
Dialogue: 0,0:09:14.79,0:09:15.85,Default,,0,0,0,,And we've looked at the
Dialogue: 0,0:09:15.85,0:09:17.17,Default,,0,0,0,,performance for being able to do
Dialogue: 0,0:09:17.17,0:09:18.82,Default,,0,0,0,,common tasks like for example,
Dialogue: 0,0:09:19.09,0:09:20.45,Default,,0,0,0,,getting the Count of the data.
Dialogue: 0,0:09:20.67,0:09:22.57,Default,,0,0,0,,Or indexing to a specific byte
Dialogue: 0,0:09:22.57,0:09:23.55,Default,,0,0,0,,at an offset.
Dialogue: 0,0:09:24.64,0:09:25.57,Default,,0,0,0,,And some of these
Dialogue: 0,0:09:25.57,0:09:28.03,Default,,0,0,0,,implementations are kind of
Dialogue: 0,0:09:28.03,0:09:28.57,Default,,0,0,0,,extreme.
Dialogue: 0,0:09:28.81,0:09:30.05,Default,,0,0,0,,Normally a few machine
Dialogue: 0,0:09:30.05,0:09:31.56,Default,,0,0,0,,instructions wouldn't move the
Dialogue: 0,0:09:31.56,0:09:32.49,Default,,0,0,0,,needle, at all.
Dialogue: 0,0:09:32.92,0:09:33.77,Default,,0,0,0,,But what it comes to
Dialogue: 0,0:09:33.77,0:09:36.55,Default,,0,0,0,,representing a byte buffer, even
Dialogue: 0,0:09:36.55,0:09:39.02,Default,,0,0,0,,20 versus four instructions can
Dialogue: 0,0:09:39.15,0:09:41.90,Default,,0,0,0,,actually make a difference.
Dialogue: 0,0:09:41.99,0:09:43.86,Default,,0,0,0,,So, this code looks pretty
Dialogue: 0,0:09:43.86,0:09:44.15,Default,,0,0,0,,simple.
Dialogue: 0,0:09:44.45,0:09:47.58,Default,,0,0,0,,But if has a few interesting
Dialogue: 0,0:09:47.58,0:09:49.53,Default,,0,0,0,,characteristics that reveal some
Dialogue: 0,0:09:49.53,0:09:50.91,Default,,0,0,0,,insight on how we could make
Dialogue: 0,0:09:50.91,0:09:51.80,Default,,0,0,0,,data faster.
Dialogue: 0,0:09:52.61,0:09:54.45,Default,,0,0,0,,First off, data is a collection,
Dialogue: 0,0:09:54.66,0:09:55.60,Default,,0,0,0,,just like array.
Dialogue: 0,0:09:55.93,0:09:57.46,Default,,0,0,0,,It can be subscripted, but both
Dialogue: 0,0:09:57.46,0:09:58.99,Default,,0,0,0,,indexes and ranges.
Dialogue: 0,0:09:59.63,0:10:01.58,Default,,0,0,0,,So, this means that the start
Dialogue: 0,0:10:01.58,0:10:03.85,Default,,0,0,0,,index of the data, is not always
Dialogue: 0,0:10:03.85,0:10:03.98,Default,,0,0,0,,zero.
Dialogue: 0,0:10:04.14,0:10:06.54,Default,,0,0,0,,Because the index is similar to
Dialogue: 0,0:10:06.61,0:10:07.58,Default,,0,0,0,,iterators in the other
Dialogue: 0,0:10:07.58,0:10:08.47,Default,,0,0,0,,languages.
Dialogue: 0,0:10:09.03,0:10:10.02,Default,,0,0,0,,And for the record, this code
Dialogue: 0,0:10:10.02,0:10:11.38,Default,,0,0,0,,has nothing wrong with it.
Dialogue: 0,0:10:11.38,0:10:13.61,Default,,0,0,0,,We just used it to be able to
Dialogue: 0,0:10:13.61,0:10:15.12,Default,,0,0,0,,understand what parts of data
Dialogue: 0,0:10:15.12,0:10:16.08,Default,,0,0,0,,should be refined.
Dialogue: 0,0:10:16.79,0:10:19.10,Default,,0,0,0,,So, the two questions, here, are
Dialogue: 0,0:10:19.45,0:10:20.65,Default,,0,0,0,,how big is the data that we're
Dialogue: 0,0:10:20.65,0:10:21.18,Default,,0,0,0,,dealing with?
Dialogue: 0,0:10:21.48,0:10:23.52,Default,,0,0,0,,And how many times it's called?
Dialogue: 0,0:10:23.95,0:10:25.44,Default,,0,0,0,,Where is it on that chart?
Dialogue: 0,0:10:26.21,0:10:28.23,Default,,0,0,0,,And the answer truly is that it
Dialogue: 0,0:10:28.23,0:10:29.97,Default,,0,0,0,,could fall on almost any of
Dialogue: 0,0:10:30.04,0:10:30.33,Default,,0,0,0,,them.
Dialogue: 0,0:10:30.79,0:10:32.56,Default,,0,0,0,,And most likely, it's in that
Dialogue: 0,0:10:32.56,0:10:33.58,Default,,0,0,0,,place where it needs to be
Dialogue: 0,0:10:33.58,0:10:34.02,Default,,0,0,0,,measured.
Dialogue: 0,0:10:34.95,0:10:36.90,Default,,0,0,0,,So, we did exactly that.
Dialogue: 0,0:10:36.90,0:10:40.66,Default,,0,0,0,,And on the top in the blue, is
Dialogue: 0,0:10:40.66,0:10:42.11,Default,,0,0,0,,the initial Swift 3 version of
Dialogue: 0,0:10:42.11,0:10:42.47,Default,,0,0,0,,Data.
Dialogue: 0,0:10:43.05,0:10:46.30,Default,,0,0,0,,And when subscripting, it took
Dialogue: 0,0:10:46.42,0:10:48.32,Default,,0,0,0,,about 16 nanoseconds on the
Dialogue: 0,0:10:48.32,0:10:49.93,Default,,0,0,0,,machine that I was using to be
Dialogue: 0,0:10:49.93,0:10:52.13,Default,,0,0,0,,able to profile it.
Dialogue: 0,0:10:52.13,0:10:54.35,Default,,0,0,0,,And since data is a common
Dialogue: 0,0:10:54.35,0:10:56.13,Default,,0,0,0,,currency of dealing with a
Dialogue: 0,0:10:56.13,0:10:58.10,Default,,0,0,0,,collection of bytes, this should
Dialogue: 0,0:10:58.10,0:11:01.05,Default,,0,0,0,,be really, really fast.
Dialogue: 0,0:11:01.05,0:11:02.81,Default,,0,0,0,,After tuning, we got it just
Dialogue: 0,0:11:02.81,0:11:04.71,Default,,0,0,0,,down to four nanoseconds.
Dialogue: 0,0:11:04.86,0:11:05.68,Default,,0,0,0,,It's pretty impressive.
Dialogue: 0,0:11:06.45,0:11:08.12,Default,,0,0,0,,And if you were using Data,
Dialogue: 0,0:11:08.12,0:11:10.72,Default,,0,0,0,,before, you get this advantage
Dialogue: 0,0:11:10.82,0:11:11.49,Default,,0,0,0,,for free.
Dialogue: 0,0:11:12.18,0:11:14.01,Default,,0,0,0,,And it will also be able to
Dialogue: 0,0:11:14.06,0:11:15.82,Default,,0,0,0,,interoperate with all the rest
Dialogue: 0,0:11:15.82,0:11:17.77,Default,,0,0,0,,of the APIs that take and use
Dialogue: 0,0:11:18.41,0:11:18.56,Default,,0,0,0,,data.
Dialogue: 0,0:11:19.58,0:11:20.20,Default,,0,0,0,,Thanks.
Dialogue: 0,0:11:21.42,0:11:23.42,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:11:23.82,0:11:26.36,Default,,0,0,0,,Now again, preface, here for
Dialogue: 0,0:11:26.36,0:11:28.24,Default,,0,0,0,,you, none of these examples are
Dialogue: 0,0:11:28.24,0:11:29.91,Default,,0,0,0,,clearly wrong or harmful.
Dialogue: 0,0:11:30.27,0:11:31.64,Default,,0,0,0,,But they do have things to be
Dialogue: 0,0:11:31.64,0:11:33.54,Default,,0,0,0,,able to consider versus their
Dialogue: 0,0:11:33.54,0:11:34.55,Default,,0,0,0,,counterparts.
Dialogue: 0,0:11:35.72,0:11:37.61,Default,,0,0,0,,Oftentimes, it's viewed that a
Dialogue: 0,0:11:37.61,0:11:38.72,Default,,0,0,0,,collection of bytes can be
Dialogue: 0,0:11:38.72,0:11:39.73,Default,,0,0,0,,expressed in an array.
Dialogue: 0,0:11:39.79,0:11:42.44,Default,,0,0,0,,And in small cases, sure.
Dialogue: 0,0:11:42.54,0:11:43.63,Default,,0,0,0,,That works just fine.
Dialogue: 0,0:11:44.11,0:11:46.23,Default,,0,0,0,,However, there's a hidden cost,
Dialogue: 0,0:11:46.23,0:11:47.67,Default,,0,0,0,,here, from a cognitive sense
Dialogue: 0,0:11:48.02,0:11:49.60,Default,,0,0,0,,that when you try to write it to
Dialogue: 0,0:11:49.60,0:11:52.30,Default,,0,0,0,,a file, that' pretty tricky.
Dialogue: 0,0:11:52.38,0:11:53.57,Default,,0,0,0,,There's a lot of Edge cases,
Dialogue: 0,0:11:53.57,0:11:53.83,Default,,0,0,0,,there.
Dialogue: 0,0:11:54.20,0:11:55.80,Default,,0,0,0,,We take care of that for you.
Dialogue: 0,0:11:56.05,0:11:57.75,Default,,0,0,0,,Being able to interoperate with
Dialogue: 0,0:11:57.75,0:11:59.06,Default,,0,0,0,,things like writing to files,
Dialogue: 0,0:11:59.06,0:12:01.79,Default,,0,0,0,,converting to basic C4, Data is
Dialogue: 0,0:12:01.79,0:12:02.68,Default,,0,0,0,,a clear winner.
Dialogue: 0,0:12:04.13,0:12:06.69,Default,,0,0,0,,Now, sometimes we get nostalgic
Dialogue: 0,0:12:06.76,0:12:09.68,Default,,0,0,0,,and we fall back to old trusty
Dialogue: 0,0:12:09.68,0:12:10.23,Default,,0,0,0,,malloc.
Dialogue: 0,0:12:10.87,0:12:13.21,Default,,0,0,0,,And unfortunately, this can
Dialogue: 0,0:12:13.21,0:12:14.82,Default,,0,0,0,,sometimes skip out on other
Dialogue: 0,0:12:14.82,0:12:15.97,Default,,0,0,0,,optimizations.
Dialogue: 0,0:12:16.24,0:12:17.98,Default,,0,0,0,,Like for example, knowing proper
Dialogue: 0,0:12:17.98,0:12:20.04,Default,,0,0,0,,allocation sizes that work best
Dialogue: 0,0:12:20.04,0:12:21.11,Default,,0,0,0,,with rounding to the right
Dialogue: 0,0:12:21.37,0:12:23.67,Default,,0,0,0,,regions that malloc returns for
Dialogue: 0,0:12:23.67,0:12:24.31,Default,,0,0,0,,buffers.
Dialogue: 0,0:12:25.17,0:12:27.16,Default,,0,0,0,,Data deals with all of this, for
Dialogue: 0,0:12:27.16,0:12:27.34,Default,,0,0,0,,you.
Dialogue: 0,0:12:27.34,0:12:28.87,Default,,0,0,0,,So, you don't have to worry
Dialogue: 0,0:12:28.87,0:12:29.99,Default,,0,0,0,,about reallocation.
Dialogue: 0,0:12:30.03,0:12:31.47,Default,,0,0,0,,You don't have to worry about
Dialogue: 0,0:12:31.47,0:12:33.53,Default,,0,0,0,,understanding the Edge cases of
Dialogue: 0,0:12:33.53,0:12:35.82,Default,,0,0,0,,what sizes might be better for
Dialogue: 0,0:12:35.82,0:12:36.94,Default,,0,0,0,,malloc, than others.
Dialogue: 0,0:12:36.94,0:12:41.33,Default,,0,0,0,,Now, these two next lines are
Dialogue: 0,0:12:41.58,0:12:42.45,Default,,0,0,0,,really similar.
Dialogue: 0,0:12:42.80,0:12:44.50,Default,,0,0,0,,And they're worth noting,
Dialogue: 0,0:12:44.79,0:12:46.73,Default,,0,0,0,,because in certain cases, you
Dialogue: 0,0:12:46.73,0:12:48.06,Default,,0,0,0,,want to be able to work with a
Dialogue: 0,0:12:48.06,0:12:49.31,Default,,0,0,0,,large region of data.
Dialogue: 0,0:12:49.79,0:12:51.63,Default,,0,0,0,,And in other cases, you want to
Dialogue: 0,0:12:51.63,0:12:53.05,Default,,0,0,0,,be able to just hold around a
Dialogue: 0,0:12:53.05,0:12:54.39,Default,,0,0,0,,small little bit of it.
Dialogue: 0,0:12:55.12,0:12:56.89,Default,,0,0,0,,So, Data has two APIs.
Dialogue: 0,0:12:57.02,0:12:58.34,Default,,0,0,0,,One of which is subdata in
Dialogue: 0,0:12:58.34,0:12:58.88,Default,,0,0,0,,range.
Dialogue: 0,0:12:59.17,0:13:00.91,Default,,0,0,0,,And this will create a copy, so
Dialogue: 0,0:13:00.91,0:13:02.36,Default,,0,0,0,,that if you have a large file
Dialogue: 0,0:13:02.36,0:13:03.60,Default,,0,0,0,,that you're working with, but
Dialogue: 0,0:13:03.60,0:13:05.29,Default,,0,0,0,,only want to keep around a small
Dialogue: 0,0:13:05.29,0:13:05.77,Default,,0,0,0,,bit.
Dialogue: 0,0:13:06.13,0:13:08.07,Default,,0,0,0,,Subdata with range will make an
Dialogue: 0,0:13:08.07,0:13:09.55,Default,,0,0,0,,enforced copy, like that.
Dialogue: 0,0:13:10.44,0:13:12.61,Default,,0,0,0,,But we changed Data so that it's
Dialogue: 0,0:13:12.61,0:13:16.59,Default,,0,0,0,,its own subtype, or sub-slice of
Dialogue: 0,0:13:16.59,0:13:16.99,Default,,0,0,0,,a type.
Dialogue: 0,0:13:17.34,0:13:18.53,Default,,0,0,0,,So, that whenever you use the
Dialogue: 0,0:13:18.53,0:13:20.64,Default,,0,0,0,,range syntax, even for example,
Dialogue: 0,0:13:20.64,0:13:21.99,Default,,0,0,0,,this version of ranges.
Dialogue: 0,0:13:22.56,0:13:24.99,Default,,0,0,0,,You can use that as a window to
Dialogue: 0,0:13:24.99,0:13:26.54,Default,,0,0,0,,be able to peer into the data.
Dialogue: 0,0:13:26.96,0:13:28.47,Default,,0,0,0,,So, if you have a large file
Dialogue: 0,0:13:28.47,0:13:29.57,Default,,0,0,0,,that you're dealing with, that
Dialogue: 0,0:13:29.57,0:13:30.73,Default,,0,0,0,,you just need to be able to
Dialogue: 0,0:13:30.73,0:13:32.71,Default,,0,0,0,,parse it and the data itself
Dialogue: 0,0:13:32.71,0:13:34.11,Default,,0,0,0,,will only be transitory.
Dialogue: 0,0:13:34.61,0:13:36.48,Default,,0,0,0,,Then, using slices is an
Dialogue: 0,0:13:36.48,0:13:38.39,Default,,0,0,0,,incredibly efficient manner to
Dialogue: 0,0:13:38.39,0:13:39.99,Default,,0,0,0,,be able to access it, because it
Dialogue: 0,0:13:39.99,0:13:43.39,Default,,0,0,0,,causes no copy.
Dialogue: 0,0:13:43.55,0:13:45.35,Default,,0,0,0,,Now, we've talked a number of
Dialogue: 0,0:13:45.35,0:13:46.57,Default,,0,0,0,,times about bridges.
Dialogue: 0,0:13:46.80,0:13:48.50,Default,,0,0,0,,And there are two types of
Dialogue: 0,0:13:48.50,0:13:50.53,Default,,0,0,0,,bridges that are relevant, here.
Dialogue: 0,0:13:51.46,0:13:53.35,Default,,0,0,0,,And on the left we have
Dialogue: 0,0:13:53.69,0:13:54.98,Default,,0,0,0,,toll-free bridging.
Dialogue: 0,0:13:55.67,0:13:58.10,Default,,0,0,0,,And in these cases, they are
Dialogue: 0,0:13:58.10,0:13:59.69,Default,,0,0,0,,bridging from a Foundation type
Dialogue: 0,0:13:59.90,0:14:01.22,Default,,0,0,0,,to a Core Foundation type.
Dialogue: 0,0:14:01.84,0:14:03.38,Default,,0,0,0,,Or from a Foundation type to a
Dialogue: 0,0:14:03.38,0:14:04.36,Default,,0,0,0,,Core Foundation type.
Dialogue: 0,0:14:05.23,0:14:08.48,Default,,0,0,0,,And these are zero cost at the
Dialogue: 0,0:14:08.85,0:14:09.19,Default,,0,0,0,,cast.
Dialogue: 0,0:14:09.39,0:14:10.78,Default,,0,0,0,,So, whatever you actually have
Dialogue: 0,0:14:10.78,0:14:12.13,Default,,0,0,0,,in this particular case, the
Dialogue: 0,0:14:12.41,0:14:14.82,Default,,0,0,0,,NSArray being bridged to a
Dialogue: 0,0:14:14.82,0:14:16.78,Default,,0,0,0,,CFArray, it's just a
Dialogue: 0,0:14:16.78,0:14:18.53,Default,,0,0,0,,reinterpretation of a pointer.
Dialogue: 0,0:14:19.36,0:14:22.91,Default,,0,0,0,,But there is a slight cost to be
Dialogue: 0,0:14:22.91,0:14:25.27,Default,,0,0,0,,paid, whenever you pass that
Dialogue: 0,0:14:25.33,0:14:27.80,Default,,0,0,0,,object to CFArrayGetCount,
Dialogue: 0,0:14:28.50,0:14:29.96,Default,,0,0,0,,there's something that you have,
Dialogue: 0,0:14:29.96,0:14:30.19,Default,,0,0,0,,there.
Dialogue: 0,0:14:30.54,0:14:31.66,Default,,0,0,0,,We'll go over that, here in just
Dialogue: 0,0:14:31.66,0:14:32.19,Default,,0,0,0,,a little bit.
Dialogue: 0,0:14:33.35,0:14:35.16,Default,,0,0,0,,So, contrasting that to Swift
Dialogue: 0,0:14:35.16,0:14:38.15,Default,,0,0,0,,bridging, those are cases where
Dialogue: 0,0:14:38.43,0:14:39.76,Default,,0,0,0,,you're bridging from a reference
Dialogue: 0,0:14:39.76,0:14:41.39,Default,,0,0,0,,type to a structural type.
Dialogue: 0,0:14:42.38,0:14:45.21,Default,,0,0,0,,And contrarily so, bridging from
Dialogue: 0,0:14:45.21,0:14:47.15,Default,,0,0,0,,a structural type to a reference
Dialogue: 0,0:14:47.15,0:14:47.46,Default,,0,0,0,,type.
Dialogue: 0,0:14:48.96,0:14:49.92,Default,,0,0,0,,But the costs in these
Dialogue: 0,0:14:49.95,0:14:51.98,Default,,0,0,0,,particular cases are paid in
Dialogue: 0,0:14:51.98,0:14:52.73,Default,,0,0,0,,advance.
Dialogue: 0,0:14:52.96,0:14:54.39,Default,,0,0,0,,So, whenever you import from
Dialogue: 0,0:14:54.39,0:14:56.80,Default,,0,0,0,,Objective-C or if, in this case,
Dialogue: 0,0:14:56.80,0:14:58.88,Default,,0,0,0,,you use as question mark, to be
Dialogue: 0,0:14:58.88,0:15:00.49,Default,,0,0,0,,able to convert between the two,
Dialogue: 0,0:15:00.77,0:15:02.92,Default,,0,0,0,,you are paying that cost, there.
Dialogue: 0,0:15:04.24,0:15:06.79,Default,,0,0,0,,But the differential is that
Dialogue: 0,0:15:06.79,0:15:08.68,Default,,0,0,0,,these are then normal costs at
Dialogue: 0,0:15:08.90,0:15:09.85,Default,,0,0,0,,the usage.
Dialogue: 0,0:15:10.96,0:15:12.07,Default,,0,0,0,,So, let's dive in a little bit
Dialogue: 0,0:15:12.07,0:15:12.46,Default,,0,0,0,,more.
Dialogue: 0,0:15:12.71,0:15:14.08,Default,,0,0,0,,I know this looks scary.
Dialogue: 0,0:15:14.64,0:15:16.07,Default,,0,0,0,,Don't have a cow, actually, as a
Dialogue: 0,0:15:16.07,0:15:16.94,Default,,0,0,0,,matter of fact, this doesn't
Dialogue: 0,0:15:17.02,0:15:17.55,Default,,0,0,0,,actually.
Dialogue: 0,0:15:17.59,0:15:19.25,Default,,0,0,0,,CFArray doesn't implement copy
Dialogue: 0,0:15:19.25,0:15:19.68,Default,,0,0,0,,on write.
Dialogue: 0,0:15:21.05,0:15:23.21,Default,,0,0,0,,But whenever you pass an NSArray
Dialogue: 0,0:15:23.46,0:15:25.06,Default,,0,0,0,,or subclass into
Dialogue: 0,0:15:25.06,0:15:27.43,Default,,0,0,0,,CFArrayGetCount, it will
Dialogue: 0,0:15:27.58,0:15:29.28,Default,,0,0,0,,magically call out to this
Dialogue: 0,0:15:29.28,0:15:30.73,Default,,0,0,0,,Objective-C method count.
Dialogue: 0,0:15:31.54,0:15:32.66,Default,,0,0,0,,So, let's pick it apart a little
Dialogue: 0,0:15:32.66,0:15:34.43,Default,,0,0,0,,bit further and understand how
Dialogue: 0,0:15:34.43,0:15:35.64,Default,,0,0,0,,this is different than the Swift
Dialogue: 0,0:15:35.74,0:15:36.15,Default,,0,0,0,,bridge.
Dialogue: 0,0:15:36.61,0:15:39.86,Default,,0,0,0,,Here it is, a little bit more
Dialogue: 0,0:15:39.86,0:15:40.60,Default,,0,0,0,,simplified.
Dialogue: 0,0:15:41.13,0:15:43.30,Default,,0,0,0,,First, we tested the arrays and
Dialogue: 0,0:15:43.30,0:15:44.55,Default,,0,0,0,,Objective-C subclass.
Dialogue: 0,0:15:44.93,0:15:46.30,Default,,0,0,0,,And then, we see that invocation
Dialogue: 0,0:15:46.30,0:15:47.12,Default,,0,0,0,,to count, there.
Dialogue: 0,0:15:47.65,0:15:49.73,Default,,0,0,0,,If it wasn't, we know that the
Dialogue: 0,0:15:49.73,0:15:51.34,Default,,0,0,0,,structural layout of the object
Dialogue: 0,0:15:51.62,0:15:53.33,Default,,0,0,0,,can let us indirect to that
Dialogue: 0,0:15:53.63,0:15:55.53,Default,,0,0,0,,variable count.
Dialogue: 0,0:15:56.24,0:15:58.04,Default,,0,0,0,,So, expanding it a bit further.
Dialogue: 0,0:15:58.92,0:16:00.54,Default,,0,0,0,,It checks the internal layout of
Dialogue: 0,0:16:00.54,0:16:02.13,Default,,0,0,0,,the object against the expected
Dialogue: 0,0:16:02.13,0:16:02.87,Default,,0,0,0,,class table.
Dialogue: 0,0:16:03.24,0:16:05.75,Default,,0,0,0,,So, in truth it basically boils
Dialogue: 0,0:16:05.75,0:16:07.51,Default,,0,0,0,,down to costing two indirections
Dialogue: 0,0:16:07.51,0:16:08.95,Default,,0,0,0,,and a function call, to
Dialogue: 0,0:16:08.95,0:16:12.53,Default,,0,0,0,,determine if the Objective-C
Dialogue: 0,0:16:12.53,0:16:14.13,Default,,0,0,0,,method needs to actually be
Dialogue: 0,0:16:14.13,0:16:14.80,Default,,0,0,0,,invoked or not.
Dialogue: 0,0:16:14.89,0:16:17.53,Default,,0,0,0,,So, let's wrap it up for this
Dialogue: 0,0:16:17.53,0:16:17.80,Default,,0,0,0,,one.
Dialogue: 0,0:16:18.12,0:16:20.54,Default,,0,0,0,,Casting to an array or subclass
Dialogue: 0,0:16:20.62,0:16:23.34,Default,,0,0,0,,to a CFArray is just a
Dialogue: 0,0:16:23.34,0:16:25.15,Default,,0,0,0,,reinterpretation of the pointer.
Dialogue: 0,0:16:25.82,0:16:27.69,Default,,0,0,0,,It's the usage points that
Dialogue: 0,0:16:27.84,0:16:29.05,Default,,0,0,0,,actually have the cost.
Dialogue: 0,0:16:29.82,0:16:30.93,Default,,0,0,0,,So, this is usually an
Dialogue: 0,0:16:30.93,0:16:32.72,Default,,0,0,0,,exceedingly small impact.
Dialogue: 0,0:16:33.01,0:16:34.76,Default,,0,0,0,,But in rare cases, it could
Dialogue: 0,0:16:34.76,0:16:36.96,Default,,0,0,0,,often move the needle a little
Dialogue: 0,0:16:37.30,0:16:37.39,Default,,0,0,0,,bit.
Dialogue: 0,0:16:37.39,0:16:39.36,Default,,0,0,0,,So, on the graph, we're mostly
Dialogue: 0,0:16:39.36,0:16:40.88,Default,,0,0,0,,down there in that third
Dialogue: 0,0:16:40.88,0:16:42.59,Default,,0,0,0,,quadrant, maybe peeking up a
Dialogue: 0,0:16:42.59,0:16:44.70,Default,,0,0,0,,little bit.
Dialogue: 0,0:16:44.92,0:16:47.27,Default,,0,0,0,,Now, on the flipside, we have
Dialogue: 0,0:16:47.27,0:16:48.07,Default,,0,0,0,,Swift bridging.
Dialogue: 0,0:16:48.63,0:16:50.04,Default,,0,0,0,,Now, remember this is whenever
Dialogue: 0,0:16:50.04,0:16:52.50,Default,,0,0,0,,we call as question mark or
Dialogue: 0,0:16:52.50,0:16:54.66,Default,,0,0,0,,expose an API from Objective-C,
Dialogue: 0,0:16:55.07,0:16:56.31,Default,,0,0,0,,whenever we have a bridged
Dialogue: 0,0:16:56.31,0:16:57.17,Default,,0,0,0,,reference type.
Dialogue: 0,0:16:57.93,0:16:59.89,Default,,0,0,0,,The compiler will emit this
Dialogue: 0,0:16:59.89,0:17:01.54,Default,,0,0,0,,bridgeable family of functions,
Dialogue: 0,0:17:01.86,0:17:03.64,Default,,0,0,0,,in which will in turn in this
Dialogue: 0,0:17:03.64,0:17:05.08,Default,,0,0,0,,particular case, invoke the
Dialogue: 0,0:17:05.08,0:17:06.41,Default,,0,0,0,,referencing initializer for
Dialogue: 0,0:17:06.41,0:17:06.71,Default,,0,0,0,,Data.
Dialogue: 0,0:17:08.26,0:17:10.09,Default,,0,0,0,,And when Data is initialized
Dialogue: 0,0:17:10.09,0:17:12.35,Default,,0,0,0,,with a reference it will make a
Dialogue: 0,0:17:12.35,0:17:15.07,Default,,0,0,0,,copy to store into the backing
Dialogue: 0,0:17:15.07,0:17:15.88,Default,,0,0,0,,storage of the data.
Dialogue: 0,0:17:16.31,0:17:17.97,Default,,0,0,0,,Because we need to be able to
Dialogue: 0,0:17:17.97,0:17:19.70,Default,,0,0,0,,preserve, not only the value
Dialogue: 0,0:17:19.70,0:17:21.34,Default,,0,0,0,,type nature of the data.
Dialogue: 0,0:17:21.63,0:17:23.00,Default,,0,0,0,,But also, make sure that we
Dialogue: 0,0:17:23.00,0:17:24.31,Default,,0,0,0,,aren't holding onto a shared
Dialogue: 0,0:17:24.31,0:17:25.93,Default,,0,0,0,,mutable reference, causing of
Dialogue: 0,0:17:25.96,0:17:27.23,Default,,0,0,0,,course, bugs.
Dialogue: 0,0:17:28.10,0:17:30.02,Default,,0,0,0,,So, you can see that if this
Dialogue: 0,0:17:30.02,0:17:32.07,Default,,0,0,0,,were actually a mutable case or
Dialogue: 0,0:17:32.07,0:17:34.22,Default,,0,0,0,,a proxy or some other subclass,
Dialogue: 0,0:17:34.81,0:17:37.19,Default,,0,0,0,,it could be a potentially costly
Dialogue: 0,0:17:37.22,0:17:39.46,Default,,0,0,0,,point under the hood.
Dialogue: 0,0:17:39.68,0:17:41.36,Default,,0,0,0,,Now, bringing it all back
Dialogue: 0,0:17:41.36,0:17:43.93,Default,,0,0,0,,together, let's look at that
Dialogue: 0,0:17:44.12,0:17:45.82,Default,,0,0,0,,graph, again.
Dialogue: 0,0:17:45.88,0:17:47.80,Default,,0,0,0,,And in this time, the bridge is
Dialogue: 0,0:17:47.80,0:17:49.57,Default,,0,0,0,,not too often hit.
Dialogue: 0,0:17:49.73,0:17:52.85,Default,,0,0,0,,And whenever the common case,
Dialogue: 0,0:17:53.21,0:17:54.92,Default,,0,0,0,,the copy is optimized into a
Dialogue: 0,0:17:54.92,0:17:55.52,Default,,0,0,0,,retain.
Dialogue: 0,0:17:55.82,0:17:56.89,Default,,0,0,0,,So, we're going to, again, be
Dialogue: 0,0:17:56.89,0:17:57.96,Default,,0,0,0,,down there in that third
Dialogue: 0,0:17:58.01,0:17:58.53,Default,,0,0,0,,quadrant.
Dialogue: 0,0:17:59.28,0:18:00.67,Default,,0,0,0,,But in the cases of the
Dialogue: 0,0:18:00.67,0:18:03.04,Default,,0,0,0,,exceptions for subclasses, like
Dialogue: 0,0:18:03.04,0:18:04.92,Default,,0,0,0,,for example, mutable data, that
Dialogue: 0,0:18:04.92,0:18:07.10,Default,,0,0,0,,copy could potentially be in any
Dialogue: 0,0:18:07.10,0:18:08.17,Default,,0,0,0,,of those quadrants.
Dialogue: 0,0:18:08.58,0:18:10.39,Default,,0,0,0,,So, if you have subclasses that
Dialogue: 0,0:18:10.39,0:18:11.55,Default,,0,0,0,,you need to be able to deal
Dialogue: 0,0:18:11.55,0:18:13.64,Default,,0,0,0,,with, or you're passing mutable
Dialogue: 0,0:18:13.78,0:18:15.75,Default,,0,0,0,,versions back and forth across
Dialogue: 0,0:18:15.75,0:18:16.23,Default,,0,0,0,,the bridge.
Dialogue: 0,0:18:16.77,0:18:17.99,Default,,0,0,0,,You should probably be
Dialogue: 0,0:18:18.13,0:18:20.14,Default,,0,0,0,,understanding those with better
Dialogue: 0,0:18:20.14,0:18:22.33,Default,,0,0,0,,measurements with useful cases.
Dialogue: 0,0:18:23.34,0:18:25.70,Default,,0,0,0,,But this same pattern occurs for
Dialogue: 0,0:18:25.70,0:18:27.60,Default,,0,0,0,,not just data, but all of the
Dialogue: 0,0:18:27.60,0:18:29.97,Default,,0,0,0,,structural types within Swift.
Dialogue: 0,0:18:29.97,0:18:31.29,Default,,0,0,0,,Things like arrays and
Dialogue: 0,0:18:31.29,0:18:32.66,Default,,0,0,0,,dictionaries and strings.
Dialogue: 0,0:18:33.39,0:18:35.09,Default,,0,0,0,,Now, speaking of strings, I
Dialogue: 0,0:18:35.19,0:18:36.55,Default,,0,0,0,,heard they're kind of popular.
Dialogue: 0,0:18:36.86,0:18:38.41,Default,,0,0,0,,Here to guide you through the
Dialogue: 0,0:18:38.41,0:18:40.50,Default,,0,0,0,,wonderful world of strings,
Dialogue: 0,0:18:40.50,0:18:42.96,Default,,0,0,0,,ranges, and texts is Donna.
Dialogue: 0,0:18:43.52,0:18:47.99,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:18:48.49,0:18:49.04,Default,,0,0,0,,>> Thanks, Phillipe.
Dialogue: 0,0:18:51.90,0:18:53.13,Default,,0,0,0,,Now, strings are probably one of
Dialogue: 0,0:18:53.13,0:18:54.41,Default,,0,0,0,,the most frequently used data
Dialogue: 0,0:18:54.41,0:18:55.09,Default,,0,0,0,,types, ever.
Dialogue: 0,0:18:55.63,0:18:56.75,Default,,0,0,0,,If you're an app developer, your
Dialogue: 0,0:18:56.75,0:18:58.35,Default,,0,0,0,,app probably creates and mutates
Dialogue: 0,0:18:58.35,0:18:59.64,Default,,0,0,0,,hundreds, if not thousands, of
Dialogue: 0,0:18:59.64,0:19:01.01,Default,,0,0,0,,strings each time they're used.
Dialogue: 0,0:19:01.06,0:19:02.49,Default,,0,0,0,,And if you're a framework
Dialogue: 0,0:19:02.49,0:19:03.79,Default,,0,0,0,,developer, your framework's
Dialogue: 0,0:19:03.79,0:19:04.81,Default,,0,0,0,,probably create and mutate
Dialogue: 0,0:19:04.81,0:19:06.47,Default,,0,0,0,,strings each time someone calls
Dialogue: 0,0:19:06.47,0:19:07.33,Default,,0,0,0,,one of our APIs.
Dialogue: 0,0:19:07.89,0:19:08.90,Default,,0,0,0,,And those strings might then be
Dialogue: 0,0:19:08.90,0:19:10.34,Default,,0,0,0,,mutated farther beyond the
Dialogue: 0,0:19:10.34,0:19:11.28,Default,,0,0,0,,boundaries of your framework.
Dialogue: 0,0:19:11.96,0:19:13.47,Default,,0,0,0,,And strings, they're not used in
Dialogue: 0,0:19:13.47,0:19:13.87,Default,,0,0,0,,a vacuum.
Dialogue: 0,0:19:14.20,0:19:14.89,Default,,0,0,0,,You're interacting with
Dialogue: 0,0:19:14.89,0:19:16.08,Default,,0,0,0,,frameworks to do anything
Dialogue: 0,0:19:16.08,0:19:17.00,Default,,0,0,0,,interesting with strings.
Dialogue: 0,0:19:17.23,0:19:18.19,Default,,0,0,0,,Whether it's slicing them,
Dialogue: 0,0:19:18.50,0:19:20.26,Default,,0,0,0,,dicing them, smashing them
Dialogue: 0,0:19:20.26,0:19:20.69,Default,,0,0,0,,together.
Dialogue: 0,0:19:20.72,0:19:21.75,Default,,0,0,0,,Or even just rendering them on
Dialogue: 0,0:19:21.75,0:19:22.18,Default,,0,0,0,,the screen.
Dialogue: 0,0:19:22.77,0:19:24.69,Default,,0,0,0,,And so, you may be able to
Dialogue: 0,0:19:24.69,0:19:25.80,Default,,0,0,0,,improve your app or framework's
Dialogue: 0,0:19:25.80,0:19:27.36,Default,,0,0,0,,performance by understanding how
Dialogue: 0,0:19:27.36,0:19:29.42,Default,,0,0,0,,strings, ranges, and text
Dialogue: 0,0:19:29.80,0:19:30.77,Default,,0,0,0,,interact with frameworks.
Dialogue: 0,0:19:30.95,0:19:32.16,Default,,0,0,0,,And by making implementation
Dialogue: 0,0:19:32.16,0:19:33.08,Default,,0,0,0,,choices based on this
Dialogue: 0,0:19:33.08,0:19:33.61,Default,,0,0,0,,understanding.
Dialogue: 0,0:19:34.71,0:19:35.69,Default,,0,0,0,,But before we dive into the
Dialogue: 0,0:19:35.69,0:19:36.57,Default,,0,0,0,,nitty gritty details, I'm going
Dialogue: 0,0:19:36.97,0:19:38.59,Default,,0,0,0,,to kind of go back to rehash
Dialogue: 0,0:19:38.59,0:19:39.74,Default,,0,0,0,,some of what Phillipe talked
Dialogue: 0,0:19:39.74,0:19:41.34,Default,,0,0,0,,about and talk a little bit
Dialogue: 0,0:19:41.34,0:19:42.95,Default,,0,0,0,,about evaluating the impact of
Dialogue: 0,0:19:42.98,0:19:43.92,Default,,0,0,0,,performance improvements.
Dialogue: 0,0:19:44.57,0:19:47.37,Default,,0,0,0,,Now, it's really important not
Dialogue: 0,0:19:47.37,0:19:48.79,Default,,0,0,0,,to lose sight of the big picture
Dialogue: 0,0:19:48.88,0:19:49.75,Default,,0,0,0,,when you're looking to improve
Dialogue: 0,0:19:49.75,0:19:50.20,Default,,0,0,0,,performance.
Dialogue: 0,0:19:51.33,0:19:52.38,Default,,0,0,0,,It's really easy to get caught
Dialogue: 0,0:19:52.38,0:19:54.07,Default,,0,0,0,,up in the details and become
Dialogue: 0,0:19:54.07,0:19:55.46,Default,,0,0,0,,really focused on optimizing for
Dialogue: 0,0:19:55.46,0:19:57.07,Default,,0,0,0,,those very particular scenarios.
Dialogue: 0,0:19:57.37,0:19:59.36,Default,,0,0,0,,But it those scenarios don't
Dialogue: 0,0:19:59.36,0:20:00.70,Default,,0,0,0,,reflect the way users actually
Dialogue: 0,0:20:00.70,0:20:02.63,Default,,0,0,0,,use your app framework, then
Dialogue: 0,0:20:02.63,0:20:03.79,Default,,0,0,0,,it's not a very efficient use of
Dialogue: 0,0:20:03.79,0:20:04.97,Default,,0,0,0,,your time to optimize for them.
Dialogue: 0,0:20:06.03,0:20:08.13,Default,,0,0,0,,And so, once you've decided that
Dialogue: 0,0:20:08.13,0:20:09.23,Default,,0,0,0,,a scenario you're looking at
Dialogue: 0,0:20:09.23,0:20:10.78,Default,,0,0,0,,reflects actual usage, you might
Dialogue: 0,0:20:10.78,0:20:11.91,Default,,0,0,0,,then look at the performance of
Dialogue: 0,0:20:11.91,0:20:13.08,Default,,0,0,0,,a particular piece of code.
Dialogue: 0,0:20:13.08,0:20:14.48,Default,,0,0,0,,And when you do that, it's
Dialogue: 0,0:20:14.48,0:20:15.52,Default,,0,0,0,,important to keep in mind, these
Dialogue: 0,0:20:15.52,0:20:16.57,Default,,0,0,0,,concepts that we've discussed.
Dialogue: 0,0:20:17.00,0:20:18.57,Default,,0,0,0,,How big is the data I'm working
Dialogue: 0,0:20:18.57,0:20:18.84,Default,,0,0,0,,with?
Dialogue: 0,0:20:18.84,0:20:20.06,Default,,0,0,0,,And how often is that code
Dialogue: 0,0:20:20.06,0:20:20.32,Default,,0,0,0,,running?
Dialogue: 0,0:20:20.89,0:20:22.69,Default,,0,0,0,,And so, we're going to bring
Dialogue: 0,0:20:22.69,0:20:23.33,Default,,0,0,0,,back the graph.
Dialogue: 0,0:20:23.82,0:20:25.25,Default,,0,0,0,,But we're going to change the
Dialogue: 0,0:20:25.25,0:20:26.84,Default,,0,0,0,,axis labels a little bit for the
Dialogue: 0,0:20:26.84,0:20:28.04,Default,,0,0,0,,context of strings and text.
Dialogue: 0,0:20:28.58,0:20:29.84,Default,,0,0,0,,So, the general concept is the
Dialogue: 0,0:20:29.84,0:20:30.19,Default,,0,0,0,,same.
Dialogue: 0,0:20:30.36,0:20:31.45,Default,,0,0,0,,But for strings, we'll think of
Dialogue: 0,0:20:31.45,0:20:32.84,Default,,0,0,0,,it in terms of how long or how
Dialogue: 0,0:20:32.84,0:20:34.38,Default,,0,0,0,,short the string is and how
Dialogue: 0,0:20:34.38,0:20:35.66,Default,,0,0,0,,frequently that code is running.
Dialogue: 0,0:20:36.23,0:20:38.68,Default,,0,0,0,,So, let's keep these concepts of
Dialogue: 0,0:20:38.72,0:20:39.92,Default,,0,0,0,,scale and frequency in mind as
Dialogue: 0,0:20:39.92,0:20:40.85,Default,,0,0,0,,we cover these topics.
Dialogue: 0,0:20:42.53,0:20:43.53,Default,,0,0,0,,First, we're going to start with
Dialogue: 0,0:20:43.53,0:20:44.09,Default,,0,0,0,,string bridging.
Dialogue: 0,0:20:44.09,0:20:46.23,Default,,0,0,0,,And then next, we'll talk about
Dialogue: 0,0:20:46.23,0:20:47.68,Default,,0,0,0,,ranges and the nuances of string
Dialogue: 0,0:20:47.68,0:20:48.08,Default,,0,0,0,,index.
Dialogue: 0,0:20:48.96,0:20:50.06,Default,,0,0,0,,And finally, we'll share a few
Dialogue: 0,0:20:50.06,0:20:51.37,Default,,0,0,0,,tips for working efficiently
Dialogue: 0,0:20:51.37,0:20:52.44,Default,,0,0,0,,with text layout and rendering
Dialogue: 0,0:20:52.44,0:20:53.58,Default,,0,0,0,,in AVKit and UIKit.
Dialogue: 0,0:20:54.62,0:20:55.92,Default,,0,0,0,,So, let's get started with sting
Dialogue: 0,0:20:55.92,0:20:56.22,Default,,0,0,0,,bridging.
Dialogue: 0,0:20:56.78,0:20:59.32,Default,,0,0,0,,The first example we'll look at
Dialogue: 0,0:20:59.32,0:21:00.24,Default,,0,0,0,,works with UILabel.
Dialogue: 0,0:21:00.24,0:21:03.04,Default,,0,0,0,,So, let's say I have a label
Dialogue: 0,0:21:03.04,0:21:04.97,Default,,0,0,0,,like this, and I want to access
Dialogue: 0,0:21:05.86,0:21:07.12,Default,,0,0,0,,its text.
Dialogue: 0,0:21:07.27,0:21:08.41,Default,,0,0,0,,In Swift, I might start with
Dialogue: 0,0:21:08.41,0:21:08.99,Default,,0,0,0,,something like this.
Dialogue: 0,0:21:10.12,0:21:12.00,Default,,0,0,0,,But we asked the UIKit framework
Dialogue: 0,0:21:12.18,0:21:13.41,Default,,0,0,0,,to give us the label's text.
Dialogue: 0,0:21:14.25,0:21:15.78,Default,,0,0,0,,So, here's what the interface to
Dialogue: 0,0:21:15.78,0:21:16.89,Default,,0,0,0,,that looks like.
Dialogue: 0,0:21:17.90,0:21:19.42,Default,,0,0,0,,But remember, that this is just
Dialogue: 0,0:21:19.42,0:21:20.41,Default,,0,0,0,,a generated interface.
Dialogue: 0,0:21:20.80,0:21:22.35,Default,,0,0,0,,UILabel is implemented in
Dialogue: 0,0:21:22.35,0:21:23.02,Default,,0,0,0,,Objective-C.
Dialogue: 0,0:21:24.68,0:21:26.06,Default,,0,0,0,,And so, even though our variable
Dialogue: 0,0:21:26.06,0:21:27.85,Default,,0,0,0,,text is a Swift string, the
Dialogue: 0,0:21:27.85,0:21:29.31,Default,,0,0,0,,backing store is actually an
Dialogue: 0,0:21:29.43,0:21:30.89,Default,,0,0,0,,NSString and it's bridged from
Dialogue: 0,0:21:30.89,0:21:31.44,Default,,0,0,0,,Objective-C.
Dialogue: 0,0:21:32.04,0:21:34.66,Default,,0,0,0,,And so, now let's take a look at
Dialogue: 0,0:21:34.66,0:21:35.62,Default,,0,0,0,,what happens when we ask for
Dialogue: 0,0:21:35.62,0:21:36.89,Default,,0,0,0,,that label's text from Swift.
Dialogue: 0,0:21:38.27,0:21:39.41,Default,,0,0,0,,The NSString form the framework
Dialogue: 0,0:21:39.41,0:21:41.19,Default,,0,0,0,,is a reference type, while
Dialogue: 0,0:21:41.25,0:21:42.44,Default,,0,0,0,,Swift's string is a value type.
Dialogue: 0,0:21:43.11,0:21:44.30,Default,,0,0,0,,And so, when we ask the
Dialogue: 0,0:21:44.35,0:21:45.67,Default,,0,0,0,,framework for that NSString,
Dialogue: 0,0:21:46.07,0:21:47.16,Default,,0,0,0,,it's wrapped in the value type
Dialogue: 0,0:21:47.30,0:21:48.12,Default,,0,0,0,,when it crosses the Swift
Dialogue: 0,0:21:48.15,0:21:48.45,Default,,0,0,0,,bridge.
Dialogue: 0,0:21:49.95,0:21:50.77,Default,,0,0,0,,But we don't know what might
Dialogue: 0,0:21:50.77,0:21:52.37,Default,,0,0,0,,happen to that original NSString
Dialogue: 0,0:21:52.55,0:21:53.16,Default,,0,0,0,,after bridging.
Dialogue: 0,0:21:53.66,0:21:55.13,Default,,0,0,0,,And so, to preserve Swift value
Dialogue: 0,0:21:55.19,0:21:56.92,Default,,0,0,0,,semantics, the framework has to
Dialogue: 0,0:21:56.92,0:21:57.81,Default,,0,0,0,,make a copy of it.
Dialogue: 0,0:21:58.91,0:22:00.20,Default,,0,0,0,,Now luckily, in this case, the
Dialogue: 0,0:22:00.20,0:22:02.00,Default,,0,0,0,,original NSString is immutable.
Dialogue: 0,0:22:02.35,0:22:03.61,Default,,0,0,0,,And so, when the framework makes
Dialogue: 0,0:22:03.61,0:22:05.20,Default,,0,0,0,,that copy, it's optimized to
Dialogue: 0,0:22:05.20,0:22:06.58,Default,,0,0,0,,just retain, which is pretty
Dialogue: 0,0:22:06.58,0:22:06.82,Default,,0,0,0,,cheap.
Dialogue: 0,0:22:06.82,0:22:07.74,Default,,0,0,0,,Since, it's just incrementing
Dialogue: 0,0:22:07.74,0:22:08.83,Default,,0,0,0,,the ref count.
Dialogue: 0,0:22:11.70,0:22:13.12,Default,,0,0,0,,But even if we did make a full
Dialogue: 0,0:22:13.12,0:22:14.49,Default,,0,0,0,,copy of this string, let's go
Dialogue: 0,0:22:14.49,0:22:15.75,Default,,0,0,0,,back to our graph and evaluate
Dialogue: 0,0:22:15.75,0:22:16.06,Default,,0,0,0,,the impact.
Dialogue: 0,0:22:16.06,0:22:18.87,Default,,0,0,0,,Now in this case, the original
Dialogue: 0,0:22:18.87,0:22:20.34,Default,,0,0,0,,string consisted of seven ASCII
Dialogue: 0,0:22:20.34,0:22:20.80,Default,,0,0,0,,characters.
Dialogue: 0,0:22:21.07,0:22:22.85,Default,,0,0,0,,So, even if we made a full copy
Dialogue: 0,0:22:23.85,0:22:24.58,Default,,0,0,0,,the impact would be pretty
Dialogue: 0,0:22:24.58,0:22:24.79,Default,,0,0,0,,small.
Dialogue: 0,0:22:26.00,0:22:27.35,Default,,0,0,0,,Now, most of the time UILabels
Dialogue: 0,0:22:27.35,0:22:28.51,Default,,0,0,0,,are going to consist of short
Dialogue: 0,0:22:28.51,0:22:29.77,Default,,0,0,0,,strings that are used for UI
Dialogue: 0,0:22:29.77,0:22:30.57,Default,,0,0,0,,display purposes.
Dialogue: 0,0:22:31.27,0:22:32.74,Default,,0,0,0,,And so, you're probably not
Dialogue: 0,0:22:32.74,0:22:33.62,Default,,0,0,0,,going to be fetching their text
Dialogue: 0,0:22:33.62,0:22:34.34,Default,,0,0,0,,very frequently.
Dialogue: 0,0:22:34.71,0:22:36.16,Default,,0,0,0,,And in most cases, you'll end up
Dialogue: 0,0:22:36.16,0:22:37.24,Default,,0,0,0,,down her in quadrant three.
Dialogue: 0,0:22:37.78,0:22:39.43,Default,,0,0,0,,So, the bridging copies aren't
Dialogue: 0,0:22:39.43,0:22:42.35,Default,,0,0,0,,going to be a big deal.
Dialogue: 0,0:22:43.12,0:22:43.98,Default,,0,0,0,,But now, let's take a look at
Dialogue: 0,0:22:43.98,0:22:45.80,Default,,0,0,0,,what happens in a larger scale
Dialogue: 0,0:22:45.80,0:22:47.28,Default,,0,0,0,,example, like in NSText storage.
Dialogue: 0,0:22:47.69,0:22:49.46,Default,,0,0,0,,NSText storage is the
Dialogue: 0,0:22:49.56,0:22:51.27,Default,,0,0,0,,fundamental storage mechanism
Dialogue: 0,0:22:51.27,0:22:51.96,Default,,0,0,0,,behind TextKit.
Dialogue: 0,0:22:52.50,0:22:53.76,Default,,0,0,0,,It's used to power text views
Dialogue: 0,0:22:53.76,0:22:54.77,Default,,0,0,0,,like the one you see here, in
Dialogue: 0,0:22:54.77,0:22:56.02,Default,,0,0,0,,both Cocoa and Cocoa Touch.
Dialogue: 0,0:22:57.14,0:22:58.53,Default,,0,0,0,,And so, if you're working with
Dialogue: 0,0:22:58.53,0:22:59.75,Default,,0,0,0,,text views, you're going to want
Dialogue: 0,0:22:59.75,0:23:00.95,Default,,0,0,0,,to be able to access the text
Dialogue: 0,0:23:00.95,0:23:01.80,Default,,0,0,0,,inside that text storage.
Dialogue: 0,0:23:01.80,0:23:03.45,Default,,0,0,0,,And so, here's what that looks
Dialogue: 0,0:23:03.45,0:23:03.97,Default,,0,0,0,,like in Swift.
Dialogue: 0,0:23:07.62,0:23:09.02,Default,,0,0,0,,Here's the generated interface.
Dialogue: 0,0:23:10.26,0:23:13.22,Default,,0,0,0,,And here's the Objective-C
Dialogue: 0,0:23:13.22,0:23:13.60,Default,,0,0,0,,interface.
Dialogue: 0,0:23:14.97,0:23:16.68,Default,,0,0,0,,But notice here, the NSText
Dialogue: 0,0:23:16.68,0:23:17.95,Default,,0,0,0,,storage is a subclass of
Dialogue: 0,0:23:18.05,0:23:19.58,Default,,0,0,0,,NSMutableAttributedString.
Dialogue: 0,0:23:20.25,0:23:22.86,Default,,0,0,0,,Now, since NSText storage is
Dialogue: 0,0:23:22.86,0:23:24.00,Default,,0,0,0,,intended for working with text
Dialogue: 0,0:23:24.00,0:23:25.50,Default,,0,0,0,,editing, it's reasonable to
Dialogue: 0,0:23:25.50,0:23:27.35,Default,,0,0,0,,expect the contents of that text
Dialogue: 0,0:23:27.35,0:23:28.28,Default,,0,0,0,,storage to be mutated,
Dialogue: 0,0:23:28.28,0:23:28.67,Default,,0,0,0,,frequently.
Dialogue: 0,0:23:29.98,0:23:31.32,Default,,0,0,0,,And the contents of the text
Dialogue: 0,0:23:31.32,0:23:32.38,Default,,0,0,0,,storage could also be a very
Dialogue: 0,0:23:32.38,0:23:32.99,Default,,0,0,0,,long string.
Dialogue: 0,0:23:32.99,0:23:34.35,Default,,0,0,0,,It could be megabytes or even
Dialogue: 0,0:23:34.35,0:23:35.26,Default,,0,0,0,,gigabytes in size.
Dialogue: 0,0:23:36.23,0:23:37.49,Default,,0,0,0,,And so, for efficiency, the
Dialogue: 0,0:23:37.49,0:23:38.99,Default,,0,0,0,,framework only keeps the mutable
Dialogue: 0,0:23:38.99,0:23:39.50,Default,,0,0,0,,string around.
Dialogue: 0,0:23:39.91,0:23:41.01,Default,,0,0,0,,So, when you ask for that string
Dialogue: 0,0:23:41.01,0:23:42.49,Default,,0,0,0,,property on the text storage,
Dialogue: 0,0:23:43.20,0:23:44.29,Default,,0,0,0,,what you'll get is going to be
Dialogue: 0,0:23:44.29,0:23:45.72,Default,,0,0,0,,backed by an NSString that
Dialogue: 0,0:23:45.72,0:23:47.11,Default,,0,0,0,,refers to the mutable string.
Dialogue: 0,0:23:47.59,0:23:50.89,Default,,0,0,0,,And so now, once again, we'll
Dialogue: 0,0:23:50.89,0:23:51.88,Default,,0,0,0,,take a look at what happens when
Dialogue: 0,0:23:51.88,0:23:53.06,Default,,0,0,0,,we ask for that string property
Dialogue: 0,0:23:53.06,0:23:53.52,Default,,0,0,0,,from Swift.
Dialogue: 0,0:23:54.04,0:23:57.35,Default,,0,0,0,,Just as before, it'll be wrapped
Dialogue: 0,0:23:57.35,0:23:59.09,Default,,0,0,0,,in the value type when it
Dialogue: 0,0:23:59.15,0:24:00.23,Default,,0,0,0,,crosses the bridge, because it's
Dialogue: 0,0:24:00.23,0:24:00.79,Default,,0,0,0,,an NSString.
Dialogue: 0,0:24:00.94,0:24:02.27,Default,,0,0,0,,And the framework is going to
Dialogue: 0,0:24:02.27,0:24:02.84,Default,,0,0,0,,make a copy.
Dialogue: 0,0:24:04.02,0:24:05.45,Default,,0,0,0,,But unlike in the UILabel case,
Dialogue: 0,0:24:05.66,0:24:07.42,Default,,0,0,0,,here the underlying NSString is
Dialogue: 0,0:24:07.42,0:24:08.42,Default,,0,0,0,,actually mutable.
Dialogue: 0,0:24:09.33,0:24:10.14,Default,,0,0,0,,So, this copy could be
Dialogue: 0,0:24:10.14,0:24:10.65,Default,,0,0,0,,expensive.
Dialogue: 0,0:24:11.83,0:24:13.07,Default,,0,0,0,,And as we said previously, text
Dialogue: 0,0:24:13.07,0:24:14.53,Default,,0,0,0,,storage is much more likely to
Dialogue: 0,0:24:14.53,0:24:16.19,Default,,0,0,0,,contain long length strings.
Dialogue: 0,0:24:16.83,0:24:17.86,Default,,0,0,0,,It could be megabytes or even
Dialogue: 0,0:24:17.86,0:24:18.91,Default,,0,0,0,,gigabytes in size, so
Dialogue: 0,0:24:18.91,0:24:20.27,Default,,0,0,0,,potentially this copy could be
Dialogue: 0,0:24:20.27,0:24:21.08,Default,,0,0,0,,very expensive.
Dialogue: 0,0:24:21.59,0:24:24.42,Default,,0,0,0,,But now, let's take a look at
Dialogue: 0,0:24:24.42,0:24:25.53,Default,,0,0,0,,what happens when we ask for the
Dialogue: 0,0:24:25.53,0:24:26.60,Default,,0,0,0,,mutable string property.
Dialogue: 0,0:24:28.26,0:24:30.05,Default,,0,0,0,,NSMutableString is a reference
Dialogue: 0,0:24:30.05,0:24:31.01,Default,,0,0,0,,type that is not bridged.
Dialogue: 0,0:24:32.14,0:24:33.15,Default,,0,0,0,,And because it's not bridged,
Dialogue: 0,0:24:33.38,0:24:33.90,Default,,0,0,0,,there's no copy.
Dialogue: 0,0:24:34.58,0:24:35.49,Default,,0,0,0,,So, we avoid the cost of the
Dialogue: 0,0:24:35.49,0:24:35.95,Default,,0,0,0,,copy, here.
Dialogue: 0,0:24:37.50,0:24:38.99,Default,,0,0,0,,This situation results from a
Dialogue: 0,0:24:38.99,0:24:40.53,Default,,0,0,0,,mismatch between Swift's value
Dialogue: 0,0:24:40.53,0:24:42.07,Default,,0,0,0,,semantics and the design of
Dialogue: 0,0:24:42.07,0:24:43.69,Default,,0,0,0,,NSText storage, which needs to
Dialogue: 0,0:24:43.69,0:24:44.82,Default,,0,0,0,,use reference semantics for
Dialogue: 0,0:24:44.82,0:24:46.01,Default,,0,0,0,,performant management of large
Dialogue: 0,0:24:46.01,0:24:46.69,Default,,0,0,0,,amounts of text.
Dialogue: 0,0:24:47.88,0:24:48.97,Default,,0,0,0,,So, we're working on solving
Dialogue: 0,0:24:48.97,0:24:49.95,Default,,0,0,0,,this problem, here at Apple.
Dialogue: 0,0:24:49.95,0:24:51.16,Default,,0,0,0,,But we don't quite have the
Dialogue: 0,0:24:51.16,0:24:51.78,Default,,0,0,0,,solution, yet.
Dialogue: 0,0:24:51.93,0:24:52.83,Default,,0,0,0,,So, you should be aware that
Dialogue: 0,0:24:52.83,0:24:53.58,Default,,0,0,0,,this is something that can
Dialogue: 0,0:24:53.58,0:24:54.01,Default,,0,0,0,,happen.
Dialogue: 0,0:24:54.41,0:24:55.51,Default,,0,0,0,,And if you're working with very
Dialogue: 0,0:24:55.51,0:24:56.63,Default,,0,0,0,,large amounts of text and the
Dialogue: 0,0:24:56.63,0:24:58.32,Default,,0,0,0,,text storage, use MutableString
Dialogue: 0,0:24:58.32,0:24:59.91,Default,,0,0,0,,to access it, even if you don't
Dialogue: 0,0:24:59.91,0:25:01.29,Default,,0,0,0,,plan on mutating it.
Dialogue: 0,0:25:02.80,0:25:04.09,Default,,0,0,0,,But before you go bananas
Dialogue: 0,0:25:04.15,0:25:05.03,Default,,0,0,0,,changing all of your string
Dialogue: 0,0:25:05.03,0:25:06.33,Default,,0,0,0,,accesses to MutableString, let's
Dialogue: 0,0:25:06.33,0:25:07.30,Default,,0,0,0,,consider that graph, again.
Dialogue: 0,0:25:08.20,0:25:09.01,Default,,0,0,0,,Now, due to the nature of the
Dialogue: 0,0:25:09.01,0:25:09.88,Default,,0,0,0,,text storage API, you're
Dialogue: 0,0:25:10.04,0:25:11.28,Default,,0,0,0,,probably going to be up here on
Dialogue: 0,0:25:11.28,0:25:12.91,Default,,0,0,0,,the top half, in terms of
Dialogue: 0,0:25:12.91,0:25:13.39,Default,,0,0,0,,frequency.
Dialogue: 0,0:25:13.73,0:25:14.59,Default,,0,0,0,,So then, the real question
Dialogue: 0,0:25:14.59,0:25:16.69,Default,,0,0,0,,becomes, how much text do you
Dialogue: 0,0:25:16.69,0:25:18.43,Default,,0,0,0,,expect that storage to contain?
Dialogue: 0,0:25:19.03,0:25:20.63,Default,,0,0,0,,A kilobyte?
Dialogue: 0,0:25:20.63,0:25:22.69,Default,,0,0,0,,Might be in here, it's not too
Dialogue: 0,0:25:22.69,0:25:22.99,Default,,0,0,0,,bad.
Dialogue: 0,0:25:22.99,0:25:24.24,Default,,0,0,0,,If you use the string property,
Dialogue: 0,0:25:24.24,0:25:25.78,Default,,0,0,0,,that's probably fine.
Dialogue: 0,0:25:26.70,0:25:27.58,Default,,0,0,0,,One megabyte?
Dialogue: 0,0:25:27.63,0:25:29.39,Default,,0,0,0,,You're starting to move into
Dialogue: 0,0:25:29.39,0:25:30.51,Default,,0,0,0,,first quadrant territory, here.
Dialogue: 0,0:25:30.51,0:25:31.73,Default,,0,0,0,,And you may want to consider
Dialogue: 0,0:25:31.73,0:25:32.66,Default,,0,0,0,,using MutableString.
Dialogue: 0,0:25:34.02,0:25:34.71,Default,,0,0,0,,One gigabyte?
Dialogue: 0,0:25:34.71,0:25:36.37,Default,,0,0,0,,I really hope you're using
Dialogue: 0,0:25:36.37,0:25:36.94,Default,,0,0,0,,MutableString.
Dialogue: 0,0:25:39.13,0:25:40.36,Default,,0,0,0,,And as I said, we're working on
Dialogue: 0,0:25:40.36,0:25:41.41,Default,,0,0,0,,fixing this on our end, here.
Dialogue: 0,0:25:41.73,0:25:42.61,Default,,0,0,0,,So, keep an eye out for it in
Dialogue: 0,0:25:42.61,0:25:43.28,Default,,0,0,0,,future releases.
Dialogue: 0,0:25:43.92,0:25:46.07,Default,,0,0,0,,And so, now that we have a
Dialogue: 0,0:25:46.07,0:25:47.22,Default,,0,0,0,,better understanding of string
Dialogue: 0,0:25:47.22,0:25:48.77,Default,,0,0,0,,bridging, let's move on to
Dialogue: 0,0:25:48.77,0:25:48.98,Default,,0,0,0,,ranges.
Dialogue: 0,0:25:52.54,0:25:53.34,Default,,0,0,0,,Now, I don't know about the rest
Dialogue: 0,0:25:53.34,0:25:54.29,Default,,0,0,0,,of you, but this is certainly
Dialogue: 0,0:25:54.29,0:25:55.50,Default,,0,0,0,,how I feel when I have to work
Dialogue: 0,0:25:55.50,0:25:56.79,Default,,0,0,0,,with ranges and string index in
Dialogue: 0,0:25:56.79,0:25:57.15,Default,,0,0,0,,Swift.
Dialogue: 0,0:25:57.62,0:25:59.65,Default,,0,0,0,,And to see why, let's consider a
Dialogue: 0,0:25:59.65,0:26:01.81,Default,,0,0,0,,string containing the face palm
Dialogue: 0,0:26:01.81,0:26:03.21,Default,,0,0,0,,emoji, which coincidentally,
Dialogue: 0,0:26:03.21,0:26:04.24,Default,,0,0,0,,looks a little bit like me.
Dialogue: 0,0:26:05.48,0:26:07.44,Default,,0,0,0,,So, here's our string.
Dialogue: 0,0:26:07.80,0:26:09.05,Default,,0,0,0,,It's a length one in terms of
Dialogue: 0,0:26:09.05,0:26:09.80,Default,,0,0,0,,perceived characters.
Dialogue: 0,0:26:10.78,0:26:12.07,Default,,0,0,0,,But this one character consists
Dialogue: 0,0:26:12.07,0:26:13.22,Default,,0,0,0,,of three individual components.
Dialogue: 0,0:26:13.68,0:26:15.04,Default,,0,0,0,,We have this jaundice face palm,
Dialogue: 0,0:26:15.95,0:26:17.42,Default,,0,0,0,,a skin tone modifier, presumable
Dialogue: 0,0:26:17.42,0:26:18.99,Default,,0,0,0,,to get rid of the jaundice, and
Dialogue: 0,0:26:19.15,0:26:20.19,Default,,0,0,0,,a gender modifier.
Dialogue: 0,0:26:21.25,0:26:22.34,Default,,0,0,0,,But these visual components
Dialogue: 0,0:26:22.34,0:26:23.31,Default,,0,0,0,,don't tell the whole story,
Dialogue: 0,0:26:23.41,0:26:23.56,Default,,0,0,0,,either.
Dialogue: 0,0:26:24.01,0:26:25.02,Default,,0,0,0,,There are also, two control
Dialogue: 0,0:26:25.02,0:26:25.95,Default,,0,0,0,,characters in this string.
Dialogue: 0,0:26:26.04,0:26:27.56,Default,,0,0,0,,A zero width joiner and a
Dialogue: 0,0:26:27.56,0:26:28.47,Default,,0,0,0,,variation selector.
Dialogue: 0,0:26:28.47,0:26:30.21,Default,,0,0,0,,And to see this, we'll look at
Dialogue: 0,0:26:30.21,0:26:31.60,Default,,0,0,0,,the Unicode Scalar values that
Dialogue: 0,0:26:31.60,0:26:32.28,Default,,0,0,0,,make up the string.
Dialogue: 0,0:26:32.48,0:26:33.40,Default,,0,0,0,,Now, if you're not familiar with
Dialogue: 0,0:26:33.40,0:26:35.22,Default,,0,0,0,,the term, a Unicode Scalar value
Dialogue: 0,0:26:35.22,0:26:37.79,Default,,0,0,0,,is a 21-bit number that uniquely
Dialogue: 0,0:26:37.79,0:26:39.17,Default,,0,0,0,,represents a Unicode character.
Dialogue: 0,0:26:39.92,0:26:41.10,Default,,0,0,0,,And so, here are the Unicode
Dialogue: 0,0:26:41.10,0:26:42.14,Default,,0,0,0,,Scalar values that make up the
Dialogue: 0,0:26:42.14,0:26:43.79,Default,,0,0,0,,string, and the names that are
Dialogue: 0,0:26:43.79,0:26:45.31,Default,,0,0,0,,associated with those values.
Dialogue: 0,0:26:45.41,0:26:47.03,Default,,0,0,0,,So, if you look at the string
Dialogue: 0,0:26:47.03,0:26:48.19,Default,,0,0,0,,from a Unicode Scalar point of
Dialogue: 0,0:26:48.19,0:26:49.54,Default,,0,0,0,,view, it's actually made up of
Dialogue: 0,0:26:49.54,0:26:50.64,Default,,0,0,0,,five different values, and it
Dialogue: 0,0:26:50.64,0:26:51.53,Default,,0,0,0,,has length five.
Dialogue: 0,0:26:52.11,0:26:54.45,Default,,0,0,0,,Now, this is all fine and dandy
Dialogue: 0,0:26:54.45,0:26:55.49,Default,,0,0,0,,if you're working purely with
Dialogue: 0,0:26:55.49,0:26:56.09,Default,,0,0,0,,Swift's string API.
Dialogue: 0,0:26:56.89,0:26:57.71,Default,,0,0,0,,But if you're using
Dialogue: 0,0:26:57.71,0:26:59.79,Default,,0,0,0,,NSAttributedString, or any API
Dialogue: 0,0:26:59.79,0:27:02.24,Default,,0,0,0,,really, that uses NSRange, these
Dialogue: 0,0:27:02.24,0:27:03.90,Default,,0,0,0,,think in terms of UTF-16.
Dialogue: 0,0:27:04.55,0:27:05.43,Default,,0,0,0,,And so, if you look at the
Dialogue: 0,0:27:05.43,0:27:06.91,Default,,0,0,0,,UTF-16 view of this string, it
Dialogue: 0,0:27:06.91,0:27:08.06,Default,,0,0,0,,actually consists of seven
Dialogue: 0,0:27:08.06,0:27:08.97,Default,,0,0,0,,values and it's of length,
Dialogue: 0,0:27:09.22,0:27:09.55,Default,,0,0,0,,seven.
Dialogue: 0,0:27:10.47,0:27:11.23,Default,,0,0,0,,Now this can get really
Dialogue: 0,0:27:11.23,0:27:12.40,Default,,0,0,0,,confusing, and it makes working
Dialogue: 0,0:27:12.40,0:27:13.86,Default,,0,0,0,,with NSRange and range of string
Dialogue: 0,0:27:13.86,0:27:14.82,Default,,0,0,0,,index a little bit painful.
Dialogue: 0,0:27:14.82,0:27:17.81,Default,,0,0,0,,So, let's clear up some of this
Dialogue: 0,0:27:17.81,0:27:18.91,Default,,0,0,0,,confusion and talk about how to
Dialogue: 0,0:27:18.91,0:27:20.39,Default,,0,0,0,,work with NSAttributedString,
Dialogue: 0,0:27:20.39,0:27:21.25,Default,,0,0,0,,which makes heavy use of
Dialogue: 0,0:27:21.37,0:27:21.82,Default,,0,0,0,,NSRange.
Dialogue: 0,0:27:22.27,0:27:24.34,Default,,0,0,0,,So, let's say I have a string
Dialogue: 0,0:27:24.34,0:27:26.15,Default,,0,0,0,,like this.
Dialogue: 0,0:27:26.15,0:27:27.33,Default,,0,0,0,,And I want to create an
Dialogue: 0,0:27:27.33,0:27:28.61,Default,,0,0,0,,attributed string with it, and
Dialogue: 0,0:27:28.61,0:27:29.82,Default,,0,0,0,,change the background color of
Dialogue: 0,0:27:29.82,0:27:30.97,Default,,0,0,0,,one of the characters to green.
Dialogue: 0,0:27:31.57,0:27:35.39,Default,,0,0,0,,Now, this is complicated enough,
Dialogue: 0,0:27:35.39,0:27:36.92,Default,,0,0,0,,that even I forget how to do it,
Dialogue: 0,0:27:36.92,0:27:37.30,Default,,0,0,0,,sometimes.
Dialogue: 0,0:27:37.37,0:27:38.02,Default,,0,0,0,,But don't tell anyone.
Dialogue: 0,0:27:38.46,0:27:40.65,Default,,0,0,0,,So, I might have to look it up
Dialogue: 0,0:27:40.65,0:27:41.18,Default,,0,0,0,,on the internet.
Dialogue: 0,0:27:41.18,0:27:42.49,Default,,0,0,0,,And then, after I do that I
Dialogue: 0,0:27:42.49,0:27:43.49,Default,,0,0,0,,might end up with some code that
Dialogue: 0,0:27:43.49,0:27:44.01,Default,,0,0,0,,looks like this.
Dialogue: 0,0:27:45.25,0:27:46.22,Default,,0,0,0,,it's annoying, because I have to
Dialogue: 0,0:27:46.22,0:27:47.26,Default,,0,0,0,,keep flipping back and forth
Dialogue: 0,0:27:47.26,0:27:49.18,Default,,0,0,0,,between this string API and this
Dialogue: 0,0:27:49.18,0:27:50.83,Default,,0,0,0,,NSString API, right.
Dialogue: 0,0:27:51.06,0:27:52.21,Default,,0,0,0,,I have to take my original
Dialogue: 0,0:27:52.21,0:27:53.23,Default,,0,0,0,,string and then, create an
Dialogue: 0,0:27:53.34,0:27:54.38,Default,,0,0,0,,NSString from it, and then
Dialogue: 0,0:27:54.38,0:27:55.90,Default,,0,0,0,,calculate the NSRange using the
Dialogue: 0,0:27:55.90,0:27:56.34,Default,,0,0,0,,NSString.
Dialogue: 0,0:27:56.75,0:27:58.26,Default,,0,0,0,,But then, I have to go back and
Dialogue: 0,0:27:58.30,0:27:58.69,Default,,0,0,0,,create my
Dialogue: 0,0:27:58.86,0:28:00.28,Default,,0,0,0,,NSMutableAttributedString using
Dialogue: 0,0:28:00.28,0:28:01.25,Default,,0,0,0,,the original string, again.
Dialogue: 0,0:28:01.86,0:28:03.59,Default,,0,0,0,,Yuck. I don't like to do this.
Dialogue: 0,0:28:04.33,0:28:06.71,Default,,0,0,0,,Nobody likes to do this.
Dialogue: 0,0:28:06.92,0:28:07.90,Default,,0,0,0,,The good news is that you won't
Dialogue: 0,0:28:07.90,0:28:08.70,Default,,0,0,0,,have to do this, anymore,
Dialogue: 0,0:28:09.09,0:28:10.19,Default,,0,0,0,,because in Swift 4, we're
Dialogue: 0,0:28:10.19,0:28:11.61,Default,,0,0,0,,introducing new initializers for
Dialogue: 0,0:28:11.78,0:28:12.79,Default,,0,0,0,,NSRange and Range.
Dialogue: 0,0:28:13.58,0:28:14.65,Default,,0,0,0,,And so, when we use these new
Dialogue: 0,0:28:14.65,0:28:15.29,Default,,0,0,0,,initializers.
Dialogue: 0,0:28:15.51,0:28:16.83,Default,,0,0,0,,Thank you.
Dialogue: 0,0:28:17.65,0:28:20.39,Default,,0,0,0,,That same example trims down to
Dialogue: 0,0:28:20.39,0:28:21.84,Default,,0,0,0,,just this and it's a lot easier
Dialogue: 0,0:28:21.84,0:28:23.51,Default,,0,0,0,,to read, write, and remember.
Dialogue: 0,0:28:24.09,0:28:25.80,Default,,0,0,0,,So, the new NSRange initializer
Dialogue: 0,0:28:25.90,0:28:27.27,Default,,0,0,0,,that's being used here, it takes
Dialogue: 0,0:28:27.27,0:28:28.72,Default,,0,0,0,,a range and the Swift string and
Dialogue: 0,0:28:28.72,0:28:29.92,Default,,0,0,0,,it uses it to create the
Dialogue: 0,0:28:29.92,0:28:30.37,Default,,0,0,0,,NSRange.
Dialogue: 0,0:28:30.37,0:28:31.20,Default,,0,0,0,,And you can just pass that
Dialogue: 0,0:28:31.20,0:28:32.14,Default,,0,0,0,,directly into the
Dialogue: 0,0:28:32.14,0:28:33.76,Default,,0,0,0,,attributedString API.
Dialogue: 0,0:28:35.18,0:28:36.46,Default,,0,0,0,,But now, let's take a look at
Dialogue: 0,0:28:36.46,0:28:37.26,Default,,0,0,0,,the conversion in the other
Dialogue: 0,0:28:37.26,0:28:38.91,Default,,0,0,0,,direction from NSRange to Range
Dialogue: 0,0:28:38.91,0:28:39.42,Default,,0,0,0,,and string index.
Dialogue: 0,0:28:39.55,0:28:42.60,Default,,0,0,0,,To look at this simple example,
Dialogue: 0,0:28:42.69,0:28:43.94,Default,,0,0,0,,let's say we have some html like
Dialogue: 0,0:28:43.94,0:28:45.34,Default,,0,0,0,,this, and we want to print out
Dialogue: 0,0:28:45.34,0:28:45.97,Default,,0,0,0,,all the start tags.
Dialogue: 0,0:28:46.95,0:28:48.06,Default,,0,0,0,,And so, in order to do this,
Dialogue: 0,0:28:48.83,0:28:50.20,Default,,0,0,0,,we'll use NSRegularExpression to
Dialogue: 0,0:28:50.20,0:28:51.45,Default,,0,0,0,,find the tags we want, and then
Dialogue: 0,0:28:51.45,0:28:52.30,Default,,0,0,0,,append them to a string.
Dialogue: 0,0:28:52.69,0:28:54.84,Default,,0,0,0,,Sounds reasonable, right?
Dialogue: 0,0:28:55.59,0:28:57.20,Default,,0,0,0,,But the NSRegularExpression API
Dialogue: 0,0:28:57.28,0:28:58.77,Default,,0,0,0,,gives me NS ranges back from my
Dialogue: 0,0:28:58.77,0:28:59.25,Default,,0,0,0,,match groups.
Dialogue: 0,0:28:59.47,0:29:00.62,Default,,0,0,0,,And I need ranges of string
Dialogue: 0,0:29:00.62,0:29:02.07,Default,,0,0,0,,index to be able to append to my
Dialogue: 0,0:29:02.07,0:29:02.61,Default,,0,0,0,,Swift string.
Dialogue: 0,0:29:03.16,0:29:05.06,Default,,0,0,0,,And so, before these new
Dialogue: 0,0:29:05.06,0:29:06.95,Default,,0,0,0,,initializers were available, we
Dialogue: 0,0:29:06.95,0:29:07.85,Default,,0,0,0,,might have use something like
Dialogue: 0,0:29:07.85,0:29:09.37,Default,,0,0,0,,this to convert from NSRange to
Dialogue: 0,0:29:09.37,0:29:10.07,Default,,0,0,0,,range a string index.
Dialogue: 0,0:29:11.16,0:29:12.08,Default,,0,0,0,,And remember that face palm
Dialogue: 0,0:29:12.08,0:29:13.02,Default,,0,0,0,,emoji we talked about a few
Dialogue: 0,0:29:13.02,0:29:14.48,Default,,0,0,0,,minutes ago, and how it was of
Dialogue: 0,0:29:14.48,0:29:15.75,Default,,0,0,0,,length seven, in terms of
Dialogue: 0,0:29:15.75,0:29:16.39,Default,,0,0,0,,UTF-16?
Dialogue: 0,0:29:16.50,0:29:17.63,Default,,0,0,0,,And length five in terms of
Dialogue: 0,0:29:17.63,0:29:18.25,Default,,0,0,0,,Unicode Scalar?
Dialogue: 0,0:29:18.66,0:29:19.53,Default,,0,0,0,,Well, this code is a little bit
Dialogue: 0,0:29:19.53,0:29:21.48,Default,,0,0,0,,complicated, because it's doing
Dialogue: 0,0:29:21.48,0:29:23.85,Default,,0,0,0,,that conversion from UTF-16 to
Dialogue: 0,0:29:23.85,0:29:24.55,Default,,0,0,0,,Unicode Scalar.
Dialogue: 0,0:29:25.09,0:29:27.37,Default,,0,0,0,,But now, with these new array
Dialogue: 0,0:29:27.40,0:29:28.30,Default,,0,0,0,,initializers, you don't have to
Dialogue: 0,0:29:28.30,0:29:29.01,Default,,0,0,0,,do that anymore, either.
Dialogue: 0,0:29:29.82,0:29:30.98,Default,,0,0,0,,We can just take the NSRange we
Dialogue: 0,0:29:30.98,0:29:31.94,Default,,0,0,0,,get back from the match group
Dialogue: 0,0:29:32.37,0:29:34.13,Default,,0,0,0,,and use that to create our range
Dialogue: 0,0:29:34.13,0:29:35.35,Default,,0,0,0,,of string index, and append it
Dialogue: 0,0:29:35.35,0:29:36.12,Default,,0,0,0,,directly to our string.
Dialogue: 0,0:29:36.85,0:29:38.01,Default,,0,0,0,,This is a lot more convenient
Dialogue: 0,0:29:38.15,0:29:39.04,Default,,0,0,0,,and it's a lot easier to use.
Dialogue: 0,0:29:39.93,0:29:40.89,Default,,0,0,0,,So, these new initializers are
Dialogue: 0,0:29:40.89,0:29:42.49,Default,,0,0,0,,really great, and I hope that
Dialogue: 0,0:29:42.49,0:29:43.60,Default,,0,0,0,,you use them for all your Range
Dialogue: 0,0:29:43.66,0:29:44.62,Default,,0,0,0,,and NSRange conversions.
Dialogue: 0,0:29:45.04,0:29:47.04,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:29:47.06,0:29:47.73,Default,,0,0,0,,Thank you.
Dialogue: 0,0:29:48.02,0:29:49.92,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:29:49.92,0:29:51.24,Default,,0,0,0,,So, that wraps up ranges.
Dialogue: 0,0:29:51.27,0:29:52.52,Default,,0,0,0,,Let's move on to text layout and
Dialogue: 0,0:29:52.52,0:29:52.97,Default,,0,0,0,,rendering.
Dialogue: 0,0:29:53.53,0:29:55.53,Default,,0,0,0,,Text is hard.
Dialogue: 0,0:29:56.59,0:29:57.71,Default,,0,0,0,,It seems simple on the surface.
Dialogue: 0,0:29:58.23,0:29:59.37,Default,,0,0,0,,Because everyone knows what text
Dialogue: 0,0:29:59.37,0:29:59.57,Default,,0,0,0,,is.
Dialogue: 0,0:30:00.11,0:30:01.09,Default,,0,0,0,,Everyone encounters it on a
Dialogue: 0,0:30:01.09,0:30:01.74,Default,,0,0,0,,daily basis.
Dialogue: 0,0:30:02.25,0:30:04.07,Default,,0,0,0,,It's familiar and it's ordinary.
Dialogue: 0,0:30:04.77,0:30:06.07,Default,,0,0,0,,And as a result, there is a
Dialogue: 0,0:30:06.07,0:30:07.45,Default,,0,0,0,,tendency to implicitly assume
Dialogue: 0,0:30:07.45,0:30:08.00,Default,,0,0,0,,that it's easy.
Dialogue: 0,0:30:09.26,0:30:10.32,Default,,0,0,0,,But it's not easy.
Dialogue: 0,0:30:10.99,0:30:12.45,Default,,0,0,0,,Text poses some real performance
Dialogue: 0,0:30:12.45,0:30:13.45,Default,,0,0,0,,challenges, because of its
Dialogue: 0,0:30:13.45,0:30:14.34,Default,,0,0,0,,ubiquity in scale.
Dialogue: 0,0:30:14.95,0:30:17.39,Default,,0,0,0,,So, think about this.
Dialogue: 0,0:30:17.66,0:30:20.03,Default,,0,0,0,,We ship 40 localizations for
Dialogue: 0,0:30:20.03,0:30:24.39,Default,,0,0,0,,iOS, 35 for macOS, 39 for
Dialogue: 0,0:30:24.39,0:30:27.08,Default,,0,0,0,,watchOS, and 40 again for tvOS.
Dialogue: 0,0:30:28.55,0:30:29.76,Default,,0,0,0,,And for all of these platforms,
Dialogue: 0,0:30:29.89,0:30:31.25,Default,,0,0,0,,we support text input for more
Dialogue: 0,0:30:31.25,0:30:32.67,Default,,0,0,0,,than 300 other languages.
Dialogue: 0,0:30:33.31,0:30:35.79,Default,,0,0,0,,And each of these languages may
Dialogue: 0,0:30:35.79,0:30:36.96,Default,,0,0,0,,have different rules for things
Dialogue: 0,0:30:36.96,0:30:37.85,Default,,0,0,0,,like word breaking and
Dialogue: 0,0:30:37.85,0:30:38.31,Default,,0,0,0,,hyphenation.
Dialogue: 0,0:30:38.31,0:30:40.35,Default,,0,0,0,,And that's going to affect the
Dialogue: 0,0:30:40.35,0:30:41.84,Default,,0,0,0,,line breaking, which is going to
Dialogue: 0,0:30:41.84,0:30:43.44,Default,,0,0,0,,affect the text layout, which is
Dialogue: 0,0:30:43.44,0:30:44.30,Default,,0,0,0,,going to affect the text
Dialogue: 0,0:30:44.30,0:30:44.67,Default,,0,0,0,,rendering.
Dialogue: 0,0:30:44.67,0:30:46.32,Default,,0,0,0,,And our frameworks need to be
Dialogue: 0,0:30:46.32,0:30:47.30,Default,,0,0,0,,able to handle all of these
Dialogue: 0,0:30:47.30,0:30:48.12,Default,,0,0,0,,languages, correctly.
Dialogue: 0,0:30:48.12,0:30:51.48,Default,,0,0,0,,Now, if that wasn't enough, here
Dialogue: 0,0:30:51.48,0:30:52.37,Default,,0,0,0,,are just some of the other
Dialogue: 0,0:30:52.37,0:30:53.77,Default,,0,0,0,,factors that our frameworks take
Dialogue: 0,0:30:53.77,0:30:55.10,Default,,0,0,0,,into account when we perform
Dialogue: 0,0:30:55.10,0:30:55.98,Default,,0,0,0,,text layout and rendering.
Dialogue: 0,0:30:56.59,0:30:57.43,Default,,0,0,0,,So, we look at all of these
Dialogue: 0,0:30:57.47,0:30:58.58,Default,,0,0,0,,things and more to render your
Dialogue: 0,0:30:58.58,0:30:59.78,Default,,0,0,0,,text in a way that's both
Dialogue: 0,0:30:59.78,0:31:00.73,Default,,0,0,0,,correct and performant.
Dialogue: 0,0:31:01.10,0:31:02.44,Default,,0,0,0,,So, I encourage you to use the
Dialogue: 0,0:31:02.49,0:31:04.09,Default,,0,0,0,,standard label controls whenever
Dialogue: 0,0:31:04.09,0:31:04.49,Default,,0,0,0,,possible.
Dialogue: 0,0:31:05.55,0:31:06.88,Default,,0,0,0,,Now, with so many different
Dialogue: 0,0:31:06.88,0:31:08.22,Default,,0,0,0,,variables to consider, our
Dialogue: 0,0:31:08.22,0:31:09.15,Default,,0,0,0,,frameworks use multiple
Dialogue: 0,0:31:09.15,0:31:10.43,Default,,0,0,0,,optimization strategies, under
Dialogue: 0,0:31:10.43,0:31:10.76,Default,,0,0,0,,the hood.
Dialogue: 0,0:31:11.49,0:31:12.91,Default,,0,0,0,,Selection of any one particular
Dialogue: 0,0:31:12.91,0:31:14.48,Default,,0,0,0,,strategy is highly situational
Dialogue: 0,0:31:14.59,0:31:15.99,Default,,0,0,0,,and multiple criteria might have
Dialogue: 0,0:31:16.04,0:31:17.58,Default,,0,0,0,,to be met in order to apply one.
Dialogue: 0,0:31:18.81,0:31:20.06,Default,,0,0,0,,And so, I would warn you to be
Dialogue: 0,0:31:20.06,0:31:21.65,Default,,0,0,0,,careful when you're applying
Dialogue: 0,0:31:21.65,0:31:23.09,Default,,0,0,0,,your own optimizations on top of
Dialogue: 0,0:31:23.09,0:31:23.88,Default,,0,0,0,,the standard controls.
Dialogue: 0,0:31:24.54,0:31:25.52,Default,,0,0,0,,Because a change in rendering
Dialogue: 0,0:31:25.52,0:31:26.99,Default,,0,0,0,,conditions or input data could
Dialogue: 0,0:31:26.99,0:31:28.43,Default,,0,0,0,,nullify any performance gains
Dialogue: 0,0:31:28.43,0:31:29.36,Default,,0,0,0,,from your optimizations.
Dialogue: 0,0:31:30.06,0:31:32.14,Default,,0,0,0,,And to illustrate what I mean by
Dialogue: 0,0:31:32.14,0:31:33.47,Default,,0,0,0,,that, I'd like to share with you
Dialogue: 0,0:31:33.47,0:31:35.06,Default,,0,0,0,,a cautionary tale of two labels.
Dialogue: 0,0:31:35.12,0:31:39.29,Default,,0,0,0,,So, once upon a time, there was
Dialogue: 0,0:31:39.29,0:31:40.58,Default,,0,0,0,,a developer who needed to render
Dialogue: 0,0:31:40.58,0:31:41.47,Default,,0,0,0,,a lot of labels in her app.
Dialogue: 0,0:31:42.61,0:31:43.67,Default,,0,0,0,,And she required each label to
Dialogue: 0,0:31:43.67,0:31:44.95,Default,,0,0,0,,have a line of bold text,
Dialogue: 0,0:31:45.32,0:31:46.51,Default,,0,0,0,,followed by a line of normal
Dialogue: 0,0:31:46.51,0:31:46.94,Default,,0,0,0,,weight text.
Dialogue: 0,0:31:48.16,0:31:49.18,Default,,0,0,0,,And she needed to position her
Dialogue: 0,0:31:49.18,0:31:50.78,Default,,0,0,0,,labels by manually setting their
Dialogue: 0,0:31:50.78,0:31:52.45,Default,,0,0,0,,frames, because business
Dialogue: 0,0:31:52.45,0:31:52.74,Default,,0,0,0,,reasons.
Dialogue: 0,0:31:54.89,0:31:55.93,Default,,0,0,0,,So, she set up her labels with
Dialogue: 0,0:31:55.93,0:31:57.24,Default,,0,0,0,,attributed strings and off she
Dialogue: 0,0:31:58.16,0:31:58.29,Default,,0,0,0,,went.
Dialogue: 0,0:31:59.20,0:32:00.96,Default,,0,0,0,,But she noticed that the
Dialogue: 0,0:32:00.96,0:32:02.34,Default,,0,0,0,,scrolling performance in her app
Dialogue: 0,0:32:02.34,0:32:03.61,Default,,0,0,0,,was a little bit slower than she
Dialogue: 0,0:32:03.61,0:32:03.97,Default,,0,0,0,,would like.
Dialogue: 0,0:32:04.90,0:32:05.67,Default,,0,0,0,,So, she did a little bit of
Dialogue: 0,0:32:05.67,0:32:07.95,Default,,0,0,0,,profiling and she found that one
Dialogue: 0,0:32:07.95,0:32:08.99,Default,,0,0,0,,areas where a lot of time was
Dialogue: 0,0:32:08.99,0:32:10.26,Default,,0,0,0,,being spent was in laying out
Dialogue: 0,0:32:10.26,0:32:11.24,Default,,0,0,0,,and rendering the labels.
Dialogue: 0,0:32:11.95,0:32:13.76,Default,,0,0,0,,So, then she did some
Dialogue: 0,0:32:13.76,0:32:15.76,Default,,0,0,0,,experimentation and she noticed
Dialogue: 0,0:32:16.22,0:32:19.20,Default,,0,0,0,,that if she rendered each line
Dialogue: 0,0:32:19.20,0:32:20.50,Default,,0,0,0,,in a separate label, her app
Dialogue: 0,0:32:20.55,0:32:21.71,Default,,0,0,0,,scrolling performance improved.
Dialogue: 0,0:32:22.26,0:32:23.27,Default,,0,0,0,,''Well, this is fantastic'', she
Dialogue: 0,0:32:23.27,0:32:23.49,Default,,0,0,0,,thought.
Dialogue: 0,0:32:23.90,0:32:24.90,Default,,0,0,0,,So, she changed her app to use a
Dialogue: 0,0:32:24.90,0:32:26.02,Default,,0,0,0,,separate label for each line of
Dialogue: 0,0:32:26.02,0:32:26.34,Default,,0,0,0,,text.
Dialogue: 0,0:32:26.56,0:32:27.56,Default,,0,0,0,,And she lived happily ever
Dialogue: 0,0:32:27.56,0:32:30.23,Default,,0,0,0,,after, until her company wanted
Dialogue: 0,0:32:30.23,0:32:31.18,Default,,0,0,0,,to expand into the Chinese
Dialogue: 0,0:32:31.18,0:32:31.46,Default,,0,0,0,,market.
Dialogue: 0,0:32:33.06,0:32:34.68,Default,,0,0,0,,When she tested her app with
Dialogue: 0,0:32:34.68,0:32:36.38,Default,,0,0,0,,this Chinese text, she was
Dialogue: 0,0:32:36.38,0:32:38.09,Default,,0,0,0,,dismayed to discover that the
Dialogue: 0,0:32:38.09,0:32:39.46,Default,,0,0,0,,scrolling performance was even
Dialogue: 0,0:32:39.56,0:32:40.86,Default,,0,0,0,,slower than before.
Dialogue: 0,0:32:42.27,0:32:43.30,Default,,0,0,0,,So, what happened, here?
Dialogue: 0,0:32:43.46,0:32:46.66,Default,,0,0,0,,Well, our tragic heroine started
Dialogue: 0,0:32:46.66,0:32:47.73,Default,,0,0,0,,off with the right approach.
Dialogue: 0,0:32:48.26,0:32:49.35,Default,,0,0,0,,She was looking at frequent
Dialogue: 0,0:32:49.35,0:32:50.37,Default,,0,0,0,,rendering of lots of short
Dialogue: 0,0:32:50.42,0:32:52.39,Default,,0,0,0,,strings, which falls here, in
Dialogue: 0,0:32:52.39,0:32:52.99,Default,,0,0,0,,quadrant two.
Dialogue: 0,0:32:54.50,0:32:55.41,Default,,0,0,0,,And so, she took some
Dialogue: 0,0:32:55.41,0:32:56.91,Default,,0,0,0,,measurements, she determined an
Dialogue: 0,0:32:56.91,0:32:58.44,Default,,0,0,0,,area for improvement, and she
Dialogue: 0,0:32:58.44,0:32:59.37,Default,,0,0,0,,made an optimization.
Dialogue: 0,0:33:00.44,0:33:01.80,Default,,0,0,0,,But then, when the input data
Dialogue: 0,0:33:01.80,0:33:03.32,Default,,0,0,0,,changed to Chinese text, the
Dialogue: 0,0:33:03.32,0:33:04.77,Default,,0,0,0,,optimization was no longer an
Dialogue: 0,0:33:04.77,0:33:05.28,Default,,0,0,0,,improvement.
Dialogue: 0,0:33:05.28,0:33:07.43,Default,,0,0,0,,And to see why, let's do a
Dialogue: 0,0:33:07.43,0:33:07.96,Default,,0,0,0,,postmortem.
Dialogue: 0,0:33:09.51,0:33:11.11,Default,,0,0,0,,So, in this example, the initial
Dialogue: 0,0:33:11.11,0:33:12.12,Default,,0,0,0,,conditions qualified the
Dialogue: 0,0:33:12.12,0:33:13.52,Default,,0,0,0,,attributed strings for a faster
Dialogue: 0,0:33:13.52,0:33:14.42,Default,,0,0,0,,rendering path within the
Dialogue: 0,0:33:14.42,0:33:14.79,Default,,0,0,0,,framework.
Dialogue: 0,0:33:15.59,0:33:16.57,Default,,0,0,0,,And the optimization of
Dialogue: 0,0:33:16.57,0:33:17.69,Default,,0,0,0,,splitting each line into its own
Dialogue: 0,0:33:17.69,0:33:19.41,Default,,0,0,0,,label took advantage of the fact
Dialogue: 0,0:33:19.41,0:33:20.31,Default,,0,0,0,,that attributed strings
Dialogue: 0,0:33:20.31,0:33:21.45,Default,,0,0,0,,containing only one style of
Dialogue: 0,0:33:21.45,0:33:23.28,Default,,0,0,0,,text may qualify for faster
Dialogue: 0,0:33:23.28,0:33:23.65,Default,,0,0,0,,rendering.
Dialogue: 0,0:33:24.19,0:33:26.98,Default,,0,0,0,,But this isn't a sufficient
Dialogue: 0,0:33:26.98,0:33:28.18,Default,,0,0,0,,condition for faster rendering.
Dialogue: 0,0:33:28.92,0:33:30.41,Default,,0,0,0,,The faster rendering paths take
Dialogue: 0,0:33:30.46,0:33:31.62,Default,,0,0,0,,shortcuts that make certain
Dialogue: 0,0:33:31.62,0:33:33.17,Default,,0,0,0,,assumptions about the input data
Dialogue: 0,0:33:33.17,0:33:34.16,Default,,0,0,0,,and the rendering conditions.
Dialogue: 0,0:33:34.61,0:33:36.06,Default,,0,0,0,,And in this case, using Chinese
Dialogue: 0,0:33:36.06,0:33:37.52,Default,,0,0,0,,text requires font fallback, and
Dialogue: 0,0:33:37.52,0:33:38.55,Default,,0,0,0,,that forced the rendering down
Dialogue: 0,0:33:38.55,0:33:39.46,Default,,0,0,0,,the slower path within the
Dialogue: 0,0:33:39.46,0:33:40.24,Default,,0,0,0,,framework to maintain
Dialogue: 0,0:33:40.24,0:33:40.68,Default,,0,0,0,,correctness.
Dialogue: 0,0:33:40.68,0:33:43.34,Default,,0,0,0,,And on top of that, splitting
Dialogue: 0,0:33:43.34,0:33:44.33,Default,,0,0,0,,the two-line strings into
Dialogue: 0,0:33:44.33,0:33:45.22,Default,,0,0,0,,separate labels, meant that the
Dialogue: 0,0:33:45.22,0:33:46.58,Default,,0,0,0,,app was rendering twice as many
Dialogue: 0,0:33:46.58,0:33:48.34,Default,,0,0,0,,labels as it needed to.
Dialogue: 0,0:33:49.79,0:33:51.76,Default,,0,0,0,,And additionally, the app was
Dialogue: 0,0:33:51.76,0:33:53.12,Default,,0,0,0,,using older layout practices by
Dialogue: 0,0:33:53.12,0:33:54.24,Default,,0,0,0,,manually setting the frames,
Dialogue: 0,0:33:54.40,0:33:55.44,Default,,0,0,0,,instead of using auto layout.
Dialogue: 0,0:33:56.27,0:33:57.42,Default,,0,0,0,,So generally, we're going to pay
Dialogue: 0,0:33:57.42,0:33:58.36,Default,,0,0,0,,a lot of attention to
Dialogue: 0,0:33:58.36,0:33:59.48,Default,,0,0,0,,performance under conditions
Dialogue: 0,0:33:59.52,0:34:00.80,Default,,0,0,0,,that are using modern practices,
Dialogue: 0,0:34:00.90,0:34:01.55,Default,,0,0,0,,like auto layout.
Dialogue: 0,0:34:01.63,0:34:02.93,Default,,0,0,0,,Because that's what most apps
Dialogue: 0,0:34:02.93,0:34:04.10,Default,,0,0,0,,are using and that's where our
Dialogue: 0,0:34:04.10,0:34:05.09,Default,,0,0,0,,performance improvements will
Dialogue: 0,0:34:05.09,0:34:05.97,Default,,0,0,0,,make the largest impact.
Dialogue: 0,0:34:07.06,0:34:07.76,Default,,0,0,0,,So, with auto layout in
Dialogue: 0,0:34:07.76,0:34:08.98,Default,,0,0,0,,particular, that text system
Dialogue: 0,0:34:08.98,0:34:10.50,Default,,0,0,0,,caches some layout information.
Dialogue: 0,0:34:10.86,0:34:11.76,Default,,0,0,0,,And this can really improve
Dialogue: 0,0:34:11.76,0:34:12.24,Default,,0,0,0,,performance.
Dialogue: 0,0:34:12.29,0:34:13.48,Default,,0,0,0,,But since this app wasn't using
Dialogue: 0,0:34:13.48,0:34:15.17,Default,,0,0,0,,auto layout, it couldn't take
Dialogue: 0,0:34:15.17,0:34:17.00,Default,,0,0,0,,advantage of that.
Dialogue: 0,0:34:17.19,0:34:18.07,Default,,0,0,0,,And so, with that in mind,
Dialogue: 0,0:34:18.56,0:34:19.75,Default,,0,0,0,,here's some strategies and tips
Dialogue: 0,0:34:19.88,0:34:21.21,Default,,0,0,0,,that you can employ to improve
Dialogue: 0,0:34:21.21,0:34:22.27,Default,,0,0,0,,text layout and rendering
Dialogue: 0,0:34:22.69,0:34:23.64,Default,,0,0,0,,performance in your app.
Dialogue: 0,0:34:23.64,0:34:26.26,Default,,0,0,0,,Now, if you've been paying
Dialogue: 0,0:34:26.26,0:34:27.39,Default,,0,0,0,,attention, you already know what
Dialogue: 0,0:34:27.39,0:34:28.07,Default,,0,0,0,,I'm going to say the first
Dialogue: 0,0:34:28.07,0:34:28.54,Default,,0,0,0,,strategy is.
Dialogue: 0,0:34:29.15,0:34:31.28,Default,,0,0,0,,Use the standard labels for
Dialogue: 0,0:34:31.28,0:34:32.75,Default,,0,0,0,,rendering your text and let us
Dialogue: 0,0:34:32.75,0:34:33.77,Default,,0,0,0,,do the heavy lifting for you.
Dialogue: 0,0:34:34.69,0:34:35.65,Default,,0,0,0,,The framework is in a better
Dialogue: 0,0:34:35.71,0:34:36.49,Default,,0,0,0,,place to apply these
Dialogue: 0,0:34:36.49,0:34:37.90,Default,,0,0,0,,optimizations, because it has a
Dialogue: 0,0:34:37.95,0:34:38.80,Default,,0,0,0,,bigger picture view of the
Dialogue: 0,0:34:38.84,0:34:40.34,Default,,0,0,0,,situation and more information
Dialogue: 0,0:34:40.34,0:34:41.38,Default,,0,0,0,,about the rendering conditions.
Dialogue: 0,0:34:42.52,0:34:43.81,Default,,0,0,0,,And when we make performance
Dialogue: 0,0:34:43.81,0:34:44.60,Default,,0,0,0,,improvements, you'll
Dialogue: 0,0:34:44.60,0:34:45.56,Default,,0,0,0,,automatically get those
Dialogue: 0,0:34:45.61,0:34:45.97,Default,,0,0,0,,benefits.
Dialogue: 0,0:34:46.89,0:34:48.52,Default,,0,0,0,,So, as an example of that, in
Dialogue: 0,0:34:48.52,0:34:50.85,Default,,0,0,0,,macOS 10.13, NSTextField renders
Dialogue: 0,0:34:50.85,0:34:52.35,Default,,0,0,0,,text roughly three times faster,
Dialogue: 0,0:34:52.35,0:34:54.38,Default,,0,0,0,,at 5.7 milliseconds per frame
Dialogue: 0,0:34:54.53,0:34:55.41,Default,,0,0,0,,during live resize.
Dialogue: 0,0:34:55.75,0:34:58.34,Default,,0,0,0,,Down from 16.67 milliseconds per
Dialogue: 0,0:34:58.34,0:34:59.14,Default,,0,0,0,,frame in 10.12.
Dialogue: 0,0:34:59.82,0:35:00.96,Default,,0,0,0,,And you'll get this performance
Dialogue: 0,0:35:00.96,0:35:02.25,Default,,0,0,0,,boost for free if you're using
Dialogue: 0,0:35:02.25,0:35:03.30,Default,,0,0,0,,the standard framework controls.
Dialogue: 0,0:35:03.88,0:35:05.01,Default,,0,0,0,,So, it's really a good idea to
Dialogue: 0,0:35:05.01,0:35:06.08,Default,,0,0,0,,use the standard controls
Dialogue: 0,0:35:06.15,0:35:06.83,Default,,0,0,0,,whenever possible.
Dialogue: 0,0:35:07.29,0:35:11.51,Default,,0,0,0,,Second strategy, as we kind of
Dialogue: 0,0:35:11.51,0:35:13.10,Default,,0,0,0,,saw from out story, is to use
Dialogue: 0,0:35:13.10,0:35:14.32,Default,,0,0,0,,modern layout practices like
Dialogue: 0,0:35:14.32,0:35:14.82,Default,,0,0,0,,auto layout.
Dialogue: 0,0:35:15.52,0:35:16.53,Default,,0,0,0,,Now, text layout and rendering
Dialogue: 0,0:35:16.53,0:35:17.44,Default,,0,0,0,,performance with modern
Dialogue: 0,0:35:17.44,0:35:19.02,Default,,0,0,0,,practices is very heavily
Dialogue: 0,0:35:19.02,0:35:20.14,Default,,0,0,0,,scrutinized on our end.
Dialogue: 0,0:35:20.87,0:35:22.02,Default,,0,0,0,,And by adopting these modern
Dialogue: 0,0:35:22.02,0:35:23.43,Default,,0,0,0,,practices, you'll be less likely
Dialogue: 0,0:35:23.43,0:35:24.40,Default,,0,0,0,,to run into edge case
Dialogue: 0,0:35:24.40,0:35:25.54,Default,,0,0,0,,performance scenarios that we
Dialogue: 0,0:35:25.54,0:35:26.49,Default,,0,0,0,,haven't already seen and
Dialogue: 0,0:35:26.49,0:35:26.86,Default,,0,0,0,,improved.
Dialogue: 0,0:35:30.54,0:35:32.31,Default,,0,0,0,,Next up, is a lower level tip.
Dialogue: 0,0:35:32.80,0:35:33.46,Default,,0,0,0,,If you're working with
Dialogue: 0,0:35:33.46,0:35:35.28,Default,,0,0,0,,NSAttributedString, there are a
Dialogue: 0,0:35:35.28,0:35:36.35,Default,,0,0,0,,few attributes that are
Dialogue: 0,0:35:36.35,0:35:37.85,Default,,0,0,0,,absolutely necessary for layout
Dialogue: 0,0:35:37.85,0:35:38.30,Default,,0,0,0,,and rendering.
Dialogue: 0,0:35:38.30,0:35:40.41,Default,,0,0,0,,And if you don't supply these
Dialogue: 0,0:35:40.41,0:35:41.67,Default,,0,0,0,,attributes yourself, the text
Dialogue: 0,0:35:41.67,0:35:42.99,Default,,0,0,0,,system needs to resolve them in
Dialogue: 0,0:35:42.99,0:35:44.02,Default,,0,0,0,,order to be able to render.
Dialogue: 0,0:35:44.54,0:35:45.75,Default,,0,0,0,,And so, you can shave off a
Dialogue: 0,0:35:45.75,0:35:47.06,Default,,0,0,0,,little bit of time by supplying
Dialogue: 0,0:35:47.06,0:35:48.46,Default,,0,0,0,,these attributes yourself, when
Dialogue: 0,0:35:48.46,0:35:49.52,Default,,0,0,0,,rendering attributed strings.
Dialogue: 0,0:35:50.18,0:35:53.90,Default,,0,0,0,,In a similar vein, you might see
Dialogue: 0,0:35:53.90,0:35:54.92,Default,,0,0,0,,some small improvements from
Dialogue: 0,0:35:54.92,0:35:56.35,Default,,0,0,0,,explicitly specifying the
Dialogue: 0,0:35:56.35,0:35:57.55,Default,,0,0,0,,writing direction and alignment,
Dialogue: 0,0:35:57.55,0:35:58.57,Default,,0,0,0,,instead of using the natural
Dialogue: 0,0:35:58.61,0:35:58.93,Default,,0,0,0,,settings.
Dialogue: 0,0:35:59.01,0:36:00.88,Default,,0,0,0,,And this will save you a little
Dialogue: 0,0:36:00.88,0:36:01.96,Default,,0,0,0,,time, because the text system
Dialogue: 0,0:36:01.96,0:36:03.20,Default,,0,0,0,,can skip over any logic that
Dialogue: 0,0:36:03.20,0:36:04.26,Default,,0,0,0,,tries to figure out the writing
Dialogue: 0,0:36:04.26,0:36:05.24,Default,,0,0,0,,direction and the alignment.
Dialogue: 0,0:36:06.49,0:36:07.43,Default,,0,0,0,,But remember that you'll only
Dialogue: 0,0:36:07.43,0:36:08.32,Default,,0,0,0,,want to do this if you're
Dialogue: 0,0:36:08.32,0:36:09.96,Default,,0,0,0,,absolutely sure that your input
Dialogue: 0,0:36:09.96,0:36:11.54,Default,,0,0,0,,data won't contain mixed writing
Dialogue: 0,0:36:11.54,0:36:11.93,Default,,0,0,0,,directions.
Dialogue: 0,0:36:11.93,0:36:13.54,Default,,0,0,0,,Now, there's a balance between
Dialogue: 0,0:36:13.54,0:36:14.51,Default,,0,0,0,,performance and correctness.
Dialogue: 0,0:36:14.51,0:36:16.12,Default,,0,0,0,,And this is one optimization
Dialogue: 0,0:36:16.12,0:36:17.45,Default,,0,0,0,,that can tip the balance a
Dialogue: 0,0:36:17.45,0:36:18.40,Default,,0,0,0,,little too far away from
Dialogue: 0,0:36:18.40,0:36:19.52,Default,,0,0,0,,correctness if you're not sure
Dialogue: 0,0:36:19.52,0:36:19.98,Default,,0,0,0,,of your input.
Dialogue: 0,0:36:23.27,0:36:24.76,Default,,0,0,0,,And along those same lines of
Dialogue: 0,0:36:24.76,0:36:25.94,Default,,0,0,0,,performance versus correctness,
Dialogue: 0,0:36:26.44,0:36:27.73,Default,,0,0,0,,if you know that all your labels
Dialogue: 0,0:36:27.73,0:36:28.99,Default,,0,0,0,,are only going to consist of one
Dialogue: 0,0:36:28.99,0:36:30.63,Default,,0,0,0,,line, you can set the line break
Dialogue: 0,0:36:30.63,0:36:31.49,Default,,0,0,0,,mode to use clipping.
Dialogue: 0,0:36:32.38,0:36:34.16,Default,,0,0,0,,Now, by default, labels will use
Dialogue: 0,0:36:34.16,0:36:34.51,Default,,0,0,0,,word wrap.
Dialogue: 0,0:36:34.80,0:36:36.00,Default,,0,0,0,,And when you do this, the text
Dialogue: 0,0:36:36.00,0:36:37.13,Default,,0,0,0,,system needs to figure out where
Dialogue: 0,0:36:37.13,0:36:37.97,Default,,0,0,0,,to place the line breaks.
Dialogue: 0,0:36:38.61,0:36:39.55,Default,,0,0,0,,And so, if you use the clipping
Dialogue: 0,0:36:39.55,0:36:40.99,Default,,0,0,0,,line break mode, you can skip
Dialogue: 0,0:36:41.18,0:36:42.44,Default,,0,0,0,,this line breaking and
Dialogue: 0,0:36:42.44,0:36:43.62,Default,,0,0,0,,hyphenation logic, and your text
Dialogue: 0,0:36:43.62,0:36:44.67,Default,,0,0,0,,might run there just a little
Dialogue: 0,0:36:44.84,0:36:45.66,Default,,0,0,0,,bit faster.
Dialogue: 0,0:36:48.07,0:36:49.19,Default,,0,0,0,,So, in summary, we've looked at
Dialogue: 0,0:36:49.19,0:36:49.94,Default,,0,0,0,,a lot of different things,
Dialogue: 0,0:36:49.99,0:36:50.28,Default,,0,0,0,,today.
Dialogue: 0,0:36:50.51,0:36:51.48,Default,,0,0,0,,From performance improvements in
Dialogue: 0,0:36:51.48,0:36:53.28,Default,,0,0,0,,Foundation, to string bridging
Dialogue: 0,0:36:53.49,0:36:54.41,Default,,0,0,0,,and working with text.
Dialogue: 0,0:36:55.18,0:36:56.09,Default,,0,0,0,,Now, if you take just one thing
Dialogue: 0,0:36:56.09,0:36:57.58,Default,,0,0,0,,away from this talk, let it be
Dialogue: 0,0:36:57.58,0:36:58.09,Default,,0,0,0,,this graph.
Dialogue: 0,0:36:58.69,0:37:00.04,Default,,0,0,0,,Use the concepts of scale and
Dialogue: 0,0:37:00.04,0:37:01.73,Default,,0,0,0,,frequency to minimize the large
Dialogue: 0,0:37:01.73,0:37:02.95,Default,,0,0,0,,expense of operations in your
Dialogue: 0,0:37:02.95,0:37:03.26,Default,,0,0,0,,code.
Dialogue: 0,0:37:03.73,0:37:04.91,Default,,0,0,0,,Don't sweat the small infrequent
Dialogue: 0,0:37:04.91,0:37:06.64,Default,,0,0,0,,stuff, and always measure if you
Dialogue: 0,0:37:06.64,0:37:06.98,Default,,0,0,0,,aren't sure.
Dialogue: 0,0:37:10.08,0:37:11.31,Default,,0,0,0,,So, for more information, you
Dialogue: 0,0:37:11.31,0:37:13.12,Default,,0,0,0,,can visit our session URL, we
Dialogue: 0,0:37:13.17,0:37:16.05,Default,,0,0,0,,are Session 244.
Dialogue: 0,0:37:16.05,0:37:17.65,Default,,0,0,0,,And check out these related
Dialogue: 0,0:37:17.65,0:37:18.80,Default,,0,0,0,,sessions on video.
Dialogue: 0,0:37:18.80,0:37:19.30,Default,,0,0,0,,Pretty cool.
Dialogue: 0,0:37:19.87,0:37:21.55,Default,,0,0,0,,Unfortunately, most of them
Dialogue: 0,0:37:21.55,0:37:22.07,Default,,0,0,0,,already happened.
Dialogue: 0,0:37:23.27,0:37:24.38,Default,,0,0,0,,Thank you, and enjoy the rest of
Dialogue: 0,0:37:24.38,0:37:24.95,Default,,0,0,0,,the conference.
Dialogue: 0,0:37:25.52,0:37:28.50,Default,,0,0,0,,[ Applause ]
