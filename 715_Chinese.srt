1
00:00:22,496 --> 00:00:22,976
>> 欢迎大家

2
00:00:23,516 --> 00:00:27,546
[ 掌声 ]

3
00:00:28,046 --> 00:00:30,376
我是 Eric Tamura

4
00:00:30,376 --> 00:00:31,626
是文件系统团队的一名经理

5
00:00:31,626 --> 00:00:33,876
我们团队主要负责 iOS

6
00:00:33,876 --> 00:00:35,236
和嵌入式设备 我会

7
00:00:35,746 --> 00:00:37,736
向大家介绍 Apple File System

8
00:00:37,736 --> 00:00:38,616
的一些新动向

9
00:00:38,716 --> 00:00:39,956
和我一起的

10
00:00:39,956 --> 00:00:42,056
是 Pavel Sokolov  他也是

11
00:00:42,056 --> 00:00:43,886
文件系统团队的一名经理

12
00:00:43,886 --> 00:00:45,656
主要负责 Mac

13
00:00:45,866 --> 00:00:46,916
那么我们开始

14
00:00:48,406 --> 00:00:49,406
本场演示

15
00:00:49,406 --> 00:00:51,126
将大体分为

16
00:00:51,126 --> 00:00:51,656
两个部分

17
00:00:52,016 --> 00:00:52,836
我会向大家

18
00:00:52,836 --> 00:00:55,146
介绍一些 iOS

19
00:00:55,226 --> 00:00:57,876
tvOS 和 watchOS 上的新内容  Pavel

20
00:00:57,876 --> 00:00:59,066
会在之后出场 向你们介绍

21
00:00:59,066 --> 00:01:01,216
macOS 上的新内容

22
00:01:01,676 --> 00:01:06,556
那我们马上开始吧

23
00:01:07,286 --> 00:01:10,146
去年 我也在 WWDC

24
00:01:10,146 --> 00:01:11,576
做了演讲

25
00:01:11,576 --> 00:01:13,596
告诉大家 Apple 从 2017 年起

26
00:01:14,066 --> 00:01:15,086
将要推出 Apple File System

27
00:01:15,206 --> 00:01:17,266
作为所有设备的

28
00:01:17,266 --> 00:01:19,386
默认文件格式 并且

29
00:01:19,386 --> 00:01:20,356
我们确实做到了

30
00:01:20,356 --> 00:01:23,186
所以 在 iOS 10.3

31
00:01:23,186 --> 00:01:26,266
以及同时推出的 tvOS 和 watchOS 中

32
00:01:26,266 --> 00:01:28,696
所有的设备都已转换到

33
00:01:28,766 --> 00:01:28,886
APFS 上

34
00:01:28,886 --> 00:01:30,686
这一点稍后我们会

35
00:01:30,686 --> 00:01:31,146
详细介绍

36
00:01:32,076 --> 00:01:32,806
我们还会介绍

37
00:01:32,806 --> 00:01:33,986
转换过程

38
00:01:33,986 --> 00:01:35,296
设备到底是如何

39
00:01:35,296 --> 00:01:38,766
从 HFS+ 转换到 APFS 上的

40
00:01:38,766 --> 00:01:40,626
以及 normalization（规范化）

41
00:01:40,626 --> 00:01:42,346
和区分大小写 尤其是

42
00:01:42,436 --> 00:01:44,826
在 iOS 设备上

43
00:01:45,736 --> 00:01:46,706
那么我们就来谈一下

44
00:01:46,746 --> 00:01:47,206
转换过程

45
00:01:47,306 --> 00:01:51,996
目前 数百万

46
00:01:51,996 --> 00:01:53,176
确切地说是数亿

47
00:01:53,176 --> 00:01:54,226
设备已经

48
00:01:54,226 --> 00:01:56,726
成功转换到了 APFS

49
00:01:57,516 --> 00:02:04,056
[ 掌声 ]

50
00:02:04,556 --> 00:02:06,916
从 iOS 10.3

51
00:02:06,916 --> 00:02:10,265
以及相应的 tvOS 和 watchOS 开始

52
00:02:10,265 --> 00:02:11,286
Apple File System 成为了默认文件系统

53
00:02:11,286 --> 00:02:12,706
已经有数百万设备

54
00:02:12,706 --> 00:02:13,186
完成了转换

55
00:02:14,116 --> 00:02:14,886
你们可能注意到

56
00:02:14,886 --> 00:02:16,056
此次更新

57
00:02:16,056 --> 00:02:17,096
确实释放了

58
00:02:17,096 --> 00:02:19,146
用户设备上的存储空间

59
00:02:19,536 --> 00:02:20,906
尤其是释放了

60
00:02:20,906 --> 00:02:22,676
之前的宗卷管理器

61
00:02:22,676 --> 00:02:24,276
lightweight volume manager（轻量宗卷管理器）

62
00:02:24,276 --> 00:02:25,216
占用的空间 因为我们

63
00:02:25,216 --> 00:02:26,106
不再需要它了 可以

64
00:02:26,106 --> 00:02:27,636
释放这部分空间

65
00:02:27,636 --> 00:02:29,166
把它还给用户

66
00:02:29,856 --> 00:02:30,856
还有一件事情 那就是

67
00:02:30,856 --> 00:02:32,506
从 iOS 11 开始

68
00:02:32,506 --> 00:02:34,086
我们可以充分利用

69
00:02:34,086 --> 00:02:36,576
iOS tvOS 和 watchOS 中

70
00:02:36,576 --> 00:02:37,786
AFPS 的功能了

71
00:02:37,786 --> 00:02:39,716
尤其是 iOS  因为

72
00:02:39,716 --> 00:02:42,146
iCloud 备份可以使用快照

73
00:02:42,146 --> 00:02:43,366
来稳定地备份

74
00:02:43,366 --> 00:02:45,286
文件系统 并上传到

75
00:02:45,286 --> 00:02:46,896
云端 而不必

76
00:02:46,896 --> 00:02:48,436
担心是否有某个过程

77
00:02:48,436 --> 00:02:50,136
改变了某个文件

78
00:02:50,136 --> 00:02:52,216
或是让权限

79
00:02:52,216 --> 00:02:52,766
含混不清

80
00:02:52,866 --> 00:02:54,596
最后 我们也听取了

81
00:02:54,596 --> 00:02:56,016
开发者的反馈

82
00:02:56,016 --> 00:02:57,756
来改进和完善

83
00:02:57,756 --> 00:02:59,256
文件系统 以及其他

84
00:02:59,256 --> 00:02:59,956
我们开发的软件

85
00:03:00,476 --> 00:03:02,186
那么 我们来简要介绍一下

86
00:03:02,186 --> 00:03:03,286
转换过程

87
00:03:03,616 --> 00:03:09,196
APFS 转换发生在

88
00:03:09,196 --> 00:03:11,586
升级到 iOS 10.3

89
00:03:11,816 --> 00:03:13,196
和后续版本的过程中

90
00:03:13,196 --> 00:03:14,276
所以 无论你是从此前版本

91
00:03:14,276 --> 00:03:17,956
升级到 10.3 10.3.2 甚至 iOS 11

92
00:03:17,956 --> 00:03:19,126
你的文件系统

93
00:03:19,126 --> 00:03:20,806
都会自动完成转换

94
00:03:21,526 --> 00:03:22,506
我们能做到这一点

95
00:03:22,506 --> 00:03:23,276
如此成功的原因之一

96
00:03:23,276 --> 00:03:24,686
就是我们实际上

97
00:03:24,686 --> 00:03:26,746
在 iOS 10.0 10.1 和 10.2 中

98
00:03:27,016 --> 00:03:29,796
进行了试转换

99
00:03:29,796 --> 00:03:31,776
因而能够追踪

100
00:03:31,776 --> 00:03:33,596
我们的转换过程

101
00:03:33,866 --> 00:03:34,766
是否足够完善

102
00:03:35,666 --> 00:03:37,026
我们也一直关注

103
00:03:37,026 --> 00:03:39,136
iOS 10.3 及后续版本升级中

104
00:03:39,136 --> 00:03:41,386
转换过程是否完善

105
00:03:41,386 --> 00:03:44,316
我们对此

106
00:03:44,316 --> 00:03:44,776
同样密切关注

107
00:03:45,686 --> 00:03:47,706
最后 我们也仔细分析了

108
00:03:47,706 --> 00:03:49,376
我们关注的数字 数据

109
00:03:49,376 --> 00:03:50,266
和其他一切信息

110
00:03:50,686 --> 00:03:51,746
进而能够在 Mac 上

111
00:03:51,746 --> 00:03:53,506
改进和完善

112
00:03:53,506 --> 00:03:54,436
转换过程

113
00:03:55,446 --> 00:03:57,186
有时 一张图

114
00:03:57,186 --> 00:03:59,216
往往胜过

115
00:03:59,216 --> 00:04:00,806
千言万语 这里也

116
00:04:00,806 --> 00:04:00,986
有一张

117
00:04:02,006 --> 00:04:03,496
我们假设

118
00:04:03,786 --> 00:04:05,646
这个长矩形代表

119
00:04:05,746 --> 00:04:08,236
一个完整的文件块

120
00:04:08,236 --> 00:04:09,656
而在最左边 能看到

121
00:04:09,656 --> 00:04:11,086
有一个 SB

122
00:04:11,086 --> 00:04:12,966
即 superblock（超级块）

123
00:04:12,966 --> 00:04:14,526
同时也是 HFS+ 宗卷的卷头

124
00:04:15,066 --> 00:04:16,526
简明起见

125
00:04:16,526 --> 00:04:18,976
我们有三个元数据区

126
00:04:18,976 --> 00:04:20,745
代表文件系统

127
00:04:20,745 --> 00:04:21,805
追踪的一切信息

128
00:04:22,026 --> 00:04:23,096
其中包括

129
00:04:23,096 --> 00:04:25,506
文件名 时间戳

130
00:04:25,506 --> 00:04:26,876
以及磁盘上的文件块

131
00:04:26,876 --> 00:04:28,236
还有两个区域

132
00:04:28,236 --> 00:04:30,076
标记为文件数据

133
00:04:30,636 --> 00:04:31,526
如果你还记得

134
00:04:31,526 --> 00:04:32,926
转换过程的目的

135
00:04:32,926 --> 00:04:35,176
是仅仅替换元数据

136
00:04:35,176 --> 00:04:36,516
而不触及文件数据

137
00:04:36,516 --> 00:04:37,826
我们希望文件数据

138
00:04:37,826 --> 00:04:39,756
能保持原样 就好像

139
00:04:39,756 --> 00:04:41,226
从没有对它进行过操作

140
00:04:42,246 --> 00:04:43,006
所以我们首先要做的

141
00:04:43,006 --> 00:04:44,816
就是找到

142
00:04:44,816 --> 00:04:46,426
元数据的位置

143
00:04:46,426 --> 00:04:48,276
同时 还要开始

144
00:04:48,276 --> 00:04:49,656
将元数据写入

145
00:04:49,656 --> 00:04:52,226
HFS+ 宗卷的可用空间

146
00:04:52,716 --> 00:04:54,776
这样一来

147
00:04:54,776 --> 00:04:55,916
可以防止系统崩溃

148
00:04:55,916 --> 00:04:56,886
并且能够尽快恢复

149
00:04:56,886 --> 00:04:58,136
防止转换过程

150
00:04:58,136 --> 00:04:58,566
以失败告终

151
00:04:59,636 --> 00:05:00,966
一旦找到了元数据

152
00:05:01,706 --> 00:05:02,836
接下来就要将它

153
00:05:02,836 --> 00:05:04,756
写入磁盘 此时

154
00:05:04,756 --> 00:05:05,896
如果我们是在试转换

155
00:05:05,896 --> 00:05:07,586
那么整个过程就到此结束

156
00:05:08,506 --> 00:05:10,396
如果要完成这个过程

157
00:05:11,126 --> 00:05:12,956
我们就要写入新的超级块

158
00:05:13,026 --> 00:05:14,766
并覆盖原有的超级块

159
00:05:14,766 --> 00:05:17,016
这样就有了一个 APFS 宗卷

160
00:05:17,746 --> 00:05:18,986
最后一步

161
00:05:18,986 --> 00:05:20,346
就是移除

162
00:05:20,406 --> 00:05:22,536
包含 HFS+ 信息

163
00:05:22,536 --> 00:05:22,996
的元数据

164
00:05:23,816 --> 00:05:25,736
做到这一点

165
00:05:25,736 --> 00:05:28,006
这个宗卷就彻底转换到了

166
00:05:28,176 --> 00:05:28,546
APFS 上

167
00:05:28,896 --> 00:05:33,576
再简单提一下 Unicode

168
00:05:35,456 --> 00:05:37,006
如果你了解 Unicode

169
00:05:37,006 --> 00:05:37,866
你应该知道

170
00:05:37,866 --> 00:05:39,476
Unicode 有几种变体

171
00:05:39,476 --> 00:05:40,836
但为方便讨论

172
00:05:40,836 --> 00:05:43,106
我只会提到其中两种

173
00:05:43,416 --> 00:05:45,516
即 NFC 和

174
00:05:45,516 --> 00:05:47,156
NFD  这二者

175
00:05:47,156 --> 00:05:48,546
大致对应着

176
00:05:48,546 --> 00:05:50,536
预作字符

177
00:05:50,536 --> 00:05:51,126
和分解字符

178
00:05:51,746 --> 00:05:53,406
这意味着

179
00:05:53,406 --> 00:05:54,386
你可以存储

180
00:05:54,386 --> 00:05:55,906
外观相同的字符

181
00:05:55,906 --> 00:05:57,056
外观相同的字符

182
00:05:57,056 --> 00:05:58,816
可以用多种方式存储

183
00:05:59,136 --> 00:06:00,276
取决于你使用的

184
00:06:00,276 --> 00:06:00,606
字符形式

185
00:06:01,356 --> 00:06:03,846
在 iOS 11 之前

186
00:06:04,136 --> 00:06:05,956
AFPS 使用非规范化的 UTF-8

187
00:06:06,246 --> 00:06:08,426
存储文件名 这意味着

188
00:06:08,426 --> 00:06:09,946
如果你有一个文件

189
00:06:09,946 --> 00:06:11,946
名称有多种表示方式

190
00:06:12,106 --> 00:06:13,436
它们会在检索

191
00:06:13,436 --> 00:06:14,376
创建和比较时

192
00:06:14,376 --> 00:06:16,816
被视作不同的

193
00:06:16,816 --> 00:06:17,576
文件名

194
00:06:18,326 --> 00:06:19,756
我们再举个例子

195
00:06:20,216 --> 00:06:21,406
方便大家理解

196
00:06:22,176 --> 00:06:23,266
比如说

197
00:06:23,546 --> 00:06:25,066
带腭音符号的 n

198
00:06:25,136 --> 00:06:26,176
也就是西班牙语中的 ñ

199
00:06:26,546 --> 00:06:27,646
你可以将它表示为

200
00:06:27,686 --> 00:06:29,926
Unicode 十六进制码的 F1

201
00:06:30,666 --> 00:06:31,846
或者 你可以把它

202
00:06:31,846 --> 00:06:33,606
存储为分解字符

203
00:06:33,606 --> 00:06:34,696
也就是把 n

204
00:06:34,696 --> 00:06:36,366
和腭音符号

205
00:06:36,366 --> 00:06:36,726
分别存储

206
00:06:36,796 --> 00:06:39,356
在这个例子中 右边的

207
00:06:39,356 --> 00:06:40,846
n 和腭音符号

208
00:06:40,846 --> 00:06:41,956
是作为两个代码点

209
00:06:41,956 --> 00:06:43,146
分别存储的 然而

210
00:06:43,346 --> 00:06:44,826
系统会将它们

211
00:06:44,826 --> 00:06:46,626
按合并方式处理

212
00:06:46,626 --> 00:06:48,326
以在屏幕上显示

213
00:06:48,326 --> 00:06:48,856
这个字符

214
00:06:51,776 --> 00:06:56,536
所以问题在于

215
00:06:56,536 --> 00:06:58,286
即便文件系统

216
00:06:58,286 --> 00:06:59,566
能够将它们分别处理

217
00:06:59,566 --> 00:07:00,526
系统的其他部分

218
00:07:00,526 --> 00:07:04,676
也不一定希望

219
00:07:04,676 --> 00:07:05,326
以这种形式和它们互动

220
00:07:05,326 --> 00:07:06,176
对于网络文件服务器

221
00:07:06,176 --> 00:07:07,786
这可能再清楚不过 但

222
00:07:08,706 --> 00:07:10,636
整套软件服务

223
00:07:10,636 --> 00:07:11,676
从文件系统一直到

224
00:07:11,676 --> 00:07:13,326
基础服务以上 都能

225
00:07:13,326 --> 00:07:14,216
正确处理

226
00:07:14,946 --> 00:07:16,446
所以 为了修正这一点

227
00:07:16,446 --> 00:07:18,276
我们在 Apple File System 中

228
00:07:18,276 --> 00:07:20,166
引入了两种新的

229
00:07:20,166 --> 00:07:20,826
规范化方案

230
00:07:21,226 --> 00:07:22,866
一种是本地方案

231
00:07:22,866 --> 00:07:24,216
另一种是运行时

232
00:07:24,216 --> 00:07:24,616
方案

233
00:07:24,956 --> 00:07:26,686
本地规范化方案

234
00:07:26,686 --> 00:07:28,486
已于本周早些时候发布的

235
00:07:28,486 --> 00:07:29,926
High Sierra beta 中提供

236
00:07:29,926 --> 00:07:31,796
只能用于区分大小写

237
00:07:31,986 --> 00:07:32,966
的宗卷

238
00:07:33,116 --> 00:07:34,896
对于不区分大小写的内容

239
00:07:34,896 --> 00:07:36,486
Pavel 稍后会上台

240
00:07:36,486 --> 00:07:37,676
并向大家

241
00:07:37,676 --> 00:07:38,206
简单介绍

242
00:07:38,946 --> 00:07:39,996
本地规范化

243
00:07:39,996 --> 00:07:42,796
也将登陆 iOS 11

244
00:07:42,796 --> 00:07:43,486
只能用于抹掉数据恢复

245
00:07:43,486 --> 00:07:45,206
这意味着 从 iOS 11 开始

246
00:07:45,206 --> 00:07:47,286
如果你将 iPhone 或其他设备

247
00:07:47,286 --> 00:07:49,236
连接到 iTunes

248
00:07:49,236 --> 00:07:51,166
并还原出厂设置

249
00:07:51,366 --> 00:07:52,636
就会自动采用本地方案

250
00:07:53,286 --> 00:07:54,486
然而 我们不希望

251
00:07:54,486 --> 00:07:56,146
只有抹掉数据

252
00:07:56,146 --> 00:07:57,536
才能获得这项功能

253
00:07:57,656 --> 00:07:59,766
所以我们也将引入

254
00:07:59,766 --> 00:08:01,816
运行时规范化方案

255
00:08:01,866 --> 00:08:03,056
运行时规范化

256
00:08:03,056 --> 00:08:04,046
会自动在

257
00:08:04,046 --> 00:08:06,986
NFC 和

258
00:08:06,986 --> 00:08:09,286
NFD 之间转换

259
00:08:09,286 --> 00:08:10,656
以实现文件比较 进而实现

260
00:08:10,926 --> 00:08:11,446
检索功能

261
00:08:11,446 --> 00:08:12,596
如果找不到二者之一

262
00:08:12,596 --> 00:08:13,906
便会自动寻找另一种

263
00:08:13,906 --> 00:08:15,386
以确保你的 App

264
00:08:15,436 --> 00:08:17,126
不会从文件系统中

265
00:08:17,126 --> 00:08:17,886
收到 ENOENT

266
00:08:17,886 --> 00:08:18,436
错误

267
00:08:19,366 --> 00:08:20,376
我们在未来会推出更新

268
00:08:20,376 --> 00:08:22,076
自动转换使用

269
00:08:22,076 --> 00:08:24,696
任何一种规范形式的设备

270
00:08:24,696 --> 00:08:25,956
如果设备已经升级到了 iOS 10.3

271
00:08:25,956 --> 00:08:28,476
或 10.3.2 完成了转换

272
00:08:28,476 --> 00:08:31,046
也能通过未来升级采用新的规范形式

273
00:08:31,826 --> 00:08:35,106
这就是关于 iOS 的新消息

274
00:08:35,106 --> 00:08:36,056
至此 接下来

275
00:08:36,056 --> 00:08:37,296
交给 Pavel 让他来

276
00:08:37,296 --> 00:08:37,976
告诉你们关于 Mac 的消息

277
00:08:38,515 --> 00:08:43,515
[ 掌声 ]

278
00:08:44,516 --> 00:08:49,716
[ 背景噪音 ]

279
00:08:50,216 --> 00:08:51,216
>> 大家上午好

280
00:08:51,616 --> 00:08:53,726
我是 Pavel Sokolov

281
00:08:53,726 --> 00:08:56,536
是 Apple 文件系统团队

282
00:08:56,536 --> 00:08:56,836
的一名经理

283
00:08:57,706 --> 00:08:59,016
今天 我会介绍

284
00:08:59,016 --> 00:09:02,926
macOS 有关 APFS

285
00:09:03,146 --> 00:09:05,626
的新变化

286
00:09:05,836 --> 00:09:06,456
让我们开始

287
00:09:08,016 --> 00:09:10,516
首先我想谈谈

288
00:09:10,516 --> 00:09:12,596
其中包含哪些特性

289
00:09:12,596 --> 00:09:14,706
以防你们没有听过

290
00:09:14,706 --> 00:09:15,976
去年演示

291
00:09:15,976 --> 00:09:16,226
的内容

292
00:09:19,416 --> 00:09:22,016
一些最重要的特性

293
00:09:22,246 --> 00:09:23,736
包括 首先

294
00:09:23,736 --> 00:09:27,066
我想提醒大家 APFS

295
00:09:27,306 --> 00:09:29,336
能够用于 Apple 支持的

296
00:09:29,656 --> 00:09:31,036
所有平台

297
00:09:31,416 --> 00:09:35,006
能够用于 iOS tvOS 甚至是

298
00:09:35,006 --> 00:09:37,136
Apple Watch  当然还有

299
00:09:37,136 --> 00:09:37,396
macOS

300
00:09:38,676 --> 00:09:40,706
最了不起的一项特性

301
00:09:40,706 --> 00:09:41,236
就是文件复制

302
00:09:41,626 --> 00:09:44,026
你可以很快创建

303
00:09:44,026 --> 00:09:44,776
文件的副本

304
00:09:45,186 --> 00:09:46,596
它采用我们的

305
00:09:46,596 --> 00:09:48,726
写入时复制技术 这项技术也用于

306
00:09:48,726 --> 00:09:49,376
快照功能

307
00:09:50,176 --> 00:09:55,086
你可以使用快照功能

308
00:09:55,176 --> 00:09:56,016
创建整个文件系统

309
00:09:56,016 --> 00:09:57,666
的快照

310
00:09:57,916 --> 00:09:59,846
记住创建时间

311
00:09:59,976 --> 00:10:01,746
还可以恢复到某个快照

312
00:10:02,466 --> 00:10:03,926
我们也加入了对本地加密

313
00:10:03,926 --> 00:10:04,556
的支持

314
00:10:05,076 --> 00:10:07,306
还有空间共享

315
00:10:07,736 --> 00:10:08,936
这一点稍后我会

316
00:10:08,936 --> 00:10:10,656
多做介绍 我们还引入了

317
00:10:10,656 --> 00:10:11,976
去碎片化

318
00:10:14,156 --> 00:10:17,116
你可能会问 要如何才能

319
00:10:17,116 --> 00:10:17,446
获得 APFS

320
00:10:18,206 --> 00:10:20,346
那我们就先来

321
00:10:21,156 --> 00:10:21,266
谈谈这点

322
00:10:21,476 --> 00:10:23,096
实际上 你只需要

323
00:10:23,096 --> 00:10:25,486
安装最新的 macOS High Sierra

324
00:10:25,486 --> 00:10:27,586
你的系统宗卷

325
00:10:28,056 --> 00:10:29,416
便会由安装器

326
00:10:29,506 --> 00:10:30,156
自动转换

327
00:10:30,736 --> 00:10:33,476
至于其他宗卷

328
00:10:33,476 --> 00:10:35,156
则不会被

329
00:10:35,156 --> 00:10:36,076
自动转换

330
00:10:36,076 --> 00:10:37,576
但你仍然可以

331
00:10:37,576 --> 00:10:38,546
手动转换

332
00:10:39,436 --> 00:10:42,756
如果你要转换多个宗卷

333
00:10:43,146 --> 00:10:44,586
非常重要的一点是

334
00:10:44,586 --> 00:10:46,766
转换过后 每个分卷

335
00:10:46,766 --> 00:10:48,346
都会变为 APFS 容器

336
00:10:48,616 --> 00:10:49,966
这一点稍后

337
00:10:49,966 --> 00:10:50,646
我会讲到

338
00:10:51,586 --> 00:10:53,136
而多个容器间不会

339
00:10:53,136 --> 00:10:53,736
共享空间

340
00:10:55,106 --> 00:10:56,686
空间共享是一项

341
00:10:56,686 --> 00:10:58,776
十分重要且令人惊叹的特性

342
00:10:58,776 --> 00:11:00,176
它可以节省你的磁盘空间

343
00:11:01,746 --> 00:11:03,106
我们希望你能

344
00:11:03,106 --> 00:11:04,426
充分利用这一点 我也会

345
00:11:04,426 --> 00:11:07,496
展示利用方法

346
00:11:08,196 --> 00:11:11,086
你可能会问 我们支持

347
00:11:11,086 --> 00:11:12,146
哪些宗卷 以及哪些

348
00:11:12,146 --> 00:11:13,836
能转换成 APFS 格式

349
00:11:14,976 --> 00:11:17,706
我们可以转换 HFS+ 宗卷

350
00:11:18,306 --> 00:11:22,146
CoreStorage  Fusion  甚至是

351
00:11:22,146 --> 00:11:23,316
FileVault 加密的磁盘

352
00:11:24,566 --> 00:11:26,176
都可以自动转换成

353
00:11:27,326 --> 00:11:27,996
APFS 格式

354
00:11:28,636 --> 00:11:34,216
如果你想手动

355
00:11:34,216 --> 00:11:37,256
转换已有

356
00:11:37,256 --> 00:11:39,776
宗卷 只需要

357
00:11:39,776 --> 00:11:40,946
打开 磁盘工具 App

358
00:11:41,776 --> 00:11:43,506
右键点按分卷

359
00:11:43,936 --> 00:11:46,366
选择 转换至 APFS

360
00:11:46,476 --> 00:11:46,896
就可以了

361
00:11:48,016 --> 00:11:51,246
我之前说过 这样一来

362
00:11:51,246 --> 00:11:54,096
这个宗卷会变成容器

363
00:11:55,416 --> 00:11:56,726
而容器无法共享

364
00:11:56,726 --> 00:11:57,136
空间

365
00:11:57,776 --> 00:11:59,226
如果你有多个分卷

366
00:11:59,226 --> 00:12:00,626
又想要利用

367
00:12:00,626 --> 00:12:01,586
这项功能

368
00:12:01,586 --> 00:12:03,676
我们推荐你

369
00:12:03,676 --> 00:12:05,026
将分卷添加到

370
00:12:05,026 --> 00:12:07,916
已有的容器

371
00:12:08,656 --> 00:12:08,776
再转移数据

372
00:12:09,016 --> 00:12:10,096
为什么空间共享

373
00:12:10,096 --> 00:12:10,996
如此重要 它又有

374
00:12:10,996 --> 00:12:11,386
哪些优点

375
00:12:12,306 --> 00:12:13,806
我们就来

376
00:12:13,806 --> 00:12:13,976
大致谈一下

377
00:12:14,696 --> 00:12:18,886
如果你是一名开发者

378
00:12:18,886 --> 00:12:20,416
这是一种比较典型的

379
00:12:20,416 --> 00:12:20,966
宗卷布局

380
00:12:22,156 --> 00:12:23,746
你可能有多个

381
00:12:23,746 --> 00:12:24,336
宗卷 对吗

382
00:12:24,856 --> 00:12:28,516
多个宗卷的问题在于

383
00:12:28,516 --> 00:12:30,886
如果某个宗卷

384
00:12:30,886 --> 00:12:32,386
空间不足

385
00:12:33,696 --> 00:12:35,316
你可能这里有一点

386
00:12:35,396 --> 00:12:36,996
可用空间 那里有一点

387
00:12:36,996 --> 00:12:39,146
可用空间 但都不在

388
00:12:39,146 --> 00:12:40,416
同一个地方

389
00:12:40,416 --> 00:12:42,186
所以要复制文件的时候

390
00:12:42,186 --> 00:12:45,826
也无能为力

391
00:12:46,086 --> 00:12:50,306
APFS 格式下 容器是

392
00:12:50,496 --> 00:12:52,476
宗卷的一个分区

393
00:12:52,476 --> 00:12:55,046
各个宗卷共享容器的

394
00:12:55,046 --> 00:12:55,796
可用空间

395
00:12:56,946 --> 00:12:58,066
我们看一下这张图

396
00:12:58,326 --> 00:13:01,156
一般情况下

397
00:13:01,156 --> 00:13:02,346
会有一个 GPT 卷头  一个 EFI

398
00:13:02,346 --> 00:13:05,086
服务分区

399
00:13:05,356 --> 00:13:06,726
HFS 格式下 每个宗卷就是一个

400
00:13:06,726 --> 00:13:07,316
分区

401
00:13:07,586 --> 00:13:10,766
而在 APFS 格式下 像我说的

402
00:13:10,986 --> 00:13:12,576
这个分区共有八个容器

403
00:13:12,626 --> 00:13:13,576
两个宗卷

404
00:13:13,576 --> 00:13:15,136
也在其中

405
00:13:15,596 --> 00:13:16,596
比方说 你想

406
00:13:16,596 --> 00:13:17,116
填满空间

407
00:13:17,476 --> 00:13:19,786
如你们所见 在 HFS 下

408
00:13:19,786 --> 00:13:20,076
没有空间了

409
00:13:21,006 --> 00:13:22,756
但在 APFS 下 你还有

410
00:13:22,756 --> 00:13:27,176
可用空间 可以存储

411
00:13:28,176 --> 00:13:28,276
数据

412
00:13:28,496 --> 00:13:30,146
接下来看一下复制

413
00:13:31,736 --> 00:13:32,946
复制是一项了不起的特性

414
00:13:32,946 --> 00:13:34,276
你可以快速创建

415
00:13:34,276 --> 00:13:35,296
文件的副本

416
00:13:35,996 --> 00:13:38,186
这个例子中 我们

417
00:13:38,186 --> 00:13:39,396
选取一些本地文件

418
00:13:39,396 --> 00:13:42,036
它由一些文件块构成

419
00:13:42,946 --> 00:13:44,586
过去 要想复制文件

420
00:13:44,886 --> 00:13:46,406
你要复制文件的数据

421
00:13:46,406 --> 00:13:47,666
这很花时间

422
00:13:48,126 --> 00:13:49,696
不光花费时间 还会占用

423
00:13:49,696 --> 00:13:50,006
空间

424
00:13:51,146 --> 00:13:54,176
APFS 下 我们只需要

425
00:13:54,176 --> 00:13:55,466
记录对这个文件的引用

426
00:13:55,466 --> 00:13:57,626
记住文件的位置

427
00:13:57,626 --> 00:14:02,186
只需复制

428
00:14:02,186 --> 00:14:02,386
元数据即可

429
00:14:02,386 --> 00:14:04,386
这项功能很棒 因为过程很快

430
00:14:04,436 --> 00:14:05,706
也不会浪费空间

431
00:14:06,626 --> 00:14:08,716
你也许会问 如果修改了文件

432
00:14:08,716 --> 00:14:09,736
会怎样

433
00:14:10,666 --> 00:14:12,626
毕竟这只是一个副本

434
00:14:13,706 --> 00:14:15,766
实际上 复制时写入技术

435
00:14:15,766 --> 00:14:18,446
此时生效

436
00:14:18,916 --> 00:14:21,746
新的文件数据会被写入

437
00:14:21,746 --> 00:14:23,436
可用空间 而我们

438
00:14:23,436 --> 00:14:24,826
只是创建了另一个引用

439
00:14:26,126 --> 00:14:30,996
很简单 也能节省空间

440
00:14:31,206 --> 00:14:33,456
另一项有趣的

441
00:14:33,456 --> 00:14:35,186
APFS 特性

442
00:14:35,186 --> 00:14:35,936
是稀疏文件

443
00:14:35,936 --> 00:14:37,416
让我举个例子

444
00:14:37,886 --> 00:14:40,876
比如说你的桌面上

445
00:14:40,916 --> 00:14:43,356
有一张猫的图片

446
00:14:43,356 --> 00:14:47,716
比如这样的 你想要

447
00:14:48,366 --> 00:14:48,446
编辑它

448
00:14:51,316 --> 00:14:53,776
那么 在 APFS 下

449
00:14:53,776 --> 00:14:55,906
和 HFS 下 它都应该

450
00:14:55,906 --> 00:14:57,726
有相同的初始外观

451
00:14:58,376 --> 00:15:00,606
文件的大小

452
00:15:00,606 --> 00:15:02,476
是 1 MB

453
00:15:02,476 --> 00:15:04,406
然后你想要

454
00:15:04,406 --> 00:15:06,116
编辑它

455
00:15:06,236 --> 00:15:07,266
比方说 如果你的应用程序

456
00:15:07,266 --> 00:15:09,326
打算跳过文件的

457
00:15:09,396 --> 00:15:11,456
末尾 写入额外数据

458
00:15:11,456 --> 00:15:12,916
会发生什么

459
00:15:13,796 --> 00:15:15,176
这就是区别

460
00:15:16,286 --> 00:15:19,516
HFS 下 文件系统会

461
00:15:19,516 --> 00:15:21,896
将跳过的部分

462
00:15:22,376 --> 00:15:25,066
填满 0  你的文件大小

463
00:15:25,066 --> 00:15:28,016
也会变成 3 MB

464
00:15:28,016 --> 00:15:28,206
对吗

465
00:15:29,246 --> 00:15:30,596
文件的中间部分

466
00:15:30,596 --> 00:15:32,006
会被文件系统

467
00:15:32,006 --> 00:15:33,436
填满 0  也会占用

468
00:15:33,436 --> 00:15:33,826
空间

469
00:15:34,816 --> 00:15:36,746
而在 APFS 下 你会得到

470
00:15:36,746 --> 00:15:37,506
一个稀疏文件

471
00:15:38,806 --> 00:15:40,896
文件的中间部分

472
00:15:40,896 --> 00:15:42,376
逻辑上依然存在

473
00:15:42,416 --> 00:15:44,606
如果从那里开始读取

474
00:15:44,606 --> 00:15:46,656
会读到很多 0

475
00:15:46,656 --> 00:15:47,386
但物理上只占用两块空间

476
00:15:48,466 --> 00:15:50,516
这同样可以节约空间

477
00:15:50,516 --> 00:15:52,606
加快速度

478
00:15:52,656 --> 00:15:53,716
希望大家知道这个特性

479
00:15:54,156 --> 00:15:57,366
所以如大家所见 文件有两种

480
00:15:57,366 --> 00:15:57,936
大小

481
00:15:58,836 --> 00:16:00,426
即逻辑大小和物理

482
00:16:00,426 --> 00:16:00,726
大小

483
00:16:00,726 --> 00:16:03,486
希望大家能知道

484
00:16:04,106 --> 00:16:06,566
但如果考虑到

485
00:16:06,566 --> 00:16:08,386
快照和文件复制

486
00:16:08,386 --> 00:16:11,726
事情又会变得

487
00:16:12,496 --> 00:16:12,716
更复杂

488
00:16:12,806 --> 00:16:15,206
我们也大概

489
00:16:15,206 --> 00:16:15,656
讲一下

490
00:16:15,706 --> 00:16:18,556
文件到底多大

491
00:16:18,556 --> 00:16:18,716
就成了问题

492
00:16:18,716 --> 00:16:20,986
比如说还是同样的情况

493
00:16:20,986 --> 00:16:23,366
你有一个稀疏文件

494
00:16:23,366 --> 00:16:25,136
占两个文件块

495
00:16:25,136 --> 00:16:25,936
对它进行了一次

496
00:16:25,936 --> 00:16:28,146
快照 记录下

497
00:16:28,146 --> 00:16:30,176
这些块的位置 然后再

498
00:16:30,176 --> 00:16:31,106
编辑这个文件

499
00:16:31,586 --> 00:16:34,656
如你所见 复制时写入

500
00:16:34,656 --> 00:16:35,706
技术生效 并会

501
00:16:35,706 --> 00:16:38,026
为刚写入的文件块

502
00:16:38,026 --> 00:16:39,016
分配空间

503
00:16:40,496 --> 00:16:41,586
那么这个文件到底有多大

504
00:16:42,036 --> 00:16:43,876
还是 3 MB

505
00:16:44,006 --> 00:16:44,256
对吗

506
00:16:45,636 --> 00:16:47,616
物理上 你只为它

507
00:16:47,696 --> 00:16:49,796
分配了两个块 但

508
00:16:49,796 --> 00:16:51,636
如果你删除这个文件

509
00:16:51,636 --> 00:16:53,176
只能得到一个块的空间

510
00:16:53,296 --> 00:16:54,506
这一点很重要

511
00:16:54,506 --> 00:16:56,996
希望大家知道

512
00:16:57,086 --> 00:17:00,006
接下来 我们会讲

513
00:17:00,006 --> 00:17:02,106
APFS 另一项重要特性

514
00:17:02,106 --> 00:17:04,185
即 Unicode 和

515
00:17:04,185 --> 00:17:05,826
规范化的支持

516
00:17:07,776 --> 00:17:10,796
如大家所知 这项功能

517
00:17:10,906 --> 00:17:12,786
没什么存在感 除非

518
00:17:12,786 --> 00:17:13,346
出了问题

519
00:17:14,516 --> 00:17:17,026
我们就来看一下 在这方面

520
00:17:17,026 --> 00:17:19,756
APFS 和 HFS 有何不同

521
00:17:20,356 --> 00:17:23,076
默认状况下 APFS

522
00:17:23,076 --> 00:17:25,346
不区分大小写 也不执行

523
00:17:25,346 --> 00:17:27,646
规范化 不像 HFS

524
00:17:27,646 --> 00:17:28,756
是一种区分大小写

525
00:17:28,756 --> 00:17:29,926
且执行规范化的文件系统

526
00:17:30,766 --> 00:17:31,756
区别何在

527
00:17:32,176 --> 00:17:35,346
其实很简单

528
00:17:35,346 --> 00:17:37,776
APFS 下 我们

529
00:17:37,896 --> 00:17:39,656
严格按照你命名的方式

530
00:17:39,656 --> 00:17:40,236
存储文件名

531
00:17:41,496 --> 00:17:43,436
我们会计算不区分大小写

532
00:17:43,436 --> 00:17:44,756
和不执行规范化

533
00:17:45,406 --> 00:17:46,226
的散列值 以及文件名

534
00:17:46,226 --> 00:17:47,786
并将它们储存在一起

535
00:17:49,066 --> 00:17:50,896
所以 检索的时候

536
00:17:51,136 --> 00:17:52,976
我们执行同样的散列算法

537
00:17:52,976 --> 00:17:53,526
即可

538
00:17:54,326 --> 00:17:55,746
我们会进行散列值比较

539
00:17:55,746 --> 00:17:57,236
这样就可以快速 高效地

540
00:17:57,236 --> 00:17:57,976
找到文件名

541
00:18:00,176 --> 00:18:04,686
提醒大家非常重要的一点

542
00:18:04,776 --> 00:18:06,006
如果遍历目录结构

543
00:18:06,006 --> 00:18:07,626
文件名会按照

544
00:18:07,626 --> 00:18:09,256
散列值排序

545
00:18:09,526 --> 00:18:13,826
而非你们认为的

546
00:18:13,826 --> 00:18:16,286
按照字母表的

547
00:18:16,286 --> 00:18:17,266
自然排序

548
00:18:18,476 --> 00:18:19,716
我们还支持 Unicode 9.0

549
00:18:19,716 --> 00:18:22,706
不像 HFS 仅支持

550
00:18:22,706 --> 00:18:23,336
Unicode 3.2

551
00:18:23,896 --> 00:18:26,686
我们不允许像 HFS 那样

552
00:18:26,686 --> 00:18:29,646
使用未分配的码位

553
00:18:29,646 --> 00:18:31,036
这是为了确保未来的

554
00:18:31,036 --> 00:18:31,866
兼容性

555
00:18:32,316 --> 00:18:34,286
所以一旦新的 Unicode

556
00:18:34,286 --> 00:18:36,046
推出 就可以很简单地

557
00:18:36,046 --> 00:18:37,676
为你所用 只需替换

558
00:18:37,676 --> 00:18:38,536
大小写转换和字符表

559
00:18:39,716 --> 00:18:41,436
APFS 支持规范形式

560
00:18:41,436 --> 00:18:43,786
大小写转换 不像 HFS

561
00:18:43,856 --> 00:18:45,346
只支持简化形式大小写转换

562
00:18:45,626 --> 00:18:47,136
规范形式大小写转换更好

563
00:18:47,376 --> 00:18:48,756
因为这样可以更自然地

564
00:18:48,756 --> 00:18:50,206
进行排序等操作

565
00:18:50,206 --> 00:18:51,856
同用户的预期一致

566
00:18:52,366 --> 00:18:56,016
接下来 再讲一下

567
00:18:56,016 --> 00:18:58,406
Unicode 9.0 以及为什么

568
00:18:58,406 --> 00:18:58,646
它很重要

569
00:18:58,716 --> 00:19:00,946
你可能会问 谁会在乎

570
00:19:00,946 --> 00:19:02,626
Unicode 的版本呢

571
00:19:03,396 --> 00:19:04,276
事实上 你应该在乎

572
00:19:05,956 --> 00:19:07,956
Unicode 9.0 能让你的

573
00:19:07,956 --> 00:19:09,426
App 真正面向世界

574
00:19:09,786 --> 00:19:13,806
例如 在 Unicode 8 中

575
00:19:13,806 --> 00:19:15,406
增加了对美洲原住民语言

576
00:19:15,406 --> 00:19:17,076
切罗基语的支持

577
00:19:17,396 --> 00:19:20,006
于是就有了对应的小写字符

578
00:19:20,226 --> 00:19:21,986
和大写字符来

579
00:19:21,986 --> 00:19:22,516
支持这门语言

580
00:19:23,326 --> 00:19:24,656
我们基本支持

581
00:19:24,756 --> 00:19:26,256
任何有书面形式

582
00:19:26,256 --> 00:19:28,126
且为人所理解的语言

583
00:19:28,926 --> 00:19:30,456
如果这还不算面向世界

584
00:19:30,456 --> 00:19:33,776
我也不知道什么算了

585
00:19:33,996 --> 00:19:35,386
我们支持最新的表情符号

586
00:19:36,206 --> 00:19:37,136
你可能会问 为什么

587
00:19:37,136 --> 00:19:41,486
当然是因为

588
00:19:41,486 --> 00:19:42,436
这很酷

589
00:19:42,436 --> 00:19:46,126
你可能会想 好吧 但 HFS

590
00:19:46,156 --> 00:19:47,256
也支持表情文字

591
00:19:47,416 --> 00:19:48,376
这很重要吗

592
00:19:48,756 --> 00:19:50,536
重要的其实是

593
00:19:50,536 --> 00:19:51,196
准确性

594
00:19:51,926 --> 00:19:55,006
HFS 确实支持表情文字 却为此

595
00:19:55,046 --> 00:19:56,546
牺牲了一些准确性

596
00:19:56,806 --> 00:20:00,566
APFS 中 大写转换

597
00:20:00,786 --> 00:20:02,556
完全兼容 Unicode 9.0

598
00:20:02,556 --> 00:20:06,586
而某些字符

599
00:20:06,586 --> 00:20:09,276
还有特定的规则

600
00:20:09,276 --> 00:20:11,376
例如土耳其语中

601
00:20:11,376 --> 00:20:12,966
大写带点的 I

602
00:20:13,376 --> 00:20:16,836
或是德语中的 ß

603
00:20:16,836 --> 00:20:17,916
都能正确变成大写

604
00:20:19,026 --> 00:20:21,356
接下来再谈一下

605
00:20:21,356 --> 00:20:21,986
引导支持

606
00:20:22,756 --> 00:20:24,426
你当然可以用 APFS 分区来引导

607
00:20:24,876 --> 00:20:26,156
你肯定要打开你的 Mac

608
00:20:27,166 --> 00:20:27,266
对吧

609
00:20:28,066 --> 00:20:29,806
我们在 APFS 中嵌入了

610
00:20:29,806 --> 00:20:30,316
EFI 装载程序

611
00:20:31,076 --> 00:20:32,326
在这里 嵌入

612
00:20:32,326 --> 00:20:34,356
专门指 驱动程序

613
00:20:34,356 --> 00:20:36,256
嵌入了文件系统格式中

614
00:20:36,256 --> 00:20:37,576
使用非常简单

615
00:20:37,576 --> 00:20:41,076
可以被支持

616
00:20:41,076 --> 00:20:43,666
虚拟机的第三方

617
00:20:43,666 --> 00:20:44,176
挂载

618
00:20:44,836 --> 00:20:46,306
你不需要挂载

619
00:20:46,996 --> 00:20:49,266
完整的驱动程序 或是

620
00:20:49,266 --> 00:20:50,376
使用完整的标准格式

621
00:20:50,706 --> 00:20:52,056
你只需要按照

622
00:20:52,056 --> 00:20:53,156
超级块中的一些建议

623
00:20:53,156 --> 00:20:55,076
加载已经嵌入

624
00:20:55,076 --> 00:20:56,996
宗卷中的驱动程序

625
00:20:56,996 --> 00:20:57,376
即可

626
00:20:58,546 --> 00:21:00,336
这使得 APFS 面向未来

627
00:21:00,336 --> 00:21:02,426
因为如果文件系统格式发生变动

628
00:21:03,006 --> 00:21:04,976
你只需要

629
00:21:04,976 --> 00:21:06,386
从新的宗卷加载新的驱动程序即可

630
00:21:07,416 --> 00:21:08,746
APFS 允许用加密磁盘

631
00:21:08,746 --> 00:21:09,236
引导

632
00:21:09,376 --> 00:21:10,946
也可以从 Fusion Drive 引导

633
00:21:11,666 --> 00:21:13,316
加密引导事实上

634
00:21:13,316 --> 00:21:14,186
更加安全

635
00:21:14,806 --> 00:21:17,076
我们再讲一下关于

636
00:21:17,076 --> 00:21:18,076
安全和加密的内容

637
00:21:19,476 --> 00:21:20,856
我们支持之前使用的

638
00:21:20,856 --> 00:21:23,156
FileVault 模式

639
00:21:24,146 --> 00:21:26,176
可以将 FileVault 加密宗卷

640
00:21:26,176 --> 00:21:28,256
转换成 APFS 格式

641
00:21:29,156 --> 00:21:31,636
你的恢复密钥不会变化

642
00:21:31,686 --> 00:21:33,506
我们不仅

643
00:21:33,506 --> 00:21:34,786
支持相同的工作原理

644
00:21:34,786 --> 00:21:36,816
还保持了兼容性 所以

645
00:21:36,816 --> 00:21:38,476
无论什么时候转换格式

646
00:21:38,476 --> 00:21:40,326
都能保留已有的

647
00:21:40,326 --> 00:21:41,476
恢复密钥和

648
00:21:41,476 --> 00:21:41,996
恢复密码

649
00:21:42,156 --> 00:21:43,296
你不需要

650
00:21:43,296 --> 00:21:44,636
整体迁移数据

651
00:21:44,666 --> 00:21:45,956
转换过程也不会耗费

652
00:21:45,956 --> 00:21:46,456
太多时间

653
00:21:47,586 --> 00:21:48,656
另一点很重要的是

654
00:21:48,656 --> 00:21:50,196
快照也是加密的

655
00:21:50,896 --> 00:21:52,526
这意味着 如果

656
00:21:52,526 --> 00:21:54,526
你在没有加密时

657
00:21:54,526 --> 00:21:56,116
记录了快照

658
00:21:56,116 --> 00:21:57,986
之后又打开了加密

659
00:21:57,986 --> 00:22:00,556
这份快照也会受到保护

660
00:22:01,076 --> 00:22:02,506
APFS 也支持 Fusion Drive

661
00:22:02,506 --> 00:22:05,046
此前已有的特性

662
00:22:05,046 --> 00:22:06,456
都会保留

663
00:22:06,456 --> 00:22:08,906
比如回写缓存

664
00:22:08,906 --> 00:22:09,466
和读取缓存

665
00:22:09,746 --> 00:22:11,446
为了发挥固态硬盘

666
00:22:11,446 --> 00:22:13,476
的高速 我们也做出了

667
00:22:13,476 --> 00:22:15,616
改进 现在你所有的

668
00:22:15,616 --> 00:22:17,326
元数据将始终存储在

669
00:22:17,356 --> 00:22:19,796
固态硬盘上 使得速度

670
00:22:19,976 --> 00:22:20,806
略有提升

671
00:22:20,806 --> 00:22:25,036
另一项重要的特性是

672
00:22:25,036 --> 00:22:25,946
去碎片化

673
00:22:26,826 --> 00:22:27,866
APFS 支持智能

674
00:22:27,866 --> 00:22:28,466
碎片整理工具

675
00:22:29,456 --> 00:22:30,486
为什么叫 智能

676
00:22:30,486 --> 00:22:31,896
因为它能够理解

677
00:22:32,036 --> 00:22:33,266
哪里碎片出现最频繁

678
00:22:33,266 --> 00:22:35,106
哪些文件最容易

679
00:22:35,106 --> 00:22:37,106
产生碎片 也会优先

680
00:22:37,106 --> 00:22:37,786
整理这些碎片

681
00:22:38,256 --> 00:22:40,526
它只会整理机械硬盘的碎片

682
00:22:41,116 --> 00:22:43,626
去碎片化只会发生在

683
00:22:43,626 --> 00:22:45,266
设备空闲时

684
00:22:45,266 --> 00:22:46,376
不会干扰你的

685
00:22:46,376 --> 00:22:47,506
正常工作

686
00:22:51,116 --> 00:22:53,746
另一项有趣的功能

687
00:22:53,746 --> 00:22:54,376
是快照

688
00:22:55,486 --> 00:22:57,076
我们大概讲一下

689
00:22:58,216 --> 00:23:00,376
想象你现在

690
00:23:00,376 --> 00:23:01,936
有一个文件系统 还有

691
00:23:01,936 --> 00:23:03,966
一些文件 你想要

692
00:23:03,966 --> 00:23:05,356
记下文件系统

693
00:23:05,356 --> 00:23:06,986
当前的状态 以备未来引用

694
00:23:07,506 --> 00:23:11,206
接下来发生的 是

695
00:23:11,276 --> 00:23:13,206
我们会记下对所有的

696
00:23:13,206 --> 00:23:15,596
文件 引用 创建元数据的

697
00:23:15,596 --> 00:23:18,796
快照 并保存

698
00:23:18,796 --> 00:23:19,976
如果你之后对文件系统

699
00:23:20,076 --> 00:23:22,236
进行了改动 比如编辑了

700
00:23:22,236 --> 00:23:25,616
一个文件 之前提到的

701
00:23:25,616 --> 00:23:26,726
复制时写入技术便会生效

702
00:23:26,726 --> 00:23:30,296
在新位置分配一部分空间

703
00:23:30,296 --> 00:23:32,246
并写入你的改动

704
00:23:32,566 --> 00:23:34,296
已有的文件块保持原样

705
00:23:34,826 --> 00:23:36,596
再比如 你删除了一个文件

706
00:23:37,806 --> 00:23:39,266
文件块本身并没有被删除

707
00:23:39,266 --> 00:23:41,206
删除的只是

708
00:23:41,266 --> 00:23:44,456
对这个文件的引用

709
00:23:44,606 --> 00:23:46,826
所以如果你之后想恢复到

710
00:23:46,856 --> 00:23:49,156
某个快照 便会将这个文件

711
00:23:49,156 --> 00:23:51,016
恢复到之前的状态

712
00:23:51,926 --> 00:23:53,836
比如说 你做的编辑

713
00:23:53,996 --> 00:23:56,516
会消失 而你删除的文件

714
00:23:56,516 --> 00:23:59,776
则会被恢复

715
00:23:59,846 --> 00:24:00,946
快照是一项很棒的特性

716
00:24:01,976 --> 00:24:02,796
创建的速度很快

717
00:24:03,576 --> 00:24:05,186
但要注意 快照会

718
00:24:05,186 --> 00:24:06,116
占用空间

719
00:24:07,086 --> 00:24:08,466
因此 创建

720
00:24:08,466 --> 00:24:10,146
快照需要授权

721
00:24:11,236 --> 00:24:12,286
如果你想

722
00:24:12,286 --> 00:24:13,016
利用这项特性

723
00:24:13,016 --> 00:24:15,346
请联系我们

724
00:24:15,636 --> 00:24:17,306
那现在 我想给大家

725
00:24:17,306 --> 00:24:17,866
做个演示

726
00:24:17,866 --> 00:24:19,336
我要请上 Pavel Císler

727
00:24:19,336 --> 00:24:20,646
向大家演示

728
00:24:20,646 --> 00:24:20,966
Time Machine

729
00:24:21,516 --> 00:24:25,706
[ 掌声 ]

730
00:24:26,206 --> 00:24:26,726
>> 谢谢 Pavel

731
00:24:26,726 --> 00:24:28,616
大家好

732
00:24:28,616 --> 00:24:32,556
我是 Pavel Cisler

733
00:24:32,556 --> 00:24:35,016
如果你在想 为什么

734
00:24:35,186 --> 00:24:36,346
这个人的名

735
00:24:36,346 --> 00:24:37,516
和前一个人的名

736
00:24:37,516 --> 00:24:40,256
一模一样 那是因为

737
00:24:40,296 --> 00:24:42,446
我们测试了一下文件复制 然后

738
00:24:42,976 --> 00:24:45,556
[笑声] 总之 我是

739
00:24:45,616 --> 00:24:46,776
Finder 和 Time Machine

740
00:24:46,776 --> 00:24:47,086
团队的一名经理

741
00:24:47,086 --> 00:24:50,666
在场有谁在用 Time Machine

742
00:24:51,726 --> 00:24:52,236
哇 很棒

743
00:24:52,306 --> 00:24:53,646
很多人

744
00:24:54,146 --> 00:24:55,606
有人知道 mobile Time Machine

745
00:24:55,606 --> 00:24:56,876
这项功能吗

746
00:24:58,136 --> 00:24:58,856
有些人知道

747
00:24:58,856 --> 00:24:59,646
不是很多

748
00:25:00,196 --> 00:25:02,686
好吧 我将向大家展示

749
00:25:03,006 --> 00:25:04,246
一下 mobile Time Machine

750
00:25:04,646 --> 00:25:04,746
这项功能

751
00:25:04,896 --> 00:25:06,576
让我切换到

752
00:25:06,576 --> 00:25:07,236
我的演示用机

753
00:25:08,806 --> 00:25:11,626
mobile Time Machine 让

754
00:25:11,626 --> 00:25:14,516
Time Machine 更为便利

755
00:25:14,516 --> 00:25:16,016
这项功能让你

756
00:25:16,196 --> 00:25:19,796
可以在路上

757
00:25:19,796 --> 00:25:20,986
进行备份 即使你手边

758
00:25:20,986 --> 00:25:22,196
没有备份设备

759
00:25:22,196 --> 00:25:24,536
没有 Time Capsule

760
00:25:24,536 --> 00:25:25,056
或者其他硬盘

761
00:25:25,306 --> 00:25:26,516
比方说你带着笔记本电脑

762
00:25:26,516 --> 00:25:27,186
在外面

763
00:25:27,186 --> 00:25:30,826
你的 Time Capsule 在家

764
00:25:31,726 --> 00:25:33,596
但你的电脑

765
00:25:33,596 --> 00:25:34,976
还在使用 mobile Time Machine

766
00:25:34,976 --> 00:25:37,346
每小时备份 很棒的

767
00:25:37,346 --> 00:25:38,306
一项特性 对吧

768
00:25:38,306 --> 00:25:39,556
如果你丢了笔记本电脑

769
00:25:39,556 --> 00:25:41,016
或是丢了硬盘

770
00:25:41,016 --> 00:25:42,796
这可能帮不到你

771
00:25:42,796 --> 00:25:44,326
但如果

772
00:25:44,326 --> 00:25:45,836
你不小心删掉了

773
00:25:45,836 --> 00:25:47,116
一个很重要的表格

774
00:25:47,166 --> 00:25:50,396
之类的 mobile Time Machine 能

775
00:25:50,796 --> 00:25:51,996
解决这个问题

776
00:25:52,376 --> 00:25:54,576
这项功能自从

777
00:25:54,576 --> 00:25:57,096
Mac OS X Lion 开始便已存在

778
00:25:57,096 --> 00:25:58,156
我来快速演示一下

779
00:25:58,156 --> 00:25:58,486
它是怎么工作的

780
00:25:58,486 --> 00:25:59,806
那么

781
00:26:00,306 --> 00:26:02,406
这是 Time Machine 的恢复

782
00:26:02,406 --> 00:26:04,906
UI 这是我的笔记本电脑

783
00:26:04,906 --> 00:26:06,456
把它从办公室带来的

784
00:26:06,456 --> 00:26:07,656
没有连接到任何 Time Capsule

785
00:26:07,656 --> 00:26:09,726
但我仍然能浏览

786
00:26:09,836 --> 00:26:13,036
备份记录

787
00:26:13,206 --> 00:26:14,666
还能浏览 查看我的文件

788
00:26:16,456 --> 00:26:18,406
这就是那份

789
00:26:19,476 --> 00:26:20,866
我早先一直在写

790
00:26:20,866 --> 00:26:22,096
但一不留神删掉的

791
00:26:22,096 --> 00:26:24,086
秘密预算文档 就像这样

792
00:26:24,086 --> 00:26:28,866
我恢复了这份文档

793
00:26:28,866 --> 00:26:30,256
又能继续编写了

794
00:26:30,516 --> 00:26:32,446
非常简单的功能

795
00:26:33,106 --> 00:26:34,516
但需要的时候

796
00:26:34,516 --> 00:26:35,616
能帮上大忙

797
00:26:36,046 --> 00:26:40,846
你们都是开发者

798
00:26:41,216 --> 00:26:43,136
想知道它的

799
00:26:43,136 --> 00:26:45,276
具体工作原理 对吗

800
00:26:45,666 --> 00:26:48,666
Mac OS X Lion 中

801
00:26:48,666 --> 00:26:50,076
我们首次开发了这项特性

802
00:26:50,356 --> 00:26:51,906
当时它很复杂

803
00:26:51,986 --> 00:26:55,076
至少需要两个

804
00:26:55,396 --> 00:26:56,076
后台进程

805
00:26:56,426 --> 00:26:58,886
其中之一是

806
00:26:58,926 --> 00:26:59,786
VirtualFileSystem Overlay

807
00:26:59,786 --> 00:27:02,456
如果你们曾经

808
00:27:02,456 --> 00:27:03,676
接触过类似的东西 就会知道

809
00:27:03,676 --> 00:27:04,996
它挺难办的

810
00:27:05,386 --> 00:27:06,546
它实际上是

811
00:27:06,546 --> 00:27:08,596
几万行代码

812
00:27:08,986 --> 00:27:11,576
在 macOS High Sierra 中

813
00:27:11,836 --> 00:27:14,316
Time Machine 团队一直忙于

814
00:27:14,876 --> 00:27:16,086
删掉这些代码

815
00:27:16,526 --> 00:27:19,786
我们所做的 就是

816
00:27:19,786 --> 00:27:21,326
基于 APFS 快照 重新采用了

817
00:27:21,326 --> 00:27:23,306
mobile Time Machine

818
00:27:23,306 --> 00:27:25,036
也就是我刚才向你们

819
00:27:25,036 --> 00:27:25,416
展示的

820
00:27:26,326 --> 00:27:28,556
现在忘掉这个 UI

821
00:27:28,556 --> 00:27:30,626
让我打开终端 向你们

822
00:27:30,626 --> 00:27:33,656
展示一下部分工作原理

823
00:27:34,046 --> 00:27:35,866
谈到快照

824
00:27:36,626 --> 00:27:37,966
它是什么样的

825
00:27:37,966 --> 00:27:39,756
有何使用体验

826
00:27:39,756 --> 00:27:41,276
事实上 它非常

827
00:27:41,396 --> 00:27:44,896
像一个宗卷 类似地

828
00:27:44,966 --> 00:27:47,526
你可以用很多

829
00:27:47,526 --> 00:27:50,376
宗卷管理工具来

830
00:27:50,376 --> 00:27:50,746
检视它

831
00:27:51,136 --> 00:27:53,056
我最喜欢的是 mount 所以

832
00:27:53,056 --> 00:27:54,916
我就在这里输入 mount

833
00:27:55,056 --> 00:27:57,906
不输入任何参数 如果这样做

834
00:27:57,906 --> 00:27:59,436
这里就会列出你所有的磁盘

835
00:27:59,946 --> 00:28:01,726
你们可以看到 最上面

836
00:28:01,726 --> 00:28:06,046
根目录 有一个

837
00:28:06,046 --> 00:28:07,106
交换分区

838
00:28:07,426 --> 00:28:09,246
有一些其他普通的宗卷

839
00:28:09,246 --> 00:28:10,726
但接下来 有一些很有趣的宗卷

840
00:28:11,186 --> 00:28:14,006
有特定的挂载点

841
00:28:14,006 --> 00:28:15,986
路径中包含

842
00:28:15,986 --> 00:28:17,816
Time Machine

843
00:28:17,816 --> 00:28:19,956
还有这些很奇怪的

844
00:28:20,016 --> 00:28:22,626
时间戳

845
00:28:22,866 --> 00:28:25,596
这些就是 APFS 快照

846
00:28:25,596 --> 00:28:28,796
代表每个小时

847
00:28:28,796 --> 00:28:30,836
分别的 mobile Time Machine

848
00:28:30,836 --> 00:28:32,496
备份 好的

849
00:28:32,756 --> 00:28:34,046
每一个都是一个快照

850
00:28:34,046 --> 00:28:35,476
都以宗卷的形式

851
00:28:35,476 --> 00:28:35,966
装载

852
00:28:36,216 --> 00:28:37,786
所以如果我进入

853
00:28:38,566 --> 00:28:41,326
Time Machine 的恢复 UI

854
00:28:41,326 --> 00:28:42,056
它们就在右边这里

855
00:28:43,146 --> 00:28:44,836
现在我回去

856
00:28:45,146 --> 00:28:48,246
这些快照不是

857
00:28:48,246 --> 00:28:51,186
一直挂载的

858
00:28:51,186 --> 00:28:52,626
而是延迟挂载 所以

859
00:28:52,626 --> 00:28:54,036
不需要常驻

860
00:28:54,036 --> 00:28:55,946
mobile Time Machine 只会在

861
00:28:56,006 --> 00:28:57,836
需要它们的时候才使用

862
00:28:58,296 --> 00:28:58,756
之后就会卸载它们

863
00:28:58,756 --> 00:29:02,436
那我来展示一下

864
00:29:02,436 --> 00:29:03,796
这样做时会发生什么

865
00:29:03,796 --> 00:29:06,076
我来模拟一下

866
00:29:06,076 --> 00:29:07,686
mobile Time Machine 用完快照

867
00:29:07,686 --> 00:29:09,726
并将它们全部卸载时

868
00:29:09,726 --> 00:29:10,786
它会做什么

869
00:29:10,786 --> 00:29:12,756
我会继续用这行叫做 tmutil

870
00:29:12,756 --> 00:29:15,506
的命令 再加上一个叫

871
00:29:15,506 --> 00:29:18,106
unmountlocalSnapshots 的动词

872
00:29:18,176 --> 00:29:20,346
他就开始

873
00:29:20,346 --> 00:29:21,746
卸载所有的快照了

874
00:29:22,006 --> 00:29:25,236
所以现在 如果我回到恢复 UI

875
00:29:25,236 --> 00:29:28,026
它其实要重新挂载

876
00:29:28,066 --> 00:29:28,716
这些快照 没错

877
00:29:28,716 --> 00:29:31,616
这个过程很快

878
00:29:32,146 --> 00:29:34,826
已经加载完了

879
00:29:34,826 --> 00:29:37,656
大概 20 个宗卷

880
00:29:37,716 --> 00:29:39,186
这很棒

881
00:29:39,636 --> 00:29:42,386
现在 我要开始

882
00:29:42,506 --> 00:29:43,756
进行一次备份

883
00:29:43,756 --> 00:29:45,066
mobile Time Machine 每一个小时

884
00:29:45,206 --> 00:29:45,906
备份一次

885
00:29:45,906 --> 00:29:47,476
它会自行唤醒并创建一个

886
00:29:47,476 --> 00:29:48,056
快照

887
00:29:48,296 --> 00:29:49,856
我们不需要干等

888
00:29:49,856 --> 00:29:51,396
一个小时 等它自己

889
00:29:51,396 --> 00:29:51,546
备份

890
00:29:51,606 --> 00:29:53,456
所以 我会再用一个工具

891
00:29:54,016 --> 00:30:00,336
叫 tmutil snapshot 这样

892
00:30:00,586 --> 00:30:02,146
就执行了一次备份

893
00:30:02,446 --> 00:30:05,026
可以看到 只花了

894
00:30:05,086 --> 00:30:07,166
不到一秒钟就备份了

895
00:30:07,216 --> 00:30:08,656
整台设备

896
00:30:09,006 --> 00:30:09,876
这非常棒

897
00:30:10,516 --> 00:30:14,036
[ 掌声 ]

898
00:30:14,536 --> 00:30:16,856
接下来 我要

899
00:30:17,346 --> 00:30:18,796
展示 刚才确实

900
00:30:18,866 --> 00:30:19,056
生效了

901
00:30:19,056 --> 00:30:21,566
我要一不小心

902
00:30:21,566 --> 00:30:22,476
删除一些数据

903
00:30:23,996 --> 00:30:27,786
哦 不 我都干了些什么

904
00:30:27,786 --> 00:30:28,616
我最重要的影片

905
00:30:28,616 --> 00:30:30,626
接下来 我要回到

906
00:30:30,626 --> 00:30:33,526
恢复 UI  然后 啊 还好

907
00:30:33,916 --> 00:30:36,476
它在这儿 然后把它恢复

908
00:30:36,866 --> 00:30:39,406
再一次 mobile Time Machine

909
00:30:39,406 --> 00:30:39,976
雪中送炭

910
00:30:40,846 --> 00:30:44,486
那么 它到底为什么这么快

911
00:30:44,646 --> 00:30:46,376
就像另一位 Pavel

912
00:30:46,376 --> 00:30:48,546
向你们解释的 快照

913
00:30:48,776 --> 00:30:50,856
是一种复制时的写入技术

914
00:30:50,856 --> 00:30:53,346
他只是获取

915
00:30:53,346 --> 00:30:56,036
数据的引用

916
00:30:56,036 --> 00:30:57,616
如果真的发生变化

917
00:30:57,616 --> 00:30:59,816
再执行拷贝过程

918
00:30:59,816 --> 00:31:00,576
拷贝是推迟的

919
00:31:00,576 --> 00:31:01,536
就是所谓的 延迟

920
00:31:02,056 --> 00:31:03,586
所以更快

921
00:31:03,586 --> 00:31:03,996
更高效

922
00:31:05,606 --> 00:31:07,546
我还要

923
00:31:07,546 --> 00:31:09,216
指出一点 我刚才

924
00:31:09,216 --> 00:31:10,606
恢复的这部电影

925
00:31:10,606 --> 00:31:12,886
所占内存其实相当大

926
00:31:12,966 --> 00:31:15,196
是我们去年演讲

927
00:31:15,886 --> 00:31:16,236
的视频

928
00:31:16,846 --> 00:31:20,926
有 1.1 GB  之前的

929
00:31:20,926 --> 00:31:23,286
mobile Time Machine 有一些

930
00:31:23,286 --> 00:31:25,446
局限 例如不能备份

931
00:31:25,446 --> 00:31:27,876
20 MB 以上文件的

932
00:31:27,876 --> 00:31:28,396
改动

933
00:31:28,396 --> 00:31:30,066
现在 所有这些局限

934
00:31:30,626 --> 00:31:31,256
都不存在了

935
00:31:31,256 --> 00:31:32,966
基于 APFS 快照的

936
00:31:32,966 --> 00:31:36,046
mobile Time Machine 会备份所有的东西

937
00:31:36,156 --> 00:31:37,686
且非常快速

938
00:31:37,686 --> 00:31:39,416
高效

939
00:31:39,536 --> 00:31:42,116
这就是 基于 APFS 快照的

940
00:31:42,116 --> 00:31:43,376
mobile Time Machine

941
00:31:44,526 --> 00:31:44,996
好的

942
00:31:44,996 --> 00:31:47,896
那么现在 我要

943
00:31:49,106 --> 00:31:51,096
切换回幻灯片

944
00:31:51,096 --> 00:31:54,146
Pavel 会告诉你们

945
00:31:54,146 --> 00:31:56,056
我们用了哪些 API

946
00:31:56,106 --> 00:31:56,756
来实现这一切

947
00:31:56,756 --> 00:31:57,276
谢谢大家

948
00:31:58,516 --> 00:32:04,676
[ 掌声 ]

949
00:32:05,176 --> 00:32:05,926
>> 谢谢 Pavel.

950
00:32:06,516 --> 00:32:10,976
[ 背景噪音 ]

951
00:32:11,476 --> 00:32:13,486
你们会问 有哪些

952
00:32:13,486 --> 00:32:15,416
API  如何利用

953
00:32:15,416 --> 00:32:15,856
它们

954
00:32:16,646 --> 00:32:21,006
好消息是 如果你用

955
00:32:21,006 --> 00:32:22,076
Swift 编程 你也应该这么做

956
00:32:22,076 --> 00:32:25,896
那么一切都已经

957
00:32:26,946 --> 00:32:27,536
处理好了

958
00:32:28,246 --> 00:32:31,166
copyItem API 会自动

959
00:32:31,166 --> 00:32:33,216
利用 APFS 中的

960
00:32:34,116 --> 00:32:35,016
复制特性

961
00:32:36,116 --> 00:32:37,346
背后的原理是

962
00:32:37,346 --> 00:32:39,246
可以看到 如果宗卷

963
00:32:39,246 --> 00:32:41,946
兼容复制 那么复制

964
00:32:41,996 --> 00:32:43,816
就会在拷贝时

965
00:32:43,816 --> 00:32:44,756
自动进行

966
00:32:46,176 --> 00:32:47,736
还有 replaceItem API

967
00:32:47,986 --> 00:32:48,946
会处理不安全的

968
00:32:48,946 --> 00:32:51,596
存档 同样也是自动的

969
00:32:52,136 --> 00:32:54,286
你不需要做额外的

970
00:32:54,286 --> 00:32:56,366
事情

971
00:32:56,626 --> 00:32:57,846
我还想提一些指南

972
00:32:57,896 --> 00:32:59,916
里面包括正确的操作

973
00:33:00,016 --> 00:33:02,876
和重要事项

974
00:33:03,576 --> 00:33:05,656
尤其是 exchangedata

975
00:33:05,856 --> 00:33:06,766
不建议使用

976
00:33:06,796 --> 00:33:08,636
我们在一年前提出了这一点

977
00:33:09,456 --> 00:33:11,116
并且 它不仅不建议使用

978
00:33:11,856 --> 00:33:13,766
也无法在 APFS 中

979
00:33:13,766 --> 00:33:14,376
使用

980
00:33:15,456 --> 00:33:17,666
如果你想作为替代可以

981
00:33:17,936 --> 00:33:19,586
利用 atomic file swap（原子文件交换）

982
00:33:19,586 --> 00:33:21,276
或者 atomic safe save（原子安全存储）

983
00:33:21,276 --> 00:33:23,626
要使用新 API

984
00:33:23,626 --> 00:33:25,376
叫做 rename_np

985
00:33:26,086 --> 00:33:29,876
还有 请不要使用

986
00:33:29,876 --> 00:33:30,336
Carbon API

987
00:33:30,716 --> 00:33:31,696
它也已经过时了

988
00:33:32,016 --> 00:33:33,526
以兼容模式

989
00:33:33,526 --> 00:33:34,316
运行于 APFS

990
00:33:34,546 --> 00:33:35,866
会变得更慢

991
00:33:36,236 --> 00:33:38,196
我们不建议使用 因为它会

992
00:33:38,196 --> 00:33:38,626
拖慢系统

993
00:33:38,926 --> 00:33:41,706
作为替代 请使用 Foundation API

994
00:33:42,636 --> 00:33:46,196
如果你想在底层操作

995
00:33:46,196 --> 00:33:48,716
你可以使用 copyfile 函数

996
00:33:48,716 --> 00:33:51,366
拷贝文件

997
00:33:51,686 --> 00:33:53,186
它支持 COPYFILE_CLONE

998
00:33:53,186 --> 00:33:53,556
标签

999
00:33:53,736 --> 00:33:57,346
针对开发者预览版

1000
00:33:57,656 --> 00:33:59,196
有一些注意事项

1001
00:34:00,276 --> 00:34:02,206
尤其是 我们不会

1002
00:34:02,206 --> 00:34:03,906
自动升级

1003
00:34:03,956 --> 00:34:06,216
基于机械硬盘的文件系统

1004
00:34:07,056 --> 00:34:07,776
我们还在提升性能

1005
00:34:07,776 --> 00:34:11,556
如果你想

1006
00:34:11,606 --> 00:34:14,826
将引导宗卷转换成 APFS

1007
00:34:14,826 --> 00:34:15,856
单纯转换格式

1008
00:34:15,856 --> 00:34:16,366
是不够的

1009
00:34:16,656 --> 00:34:17,676
你必须要使用

1010
00:34:17,676 --> 00:34:18,156
安装器转换

1011
00:34:18,346 --> 00:34:24,076
所以  APFS 即将登陆 macOS

1012
00:34:24,166 --> 00:34:25,025
它终于到来了

1013
00:34:25,646 --> 00:34:27,406
我们建议你使用

1014
00:34:27,406 --> 00:34:27,826
这种文件系统

1015
00:34:28,815 --> 00:34:30,306
它支持 Fusion Drive

1016
00:34:30,306 --> 00:34:32,136
它将支持本地

1017
00:34:32,136 --> 00:34:32,706
加密

1018
00:34:33,016 --> 00:34:34,536
空间共享是一项很棒的

1019
00:34:34,536 --> 00:34:34,896
特性

1020
00:34:35,956 --> 00:34:37,315
它还具备复制和

1021
00:34:37,446 --> 00:34:39,376
快照功能 可以让你的

1022
00:34:39,376 --> 00:34:40,966
存储更为高效

1023
00:34:41,005 --> 00:34:41,396
更为快速

1024
00:34:42,096 --> 00:34:44,146
请测试你的 App

1025
00:34:44,146 --> 00:34:45,886
正如你们刚才注意的

1026
00:34:45,886 --> 00:34:47,485
HFS 和 APFS 有很多

1027
00:34:47,485 --> 00:34:48,666
重要的区别

1028
00:34:48,826 --> 00:34:49,956
我们希望你的 App

1029
00:34:49,956 --> 00:34:51,255
取得成功 令人惊艳

1030
00:34:51,996 --> 00:34:53,966
请一定尝试一下 并反馈

1031
00:34:53,966 --> 00:34:55,196
所遇到的 bug

1032
00:34:56,596 --> 00:34:57,746
欲知更多信息

1033
00:34:57,746 --> 00:34:59,916
请访问这个 URL

1034
00:34:59,916 --> 00:35:01,136
谢谢

