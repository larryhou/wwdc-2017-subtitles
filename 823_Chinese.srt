1
00:00:19,052 --> 00:00:20,787
让我们谈下图形符号的设计吧

2
00:00:21,255 --> 00:00:24,024
我觉得我们可以从
“什么是图形符号？”开始说起

3
00:00:24,491 --> 00:00:28,228
从传统意义上讲
图形符号是一个地质学符号

4
00:00:28,395 --> 00:00:34,635
不过它还可能是现实世界中某个物体
的象征或者说大体的形状

5
00:00:35,936 --> 00:00:42,276
或者它还可以是用来表示
作用或概念的形状集合

6
00:00:43,143 --> 00:00:46,547
但是你可能就会想
“这和图标有什么区别呢”

7
00:00:47,014 --> 00:00:48,715
为了解释清楚它们之间的区别

8
00:00:48,782 --> 00:00:52,319
让我们看个例子
这里有四个iPhone的图标

9
00:00:53,921 --> 00:00:59,326
图标可以指代一个很广泛的资源集
它可以是简单的低保真度图形

10
00:00:59,393 --> 00:01:03,497
像是你在左边看到的这种
还可以是色彩丰富的

11
00:01:03,564 --> 00:01:07,968
高度渲染的资源
就像你在右边看到的这种

12
00:01:09,770 --> 00:01:13,106
左边的两种资源也能被定义为图形符号

13
00:01:13,640 --> 00:01:15,676
因为它们所具有的简洁性

14
00:01:15,742 --> 00:01:18,645
在大多数情况下
图形符号都是单色的

15
00:01:18,712 --> 00:01:20,714
并且应该通过编程的方式来上色

16
00:01:23,817 --> 00:01:25,953
这个是iOS钱包应用的图标

17
00:01:26,520 --> 00:01:30,324
它有着不错的色彩运用
以及一些细微的阴影

18
00:01:31,859 --> 00:01:34,494
而这就是该应用表示为
图形符号的样子

19
00:01:34,561 --> 00:01:39,032
你应该明白我的意思了
让我们再看一个例子

20
00:01:40,868 --> 00:01:42,503
这个是通话应用的图标

21
00:01:43,203 --> 00:01:48,108
如果我们去掉图标化的形状
还有颜色的话

22
00:01:48,475 --> 00:01:50,577
你应该猜得到
我们剩下的就是图形符号了

23
00:01:50,644 --> 00:01:54,414
在本例中
图形符号其实是图标的一个组成部分

24
00:01:56,650 --> 00:02:00,120
有效的图形符号有一些关键的特征

25
00:02:00,821 --> 00:02:03,023
它们在形式上是高度简化的

26
00:02:03,924 --> 00:02:06,059
它们在概念上是统一的

27
00:02:07,794 --> 00:02:11,665
把它们放到对应功能或目的上下文环境
中 能很快明白它们所代表的意思

28
00:02:15,302 --> 00:02:18,205
我们很多人有过这样的经历
你到了一个陌生的地方

29
00:02:18,605 --> 00:02:22,709
我们不了解当地的文化或者语言

30
00:02:22,776 --> 00:02:26,246
当我们看到某个
认识的符号时就会放心多了

31
00:02:26,813 --> 00:02:28,682
在本例中 你不需要知道德语

32
00:02:28,749 --> 00:02:32,119
就可以知道去机场的正确方向

33
00:02:33,420 --> 00:02:37,257
这要归功于这个简单的统一图形

34
00:02:37,524 --> 00:02:40,794
在这个上下文环境中
我们知道它代表的是机场

35
00:02:42,229 --> 00:02:44,932
图形符号是个很强大的交流工具

36
00:02:45,399 --> 00:02:48,735
这也是为什么我们将其
作为UI设计语言一部分的原因

37
00:02:50,737 --> 00:02:52,339
（美味的）

38
00:02:52,406 --> 00:02:56,810
让我们做个快速练习来
概念化什么是高效的图形符号

39
00:02:57,678 --> 00:03:00,514
比方说 我们需要一个
图形符号用来表示美味的

40
00:03:01,882 --> 00:03:05,752
你可能想到的第一个图形符号
是芝士汉堡

41
00:03:06,220 --> 00:03:09,957
你不用跟我争辩
我确实认为芝士汉堡是美味的

42
00:03:11,425 --> 00:03:14,228
不管你是否相信
有些人不喜欢芝士汉堡

43
00:03:14,294 --> 00:03:16,697
什么比芝士汉堡更好呢？

44
00:03:17,798 --> 00:03:18,632
披萨饼吗？

45
00:03:19,666 --> 00:03:21,535
我看见有些人摇了摇头

46
00:03:21,602 --> 00:03:22,469
我不知道 好吧

47
00:03:22,536 --> 00:03:24,905
我觉得我可以找到一个
大家都觉得美味的

48
00:03:25,272 --> 00:03:26,206
冰淇淋怎么样？

49
00:03:27,574 --> 00:03:28,408
还不行？

50
00:03:28,609 --> 00:03:31,345
好吧
我觉得你们知道我要表达的意思了

51
00:03:31,411 --> 00:03:36,350
对于某种食物总会有人喜欢
有人不喜欢

52
00:03:38,118 --> 00:03:40,821
这就不是有效的图形符号
让我们换个角度看下

53
00:03:41,755 --> 00:03:45,859
让我们探究一下给我们美味
这种感觉的核心怎么样

54
00:03:48,061 --> 00:03:49,796
像是某种表情的表达

55
00:03:50,097 --> 00:03:52,633
它很可爱 很有相关性 表现力也很强

56
00:03:54,401 --> 00:03:56,670
不过我们要注意
在某些文化中

57
00:03:57,905 --> 00:04:04,378
使用如面部 嘴部 或是身体的某部分
是看作不合礼仪的

58
00:04:04,444 --> 00:04:06,213
请记住这一点

59
00:04:06,280 --> 00:04:09,917
那么美味的统一象征是什么呢？

60
00:04:13,120 --> 00:04:14,254
一个心形怎么样？

61
00:04:15,522 --> 00:04:16,656
我们喜欢芝士汉堡

62
00:04:16,723 --> 00:04:17,925
有些人喜欢披萨饼

63
00:04:18,091 --> 00:04:19,560
有些人喜欢冰淇淋

64
00:04:20,093 --> 00:04:22,496
喜爱和美味的关联度

65
00:04:22,563 --> 00:04:24,898
比起我们其他的选择来说更为统一

66
00:04:26,099 --> 00:04:27,835
这就是个不错的有效解决方案了

67
00:04:29,937 --> 00:04:34,942
让我们看些我们将图形符号
运用于平台当中的例子

68
00:04:37,477 --> 00:04:38,512
在Mac上

69
00:04:40,581 --> 00:04:41,548
在菜单栏上

70
00:04:42,916 --> 00:04:47,287
工具栏中 侧边栏中

71
00:04:47,754 --> 00:04:51,091
还有最近推出的触摸栏中

72
00:04:52,092 --> 00:04:54,962
在iOS上 标签栏中

73
00:04:57,130 --> 00:04:57,998
列表视图中

74
00:04:59,666 --> 00:05:01,568
还有主屏快速操作菜单中

75
00:05:02,236 --> 00:05:04,104
你会发现图形符号无处不在

76
00:05:04,872 --> 00:05:07,341
你们还会发现
它们很少是单独存在的

77
00:05:08,008 --> 00:05:12,513
这就是为什么我们要牢记
一些设计考虑因素

78
00:05:12,579 --> 00:05:14,815
在我们设计一组图形符号的时候

79
00:05:17,451 --> 00:05:19,920
我们的目标是让这些图形符号
看上去像是一个家庭

80
00:05:19,987 --> 00:05:22,723
而家庭是有个特征的共享集的

81
00:05:23,690 --> 00:05:26,527
让我们来看下视觉上的重量

82
00:05:27,961 --> 00:05:30,797
间距 还有摆放位置

83
00:05:34,568 --> 00:05:38,672
在本例中 这个集合感觉有点太重了

84
00:05:39,306 --> 00:05:44,211
左边的两个图形符号看上去有点小

85
00:05:44,278 --> 00:05:47,181
所以它们看上去就不是很突出

86
00:05:48,115 --> 00:05:49,183
如果我们将指引打开

87
00:05:49,249 --> 00:05:52,419
就会发现
我们被这些垂直边界所限制了

88
00:05:53,053 --> 00:05:56,156
让我们将其关掉
将这两个图形符号放大一些

89
00:05:57,891 --> 00:05:59,193
这样就感觉好多了

90
00:06:00,494 --> 00:06:01,628
这是放大前的样子

91
00:06:03,530 --> 00:06:04,431
而这是放大后的样子

92
00:06:05,566 --> 00:06:09,937
因为信息的椭圆形和电话的狭窄形状

93
00:06:10,838 --> 00:06:15,242
有着较少的表面积
我们就可利用放大来达到视觉上的平衡

94
00:06:16,643 --> 00:06:19,413
让我们看下这个集合中的另一个细节

95
00:06:19,479 --> 00:06:21,181
可让这些图形符号更像是一个家庭

96
00:06:22,049 --> 00:06:27,921
请看一下视频摄像头中的缺口
以及信封中的间隙

97
00:06:27,988 --> 00:06:29,423
它们共享了相同的行间距

98
00:06:30,958 --> 00:06:32,492
接下来让我们看一下间距

99
00:06:36,797 --> 00:06:40,267
这里看上去像是这些
来自不同的地方图像符号都被缩放

100
00:06:40,334 --> 00:06:42,236
以适应相同的大小

101
00:06:42,936 --> 00:06:46,340
不过因为它们没有一样的行间距

102
00:06:46,406 --> 00:06:48,542
其中某些就比其他的图形符号
看上去更突出

103
00:06:48,609 --> 00:06:53,113
这就让它看上去令人困惑
而且它们不像是一个家庭

104
00:06:54,281 --> 00:06:58,385
当我们对其进行规范化的时候
我们会创建一个更具有一致性的集合

105
00:07:00,153 --> 00:07:01,355
这是之前的样子

106
00:07:04,791 --> 00:07:05,792
这是规范化之后的样子

107
00:07:06,059 --> 00:07:09,429
一个像是这样的细微改变
会极大地影响你应用的完善性

108
00:07:10,664 --> 00:07:11,999
让我们接着介绍下摆放位置

109
00:07:13,166 --> 00:07:17,404
这个例子可以很好地说明
视觉上的位置摆放

110
00:07:17,471 --> 00:07:21,575
有时候被忽视了
不过这里我们是可以看出来的

111
00:07:21,642 --> 00:07:24,545
我们在播放图形符号周围
加上了这个中心圆

112
00:07:25,512 --> 00:07:30,484
注意这个圆是完美位于空间中心的
但是从视觉上说

113
00:07:30,551 --> 00:07:32,019
它就是有点偏了

114
00:07:32,085 --> 00:07:36,290
所以我们就把它向右边移了几个像素

115
00:07:36,356 --> 00:07:39,193
这样我们就实现了一个更加平衡的效果

116
00:07:40,327 --> 00:07:41,461
这是之前的样子

117
00:07:43,330 --> 00:07:44,231
而这是改动后的样子

118
00:07:45,632 --> 00:07:50,604
视觉上的位置摆放适用于
几乎所有不对称的资源

119
00:07:50,671 --> 00:07:53,006
或是一边比另一边更大的资源

120
00:07:53,874 --> 00:07:55,008
在本例中

121
00:07:55,075 --> 00:07:59,246
这个分享图形符号
也是完美放到空间中心的

122
00:07:59,313 --> 00:08:01,982
不过它看上去就是有些低了

123
00:08:03,217 --> 00:08:05,118
通过将其向上移动几个像素

124
00:08:05,185 --> 00:08:08,055
我们又实现了一个更好的效果

125
00:08:10,691 --> 00:08:13,827
顺便说一下 你可以将这个内边距
直接固化到资源中

126
00:08:14,294 --> 00:08:15,896
这样在你进行集成的时候

127
00:08:16,730 --> 00:08:19,466
你就只需要将这个资源放到
空间的完美中心位置

128
00:08:19,800 --> 00:08:24,304
而任何需要进行的调整
都可以通过简单的资源交换来完成

129
00:08:26,273 --> 00:08:27,941
在你制作图形符号的时候

130
00:08:30,410 --> 00:08:31,512
请以集合为单位进行制作

131
00:08:33,113 --> 00:08:37,116
将它们在上下文环境中进行测试
而且要在设备上进行预览

132
00:08:37,183 --> 00:08:39,186
而这会帮你实现这些目标

133
00:08:44,258 --> 00:08:45,759
当你从零开始创造某个东西时

134
00:08:45,826 --> 00:08:47,961
要找到开始的地方总是很难

135
00:08:48,028 --> 00:08:49,196
可能东西太多无从下手

136
00:08:50,664 --> 00:08:52,266
那么你要如何开始呢？

137
00:08:52,332 --> 00:08:54,501
让我们看一些会有所帮助的考虑因素

138
00:08:55,435 --> 00:08:57,971
当设计你应用中的空间时

139
00:08:58,372 --> 00:09:00,574
像是列表视图或者按钮

140
00:09:00,974 --> 00:09:04,211
考虑下类型和图形符号之间的关系

141
00:09:05,279 --> 00:09:07,047
如果你有个轻类型的样式

142
00:09:07,114 --> 00:09:09,383
就可以让你的行间距
与此类型的权重相匹配

143
00:09:10,350 --> 00:09:11,652
如果你有个重类型的样式

144
00:09:11,718 --> 00:09:15,122
或者更重的 或是填充的图形符号样式
它可能会更加合适

145
00:09:17,724 --> 00:09:19,660
这里是个Airbnb的例子

146
00:09:20,527 --> 00:09:23,297
这里图形符号的行间距
与字体匹配得非常好

147
00:09:23,530 --> 00:09:27,868
看上去他们是真的考虑到了
类型和图形符号间的关系

148
00:09:27,935 --> 00:09:29,203
这看上去很不错

149
00:09:31,338 --> 00:09:35,676
对于系统空间 比如Mac上的触摸栏

150
00:09:35,742 --> 00:09:39,780
或是iOS中的主屏快速操作菜单

151
00:09:40,080 --> 00:09:44,318
一个重要的资源就是现有系统的资源

152
00:09:46,587 --> 00:09:50,257
在Airbnb的主屏快速操作菜单中
我们可以看出

153
00:09:50,324 --> 00:09:54,361
他们定制图形符号与
平台共享图形符号之间的一致性

154
00:09:56,597 --> 00:09:59,199
你们还会发现
这里的图形符号要更大和更重些

155
00:09:59,266 --> 00:10:00,934
比起他们应用内的对应部分来说

156
00:10:02,436 --> 00:10:05,939
这个例子很好地体现了
Airbnb的技术水平

157
00:10:07,975 --> 00:10:11,512
目前在我们的人类界面指南中
有一些模板

158
00:10:11,578 --> 00:10:16,083
来帮助你匹配视觉重量
行间距以及摆放位置

159
00:10:16,850 --> 00:10:18,418
它可以帮你节约时间

160
00:10:19,319 --> 00:10:22,022
符合现存的设计语言

161
00:10:22,189 --> 00:10:25,058
你甚至可以直接从这些模板中导出资源

162
00:10:25,125 --> 00:10:26,226
这真的很棒

163
00:10:29,129 --> 00:10:32,299
我们在很短的时间内介绍了一些内容

164
00:10:32,366 --> 00:10:33,767
让我们快速回顾一下

165
00:10:34,601 --> 00:10:39,039
在概念化图形符号的时候
你需要简化并且从整体上进行思考

166
00:10:40,841 --> 00:10:43,677
在制作图形符号的时候
以集合为单位进行制作

167
00:10:44,211 --> 00:10:47,314
在上下文环境进行测试
来让它们像是一个家庭

168
00:10:49,316 --> 00:10:54,154
请考虑到你图形符号的类型之间的关系

169
00:10:56,156 --> 00:11:00,694
最后
就是要让你的资源适应于系统空间

170
00:11:01,762 --> 00:11:03,764
我希望这些小技巧可以帮助你们

171
00:11:03,830 --> 00:11:06,733
创建出更加高效
以及令人愉快的体验

172
00:11:07,234 --> 00:11:09,403
请等一下 这里好像有点问题

173
00:11:10,504 --> 00:11:11,438
这样看上去就好多了

174
00:11:11,672 --> 00:11:12,639
非常感谢

