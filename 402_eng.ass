[Script Info]
; Script generated by FFmpeg/Lavc57.89.100
ScriptType: v4.00+
PlayResX: 384
PlayResY: 288

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,16,&Hffffff,&Hffffff,&H0,&H0,0,0,0,0,100,100,0,0,1,1,0,2,10,10,10,0

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:19.52,0:00:23.80,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:00:24.30,0:00:24.61,Default,,0,0,0,,Thank you.
Dialogue: 0,0:00:25.19,0:00:26.52,Default,,0,0,0,,Welcome to what's new in Swift.
Dialogue: 0,0:00:27.26,0:00:28.21,Default,,0,0,0,,My name is Doug Gregor.
Dialogue: 0,0:00:28.44,0:00:29.30,Default,,0,0,0,,I'm here with some of my
Dialogue: 0,0:00:29.30,0:00:30.45,Default,,0,0,0,,colleagues from the Swift team
Dialogue: 0,0:00:30.70,0:00:32.29,Default,,0,0,0,,to talk about some of the great
Dialogue: 0,0:00:32.29,0:00:33.87,Default,,0,0,0,,things we're bringing in Swift
Dialogue: 0,0:00:33.87,0:00:34.25,Default,,0,0,0,,4.
Dialogue: 0,0:00:35.28,0:00:38.87,Default,,0,0,0,,Now, if you follow iOS Developer
Dialogue: 0,0:00:38.87,0:00:40.58,Default,,0,0,0,,and author Ole Begemann, you
Dialogue: 0,0:00:40.58,0:00:41.49,Default,,0,0,0,,actually know everything that's
Dialogue: 0,0:00:41.49,0:00:42.36,Default,,0,0,0,,already in Swift 4.
Dialogue: 0,0:00:43.61,0:00:45.05,Default,,0,0,0,,This is something I absolutely
Dialogue: 0,0:00:45.05,0:00:46.90,Default,,0,0,0,,love about the Swift community.
Dialogue: 0,0:00:47.30,0:00:49.73,Default,,0,0,0,,What Ole did here is, he looked
Dialogue: 0,0:00:49.73,0:00:50.89,Default,,0,0,0,,at all the proposals, what was
Dialogue: 0,0:00:50.89,0:00:53.04,Default,,0,0,0,,going into Swift 4, and what did
Dialogue: 0,0:00:53.04,0:00:53.37,Default,,0,0,0,,he do?
Dialogue: 0,0:00:53.37,0:00:55.00,Default,,0,0,0,,He built a playground to
Dialogue: 0,0:00:55.00,0:00:56.35,Default,,0,0,0,,demonstrate how these features
Dialogue: 0,0:00:56.35,0:00:57.93,Default,,0,0,0,,worked, and he shared it with
Dialogue: 0,0:00:57.93,0:00:59.00,Default,,0,0,0,,the world so we could all learn
Dialogue: 0,0:00:59.00,0:00:59.39,Default,,0,0,0,,from it.
Dialogue: 0,0:01:00.14,0:01:01.00,Default,,0,0,0,,This is awesome.
Dialogue: 0,0:01:01.90,0:01:03.99,Default,,0,0,0,,And it's possible because at any
Dialogue: 0,0:01:03.99,0:01:05.43,Default,,0,0,0,,point you can go over to
Dialogue: 0,0:01:05.43,0:01:07.09,Default,,0,0,0,,Swift.org, our home of open
Dialogue: 0,0:01:07.09,0:01:09.28,Default,,0,0,0,,source, and download a snapshot
Dialogue: 0,0:01:09.28,0:01:10.77,Default,,0,0,0,,of the latest and greatest Swift
Dialogue: 0,0:01:10.77,0:01:11.34,Default,,0,0,0,,compiler.
Dialogue: 0,0:01:12.05,0:01:13.63,Default,,0,0,0,,That snapshot is a toolchain
Dialogue: 0,0:01:13.63,0:01:16.02,Default,,0,0,0,,that you can install into Xcode.
Dialogue: 0,0:01:16.93,0:01:18.58,Default,,0,0,0,,Provides new compiler, debugger,
Dialogue: 0,0:01:18.58,0:01:19.65,Default,,0,0,0,,source kit, everything.
Dialogue: 0,0:01:19.65,0:01:20.70,Default,,0,0,0,,So, you can build your app
Dialogue: 0,0:01:20.70,0:01:21.91,Default,,0,0,0,,against the latest tools.
Dialogue: 0,0:01:22.13,0:01:23.03,Default,,0,0,0,,Try out some of the new
Dialogue: 0,0:01:23.03,0:01:24.47,Default,,0,0,0,,features, check whether we fixed
Dialogue: 0,0:01:24.47,0:01:25.23,Default,,0,0,0,,your favorite bug.
Dialogue: 0,0:01:25.34,0:01:27.77,Default,,0,0,0,,Of course, this is all possible
Dialogue: 0,0:01:27.77,0:01:29.29,Default,,0,0,0,,because Swift is open source.
Dialogue: 0,0:01:29.29,0:01:30.43,Default,,0,0,0,,We develop everything in the
Dialogue: 0,0:01:30.43,0:01:32.41,Default,,0,0,0,,open on GitHub, so you can
Dialogue: 0,0:01:32.41,0:01:33.12,Default,,0,0,0,,follow along.
Dialogue: 0,0:01:33.53,0:01:34.75,Default,,0,0,0,,You can participate if you're
Dialogue: 0,0:01:34.75,0:01:35.35,Default,,0,0,0,,interested.
Dialogue: 0,0:01:36.27,0:01:38.71,Default,,0,0,0,,And also, the way Swift evolves.
Dialogue: 0,0:01:38.71,0:01:40.23,Default,,0,0,0,,The standard library, the
Dialogue: 0,0:01:40.23,0:01:42.21,Default,,0,0,0,,language is through this open
Dialogue: 0,0:01:42.21,0:01:43.93,Default,,0,0,0,,evolution process where we
Dialogue: 0,0:01:44.08,0:01:46.04,Default,,0,0,0,,evaluate individual proposals.
Dialogue: 0,0:01:46.40,0:01:48.12,Default,,0,0,0,,Refine them improve them, to
Dialogue: 0,0:01:48.12,0:01:49.85,Default,,0,0,0,,make Swift better for all the
Dialogue: 0,0:01:49.85,0:01:51.16,Default,,0,0,0,,development community.
Dialogue: 0,0:01:52.35,0:01:54.04,Default,,0,0,0,,Now as you undoubtedly heard by
Dialogue: 0,0:01:54.04,0:01:56.26,Default,,0,0,0,,now Xcode 9 introduces
Dialogue: 0,0:01:56.26,0:01:57.85,Default,,0,0,0,,refactoring support for Swift.
Dialogue: 0,0:01:58.52,0:02:01.74,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:02:02.24,0:02:05.26,Default,,0,0,0,,So, all fo the language level
Dialogue: 0,0:02:05.26,0:02:07.18,Default,,0,0,0,,bits that make refactoring work
Dialogue: 0,0:02:07.18,0:02:08.85,Default,,0,0,0,,for Swift actually lived down in
Dialogue: 0,0:02:08.85,0:02:09.58,Default,,0,0,0,,the Swift project.
Dialogue: 0,0:02:09.58,0:02:10.72,Default,,0,0,0,,So, we'll be open sourcing that
Dialogue: 0,0:02:10.72,0:02:11.23,Default,,0,0,0,,soon.
Dialogue: 0,0:02:11.55,0:02:12.75,Default,,0,0,0,,The great thing about this is
Dialogue: 0,0:02:12.75,0:02:14.52,Default,,0,0,0,,then you can check out and build
Dialogue: 0,0:02:14.52,0:02:16.29,Default,,0,0,0,,the Swift source code, build
Dialogue: 0,0:02:16.29,0:02:17.83,Default,,0,0,0,,your own refactorings and then
Dialogue: 0,0:02:17.83,0:02:19.23,Default,,0,0,0,,through the toolchain mechanism
Dialogue: 0,0:02:19.23,0:02:20.63,Default,,0,0,0,,I just talked about, try them
Dialogue: 0,0:02:20.63,0:02:21.63,Default,,0,0,0,,out in Xcode.
Dialogue: 0,0:02:22.03,0:02:22.87,Default,,0,0,0,,All right, it's a way of really
Dialogue: 0,0:02:22.87,0:02:23.90,Default,,0,0,0,,working with your development
Dialogue: 0,0:02:23.90,0:02:24.36,Default,,0,0,0,,tools.
Dialogue: 0,0:02:26.19,0:02:27.79,Default,,0,0,0,,Now, also part of our open
Dialogue: 0,0:02:27.79,0:02:29.27,Default,,0,0,0,,source ecosystem is the Swift
Dialogue: 0,0:02:29.31,0:02:30.13,Default,,0,0,0,,package manager.
Dialogue: 0,0:02:30.46,0:02:31.63,Default,,0,0,0,,So, this supports a growing
Dialogue: 0,0:02:31.63,0:02:33.73,Default,,0,0,0,,ecosystem with over 7000
Dialogue: 0,0:02:33.73,0:02:34.87,Default,,0,0,0,,packages on GitHub.
Dialogue: 0,0:02:35.38,0:02:37.00,Default,,0,0,0,,This is extremely popular for
Dialogue: 0,0:02:37.00,0:02:38.94,Default,,0,0,0,,server-side Swift, where Swift
Dialogue: 0,0:02:38.94,0:02:41.67,Default,,0,0,0,,PM makes it really easy to grab
Dialogue: 0,0:02:41.67,0:02:42.71,Default,,0,0,0,,the server components you need
Dialogue: 0,0:02:42.71,0:02:44.53,Default,,0,0,0,,to build a server-side Swift app
Dialogue: 0,0:02:44.53,0:02:45.54,Default,,0,0,0,,on Linux.
Dialogue: 0,0:02:46.06,0:02:47.42,Default,,0,0,0,,Now, the Swift Package Manager
Dialogue: 0,0:02:47.42,0:02:49.13,Default,,0,0,0,,has seen a lot of improvements
Dialogue: 0,0:02:49.16,0:02:49.76,Default,,0,0,0,,this year.
Dialogue: 0,0:02:49.94,0:02:51.37,Default,,0,0,0,,In better manifest API, better
Dialogue: 0,0:02:51.79,0:02:53.59,Default,,0,0,0,,development workflow and so on.
Dialogue: 0,0:02:53.59,0:02:55.80,Default,,0,0,0,,And also, we've made a lot of
Dialogue: 0,0:02:55.80,0:02:57.59,Default,,0,0,0,,progress toward our eventual
Dialogue: 0,0:02:57.59,0:02:59.32,Default,,0,0,0,,goal of first-class support for
Dialogue: 0,0:02:59.32,0:03:01.45,Default,,0,0,0,,Swift packages within the Xcode
Dialogue: 0,0:03:01.45,0:03:01.52,Default,,0,0,0,,IDE.
Dialogue: 0,0:03:01.52,0:03:03.90,Default,,0,0,0,,And we're getting closer to that
Dialogue: 0,0:03:03.90,0:03:05.40,Default,,0,0,0,,with the use of Swift PM as a
Dialogue: 0,0:03:05.40,0:03:07.26,Default,,0,0,0,,library, and of course, the new
Dialogue: 0,0:03:07.26,0:03:08.93,Default,,0,0,0,,Xcode build system, builds
Dialogue: 0,0:03:08.93,0:03:11.13,Default,,0,0,0,,entirely in Swift.
Dialogue: 0,0:03:12.28,0:03:13.52,Default,,0,0,0,,So, we've got a lot to cover
Dialogue: 0,0:03:13.52,0:03:13.84,Default,,0,0,0,,today.
Dialogue: 0,0:03:14.62,0:03:16.31,Default,,0,0,0,,I'll be talking about a couple
Dialogue: 0,0:03:16.31,0:03:17.92,Default,,0,0,0,,of small refinements and
Dialogue: 0,0:03:17.92,0:03:19.62,Default,,0,0,0,,additions to the language itself
Dialogue: 0,0:03:20.13,0:03:21.38,Default,,0,0,0,,before we dive into the source
Dialogue: 0,0:03:21.38,0:03:22.74,Default,,0,0,0,,compatibility story, we're going
Dialogue: 0,0:03:23.02,0:03:23.87,Default,,0,0,0,,to talk about how we can
Dialogue: 0,0:03:23.87,0:03:25.26,Default,,0,0,0,,leverage all of the code that
Dialogue: 0,0:03:25.26,0:03:27.27,Default,,0,0,0,,you've built in Swift, with
Dialogue: 0,0:03:27.27,0:03:28.74,Default,,0,0,0,,Swift 4 and Xcode 9.
Dialogue: 0,0:03:29.65,0:03:31.06,Default,,0,0,0,,My colleague Bob will talk about
Dialogue: 0,0:03:31.06,0:03:32.47,Default,,0,0,0,,Swift tools and improvements in
Dialogue: 0,0:03:32.47,0:03:34.37,Default,,0,0,0,,performance, before Ben dives
Dialogue: 0,0:03:34.37,0:03:36.53,Default,,0,0,0,,into strings, collections, and
Dialogue: 0,0:03:36.53,0:03:37.69,Default,,0,0,0,,some of the generic features of
Dialogue: 0,0:03:37.69,0:03:38.05,Default,,0,0,0,,Swift.
Dialogue: 0,0:03:38.68,0:03:40.32,Default,,0,0,0,,Finally, John will talk about
Dialogue: 0,0:03:40.32,0:03:41.59,Default,,0,0,0,,exclusive access to memory.
Dialogue: 0,0:03:41.91,0:03:43.31,Default,,0,0,0,,Which is a semantic restriction
Dialogue: 0,0:03:43.31,0:03:44.58,Default,,0,0,0,,we're introducing into the Swift
Dialogue: 0,0:03:44.58,0:03:46.32,Default,,0,0,0,,language to build for the
Dialogue: 0,0:03:46.32,0:03:46.72,Default,,0,0,0,,future.
Dialogue: 0,0:03:47.61,0:03:50.36,Default,,0,0,0,,So, let's start with one small
Dialogue: 0,0:03:50.36,0:03:52.02,Default,,0,0,0,,little feature.
Dialogue: 0,0:03:53.37,0:03:54.65,Default,,0,0,0,,Access control.
Dialogue: 0,0:03:54.75,0:03:56.21,Default,,0,0,0,,So, here are I've defined this
Dialogue: 0,0:03:56.21,0:03:57.22,Default,,0,0,0,,simple date structure.
Dialogue: 0,0:03:57.91,0:03:59.21,Default,,0,0,0,,And it's similar to the one in
Dialogue: 0,0:03:59.21,0:03:59.88,Default,,0,0,0,,foundation.
Dialogue: 0,0:03:59.91,0:04:00.67,Default,,0,0,0,,It's going to use
Dialogue: 0,0:04:00.67,0:04:02.44,Default,,0,0,0,,secondsSinceReferenceDate as an
Dialogue: 0,0:04:02.44,0:04:03.90,Default,,0,0,0,,internal representation, but I'm
Dialogue: 0,0:04:03.90,0:04:05.15,Default,,0,0,0,,making this private because this
Dialogue: 0,0:04:05.15,0:04:07.28,Default,,0,0,0,,isn't a good API to expose out
Dialogue: 0,0:04:07.28,0:04:08.00,Default,,0,0,0,,to my users.
Dialogue: 0,0:04:08.52,0:04:09.66,Default,,0,0,0,,I want this type to be a good
Dialogue: 0,0:04:09.66,0:04:11.71,Default,,0,0,0,,value type citizen so its
Dialogue: 0,0:04:11.71,0:04:13.07,Default,,0,0,0,,equitable and comparable.
Dialogue: 0,0:04:13.51,0:04:14.78,Default,,0,0,0,,But already this code is feeling
Dialogue: 0,0:04:14.78,0:04:15.71,Default,,0,0,0,,a little bit cluttered and
Dialogue: 0,0:04:15.71,0:04:16.13,Default,,0,0,0,,messy.
Dialogue: 0,0:04:16.13,0:04:17.78,Default,,0,0,0,,I really should break this up
Dialogue: 0,0:04:18.22,0:04:20.09,Default,,0,0,0,,into separate extensions; one
Dialogue: 0,0:04:20.09,0:04:21.31,Default,,0,0,0,,for each task, right?
Dialogue: 0,0:04:21.31,0:04:23.32,Default,,0,0,0,,This is good Swift coding style,
Dialogue: 0,0:04:23.72,0:04:25.23,Default,,0,0,0,,but Swift 3 didn't support it
Dialogue: 0,0:04:25.23,0:04:26.46,Default,,0,0,0,,very well, because you would get
Dialogue: 0,0:04:26.46,0:04:28.38,Default,,0,0,0,,this error that you can't reach
Dialogue: 0,0:04:28.38,0:04:30.26,Default,,0,0,0,,across to a private declaration
Dialogue: 0,0:04:30.26,0:04:31.30,Default,,0,0,0,,from another lexical scope.
Dialogue: 0,0:04:32.21,0:04:33.20,Default,,0,0,0,,You could fix this with
Dialogue: 0,0:04:33.20,0:04:34.04,Default,,0,0,0,,fileprivate.
Dialogue: 0,0:04:34.45,0:04:35.71,Default,,0,0,0,,But that meant the whole file
Dialogue: 0,0:04:35.71,0:04:38.55,Default,,0,0,0,,could see this member and that's
Dialogue: 0,0:04:38.55,0:04:39.36,Default,,0,0,0,,not quite right.
Dialogue: 0,0:04:39.36,0:04:40.33,Default,,0,0,0,,It's too broad.
Dialogue: 0,0:04:40.79,0:04:43.42,Default,,0,0,0,,And so, Swift 4 refines this so
Dialogue: 0,0:04:43.42,0:04:45.71,Default,,0,0,0,,that we expand the scope of what
Dialogue: 0,0:04:45.71,0:04:48.74,Default,,0,0,0,,private means to only cover the
Dialogue: 0,0:04:48.89,0:04:51.25,Default,,0,0,0,,declarations in all extensions
Dialogue: 0,0:04:51.25,0:04:52.71,Default,,0,0,0,,of a particular type within that
Dialogue: 0,0:04:52.71,0:04:53.57,Default,,0,0,0,,same source file.
Dialogue: 0,0:04:53.94,0:04:55.32,Default,,0,0,0,,This fits much better with the
Dialogue: 0,0:04:55.32,0:04:57.32,Default,,0,0,0,,notion of using extensions to
Dialogue: 0,0:04:57.32,0:04:57.98,Default,,0,0,0,,organize your code.
Dialogue: 0,0:04:58.52,0:05:01.55,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:05:02.05,0:05:03.34,Default,,0,0,0,,And with this change, let us
Dialogue: 0,0:05:03.34,0:05:05.18,Default,,0,0,0,,never speak of access control
Dialogue: 0,0:05:05.18,0:05:05.63,Default,,0,0,0,,again.
Dialogue: 0,0:05:06.52,0:05:09.55,Default,,0,0,0,,[ Laughter ]
Dialogue: 0,0:05:10.05,0:05:11.02,Default,,0,0,0,,Second, I want to talk about
Dialogue: 0,0:05:11.02,0:05:12.54,Default,,0,0,0,,composing classes and protocols.
Dialogue: 0,0:05:13.01,0:05:14.68,Default,,0,0,0,,So, here I've introduced this
Dialogue: 0,0:05:14.79,0:05:16.19,Default,,0,0,0,,shakable protocol for a UI
Dialogue: 0,0:05:16.19,0:05:17.66,Default,,0,0,0,,element that can give a little
Dialogue: 0,0:05:17.66,0:05:18.87,Default,,0,0,0,,shake effect to draw attention
Dialogue: 0,0:05:18.87,0:05:19.49,Default,,0,0,0,,to itself.
Dialogue: 0,0:05:20.11,0:05:21.83,Default,,0,0,0,,And I've gone ahead and extended
Dialogue: 0,0:05:21.83,0:05:23.85,Default,,0,0,0,,some of the UIKit classes to
Dialogue: 0,0:05:24.30,0:05:25.53,Default,,0,0,0,,actually provide this shake
Dialogue: 0,0:05:25.53,0:05:26.31,Default,,0,0,0,,functionality.
Dialogue: 0,0:05:26.31,0:05:27.47,Default,,0,0,0,,And now I want to write
Dialogue: 0,0:05:27.47,0:05:28.76,Default,,0,0,0,,something that seems simple.
Dialogue: 0,0:05:28.80,0:05:30.34,Default,,0,0,0,,I just want to write a function
Dialogue: 0,0:05:30.51,0:05:32.05,Default,,0,0,0,,that takes a bunch of controls
Dialogue: 0,0:05:32.05,0:05:33.56,Default,,0,0,0,,that are shakable and shakes the
Dialogue: 0,0:05:33.56,0:05:34.93,Default,,0,0,0,,ones that are enabled to draw
Dialogue: 0,0:05:34.93,0:05:36.19,Default,,0,0,0,,attention to them.
Dialogue: 0,0:05:37.00,0:05:38.49,Default,,0,0,0,,What type can I write here in
Dialogue: 0,0:05:38.88,0:05:39.55,Default,,0,0,0,,this array?
Dialogue: 0,0:05:40.70,0:05:41.87,Default,,0,0,0,,It's actually frustrating and
Dialogue: 0,0:05:41.87,0:05:42.20,Default,,0,0,0,,tricky.
Dialogue: 0,0:05:42.62,0:05:44.21,Default,,0,0,0,,So, I could try to use a UI
Dialogue: 0,0:05:44.21,0:05:44.75,Default,,0,0,0,,control.
Dialogue: 0,0:05:44.75,0:05:46.15,Default,,0,0,0,,But not all UI controls are
Dialogue: 0,0:05:46.15,0:05:47.16,Default,,0,0,0,,shakable in this game.
Dialogue: 0,0:05:48.01,0:05:49.85,Default,,0,0,0,,I could try shakable, but not
Dialogue: 0,0:05:49.85,0:05:51.54,Default,,0,0,0,,all shakables are UI controls.
Dialogue: 0,0:05:51.54,0:05:52.50,Default,,0,0,0,,And there's actually no good way
Dialogue: 0,0:05:52.50,0:05:54.51,Default,,0,0,0,,to represent this in Swift 3.
Dialogue: 0,0:05:54.92,0:05:56.99,Default,,0,0,0,,Swift 4 introduces the notion of
Dialogue: 0,0:05:57.39,0:06:00.27,Default,,0,0,0,,composing a class with any
Dialogue: 0,0:06:00.27,0:06:01.33,Default,,0,0,0,,number of protocols.
Dialogue: 0,0:06:02.52,0:06:07.70,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:06:08.20,0:06:09.72,Default,,0,0,0,,It's a small feature, but it
Dialogue: 0,0:06:09.72,0:06:11.05,Default,,0,0,0,,just fits in nicely with the
Dialogue: 0,0:06:11.05,0:06:12.48,Default,,0,0,0,,overall set of Swift.
Dialogue: 0,0:06:12.53,0:06:13.83,Default,,0,0,0,,Now, if you come from
Dialogue: 0,0:06:13.83,0:06:15.38,Default,,0,0,0,,Objective-C background, you
Dialogue: 0,0:06:15.38,0:06:16.20,Default,,0,0,0,,already know everything about
Dialogue: 0,0:06:16.20,0:06:17.25,Default,,0,0,0,,what this does, because
Dialogue: 0,0:06:17.25,0:06:18.46,Default,,0,0,0,,Objective-C has actually had
Dialogue: 0,0:06:18.46,0:06:19.75,Default,,0,0,0,,this feature for a very long
Dialogue: 0,0:06:19.75,0:06:20.16,Default,,0,0,0,,time.
Dialogue: 0,0:06:20.62,0:06:22.45,Default,,0,0,0,,Here's a Touch Bar API where the
Dialogue: 0,0:06:22.45,0:06:24.84,Default,,0,0,0,,client is in NSView that is also
Dialogue: 0,0:06:24.88,0:06:26.91,Default,,0,0,0,,conformed to NSTextInputClient.
Dialogue: 0,0:06:27.43,0:06:29.39,Default,,0,0,0,,In Swift 3, we actually couldn't
Dialogue: 0,0:06:29.39,0:06:30.59,Default,,0,0,0,,represent that type, so we'd
Dialogue: 0,0:06:30.59,0:06:32.00,Default,,0,0,0,,import it as an NSView, which is
Dialogue: 0,0:06:32.17,0:06:33.39,Default,,0,0,0,,a little bit embarrassing.
Dialogue: 0,0:06:34.33,0:06:36.72,Default,,0,0,0,,So, Swift 4 corrects this and
Dialogue: 0,0:06:36.72,0:06:38.19,Default,,0,0,0,,now we can actually import the
Dialogue: 0,0:06:38.19,0:06:41.02,Default,,0,0,0,,type using an NSView that is an
Dialogue: 0,0:06:41.05,0:06:43.35,Default,,0,0,0,,NSTextInputClient to map all of
Dialogue: 0,0:06:43.35,0:06:44.53,Default,,0,0,0,,the APIs and appropriately.
Dialogue: 0,0:06:46.52,0:06:49.55,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:06:50.05,0:06:51.37,Default,,0,0,0,,So, there's a huge number of
Dialogue: 0,0:06:51.37,0:06:52.22,Default,,0,0,0,,great features we're going to
Dialogue: 0,0:06:52.22,0:06:53.05,Default,,0,0,0,,talk about today.
Dialogue: 0,0:06:53.32,0:06:54.37,Default,,0,0,0,,I want to call out a couple of
Dialogue: 0,0:06:54.37,0:06:55.57,Default,,0,0,0,,features in the realm of
Dialogue: 0,0:06:55.57,0:06:57.11,Default,,0,0,0,,improving on things we think of
Dialogue: 0,0:06:57.11,0:06:58.16,Default,,0,0,0,,as Cocoa idioms.
Dialogue: 0,0:06:58.20,0:07:00.10,Default,,0,0,0,,KeyPaths, Key-Value Coding,
Dialogue: 0,0:07:00.48,0:07:02.74,Default,,0,0,0,,Archival & Serialization that
Dialogue: 0,0:07:02.74,0:07:04.14,Default,,0,0,0,,are big new Swift features that
Dialogue: 0,0:07:04.22,0:07:05.92,Default,,0,0,0,,will be discussed in this other
Dialogue: 0,0:07:05.92,0:07:06.90,Default,,0,0,0,,session, "What's New in
Dialogue: 0,0:07:06.90,0:07:08.58,Default,,0,0,0,,Foundation" on Wednesday.
Dialogue: 0,0:07:09.86,0:07:12.66,Default,,0,0,0,,And these features work
Dialogue: 0,0:07:12.76,0:07:14.59,Default,,0,0,0,,beautifully with Swift value
Dialogue: 0,0:07:14.59,0:07:14.94,Default,,0,0,0,,types.
Dialogue: 0,0:07:14.94,0:07:16.60,Default,,0,0,0,,So, you can use them throughout
Dialogue: 0,0:07:16.60,0:07:17.67,Default,,0,0,0,,all of your Swift code.
Dialogue: 0,0:07:19.06,0:07:20.14,Default,,0,0,0,,In this session, they'll also
Dialogue: 0,0:07:20.14,0:07:21.71,Default,,0,0,0,,answer the aged old question,
Dialogue: 0,0:07:22.10,0:07:24.50,Default,,0,0,0,,how do I parse JSON in Swift.
Dialogue: 0,0:07:26.81,0:07:28.35,Default,,0,0,0,,All right, let's talk about
Dialogue: 0,0:07:28.35,0:07:29.18,Default,,0,0,0,,source compatibility.
Dialogue: 0,0:07:30.04,0:07:32.92,Default,,0,0,0,,So, by its nature, Swift 4 is
Dialogue: 0,0:07:32.92,0:07:34.31,Default,,0,0,0,,largely source compatible with
Dialogue: 0,0:07:34.31,0:07:35.13,Default,,0,0,0,,Swift 3.
Dialogue: 0,0:07:35.68,0:07:37.42,Default,,0,0,0,,And the reason is the language
Dialogue: 0,0:07:37.57,0:07:39.81,Default,,0,0,0,,hasn't changed all that much.
Dialogue: 0,0:07:40.00,0:07:41.43,Default,,0,0,0,,We've made some refinements.
Dialogue: 0,0:07:41.43,0:07:42.99,Default,,0,0,0,,Like the change to axis control.
Dialogue: 0,0:07:43.40,0:07:44.63,Default,,0,0,0,,We've made some additions.
Dialogue: 0,0:07:44.90,0:07:46.49,Default,,0,0,0,,Like the change to class and
Dialogue: 0,0:07:46.49,0:07:47.51,Default,,0,0,0,,protocol composition.
Dialogue: 0,0:07:48.16,0:07:49.44,Default,,0,0,0,,There's also been improvements
Dialogue: 0,0:07:49.44,0:07:51.91,Default,,0,0,0,,into the way that existing APIs
Dialogue: 0,0:07:51.94,0:07:53.81,Default,,0,0,0,,in the SDK map into Swift.
Dialogue: 0,0:07:53.81,0:07:55.57,Default,,0,0,0,,They provide better Swift APIs
Dialogue: 0,0:07:55.57,0:07:57.09,Default,,0,0,0,,than they did previously.
Dialogue: 0,0:07:57.43,0:07:59.57,Default,,0,0,0,,But the scale of such changes is
Dialogue: 0,0:07:59.57,0:08:01.28,Default,,0,0,0,,much, much smaller than say from
Dialogue: 0,0:08:01.28,0:08:03.13,Default,,0,0,0,,Swift 2 to 3, or even Swift 1 to
Dialogue: 0,0:08:03.13,0:08:03.56,Default,,0,0,0,,2.
Dialogue: 0,0:08:04.14,0:08:06.96,Default,,0,0,0,,And so, going from Swift 3 to 4
Dialogue: 0,0:08:06.96,0:08:08.63,Default,,0,0,0,,isn't as big of an upset to a
Dialogue: 0,0:08:08.71,0:08:10.03,Default,,0,0,0,,code base as it used to be.
Dialogue: 0,0:08:10.44,0:08:11.32,Default,,0,0,0,,And many of the features we're
Dialogue: 0,0:08:11.32,0:08:12.39,Default,,0,0,0,,talking about are purely
Dialogue: 0,0:08:12.39,0:08:12.87,Default,,0,0,0,,additive.
Dialogue: 0,0:08:13.12,0:08:14.54,Default,,0,0,0,,So, they're in some new
Dialogue: 0,0:08:14.54,0:08:15.48,Default,,0,0,0,,syntactic space.
Dialogue: 0,0:08:15.48,0:08:17.17,Default,,0,0,0,,It doesn't break code to
Dialogue: 0,0:08:17.17,0:08:18.57,Default,,0,0,0,,introduce these new features.
Dialogue: 0,0:08:19.59,0:08:21.43,Default,,0,0,0,,That said, we want a smooth
Dialogue: 0,0:08:21.43,0:08:22.18,Default,,0,0,0,,migration path.
Dialogue: 0,0:08:22.63,0:08:24.17,Default,,0,0,0,,So, we're also introducing Swift
Dialogue: 0,0:08:24.37,0:08:25.11,Default,,0,0,0,,3.2.
Dialogue: 0,0:08:26.15,0:08:27.46,Default,,0,0,0,,Most important thing about Swift
Dialogue: 0,0:08:27.46,0:08:29.50,Default,,0,0,0,,3.2 is it's not a separate
Dialogue: 0,0:08:29.50,0:08:30.84,Default,,0,0,0,,compiler or a different
Dialogue: 0,0:08:30.84,0:08:31.49,Default,,0,0,0,,toolchain.
Dialogue: 0,0:08:32.25,0:08:34.07,Default,,0,0,0,,It's a compilation mode of the
Dialogue: 0,0:08:34.07,0:08:36.17,Default,,0,0,0,,Swift 4 compiler that emulates
Dialogue: 0,0:08:36.22,0:08:37.32,Default,,0,0,0,,Swift 3 behavior.
Dialogue: 0,0:08:37.93,0:08:39.29,Default,,0,0,0,,And so if some syntax or
Dialogue: 0,0:08:39.29,0:08:41.26,Default,,0,0,0,,semantics change from Swift 3 to
Dialogue: 0,0:08:41.26,0:08:43.76,Default,,0,0,0,,4, it will provide the Swift 3
Dialogue: 0,0:08:43.76,0:08:44.28,Default,,0,0,0,,behavior.
Dialogue: 0,0:08:45.23,0:08:47.02,Default,,0,0,0,,Moreover, it understands the
Dialogue: 0,0:08:47.02,0:08:48.74,Default,,0,0,0,,changes that have been made in
Dialogue: 0,0:08:48.85,0:08:50.01,Default,,0,0,0,,the new SDK.
Dialogue: 0,0:08:50.01,0:08:51.24,Default,,0,0,0,,And so, if an API projects
Dialogue: 0,0:08:51.24,0:08:53.16,Default,,0,0,0,,differently in Swift 4 than it
Dialogue: 0,0:08:53.16,0:08:55.41,Default,,0,0,0,,did in Swift 3, it will actually
Dialogue: 0,0:08:55.56,0:08:57.18,Default,,0,0,0,,roll back those changes to the
Dialogue: 0,0:08:57.18,0:08:58.16,Default,,0,0,0,,Swift 3 view.
Dialogue: 0,0:08:59.45,0:09:01.73,Default,,0,0,0,,The end result here is that when
Dialogue: 0,0:09:01.73,0:09:03.20,Default,,0,0,0,,you open up your Swift 3 project
Dialogue: 0,0:09:03.61,0:09:05.10,Default,,0,0,0,,in Xcode 9 and build it with
Dialogue: 0,0:09:05.10,0:09:07.41,Default,,0,0,0,,Swift 3.2, pretty much
Dialogue: 0,0:09:07.44,0:09:09.18,Default,,0,0,0,,everything should just build and
Dialogue: 0,0:09:09.18,0:09:10.59,Default,,0,0,0,,work the way it did before.
Dialogue: 0,0:09:11.31,0:09:14.03,Default,,0,0,0,,And this makes fantastic path to
Dialogue: 0,0:09:14.03,0:09:15.91,Default,,0,0,0,,adopting the new features of
Dialogue: 0,0:09:15.91,0:09:17.89,Default,,0,0,0,,Swift 4, because most of them
Dialogue: 0,0:09:17.89,0:09:20.18,Default,,0,0,0,,are available also in Swift 3.2
Dialogue: 0,0:09:20.60,0:09:22.51,Default,,0,0,0,,as well as all of the great new
Dialogue: 0,0:09:22.51,0:09:25.70,Default,,0,0,0,,APIs and frameworks in this
Dialogue: 0,0:09:25.74,0:09:28.04,Default,,0,0,0,,years' SDKs.
Dialogue: 0,0:09:28.27,0:09:29.87,Default,,0,0,0,,Now, when you're ready to
Dialogue: 0,0:09:29.87,0:09:31.83,Default,,0,0,0,,migrate to Swift 4, and then, in
Dialogue: 0,0:09:31.83,0:09:33.38,Default,,0,0,0,,previous years we've always
Dialogue: 0,0:09:33.38,0:09:35.68,Default,,0,0,0,,provided a migrator to take your
Dialogue: 0,0:09:35.68,0:09:39.19,Default,,0,0,0,,code from Swift 3 and move it to
Dialogue: 0,0:09:39.19,0:09:39.77,Default,,0,0,0,,Swift 4.
Dialogue: 0,0:09:40.53,0:09:42.34,Default,,0,0,0,,Now, unlike in previous years,
Dialogue: 0,0:09:42.60,0:09:45.23,Default,,0,0,0,,this migration effort isn't stop
Dialogue: 0,0:09:45.23,0:09:46.84,Default,,0,0,0,,the world, get nothing else done
Dialogue: 0,0:09:46.84,0:09:48.66,Default,,0,0,0,,until the entire stack has been
Dialogue: 0,0:09:48.66,0:09:49.55,Default,,0,0,0,,moved forward.
Dialogue: 0,0:09:50.66,0:09:52.64,Default,,0,0,0,,The reason is Swift 3.2 and
Dialogue: 0,0:09:52.64,0:09:55.47,Default,,0,0,0,,Swift 4 can co-exist in the same
Dialogue: 0,0:09:55.47,0:09:56.25,Default,,0,0,0,,application.
Dialogue: 0,0:09:57.61,0:09:58.73,Default,,0,0,0,,And so, you can set which
Dialogue: 0,0:09:58.73,0:09:59.22,Default,,0,0,0,,version.
Dialogue: 0,0:10:00.52,0:10:04.23,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:10:04.73,0:10:06.51,Default,,0,0,0,,You can set which version of the
Dialogue: 0,0:10:06.51,0:10:08.01,Default,,0,0,0,,language you're going to use on
Dialogue: 0,0:10:08.01,0:10:09.43,Default,,0,0,0,,a per target basis.
Dialogue: 0,0:10:10.05,0:10:10.85,Default,,0,0,0,,So, if you want to migrate to
Dialogue: 0,0:10:10.85,0:10:12.10,Default,,0,0,0,,Swift 4, you can migrate your
Dialogue: 0,0:10:12.10,0:10:13.87,Default,,0,0,0,,app target, but leave all of
Dialogue: 0,0:10:13.87,0:10:14.69,Default,,0,0,0,,your frameworks and all of your
Dialogue: 0,0:10:14.69,0:10:16.23,Default,,0,0,0,,other dependencies in Swift 3.2.
Dialogue: 0,0:10:16.47,0:10:16.94,Default,,0,0,0,,That's fine.
Dialogue: 0,0:10:17.52,0:10:18.77,Default,,0,0,0,,As your dependencies update and
Dialogue: 0,0:10:18.77,0:10:20.01,Default,,0,0,0,,move to Swift 4, that's
Dialogue: 0,0:10:20.01,0:10:21.52,Default,,0,0,0,,perfectly fine, they can work
Dialogue: 0,0:10:21.67,0:10:22.91,Default,,0,0,0,,with your app, whether it's in
Dialogue: 0,0:10:22.91,0:10:24.43,Default,,0,0,0,,Swift 3.2 or Swift 4.
Dialogue: 0,0:10:25.20,0:10:27.00,Default,,0,0,0,,The Swift Package Manager also
Dialogue: 0,0:10:27.00,0:10:27.97,Default,,0,0,0,,understands this.
Dialogue: 0,0:10:28.46,0:10:29.76,Default,,0,0,0,,And so, it will build packages
Dialogue: 0,0:10:29.76,0:10:31.25,Default,,0,0,0,,with the tools version that was
Dialogue: 0,0:10:31.25,0:10:33.54,Default,,0,0,0,,used to develop the package and
Dialogue: 0,0:10:33.54,0:10:34.95,Default,,0,0,0,,if a package supports multiple
Dialogue: 0,0:10:34.95,0:10:36.12,Default,,0,0,0,,Swift language versions, that
Dialogue: 0,0:10:36.12,0:10:37.08,Default,,0,0,0,,can be described in the
Dialogue: 0,0:10:37.08,0:10:38.70,Default,,0,0,0,,manifest, so the Swift Package
Dialogue: 0,0:10:38.70,0:10:39.70,Default,,0,0,0,,Manager will do the right thing.
Dialogue: 0,0:10:40.76,0:10:42.47,Default,,0,0,0,,Now, we think that with Swift
Dialogue: 0,0:10:42.47,0:10:44.32,Default,,0,0,0,,3.2 and Swift 4 co-existence,
Dialogue: 0,0:10:44.38,0:10:45.78,Default,,0,0,0,,with the smaller amount of
Dialogue: 0,0:10:46.05,0:10:48.34,Default,,0,0,0,,change from Swift 3 to Swift 4
Dialogue: 0,0:10:48.40,0:10:50.77,Default,,0,0,0,,that you'll get a nice buttery
Dialogue: 0,0:10:50.77,0:10:52.53,Default,,0,0,0,,smooth migration path to Swift
Dialogue: 0,0:10:52.53,0:10:52.78,Default,,0,0,0,,4.
Dialogue: 0,0:10:54.09,0:10:55.38,Default,,0,0,0,,And with that, I'd like to bring
Dialogue: 0,0:10:55.38,0:10:56.17,Default,,0,0,0,,up Bob to talk about
Dialogue: 0,0:10:56.17,0:10:56.97,Default,,0,0,0,,improvements to the build.
Dialogue: 0,0:10:57.52,0:11:03.05,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:11:03.55,0:11:05.26,Default,,0,0,0,,>> As the size and complexity of
Dialogue: 0,0:11:05.26,0:11:07.02,Default,,0,0,0,,your Swift apps continues to
Dialogue: 0,0:11:07.02,0:11:09.00,Default,,0,0,0,,grow, we've been investing in
Dialogue: 0,0:11:09.00,0:11:10.56,Default,,0,0,0,,improvements in the build system
Dialogue: 0,0:11:10.56,0:11:12.04,Default,,0,0,0,,to keep up with that growth.
Dialogue: 0,0:11:13.83,0:11:15.83,Default,,0,0,0,,Xcode 9 has a brand-new
Dialogue: 0,0:11:15.83,0:11:17.19,Default,,0,0,0,,implementation of the build
Dialogue: 0,0:11:17.26,0:11:17.64,Default,,0,0,0,,system.
Dialogue: 0,0:11:18.01,0:11:19.69,Default,,0,0,0,,Of course, it's written in Swift
Dialogue: 0,0:11:19.98,0:11:21.25,Default,,0,0,0,,and it's built on top of the
Dialogue: 0,0:11:21.25,0:11:23.61,Default,,0,0,0,,open source LLBuild engine.
Dialogue: 0,0:11:24.33,0:11:26.48,Default,,0,0,0,,It is really fast at calculating
Dialogue: 0,0:11:26.48,0:11:28.05,Default,,0,0,0,,the dependencies between the
Dialogue: 0,0:11:28.05,0:11:29.54,Default,,0,0,0,,different steps of your build.
Dialogue: 0,0:11:30.25,0:11:31.40,Default,,0,0,0,,You're most likely to notice
Dialogue: 0,0:11:31.45,0:11:32.90,Default,,0,0,0,,that when doing an incremental
Dialogue: 0,0:11:32.90,0:11:34.74,Default,,0,0,0,,build of a large project.
Dialogue: 0,0:11:35.89,0:11:37.87,Default,,0,0,0,,This is a technology preview in
Dialogue: 0,0:11:38.00,0:11:38.62,Default,,0,0,0,,Xcode 9.
Dialogue: 0,0:11:38.85,0:11:40.21,Default,,0,0,0,,We'd love to have you try it
Dialogue: 0,0:11:40.21,0:11:40.64,Default,,0,0,0,,out.
Dialogue: 0,0:11:40.88,0:11:42.66,Default,,0,0,0,,So, go to the project or
Dialogue: 0,0:11:42.66,0:11:44.49,Default,,0,0,0,,workspace settings in the file
Dialogue: 0,0:11:44.49,0:11:46.80,Default,,0,0,0,,menu and choose the new build
Dialogue: 0,0:11:47.51,0:11:47.69,Default,,0,0,0,,system.
Dialogue: 0,0:11:48.94,0:11:50.92,Default,,0,0,0,,Besides having a faster build
Dialogue: 0,0:11:50.98,0:11:53.03,Default,,0,0,0,,system, another way we can use
Dialogue: 0,0:11:53.03,0:11:54.88,Default,,0,0,0,,your system more efficiently is
Dialogue: 0,0:11:54.88,0:11:56.66,Default,,0,0,0,,to avoid doing redundant work.
Dialogue: 0,0:11:57.19,0:11:58.90,Default,,0,0,0,,And Xcode 9 does this in a few
Dialogue: 0,0:11:58.90,0:12:00.37,Default,,0,0,0,,different ways.
Dialogue: 0,0:12:01.30,0:12:03.82,Default,,0,0,0,,The precompiled bridging header
Dialogue: 0,0:12:04.16,0:12:05.96,Default,,0,0,0,,speeds up the build of large
Dialogue: 0,0:12:06.07,0:12:07.51,Default,,0,0,0,,mixed source projects.
Dialogue: 0,0:12:08.25,0:12:10.06,Default,,0,0,0,,The bridging header describes
Dialogue: 0,0:12:10.06,0:12:11.12,Default,,0,0,0,,the interfaces in your
Dialogue: 0,0:12:11.12,0:12:13.12,Default,,0,0,0,,Objective-C code so they can be
Dialogue: 0,0:12:13.12,0:12:14.68,Default,,0,0,0,,used in your Swift code.
Dialogue: 0,0:12:15.52,0:12:16.48,Default,,0,0,0,,If you have a lot of
Dialogue: 0,0:12:16.48,0:12:18.56,Default,,0,0,0,,Objective-C, the bridging header
Dialogue: 0,0:12:18.56,0:12:20.50,Default,,0,0,0,,can be really large and slow to
Dialogue: 0,0:12:20.50,0:12:21.45,Default,,0,0,0,,compile.
Dialogue: 0,0:12:22.00,0:12:23.66,Default,,0,0,0,,And parsing the contents of that
Dialogue: 0,0:12:23.66,0:12:25.71,Default,,0,0,0,,header repeatedly for every one
Dialogue: 0,0:12:25.71,0:12:27.79,Default,,0,0,0,,of your Swift files is wasteful.
Dialogue: 0,0:12:29.33,0:12:31.26,Default,,0,0,0,,The Apple LLVM compiler has a
Dialogue: 0,0:12:31.26,0:12:32.51,Default,,0,0,0,,great solution for this,
Dialogue: 0,0:12:33.20,0:12:34.43,Default,,0,0,0,,precompiled headers.
Dialogue: 0,0:12:35.92,0:12:38.05,Default,,0,0,0,,Xcode 9 will now use a
Dialogue: 0,0:12:38.10,0:12:39.89,Default,,0,0,0,,precompiled version of the
Dialogue: 0,0:12:39.89,0:12:41.85,Default,,0,0,0,,bridging header so that it only
Dialogue: 0,0:12:41.85,0:12:43.26,Default,,0,0,0,,needs to be parsed once.
Dialogue: 0,0:12:45.17,0:12:47.42,Default,,0,0,0,,Apple's music app is a great
Dialogue: 0,0:12:47.42,0:12:49.67,Default,,0,0,0,,example where this helps a lot.
Dialogue: 0,0:12:49.87,0:12:51.68,Default,,0,0,0,,Music is a really large project
Dialogue: 0,0:12:51.68,0:12:53.13,Default,,0,0,0,,and it's split about evenly
Dialogue: 0,0:12:53.19,0:12:54.85,Default,,0,0,0,,between Objective-C and Swift.
Dialogue: 0,0:12:55.89,0:12:57.45,Default,,0,0,0,,Using a precompiled bridging
Dialogue: 0,0:12:57.45,0:12:59.16,Default,,0,0,0,,header, which is the default in
Dialogue: 0,0:12:59.24,0:13:01.40,Default,,0,0,0,,Xcode 9, speeds up the debug
Dialogue: 0,0:13:01.40,0:13:03.67,Default,,0,0,0,,build of music by about 40%.
Dialogue: 0,0:13:04.43,0:13:09.33,Default,,0,0,0,,Code coverage testing is another
Dialogue: 0,0:13:09.33,0:13:11.85,Default,,0,0,0,,powerful tool, but in Xcode 8,
Dialogue: 0,0:13:11.85,0:13:13.58,Default,,0,0,0,,it can also be a source of
Dialogue: 0,0:13:13.58,0:13:14.59,Default,,0,0,0,,redundant effort.
Dialogue: 0,0:13:15.62,0:13:17.00,Default,,0,0,0,,Consider the common scenario
Dialogue: 0,0:13:17.00,0:13:18.21,Default,,0,0,0,,where you make some changes to
Dialogue: 0,0:13:18.21,0:13:20.28,Default,,0,0,0,,your code, you get it to build
Dialogue: 0,0:13:20.28,0:13:21.13,Default,,0,0,0,,and then you want to run your
Dialogue: 0,0:13:21.20,0:13:22.23,Default,,0,0,0,,tests with coverage.
Dialogue: 0,0:13:23.36,0:13:24.59,Default,,0,0,0,,Here's what that looks like in
Dialogue: 0,0:13:24.59,0:13:25.99,Default,,0,0,0,,Xcode's report navigator.
Dialogue: 0,0:13:27.17,0:13:29.05,Default,,0,0,0,,Notice there's an extra build.
Dialogue: 0,0:13:29.69,0:13:30.75,Default,,0,0,0,,Why is that there?
Dialogue: 0,0:13:32.05,0:13:33.80,Default,,0,0,0,,Coverage testing is implemented
Dialogue: 0,0:13:33.80,0:13:35.56,Default,,0,0,0,,in the compiler by admitting
Dialogue: 0,0:13:35.56,0:13:37.75,Default,,0,0,0,,extra instrumentation code to
Dialogue: 0,0:13:37.75,0:13:39.09,Default,,0,0,0,,count the number of times each
Dialogue: 0,0:13:39.09,0:13:40.23,Default,,0,0,0,,fragment of code runs.
Dialogue: 0,0:13:41.30,0:13:43.11,Default,,0,0,0,,With Xcode 8, the normal build
Dialogue: 0,0:13:43.11,0:13:44.36,Default,,0,0,0,,does not include that
Dialogue: 0,0:13:44.36,0:13:45.18,Default,,0,0,0,,instrumentation.
Dialogue: 0,0:13:45.18,0:13:46.34,Default,,0,0,0,,So, before you can run your
Dialogue: 0,0:13:46.43,0:13:48.40,Default,,0,0,0,,tests with coverage, the whole
Dialogue: 0,0:13:48.40,0:13:49.99,Default,,0,0,0,,project needs to be rebuilt.
Dialogue: 0,0:13:50.60,0:13:54.90,Default,,0,0,0,,In Xcode 9, we're combining
Dialogue: 0,0:13:54.90,0:13:55.60,Default,,0,0,0,,those builds.
Dialogue: 0,0:13:56.02,0:13:57.73,Default,,0,0,0,,If you have coverage enabled for
Dialogue: 0,0:13:57.73,0:14:00.13,Default,,0,0,0,,testing, the normal build will
Dialogue: 0,0:14:00.13,0:14:01.46,Default,,0,0,0,,include the instrumentation.
Dialogue: 0,0:14:02.25,0:14:03.74,Default,,0,0,0,,There's a very small cost for
Dialogue: 0,0:14:03.74,0:14:03.95,Default,,0,0,0,,this.
Dialogue: 0,0:14:04.28,0:14:06.25,Default,,0,0,0,,Less than 3% for one project
Dialogue: 0,0:14:06.25,0:14:06.93,Default,,0,0,0,,that we measured.
Dialogue: 0,0:14:07.88,0:14:10.08,Default,,0,0,0,,But you get a huge benefit,
Dialogue: 0,0:14:10.15,0:14:11.23,Default,,0,0,0,,because now you only need to
Dialogue: 0,0:14:11.23,0:14:12.87,Default,,0,0,0,,build your project once in that
Dialogue: 0,0:14:12.87,0:14:13.41,Default,,0,0,0,,scenario.
Dialogue: 0,0:14:15.86,0:14:18.43,Default,,0,0,0,,This next change is not actually
Dialogue: 0,0:14:18.43,0:14:19.78,Default,,0,0,0,,about making your build faster.
Dialogue: 0,0:14:20.65,0:14:21.83,Default,,0,0,0,,It's about avoiding this.
Dialogue: 0,0:14:24.04,0:14:24.31,Default,,0,0,0,,So.
Dialogue: 0,0:14:25.52,0:14:29.02,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:14:29.52,0:14:30.68,Default,,0,0,0,,Indexing is great.
Dialogue: 0,0:14:30.82,0:14:32.50,Default,,0,0,0,,It's a key to some of Xcode's
Dialogue: 0,0:14:32.50,0:14:33.96,Default,,0,0,0,,most powerful features like the
Dialogue: 0,0:14:33.96,0:14:35.75,Default,,0,0,0,,new global rename re-factoring,
Dialogue: 0,0:14:36.68,0:14:38.24,Default,,0,0,0,,but indexing in the background
Dialogue: 0,0:14:38.59,0:14:39.45,Default,,0,0,0,,wastes effort.
Dialogue: 0,0:14:40.89,0:14:42.48,Default,,0,0,0,,Whenever you build your project
Dialogue: 0,0:14:42.86,0:14:44.23,Default,,0,0,0,,the compiler needs to look up
Dialogue: 0,0:14:44.23,0:14:45.96,Default,,0,0,0,,all the same symbol information
Dialogue: 0,0:14:46.22,0:14:47.48,Default,,0,0,0,,that's needed for the symbol
Dialogue: 0,0:14:47.48,0:14:47.93,Default,,0,0,0,,index.
Dialogue: 0,0:14:48.31,0:14:50.61,Default,,0,0,0,,And so, now in Xcode 9 we will
Dialogue: 0,0:14:50.61,0:14:52.46,Default,,0,0,0,,automatically update the index
Dialogue: 0,0:14:52.51,0:14:54.18,Default,,0,0,0,,whenever you build your project.
Dialogue: 0,0:14:54.80,0:14:56.49,Default,,0,0,0,,There's a very small overhead
Dialogue: 0,0:14:56.49,0:14:58.57,Default,,0,0,0,,for that at the build time, but
Dialogue: 0,0:14:58.57,0:15:00.02,Default,,0,0,0,,then there's no need to repeat
Dialogue: 0,0:15:00.02,0:15:01.69,Default,,0,0,0,,all that work again in the
Dialogue: 0,0:15:01.69,0:15:02.31,Default,,0,0,0,,background.
Dialogue: 0,0:15:02.95,0:15:05.78,Default,,0,0,0,,So, we have a new build system
Dialogue: 0,0:15:05.87,0:15:07.61,Default,,0,0,0,,and several different ways of
Dialogue: 0,0:15:07.61,0:15:08.80,Default,,0,0,0,,using the system more
Dialogue: 0,0:15:08.80,0:15:10.81,Default,,0,0,0,,efficiently that especially for
Dialogue: 0,0:15:10.81,0:15:12.12,Default,,0,0,0,,those of you with large Swift
Dialogue: 0,0:15:12.12,0:15:13.91,Default,,0,0,0,,projects we think are going to
Dialogue: 0,0:15:13.91,0:15:14.84,Default,,0,0,0,,be a great improvement.
Dialogue: 0,0:15:16.26,0:15:17.66,Default,,0,0,0,,Let's turn now and look at
Dialogue: 0,0:15:17.66,0:15:18.97,Default,,0,0,0,,runtime performance.
Dialogue: 0,0:15:20.28,0:15:22.41,Default,,0,0,0,,Delivering high performance code
Dialogue: 0,0:15:22.41,0:15:24.27,Default,,0,0,0,,has always been one of the key
Dialogue: 0,0:15:24.27,0:15:25.36,Default,,0,0,0,,goals for Swift.
Dialogue: 0,0:15:25.45,0:15:26.79,Default,,0,0,0,,And with each new release of
Dialogue: 0,0:15:26.79,0:15:28.27,Default,,0,0,0,,Swift, performance has
Dialogue: 0,0:15:28.27,0:15:28.91,Default,,0,0,0,,increased.
Dialogue: 0,0:15:29.78,0:15:31.81,Default,,0,0,0,,The next step is to make that
Dialogue: 0,0:15:31.81,0:15:33.31,Default,,0,0,0,,performance more predictable,
Dialogue: 0,0:15:33.37,0:15:34.07,Default,,0,0,0,,more stable.
Dialogue: 0,0:15:35.74,0:15:37.15,Default,,0,0,0,,Let's look at an example with
Dialogue: 0,0:15:37.15,0:15:37.75,Default,,0,0,0,,Swift 3.
Dialogue: 0,0:15:38.74,0:15:40.96,Default,,0,0,0,,Here I have a simple protocol
Dialogue: 0,0:15:40.96,0:15:42.27,Default,,0,0,0,,ordered with a comparison
Dialogue: 0,0:15:42.27,0:15:44.37,Default,,0,0,0,,function, and another function
Dialogue: 0,0:15:44.71,0:15:46.19,Default,,0,0,0,,that's going to test that by
Dialogue: 0,0:15:46.31,0:15:47.70,Default,,0,0,0,,sorting an array of values,
Dialogue: 0,0:15:48.03,0:15:49.15,Default,,0,0,0,,using the comparison.
Dialogue: 0,0:15:50.01,0:15:51.70,Default,,0,0,0,,The code is written in a very
Dialogue: 0,0:15:51.70,0:15:52.55,Default,,0,0,0,,general way.
Dialogue: 0,0:15:52.62,0:15:54.26,Default,,0,0,0,,It has to work with any value
Dialogue: 0,0:15:54.26,0:15:55.81,Default,,0,0,0,,that conforms to the ordered
Dialogue: 0,0:15:55.81,0:15:56.61,Default,,0,0,0,,protocol.
Dialogue: 0,0:15:57.24,0:15:58.48,Default,,0,0,0,,Even the different elements
Dialogue: 0,0:15:58.48,0:15:59.44,Default,,0,0,0,,within the array could be
Dialogue: 0,0:15:59.44,0:16:00.37,Default,,0,0,0,,different types.
Dialogue: 0,0:16:01.55,0:16:02.77,Default,,0,0,0,,Let's look at the performance of
Dialogue: 0,0:16:02.82,0:16:02.98,Default,,0,0,0,,this.
Dialogue: 0,0:16:04.76,0:16:06.44,Default,,0,0,0,,This graph shows the time in
Dialogue: 0,0:16:06.49,0:16:09.24,Default,,0,0,0,,seconds to sort 100,000 arrays
Dialogue: 0,0:16:09.24,0:16:10.51,Default,,0,0,0,,of 100 elements each.
Dialogue: 0,0:16:10.94,0:16:12.47,Default,,0,0,0,,And it's measuring for different
Dialogue: 0,0:16:12.47,0:16:13.97,Default,,0,0,0,,sizes of array elements.
Dialogue: 0,0:16:14.17,0:16:16.85,Default,,0,0,0,,So, for a one-work struct, it
Dialogue: 0,0:16:16.85,0:16:18.01,Default,,0,0,0,,takes a little less than 2
Dialogue: 0,0:16:18.01,0:16:19.58,Default,,0,0,0,,seconds to do those sorts.
Dialogue: 0,0:16:20.58,0:16:22.29,Default,,0,0,0,,If for some reason the size of
Dialogue: 0,0:16:22.29,0:16:24.24,Default,,0,0,0,,the values increases to 2 words,
Dialogue: 0,0:16:24.99,0:16:26.66,Default,,0,0,0,,the time increases only very
Dialogue: 0,0:16:26.75,0:16:27.18,Default,,0,0,0,,slightly.
Dialogue: 0,0:16:27.18,0:16:29.63,Default,,0,0,0,,And if it grows to three words,
Dialogue: 0,0:16:30.14,0:16:31.46,Default,,0,0,0,,it continues on that same
Dialogue: 0,0:16:31.46,0:16:32.15,Default,,0,0,0,,trajectory.
Dialogue: 0,0:16:33.51,0:16:34.59,Default,,0,0,0,,What about if we have four
Dialogue: 0,0:16:34.59,0:16:35.42,Default,,0,0,0,,words.
Dialogue: 0,0:16:36.85,0:16:38.16,Default,,0,0,0,,We hit a performance cliff.
Dialogue: 0,0:16:38.57,0:16:40.24,Default,,0,0,0,,It's nine times slower.
Dialogue: 0,0:16:41.57,0:16:43.33,Default,,0,0,0,,What just happened here?
Dialogue: 0,0:16:44.76,0:16:46.59,Default,,0,0,0,,To understand this performance
Dialogue: 0,0:16:46.59,0:16:48.33,Default,,0,0,0,,cliff we need to delve into the
Dialogue: 0,0:16:48.33,0:16:49.74,Default,,0,0,0,,implementation of Swift.
Dialogue: 0,0:16:50.11,0:16:51.32,Default,,0,0,0,,If you're interested in this, I
Dialogue: 0,0:16:51.32,0:16:52.21,Default,,0,0,0,,recommend you watch
Dialogue: 0,0:16:52.31,0:16:53.87,Default,,0,0,0,,Understanding Swift Performance
Dialogue: 0,0:16:53.97,0:16:54.73,Default,,0,0,0,,from last year.
Dialogue: 0,0:16:55.31,0:16:57.61,Default,,0,0,0,,For now, I'll just give a quick
Dialogue: 0,0:16:57.61,0:16:57.98,Default,,0,0,0,,summary.
Dialogue: 0,0:16:58.76,0:17:01.25,Default,,0,0,0,,To represent a value of unknown
Dialogue: 0,0:17:01.25,0:17:03.50,Default,,0,0,0,,type, the compiler uses a data
Dialogue: 0,0:17:03.50,0:17:04.54,Default,,0,0,0,,structure that we call an
Dialogue: 0,0:17:04.54,0:17:05.76,Default,,0,0,0,,existential container.
Dialogue: 0,0:17:06.70,0:17:08.51,Default,,0,0,0,,Inside the existential container
Dialogue: 0,0:17:08.90,0:17:10.31,Default,,0,0,0,,there's an in-line buffer to
Dialogue: 0,0:17:10.31,0:17:11.57,Default,,0,0,0,,hold small values.
Dialogue: 0,0:17:13.22,0:17:14.51,Default,,0,0,0,,We're currently reassessing the
Dialogue: 0,0:17:14.58,0:17:15.77,Default,,0,0,0,,size of that buffer, but for
Dialogue: 0,0:17:15.77,0:17:18.09,Default,,0,0,0,,Swift 4 it remains the same 3
Dialogue: 0,0:17:18.09,0:17:19.20,Default,,0,0,0,,words that it's been in the
Dialogue: 0,0:17:19.20,0:17:19.57,Default,,0,0,0,,past.
Dialogue: 0,0:17:21.39,0:17:23.27,Default,,0,0,0,,If the value is too big to fit
Dialogue: 0,0:17:23.27,0:17:25.23,Default,,0,0,0,,in the in-line buffer, then it's
Dialogue: 0,0:17:25.23,0:17:26.47,Default,,0,0,0,,allocated on the heap.
Dialogue: 0,0:17:27.44,0:17:29.56,Default,,0,0,0,,And heap storage can be really
Dialogue: 0,0:17:29.56,0:17:30.12,Default,,0,0,0,,expensive.
Dialogue: 0,0:17:31.02,0:17:32.14,Default,,0,0,0,,That's what caused the
Dialogue: 0,0:17:32.14,0:17:33.49,Default,,0,0,0,,performance quit that we just
Dialogue: 0,0:17:33.54,0:17:33.91,Default,,0,0,0,,saw.
Dialogue: 0,0:17:35.22,0:17:36.27,Default,,0,0,0,,So, what can we do about it?
Dialogue: 0,0:17:37.70,0:17:39.59,Default,,0,0,0,,The answer is cow buffers,
Dialogue: 0,0:17:40.08,0:17:41.59,Default,,0,0,0,,existential cow buffers
Dialogue: 0,0:17:41.82,0:17:43.82,Default,,0,0,0,,[laughter].
Dialogue: 0,0:17:44.06,0:17:45.28,Default,,0,0,0,,No not that kind of cow.
Dialogue: 0,0:17:45.76,0:17:47.74,Default,,0,0,0,,COW is an acronym for copy on
Dialogue: 0,0:17:47.74,0:17:48.02,Default,,0,0,0,,right.
Dialogue: 0,0:17:48.45,0:17:49.65,Default,,0,0,0,,You may have heard us talk about
Dialogue: 0,0:17:49.65,0:17:51.01,Default,,0,0,0,,this before because it's a key
Dialogue: 0,0:17:51.01,0:17:52.89,Default,,0,0,0,,to high performance with value
Dialogue: 0,0:17:52.97,0:17:53.45,Default,,0,0,0,,semantics.
Dialogue: 0,0:17:55.51,0:17:57.80,Default,,0,0,0,,With Swift 4, if a value is too
Dialogue: 0,0:17:57.80,0:17:59.84,Default,,0,0,0,,big to fit in the inline buffer,
Dialogue: 0,0:18:00.29,0:18:02.33,Default,,0,0,0,,it's allocated on the heap along
Dialogue: 0,0:18:02.33,0:18:03.40,Default,,0,0,0,,with a reference count.
Dialogue: 0,0:18:04.10,0:18:05.98,Default,,0,0,0,,Multiple existential containers
Dialogue: 0,0:18:06.03,0:18:07.80,Default,,0,0,0,,can share the same buffer as
Dialogue: 0,0:18:07.80,0:18:08.94,Default,,0,0,0,,long as they're only reading
Dialogue: 0,0:18:08.94,0:18:09.25,Default,,0,0,0,,from it.
Dialogue: 0,0:18:09.64,0:18:11.19,Default,,0,0,0,,And that avoids a lot of
Dialogue: 0,0:18:11.19,0:18:12.94,Default,,0,0,0,,expensive heap allocation.
Dialogue: 0,0:18:13.93,0:18:15.33,Default,,0,0,0,,The buffer only needs to be
Dialogue: 0,0:18:15.33,0:18:16.74,Default,,0,0,0,,copied with a separate
Dialogue: 0,0:18:16.74,0:18:19.19,Default,,0,0,0,,allocation if it's modified
Dialogue: 0,0:18:19.41,0:18:20.55,Default,,0,0,0,,while there are multiple
Dialogue: 0,0:18:20.55,0:18:21.39,Default,,0,0,0,,references to it.
Dialogue: 0,0:18:22.08,0:18:23.34,Default,,0,0,0,,And Swift now manages the
Dialogue: 0,0:18:23.34,0:18:24.57,Default,,0,0,0,,complexity of that for you
Dialogue: 0,0:18:24.57,0:18:25.86,Default,,0,0,0,,completely automatically.
Dialogue: 0,0:18:27.36,0:18:28.25,Default,,0,0,0,,What's the impact on the
Dialogue: 0,0:18:28.25,0:18:28.87,Default,,0,0,0,,performance?
Dialogue: 0,0:18:30.17,0:18:31.44,Default,,0,0,0,,It's much more stable.
Dialogue: 0,0:18:32.25,0:18:34.26,Default,,0,0,0,,Instead of taking over 18
Dialogue: 0,0:18:34.33,0:18:35.95,Default,,0,0,0,,seconds to sort those forward
Dialogue: 0,0:18:35.95,0:18:37.73,Default,,0,0,0,,structs it's now only a little
Dialogue: 0,0:18:37.73,0:18:38.93,Default,,0,0,0,,more than 4 seconds.
Dialogue: 0,0:18:39.54,0:18:41.27,Default,,0,0,0,,It's a gentle slope instead of
Dialogue: 0,0:18:41.27,0:18:42.15,Default,,0,0,0,,that steep cliff.
Dialogue: 0,0:18:42.81,0:18:45.85,Default,,0,0,0,,This improvement applies to the
Dialogue: 0,0:18:45.85,0:18:46.95,Default,,0,0,0,,case where the compiler is
Dialogue: 0,0:18:46.95,0:18:48.22,Default,,0,0,0,,dealing with values where it
Dialogue: 0,0:18:48.22,0:18:49.54,Default,,0,0,0,,doesn't know the type at all.
Dialogue: 0,0:18:50.25,0:18:51.62,Default,,0,0,0,,But a similar issue comes up
Dialogue: 0,0:18:51.62,0:18:53.16,Default,,0,0,0,,with generic code, where the
Dialogue: 0,0:18:53.16,0:18:54.59,Default,,0,0,0,,type is parameterized.
Dialogue: 0,0:18:55.27,0:18:56.37,Default,,0,0,0,,Let's look at that.
Dialogue: 0,0:18:58.32,0:18:59.81,Default,,0,0,0,,In many cases, the compiler's
Dialogue: 0,0:18:59.81,0:19:01.49,Default,,0,0,0,,able to make generic code fast
Dialogue: 0,0:19:01.98,0:19:03.70,Default,,0,0,0,,by using specialized versions
Dialogue: 0,0:19:04.10,0:19:05.21,Default,,0,0,0,,for specific types.
Dialogue: 0,0:19:05.90,0:19:07.18,Default,,0,0,0,,But sometimes the compiler
Dialogue: 0,0:19:07.18,0:19:09.03,Default,,0,0,0,,cannot see the specific types
Dialogue: 0,0:19:09.11,0:19:10.75,Default,,0,0,0,,and then it needs to use
Dialogue: 0,0:19:10.75,0:19:12.34,Default,,0,0,0,,unspecialized generic code.
Dialogue: 0,0:19:13.21,0:19:14.90,Default,,0,0,0,,That can be much slower.
Dialogue: 0,0:19:15.31,0:19:16.53,Default,,0,0,0,,It's another form of a
Dialogue: 0,0:19:16.53,0:19:17.44,Default,,0,0,0,,performance cliff.
Dialogue: 0,0:19:18.68,0:19:20.66,Default,,0,0,0,,Until now, Swift has used heap
Dialogue: 0,0:19:20.66,0:19:22.55,Default,,0,0,0,,allocation for generic buffers
Dialogue: 0,0:19:22.55,0:19:23.87,Default,,0,0,0,,in unspecialized code.
Dialogue: 0,0:19:24.16,0:19:25.95,Default,,0,0,0,,And as we've just seen, heap
Dialogue: 0,0:19:25.95,0:19:27.87,Default,,0,0,0,,allocation can be really slow.
Dialogue: 0,0:19:28.78,0:19:31.24,Default,,0,0,0,,Swift 4 now uses stack allocated
Dialogue: 0,0:19:31.24,0:19:32.14,Default,,0,0,0,,generic buffers.
Dialogue: 0,0:19:32.49,0:19:34.17,Default,,0,0,0,,So, we get similar improvement
Dialogue: 0,0:19:34.45,0:19:37.91,Default,,0,0,0,,for unspecialized generic code.
Dialogue: 0,0:19:38.14,0:19:39.89,Default,,0,0,0,,Now making Swift performance
Dialogue: 0,0:19:39.98,0:19:41.85,Default,,0,0,0,,really predictable is an ongoing
Dialogue: 0,0:19:41.85,0:19:42.23,Default,,0,0,0,,effort.
Dialogue: 0,0:19:42.76,0:19:45.06,Default,,0,0,0,,But Swift 4 has made big strides
Dialogue: 0,0:19:45.35,0:19:46.60,Default,,0,0,0,,to fix some of the worst of
Dialogue: 0,0:19:46.60,0:19:49.58,Default,,0,0,0,,those performance cliffs.
Dialogue: 0,0:19:50.18,0:19:51.74,Default,,0,0,0,,Another dimension of performance
Dialogue: 0,0:19:52.00,0:19:52.58,Default,,0,0,0,,is size.
Dialogue: 0,0:19:54.20,0:19:56.01,Default,,0,0,0,,As your apps grow larger and
Dialogue: 0,0:19:56.01,0:19:58.45,Default,,0,0,0,,larger, code size is becoming
Dialogue: 0,0:19:58.52,0:19:59.79,Default,,0,0,0,,increasingly important.
Dialogue: 0,0:20:01.10,0:20:02.66,Default,,0,0,0,,One way to make code size
Dialogue: 0,0:20:02.66,0:20:05.38,Default,,0,0,0,,smaller is to avoid unused code.
Dialogue: 0,0:20:06.61,0:20:08.17,Default,,0,0,0,,Let's return to Doug's example
Dialogue: 0,0:20:08.17,0:20:09.57,Default,,0,0,0,,of a date struct.
Dialogue: 0,0:20:10.13,0:20:11.66,Default,,0,0,0,,As with any value type, it's a
Dialogue: 0,0:20:11.66,0:20:13.54,Default,,0,0,0,,good idea to make it conform to
Dialogue: 0,0:20:13.54,0:20:14.96,Default,,0,0,0,,the equatable and comparable
Dialogue: 0,0:20:14.96,0:20:15.52,Default,,0,0,0,,protocols.
Dialogue: 0,0:20:16.48,0:20:17.77,Default,,0,0,0,,But what if it turns out that
Dialogue: 0,0:20:17.77,0:20:19.22,Default,,0,0,0,,your app isn't using one of
Dialogue: 0,0:20:19.22,0:20:19.47,Default,,0,0,0,,those.
Dialogue: 0,0:20:20.20,0:20:21.66,Default,,0,0,0,,You shouldn't have to pay for
Dialogue: 0,0:20:21.69,0:20:25.37,Default,,0,0,0,,code that you don't use.
Dialogue: 0,0:20:25.56,0:20:27.97,Default,,0,0,0,,In Swift 4, compiler will
Dialogue: 0,0:20:27.97,0:20:30.54,Default,,0,0,0,,automatically optimize away
Dialogue: 0,0:20:30.54,0:20:32.15,Default,,0,0,0,,conformances that are used so
Dialogue: 0,0:20:32.15,0:20:33.34,Default,,0,0,0,,you don't pay the price for
Dialogue: 0,0:20:33.34,0:20:33.62,Default,,0,0,0,,that.
Dialogue: 0,0:20:34.30,0:20:35.69,Default,,0,0,0,,And note that this interacts
Dialogue: 0,0:20:35.69,0:20:37.34,Default,,0,0,0,,with other optimizations such as
Dialogue: 0,0:20:37.34,0:20:39.19,Default,,0,0,0,,de-virtualization and in-lining
Dialogue: 0,0:20:39.50,0:20:41.62,Default,,0,0,0,,that exposes other opportunities
Dialogue: 0,0:20:41.62,0:20:42.95,Default,,0,0,0,,for the compiler to remove
Dialogue: 0,0:20:42.95,0:20:44.09,Default,,0,0,0,,unused conformances.
Dialogue: 0,0:20:44.75,0:20:47.33,Default,,0,0,0,,So, this is optimization the
Dialogue: 0,0:20:47.33,0:20:48.88,Default,,0,0,0,,compiler can do completely
Dialogue: 0,0:20:48.88,0:20:49.60,Default,,0,0,0,,automatically.
Dialogue: 0,0:20:50.44,0:20:51.82,Default,,0,0,0,,That isn't always possible.
Dialogue: 0,0:20:52.65,0:20:54.47,Default,,0,0,0,,Let's look at another one.
Dialogue: 0,0:20:55.46,0:20:57.96,Default,,0,0,0,,Here, I have a very simple class
Dialogue: 0,0:20:57.96,0:20:58.78,Default,,0,0,0,,with two functions.
Dialogue: 0,0:20:59.82,0:21:01.16,Default,,0,0,0,,The compiler will generate those
Dialogue: 0,0:21:01.16,0:21:05.13,Default,,0,0,0,,functions and because in Swift 3
Dialogue: 0,0:21:05.13,0:21:07.32,Default,,0,0,0,,this is a subclass of NSObject,
Dialogue: 0,0:21:08.11,0:21:10.54,Default,,0,0,0,,the language will automatically
Dialogue: 0,0:21:10.54,0:21:12.72,Default,,0,0,0,,infer, the compiler will infer
Dialogue: 0,0:21:12.72,0:21:14.04,Default,,0,0,0,,the objc attribute.
Dialogue: 0,0:21:15.42,0:21:16.81,Default,,0,0,0,,What that means is these
Dialogue: 0,0:21:16.81,0:21:18.23,Default,,0,0,0,,functions should be accessible
Dialogue: 0,0:21:18.23,0:21:19.37,Default,,0,0,0,,from Objective-C.
Dialogue: 0,0:21:20.38,0:21:22.07,Default,,0,0,0,,And so, the compiler will
Dialogue: 0,0:21:22.07,0:21:24.51,Default,,0,0,0,,generate thunk functions that
Dialogue: 0,0:21:24.51,0:21:25.57,Default,,0,0,0,,are compatible with the
Dialogue: 0,0:21:25.57,0:21:27.15,Default,,0,0,0,,Objective-C conventions and that
Dialogue: 0,0:21:27.20,0:21:29.06,Default,,0,0,0,,forward to the Swift functions.
Dialogue: 0,0:21:30.76,0:21:32.76,Default,,0,0,0,,Now, functions within Swift are
Dialogue: 0,0:21:32.76,0:21:33.85,Default,,0,0,0,,still called directly.
Dialogue: 0,0:21:34.18,0:21:36.02,Default,,0,0,0,,In my example, show calls print.
Dialogue: 0,0:21:36.77,0:21:38.00,Default,,0,0,0,,And what that means is that the
Dialogue: 0,0:21:38.00,0:21:39.58,Default,,0,0,0,,thunk functions often end up
Dialogue: 0,0:21:39.58,0:21:40.43,Default,,0,0,0,,being unused.
Dialogue: 0,0:21:41.03,0:21:44.65,Default,,0,0,0,,But because they are exposed to
Dialogue: 0,0:21:44.65,0:21:45.96,Default,,0,0,0,,the Objective-C runtime the
Dialogue: 0,0:21:45.96,0:21:47.85,Default,,0,0,0,,compiler has no way to tell that
Dialogue: 0,0:21:47.85,0:21:48.42,Default,,0,0,0,,they're unused.
Dialogue: 0,0:21:49.04,0:21:51.20,Default,,0,0,0,,Fixing this requires changing
Dialogue: 0,0:21:51.20,0:21:52.13,Default,,0,0,0,,the language model.
Dialogue: 0,0:21:53.26,0:21:55.81,Default,,0,0,0,,And so, in Swift 4, the objc
Dialogue: 0,0:21:55.81,0:21:57.85,Default,,0,0,0,,attribute is only inferred in
Dialogue: 0,0:21:57.91,0:21:59.31,Default,,0,0,0,,situations where it's clearly
Dialogue: 0,0:21:59.31,0:21:59.63,Default,,0,0,0,,needed.
Dialogue: 0,0:21:59.69,0:22:00.94,Default,,0,0,0,,Such as when you're overriding
Dialogue: 0,0:22:00.94,0:22:02.43,Default,,0,0,0,,an Objective-C method or
Dialogue: 0,0:22:02.43,0:22:03.97,Default,,0,0,0,,conforming to an Objective-C
Dialogue: 0,0:22:04.02,0:22:04.78,Default,,0,0,0,,protocol.
Dialogue: 0,0:22:05.66,0:22:08.04,Default,,0,0,0,,This change avoids a lot of
Dialogue: 0,0:22:08.04,0:22:09.29,Default,,0,0,0,,those unused thunks.
Dialogue: 0,0:22:10.80,0:22:12.54,Default,,0,0,0,,When we adopted this in Apple's
Dialogue: 0,0:22:12.54,0:22:14.03,Default,,0,0,0,,Music App, it reduced the code
Dialogue: 0,0:22:14.08,0:22:14.98,Default,,0,0,0,,size by almost 6%.
Dialogue: 0,0:22:19.57,0:22:21.27,Default,,0,0,0,,When you have a set of functions
Dialogue: 0,0:22:21.62,0:22:23.11,Default,,0,0,0,,that you want to make accessible
Dialogue: 0,0:22:23.11,0:22:25.14,Default,,0,0,0,,and Objective-C, we recommend
Dialogue: 0,0:22:25.20,0:22:26.13,Default,,0,0,0,,that you put them in an
Dialogue: 0,0:22:26.13,0:22:28.34,Default,,0,0,0,,extension and mark the extension
Dialogue: 0,0:22:28.34,0:22:29.55,Default,,0,0,0,,with the objc attribute.
Dialogue: 0,0:22:30.03,0:22:31.44,Default,,0,0,0,,This guarantees that all those
Dialogue: 0,0:22:31.44,0:22:32.70,Default,,0,0,0,,functions will be available to
Dialogue: 0,0:22:32.70,0:22:33.87,Default,,0,0,0,,your Objective-C code.
Dialogue: 0,0:22:34.42,0:22:35.85,Default,,0,0,0,,And if that's not possible for
Dialogue: 0,0:22:35.85,0:22:38.44,Default,,0,0,0,,some reason, the compiler will
Dialogue: 0,0:22:38.44,0:22:38.98,Default,,0,0,0,,report an error to you.
Dialogue: 0,0:22:41.56,0:22:43.32,Default,,0,0,0,,So, what does it take to adopt
Dialogue: 0,0:22:43.32,0:22:43.98,Default,,0,0,0,,this change?
Dialogue: 0,0:22:44.48,0:22:45.91,Default,,0,0,0,,Doug mentioned the migrator tool
Dialogue: 0,0:22:45.91,0:22:47.19,Default,,0,0,0,,to help you move your code into
Dialogue: 0,0:22:47.19,0:22:47.89,Default,,0,0,0,,Swift 4.
Dialogue: 0,0:22:48.51,0:22:50.49,Default,,0,0,0,,With objc inference the migrator
Dialogue: 0,0:22:50.49,0:22:51.42,Default,,0,0,0,,offers you a choice.
Dialogue: 0,0:22:52.05,0:22:53.34,Default,,0,0,0,,If you don't care that much
Dialogue: 0,0:22:53.34,0:22:55.25,Default,,0,0,0,,about code size, the migrator
Dialogue: 0,0:22:55.25,0:22:57.06,Default,,0,0,0,,can easily match the Swift 3
Dialogue: 0,0:22:57.06,0:22:59.06,Default,,0,0,0,,behavior by simply inserting the
Dialogue: 0,0:22:59.06,0:23:00.82,Default,,0,0,0,,objc attribute wherever it would
Dialogue: 0,0:23:00.82,0:23:02.28,Default,,0,0,0,,previously have been inferred.
Dialogue: 0,0:23:03.16,0:23:04.50,Default,,0,0,0,,But with just a little more
Dialogue: 0,0:23:04.50,0:23:06.21,Default,,0,0,0,,effort, you can take advantage
Dialogue: 0,0:23:06.21,0:23:08.23,Default,,0,0,0,,of the code size improvements by
Dialogue: 0,0:23:08.23,0:23:09.77,Default,,0,0,0,,using minimal inference.
Dialogue: 0,0:23:10.32,0:23:13.21,Default,,0,0,0,,If you go with that option for
Dialogue: 0,0:23:13.21,0:23:15.26,Default,,0,0,0,,minimal inference, the migrator
Dialogue: 0,0:23:15.26,0:23:17.46,Default,,0,0,0,,will start by finding all the
Dialogue: 0,0:23:17.46,0:23:18.96,Default,,0,0,0,,places where it can determine
Dialogue: 0,0:23:18.96,0:23:20.79,Default,,0,0,0,,the objc attribute is definitely
Dialogue: 0,0:23:20.79,0:23:21.22,Default,,0,0,0,,needed.
Dialogue: 0,0:23:21.22,0:23:22.65,Default,,0,0,0,,And it will do that, it will
Dialogue: 0,0:23:22.65,0:23:23.89,Default,,0,0,0,,insert that automatically.
Dialogue: 0,0:23:24.97,0:23:26.39,Default,,0,0,0,,That may not be sufficient
Dialogue: 0,0:23:26.82,0:23:28.42,Default,,0,0,0,,because the migrator is unable
Dialogue: 0,0:23:28.42,0:23:30.63,Default,,0,0,0,,to detect issues across separate
Dialogue: 0,0:23:30.63,0:23:32.23,Default,,0,0,0,,Swift modules or in your
Dialogue: 0,0:23:32.23,0:23:33.25,Default,,0,0,0,,Objective-C code.
Dialogue: 0,0:23:34.11,0:23:35.50,Default,,0,0,0,,So, to help you find those
Dialogue: 0,0:23:35.50,0:23:38.74,Default,,0,0,0,,places, the migrator will mark
Dialogue: 0,0:23:38.74,0:23:39.78,Default,,0,0,0,,the thunk functions that are
Dialogue: 0,0:23:39.78,0:23:42.05,Default,,0,0,0,,inferred as deprecated.
Dialogue: 0,0:23:42.77,0:23:44.17,Default,,0,0,0,,And you can then build your code
Dialogue: 0,0:23:44.17,0:23:45.47,Default,,0,0,0,,and run your code and look for
Dialogue: 0,0:23:45.47,0:23:46.52,Default,,0,0,0,,deprecation warnings.
Dialogue: 0,0:23:47.81,0:23:49.31,Default,,0,0,0,,Let's look at that more closely.
Dialogue: 0,0:23:50.34,0:23:51.94,Default,,0,0,0,,Here's an example of a build
Dialogue: 0,0:23:51.94,0:23:52.24,Default,,0,0,0,,warning.
Dialogue: 0,0:23:53.25,0:23:55.27,Default,,0,0,0,,I've got a Swift function to
Dialogue: 0,0:23:55.27,0:23:56.60,Default,,0,0,0,,show the status of my view
Dialogue: 0,0:23:56.60,0:23:57.12,Default,,0,0,0,,controller.
Dialogue: 0,0:23:57.58,0:23:58.79,Default,,0,0,0,,And I'm calling that from my
Dialogue: 0,0:23:58.79,0:23:59.81,Default,,0,0,0,,Objective-C code.
Dialogue: 0,0:24:00.23,0:24:01.71,Default,,0,0,0,,But because I'm still relying on
Dialogue: 0,0:24:01.71,0:24:03.24,Default,,0,0,0,,the objc inference, I get this
Dialogue: 0,0:24:03.24,0:24:04.67,Default,,0,0,0,,warning about it being
Dialogue: 0,0:24:04.67,0:24:05.36,Default,,0,0,0,,deprecated.
Dialogue: 0,0:24:05.91,0:24:08.22,Default,,0,0,0,,To fix this, I need to go and
Dialogue: 0,0:24:08.31,0:24:09.98,Default,,0,0,0,,find the place in my Swift code
Dialogue: 0,0:24:09.98,0:24:11.36,Default,,0,0,0,,where the function is defined
Dialogue: 0,0:24:11.99,0:24:13.76,Default,,0,0,0,,and add the objc attribute.
Dialogue: 0,0:24:14.26,0:24:19.08,Default,,0,0,0,,Some of the issues may not be
Dialogue: 0,0:24:19.08,0:24:20.33,Default,,0,0,0,,visible at build time.
Dialogue: 0,0:24:20.37,0:24:22.03,Default,,0,0,0,,In Objective-C, it's possible to
Dialogue: 0,0:24:22.03,0:24:24.16,Default,,0,0,0,,refer to a function in ways that
Dialogue: 0,0:24:24.16,0:24:26.14,Default,,0,0,0,,can't be detected until runtime.
Dialogue: 0,0:24:26.88,0:24:28.47,Default,,0,0,0,,And so, for that reason, it's
Dialogue: 0,0:24:28.47,0:24:30.76,Default,,0,0,0,,also important to run your code,
Dialogue: 0,0:24:30.96,0:24:32.63,Default,,0,0,0,,run all of your tests, exercise
Dialogue: 0,0:24:32.63,0:24:34.18,Default,,0,0,0,,as much of the code as you can,
Dialogue: 0,0:24:34.73,0:24:36.34,Default,,0,0,0,,and look on the console in
Dialogue: 0,0:24:36.53,0:24:38.49,Default,,0,0,0,,Xcode's debug area for messages
Dialogue: 0,0:24:38.49,0:24:39.25,Default,,0,0,0,,like this one.
Dialogue: 0,0:24:39.34,0:24:40.56,Default,,0,0,0,,Telling you that you need to add
Dialogue: 0,0:24:40.56,0:24:41.63,Default,,0,0,0,,an objc attribute.
Dialogue: 0,0:24:42.51,0:24:45.59,Default,,0,0,0,,Notice, that the message there
Dialogue: 0,0:24:45.59,0:24:46.89,Default,,0,0,0,,shows you the exact source
Dialogue: 0,0:24:46.89,0:24:48.55,Default,,0,0,0,,location where the function is
Dialogue: 0,0:24:48.60,0:24:49.06,Default,,0,0,0,,defined.
Dialogue: 0,0:24:49.06,0:24:50.37,Default,,0,0,0,,So, you can just go to that
Dialogue: 0,0:24:50.37,0:24:53.83,Default,,0,0,0,,location and add the attribute.
Dialogue: 0,0:24:53.93,0:24:55.34,Default,,0,0,0,,Once you've fixed all the build
Dialogue: 0,0:24:55.34,0:24:57.74,Default,,0,0,0,,and runtime warnings, go to the
Dialogue: 0,0:24:57.74,0:24:59.23,Default,,0,0,0,,build settings for your project.
Dialogue: 0,0:24:59.57,0:25:01.28,Default,,0,0,0,,Change the Swift 3 objc
Dialogue: 0,0:25:01.28,0:25:03.29,Default,,0,0,0,,inference setting to default.
Dialogue: 0,0:25:03.29,0:25:05.15,Default,,0,0,0,,And with that the migration is
Dialogue: 0,0:25:05.22,0:25:05.52,Default,,0,0,0,,done.
Dialogue: 0,0:25:06.17,0:25:07.49,Default,,0,0,0,,It's really not that hard.
Dialogue: 0,0:25:08.09,0:25:09.49,Default,,0,0,0,,We did this for Apple's Music
Dialogue: 0,0:25:09.69,0:25:11.89,Default,,0,0,0,,App, there were only a total of
Dialogue: 0,0:25:11.89,0:25:13.71,Default,,0,0,0,,about 40 places where an objc
Dialogue: 0,0:25:13.71,0:25:15.70,Default,,0,0,0,,attribute needed to be added in
Dialogue: 0,0:25:15.70,0:25:16.95,Default,,0,0,0,,a really large project.
Dialogue: 0,0:25:17.48,0:25:19.45,Default,,0,0,0,,And more than 30 of those could
Dialogue: 0,0:25:19.45,0:25:20.57,Default,,0,0,0,,be handled completely
Dialogue: 0,0:25:20.57,0:25:22.32,Default,,0,0,0,,automatically by the migrator.
Dialogue: 0,0:25:22.81,0:25:26.14,Default,,0,0,0,,This change to limit objc
Dialogue: 0,0:25:26.14,0:25:27.80,Default,,0,0,0,,inference as well as the
Dialogue: 0,0:25:27.80,0:25:30.07,Default,,0,0,0,,optimization of removing unused
Dialogue: 0,0:25:30.07,0:25:32.32,Default,,0,0,0,,protocol conformances both help
Dialogue: 0,0:25:32.32,0:25:33.44,Default,,0,0,0,,to reduce your code size.
Dialogue: 0,0:25:33.44,0:25:36.02,Default,,0,0,0,,I'm going to tell you now about
Dialogue: 0,0:25:36.02,0:25:37.69,Default,,0,0,0,,another change that has an even
Dialogue: 0,0:25:37.69,0:25:39.41,Default,,0,0,0,,bigger impact on the overall
Dialogue: 0,0:25:39.41,0:25:41.11,Default,,0,0,0,,size of your app.
Dialogue: 0,0:25:42.08,0:25:44.49,Default,,0,0,0,,Besides the instructions and
Dialogue: 0,0:25:44.49,0:25:45.85,Default,,0,0,0,,data that make up a compile
Dialogue: 0,0:25:45.94,0:25:48.18,Default,,0,0,0,,Swift app, the symbol tables in
Dialogue: 0,0:25:48.18,0:25:50.82,Default,,0,0,0,,Swift frameworks occupy a lot of
Dialogue: 0,0:25:50.89,0:25:51.27,Default,,0,0,0,,space.
Dialogue: 0,0:25:52.37,0:25:54.73,Default,,0,0,0,,Swift uses a lot of symbols and
Dialogue: 0,0:25:54.73,0:25:58.02,Default,,0,0,0,,the names are often quite long.
Dialogue: 0,0:25:58.21,0:26:01.38,Default,,0,0,0,,For example, in Swift 3.1 almost
Dialogue: 0,0:26:01.46,0:26:03.48,Default,,0,0,0,,half of the standard library is
Dialogue: 0,0:26:03.52,0:26:04.87,Default,,0,0,0,,taken up by symbols.
Dialogue: 0,0:26:05.19,0:26:06.74,Default,,0,0,0,,As shown by the darker blue bar
Dialogue: 0,0:26:06.74,0:26:06.97,Default,,0,0,0,,here.
Dialogue: 0,0:26:08.02,0:26:10.78,Default,,0,0,0,,In Swift 4, much less space is
Dialogue: 0,0:26:10.78,0:26:11.68,Default,,0,0,0,,needed for symbols.
Dialogue: 0,0:26:11.68,0:26:13.00,Default,,0,0,0,,So, even though there's a lot
Dialogue: 0,0:26:13.00,0:26:14.31,Default,,0,0,0,,more content in the standard
Dialogue: 0,0:26:14.31,0:26:14.84,Default,,0,0,0,,library.
Dialogue: 0,0:26:15.35,0:26:17.17,Default,,0,0,0,,The total size has actually
Dialogue: 0,0:26:17.17,0:26:17.63,Default,,0,0,0,,decreased.
Dialogue: 0,0:26:19.15,0:26:20.50,Default,,0,0,0,,We've accomplished this by
Dialogue: 0,0:26:20.50,0:26:22.96,Default,,0,0,0,,making the name shorter and also
Dialogue: 0,0:26:22.96,0:26:24.58,Default,,0,0,0,,by stripping out the symbols.
Dialogue: 0,0:26:25.29,0:26:28.53,Default,,0,0,0,,Both the static linker and the
Dialogue: 0,0:26:28.53,0:26:30.32,Default,,0,0,0,,dynamic linker use a separate
Dialogue: 0,0:26:30.32,0:26:32.10,Default,,0,0,0,,try data structure to quickly
Dialogue: 0,0:26:32.10,0:26:32.95,Default,,0,0,0,,look up symbols.
Dialogue: 0,0:26:33.96,0:26:35.29,Default,,0,0,0,,And so, what that means is that
Dialogue: 0,0:26:35.29,0:26:37.16,Default,,0,0,0,,the Swift symbols are rarely
Dialogue: 0,0:26:37.16,0:26:38.62,Default,,0,0,0,,needed in the symbol table.
Dialogue: 0,0:26:39.71,0:26:41.60,Default,,0,0,0,,Xcode 9 has a new build setting,
Dialogue: 0,0:26:41.80,0:26:44.16,Default,,0,0,0,,Strip Swift Symbols that's
Dialogue: 0,0:26:44.16,0:26:45.37,Default,,0,0,0,,enabled by default.
Dialogue: 0,0:26:46.65,0:26:47.99,Default,,0,0,0,,You can turn this off, if it
Dialogue: 0,0:26:47.99,0:26:49.18,Default,,0,0,0,,causes problems for your
Dialogue: 0,0:26:49.18,0:26:49.74,Default,,0,0,0,,workflow.
Dialogue: 0,0:26:50.68,0:26:52.93,Default,,0,0,0,,But Xcode normally runs the
Dialogue: 0,0:26:52.93,0:26:55.73,Default,,0,0,0,,symbol stripping as part of
Dialogue: 0,0:26:55.73,0:26:57.27,Default,,0,0,0,,archiving your project.
Dialogue: 0,0:26:57.57,0:26:59.34,Default,,0,0,0,,So, this feature has no impact
Dialogue: 0,0:26:59.34,0:27:00.75,Default,,0,0,0,,on earlier stages of
Dialogue: 0,0:27:00.75,0:27:01.31,Default,,0,0,0,,development.
Dialogue: 0,0:27:01.31,0:27:02.90,Default,,0,0,0,,And in particular, it should not
Dialogue: 0,0:27:02.90,0:27:04.52,Default,,0,0,0,,interfere with normal debugging
Dialogue: 0,0:27:04.52,0:27:05.27,Default,,0,0,0,,or profiling.
Dialogue: 0,0:27:05.86,0:27:09.18,Default,,0,0,0,,If for some reason you want to
Dialogue: 0,0:27:09.18,0:27:10.47,Default,,0,0,0,,examine the symbols that are
Dialogue: 0,0:27:10.51,0:27:12.20,Default,,0,0,0,,present in a binary, after it's
Dialogue: 0,0:27:12.24,0:27:12.80,Default,,0,0,0,,been stripped.
Dialogue: 0,0:27:13.30,0:27:15.62,Default,,0,0,0,,You can use the DYLD info tool
Dialogue: 0,0:27:15.91,0:27:17.84,Default,,0,0,0,,with the export option to look
Dialogue: 0,0:27:17.84,0:27:18.94,Default,,0,0,0,,at the exported symbols.
Dialogue: 0,0:27:19.59,0:27:22.78,Default,,0,0,0,,This build setting applies to
Dialogue: 0,0:27:22.78,0:27:24.49,Default,,0,0,0,,the code that you build in your
Dialogue: 0,0:27:24.49,0:27:25.08,Default,,0,0,0,,project.
Dialogue: 0,0:27:26.19,0:27:27.79,Default,,0,0,0,,The Swift standard libraries are
Dialogue: 0,0:27:27.79,0:27:28.71,Default,,0,0,0,,handled separately.
Dialogue: 0,0:27:29.43,0:27:31.09,Default,,0,0,0,,They're stripped as part of App
Dialogue: 0,0:27:31.21,0:27:31.49,Default,,0,0,0,,Thinning.
Dialogue: 0,0:27:32.72,0:27:33.90,Default,,0,0,0,,It's important to understand
Dialogue: 0,0:27:33.90,0:27:34.88,Default,,0,0,0,,this because if you want to
Dialogue: 0,0:27:34.88,0:27:36.22,Default,,0,0,0,,measure the size of your app,
Dialogue: 0,0:27:36.81,0:27:37.93,Default,,0,0,0,,you really need to go through
Dialogue: 0,0:27:37.93,0:27:39.96,Default,,0,0,0,,Xcode's distribution workflow
Dialogue: 0,0:27:40.36,0:27:41.59,Default,,0,0,0,,and export your app.
Dialogue: 0,0:27:42.09,0:27:43.80,Default,,0,0,0,,And when you do that, you'll see
Dialogue: 0,0:27:43.80,0:27:45.06,Default,,0,0,0,,there's a new setting that you
Dialogue: 0,0:27:45.06,0:27:46.65,Default,,0,0,0,,can use to control whether or
Dialogue: 0,0:27:46.65,0:27:48.87,Default,,0,0,0,,not to strip the symbols from
Dialogue: 0,0:27:48.87,0:27:49.84,Default,,0,0,0,,the standard libraries.
Dialogue: 0,0:27:51.13,0:27:52.97,Default,,0,0,0,,You can turn it off, but we
Dialogue: 0,0:27:52.97,0:27:54.82,Default,,0,0,0,,recommend that in most cases you
Dialogue: 0,0:27:54.82,0:27:55.98,Default,,0,0,0,,leave this enabled, because it
Dialogue: 0,0:27:56.06,0:27:57.73,Default,,0,0,0,,will provide a significant
Dialogue: 0,0:27:57.73,0:27:59.28,Default,,0,0,0,,reduction in the size of your
Dialogue: 0,0:28:00.03,0:28:00.11,Default,,0,0,0,,app.
Dialogue: 0,0:28:00.72,0:28:02.84,Default,,0,0,0,,Next, Ben's going to come up and
Dialogue: 0,0:28:02.96,0:28:04.03,Default,,0,0,0,,talk about what's new in
Dialogue: 0,0:28:04.03,0:28:05.13,Default,,0,0,0,,strings, collections and
Dialogue: 0,0:28:05.13,0:28:05.68,Default,,0,0,0,,generics.
Dialogue: 0,0:28:06.52,0:28:11.24,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:28:11.74,0:28:12.11,Default,,0,0,0,,>> Thanks, Bob.
Dialogue: 0,0:28:13.07,0:28:14.36,Default,,0,0,0,,So, we've got some really great
Dialogue: 0,0:28:14.36,0:28:15.65,Default,,0,0,0,,features in the standard library
Dialogue: 0,0:28:15.65,0:28:16.82,Default,,0,0,0,,and generics in this release.
Dialogue: 0,0:28:16.82,0:28:18.32,Default,,0,0,0,,And I'm going to start with
Dialogue: 0,0:28:18.38,0:28:18.75,Default,,0,0,0,,strings.
Dialogue: 0,0:28:19.95,0:28:21.51,Default,,0,0,0,,Strings in Swift 4 make
Dialogue: 0,0:28:21.55,0:28:23.45,Default,,0,0,0,,processing characters faster and
Dialogue: 0,0:28:23.45,0:28:25.33,Default,,0,0,0,,easier, while still having the
Dialogue: 0,0:28:25.33,0:28:27.23,Default,,0,0,0,,same goal they've always had of
Dialogue: 0,0:28:27.23,0:28:28.79,Default,,0,0,0,,helping you write Unicode
Dialogue: 0,0:28:28.79,0:28:29.39,Default,,0,0,0,,correct code.
Dialogue: 0,0:28:29.39,0:28:32.51,Default,,0,0,0,,So what do we mean by Unicode
Dialogue: 0,0:28:32.51,0:28:32.83,Default,,0,0,0,,correct?
Dialogue: 0,0:28:33.99,0:28:34.90,Default,,0,0,0,,Well, a lot of it comes down to
Dialogue: 0,0:28:34.90,0:28:36.25,Default,,0,0,0,,what we mean when we talk about
Dialogue: 0,0:28:36.25,0:28:36.89,Default,,0,0,0,,the character.
Dialogue: 0,0:28:38.19,0:28:39.48,Default,,0,0,0,,In most programming languages a
Dialogue: 0,0:28:39.48,0:28:42.28,Default,,0,0,0,,character is just a number, and
Dialogue: 0,0:28:42.28,0:28:42.92,Default,,0,0,0,,some encoding.
Dialogue: 0,0:28:43.72,0:28:44.87,Default,,0,0,0,,In older systems that might
Dialogue: 0,0:28:45.00,0:28:45.24,Default,,0,0,0,,ASCII.
Dialogue: 0,0:28:45.76,0:28:46.75,Default,,0,0,0,,These days, it's probably one of
Dialogue: 0,0:28:46.75,0:28:47.86,Default,,0,0,0,,the Unicode encodings.
Dialogue: 0,0:28:48.92,0:28:50.82,Default,,0,0,0,,So why does that matter.
Dialogue: 0,0:28:50.82,0:28:53.90,Default,,0,0,0,,Let's look at an example.
Dialogue: 0,0:28:54.50,0:28:58.46,Default,,0,0,0,,So, the single letter é, with
Dialogue: 0,0:28:58.46,0:29:01.29,Default,,0,0,0,,an acute accent in Unicode can
Dialogue: 0,0:29:01.29,0:29:02.43,Default,,0,0,0,,be encoded in two different
Dialogue: 0,0:29:02.43,0:29:02.72,Default,,0,0,0,,ways.
Dialogue: 0,0:29:04.08,0:29:06.77,Default,,0,0,0,,One way is with a single Unicode
Dialogue: 0,0:29:06.77,0:29:08.36,Default,,0,0,0,,scaler, E9.
Dialogue: 0,0:29:09.58,0:29:11.24,Default,,0,0,0,,The other way is by following
Dialogue: 0,0:29:11.24,0:29:13.43,Default,,0,0,0,,the plain letter E with the
Dialogue: 0,0:29:13.43,0:29:15.11,Default,,0,0,0,,combining acute accent modifier.
Dialogue: 0,0:29:16.35,0:29:17.46,Default,,0,0,0,,These two ways of encoding the
Dialogue: 0,0:29:17.46,0:29:18.98,Default,,0,0,0,,same letter are what Unicode
Dialogue: 0,0:29:18.98,0:29:20.37,Default,,0,0,0,,calls canonically equivalent.
Dialogue: 0,0:29:21.20,0:29:22.01,Default,,0,0,0,,You ought to be able to use
Dialogue: 0,0:29:22.13,0:29:23.93,Default,,0,0,0,,either one without it making any
Dialogue: 0,0:29:23.93,0:29:24.49,Default,,0,0,0,,difference.
Dialogue: 0,0:29:25.71,0:29:27.75,Default,,0,0,0,,So, what can that mean in code.
Dialogue: 0,0:29:28.66,0:29:30.08,Default,,0,0,0,,Well, when the default way of a
Dialogue: 0,0:29:30.08,0:29:31.74,Default,,0,0,0,,language of looking at strings
Dialogue: 0,0:29:32.03,0:29:33.11,Default,,0,0,0,,is to look at the individual
Dialogue: 0,0:29:33.11,0:29:34.26,Default,,0,0,0,,code units in the string.
Dialogue: 0,0:29:34.26,0:29:35.39,Default,,0,0,0,,You can get some very odd
Dialogue: 0,0:29:35.45,0:29:35.92,Default,,0,0,0,,behavior.
Dialogue: 0,0:29:36.88,0:29:38.22,Default,,0,0,0,,This example is in Ruby, but we
Dialogue: 0,0:29:38.22,0:29:39.81,Default,,0,0,0,,see similar behavior in otherer
Dialogue: 0,0:29:39.81,0:29:41.15,Default,,0,0,0,,languages like Java or C.
Dialogue: 0,0:29:42.02,0:29:43.68,Default,,0,0,0,,We can create two strings in two
Dialogue: 0,0:29:43.68,0:29:45.31,Default,,0,0,0,,different ways that ought to be
Dialogue: 0,0:29:45.35,0:29:46.38,Default,,0,0,0,,exactly equivalent.
Dialogue: 0,0:29:46.87,0:29:48.56,Default,,0,0,0,,To a user, they look identical.
Dialogue: 0,0:29:50.03,0:29:51.26,Default,,0,0,0,,But if we do things like count
Dialogue: 0,0:29:51.59,0:29:53.65,Default,,0,0,0,,the number of characters, we get
Dialogue: 0,0:29:53.65,0:29:54.28,Default,,0,0,0,,different results.
Dialogue: 0,0:29:55.03,0:29:56.93,Default,,0,0,0,,And if we use the default
Dialogue: 0,0:29:56.93,0:29:58.64,Default,,0,0,0,,comparison operation, they're
Dialogue: 0,0:29:58.64,0:29:59.24,Default,,0,0,0,,not equal.
Dialogue: 0,0:30:00.42,0:30:01.64,Default,,0,0,0,,This can cause some really hard
Dialogue: 0,0:30:01.64,0:30:02.81,Default,,0,0,0,,to understand and diagnose
Dialogue: 0,0:30:02.81,0:30:03.26,Default,,0,0,0,,issues.
Dialogue: 0,0:30:03.99,0:30:05.30,Default,,0,0,0,,And that's why strict Swift
Dialogue: 0,0:30:05.41,0:30:06.43,Default,,0,0,0,,takes a slightly different
Dialogue: 0,0:30:06.43,0:30:06.87,Default,,0,0,0,,approach.
Dialogue: 0,0:30:08.14,0:30:10.52,Default,,0,0,0,,In Swift, a character is what
Dialogue: 0,0:30:10.52,0:30:12.04,Default,,0,0,0,,Unicode cools a grapheme.
Dialogue: 0,0:30:13.05,0:30:14.49,Default,,0,0,0,,A grapheme is what most users
Dialogue: 0,0:30:14.49,0:30:15.46,Default,,0,0,0,,would think of as a single
Dialogue: 0,0:30:15.46,0:30:16.87,Default,,0,0,0,,character when they see one on
Dialogue: 0,0:30:16.87,0:30:17.38,Default,,0,0,0,,the screen.
Dialogue: 0,0:30:18.58,0:30:20.26,Default,,0,0,0,,And in Swift, no matter how you
Dialogue: 0,0:30:20.26,0:30:21.64,Default,,0,0,0,,compose a particular grapheme,
Dialogue: 0,0:30:22.10,0:30:24.27,Default,,0,0,0,,it's one character, and two
Dialogue: 0,0:30:24.27,0:30:25.56,Default,,0,0,0,,differently composed equivalent
Dialogue: 0,0:30:25.56,0:30:26.99,Default,,0,0,0,,graphemes compare as equal.
Dialogue: 0,0:30:27.59,0:30:30.87,Default,,0,0,0,,Now, the logic for breaking up a
Dialogue: 0,0:30:30.87,0:30:32.43,Default,,0,0,0,,string into graphemes can get
Dialogue: 0,0:30:32.48,0:30:33.37,Default,,0,0,0,,quite complicated.
Dialogue: 0,0:30:34.16,0:30:36.15,Default,,0,0,0,,For example, the family emoji is
Dialogue: 0,0:30:36.15,0:30:38.04,Default,,0,0,0,,made up by combining adult emoji
Dialogue: 0,0:30:38.25,0:30:39.03,Default,,0,0,0,,with child emoji.
Dialogue: 0,0:30:40.43,0:30:41.85,Default,,0,0,0,,And in Swift 4 because we're
Dialogue: 0,0:30:41.85,0:30:43.26,Default,,0,0,0,,using Unicode 9 graphing
Dialogue: 0,0:30:43.26,0:30:44.30,Default,,0,0,0,,breaking that's built into the
Dialogue: 0,0:30:44.30,0:30:45.91,Default,,0,0,0,,operating system, this counts as
Dialogue: 0,0:30:45.91,0:30:46.61,Default,,0,0,0,,one character.
Dialogue: 0,0:30:47.23,0:30:50.41,Default,,0,0,0,,But this complicated logic has a
Dialogue: 0,0:30:50.41,0:30:50.91,Default,,0,0,0,,cost.
Dialogue: 0,0:30:51.21,0:30:52.27,Default,,0,0,0,,And in previous versions of
Dialogue: 0,0:30:52.27,0:30:53.53,Default,,0,0,0,,Swift, you were paying for this
Dialogue: 0,0:30:53.56,0:30:55.35,Default,,0,0,0,,cost for every character you
Dialogue: 0,0:30:55.35,0:30:55.83,Default,,0,0,0,,processed.
Dialogue: 0,0:30:55.99,0:30:56.89,Default,,0,0,0,,Even simpler ones.
Dialogue: 0,0:30:57.93,0:30:59.30,Default,,0,0,0,,In this release, we've added
Dialogue: 0,0:30:59.30,0:31:00.87,Default,,0,0,0,,fast path for those simpler
Dialogue: 0,0:31:00.87,0:31:02.45,Default,,0,0,0,,characters in many different
Dialogue: 0,0:31:02.45,0:31:02.89,Default,,0,0,0,,languages.
Dialogue: 0,0:31:04.22,0:31:05.83,Default,,0,0,0,,That means that processing these
Dialogue: 0,0:31:05.83,0:31:07.27,Default,,0,0,0,,simpler characters in a string
Dialogue: 0,0:31:07.27,0:31:08.66,Default,,0,0,0,,as you go through it should take
Dialogue: 0,0:31:08.66,0:31:10.16,Default,,0,0,0,,about a third of the time it did
Dialogue: 0,0:31:10.22,0:31:11.32,Default,,0,0,0,,in previous versions.
Dialogue: 0,0:31:11.81,0:31:14.21,Default,,0,0,0,,These fast paths are robust to
Dialogue: 0,0:31:14.21,0:31:16.64,Default,,0,0,0,,the presence of more complicated
Dialogue: 0,0:31:16.64,0:31:17.15,Default,,0,0,0,,characters.
Dialogue: 0,0:31:17.51,0:31:18.68,Default,,0,0,0,,So, for example if you were
Dialogue: 0,0:31:18.68,0:31:19.87,Default,,0,0,0,,processing messages on social
Dialogue: 0,0:31:19.87,0:31:22.33,Default,,0,0,0,,media, that was mostly simple
Dialogue: 0,0:31:22.33,0:31:24.27,Default,,0,0,0,,plain text, but with some emoji
Dialogue: 0,0:31:24.27,0:31:25.78,Default,,0,0,0,,mixed in, we only take the
Dialogue: 0,0:31:25.78,0:31:27.00,Default,,0,0,0,,slower more complex path to
Dialogue: 0,0:31:27.00,0:31:28.23,Default,,0,0,0,,process the emoji.
Dialogue: 0,0:31:28.23,0:31:31.47,Default,,0,0,0,,Now, let's look at that emoji
Dialogue: 0,0:31:31.47,0:31:33.48,Default,,0,0,0,,example again.
Dialogue: 0,0:31:33.78,0:31:34.96,Default,,0,0,0,,There's two things to notice
Dialogue: 0,0:31:34.96,0:31:35.32,Default,,0,0,0,,about this.
Dialogue: 0,0:31:36.64,0:31:39.00,Default,,0,0,0,,One is that graphemes can be of
Dialogue: 0,0:31:39.00,0:31:39.83,Default,,0,0,0,,variable width.
Dialogue: 0,0:31:40.19,0:31:41.62,Default,,0,0,0,,So, we clearly can't have random
Dialogue: 0,0:31:41.62,0:31:43.20,Default,,0,0,0,,access to a particular grapheme
Dialogue: 0,0:31:43.20,0:31:43.70,Default,,0,0,0,,in a string.
Dialogue: 0,0:31:44.42,0:31:45.72,Default,,0,0,0,,We can have random access to a
Dialogue: 0,0:31:45.72,0:31:47.03,Default,,0,0,0,,particular code unit, and you
Dialogue: 0,0:31:47.03,0:31:48.31,Default,,0,0,0,,can still get at those in Swift
Dialogue: 0,0:31:48.31,0:31:48.68,Default,,0,0,0,,strings.
Dialogue: 0,0:31:50.34,0:31:51.35,Default,,0,0,0,,But what does that mean, it
Dialogue: 0,0:31:51.35,0:31:52.38,Default,,0,0,0,,doesn't mean anything in this
Dialogue: 0,0:31:52.38,0:31:54.10,Default,,0,0,0,,example to access the fifth code
Dialogue: 0,0:31:54.10,0:31:54.42,Default,,0,0,0,,unit.
Dialogue: 0,0:31:54.77,0:31:55.68,Default,,0,0,0,,It's certainly not the fifth
Dialogue: 0,0:31:55.68,0:31:56.10,Default,,0,0,0,,character.
Dialogue: 0,0:31:57.57,0:31:58.83,Default,,0,0,0,,The other thing to notice is
Dialogue: 0,0:31:58.83,0:32:00.30,Default,,0,0,0,,that there's a bit of an unusual
Dialogue: 0,0:32:00.30,0:32:00.75,Default,,0,0,0,,behavior.
Dialogue: 0,0:32:00.75,0:32:03.57,Default,,0,0,0,,And we've appended six items to
Dialogue: 0,0:32:03.57,0:32:04.87,Default,,0,0,0,,a string, but when we were done,
Dialogue: 0,0:32:05.13,0:32:06.21,Default,,0,0,0,,the count hadn't gone up.
Dialogue: 0,0:32:06.21,0:32:07.93,Default,,0,0,0,,And that's not normally what
Dialogue: 0,0:32:07.93,0:32:09.82,Default,,0,0,0,,you'd expect from other
Dialogue: 0,0:32:09.82,0:32:11.06,Default,,0,0,0,,collections like arrays.
Dialogue: 0,0:32:11.06,0:32:13.70,Default,,0,0,0,,And it was because of edge cases
Dialogue: 0,0:32:13.70,0:32:15.11,Default,,0,0,0,,like this that it was felt that
Dialogue: 0,0:32:15.11,0:32:16.54,Default,,0,0,0,,strings shouldn't be collections
Dialogue: 0,0:32:16.54,0:32:19.30,Default,,0,0,0,,in previous versions of Swift.
Dialogue: 0,0:32:19.46,0:32:21.12,Default,,0,0,0,,Instead, you used to have to
Dialogue: 0,0:32:21.12,0:32:24.37,Default,,0,0,0,,access the characters as a
Dialogue: 0,0:32:24.37,0:32:25.82,Default,,0,0,0,,collection for the character's
Dialogue: 0,0:32:25.82,0:32:26.89,Default,,0,0,0,,property on the string.
Dialogue: 0,0:32:28.86,0:32:30.68,Default,,0,0,0,,But this actually really wasn't
Dialogue: 0,0:32:30.68,0:32:32.05,Default,,0,0,0,,helping anyone understand the
Dialogue: 0,0:32:32.05,0:32:33.56,Default,,0,0,0,,issues it was trying to avoid.
Dialogue: 0,0:32:33.91,0:32:35.18,Default,,0,0,0,,All it was doing was cluttering
Dialogue: 0,0:32:35.18,0:32:35.58,Default,,0,0,0,,up code.
Dialogue: 0,0:32:35.58,0:32:37.37,Default,,0,0,0,,It was dissuading people from
Dialogue: 0,0:32:37.37,0:32:38.79,Default,,0,0,0,,thinking in terms of characters
Dialogue: 0,0:32:39.10,0:32:40.31,Default,,0,0,0,,and from using the standard
Dialogue: 0,0:32:40.31,0:32:41.50,Default,,0,0,0,,library to do their string
Dialogue: 0,0:32:41.50,0:32:41.99,Default,,0,0,0,,processing.
Dialogue: 0,0:32:42.99,0:32:45.01,Default,,0,0,0,,So, in Swift 4, strings are a
Dialogue: 0,0:32:45.01,0:32:45.95,Default,,0,0,0,,collection of characters.
Dialogue: 0,0:32:45.95,0:32:47.12,Default,,0,0,0,,And that helps clean up code
Dialogue: 0,0:32:47.12,0:32:48.35,Default,,0,0,0,,like this, a lot.
Dialogue: 0,0:32:49.52,0:32:54.70,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:32:55.20,0:32:56.08,Default,,0,0,0,,Now, there's one other thing we
Dialogue: 0,0:32:56.08,0:32:56.97,Default,,0,0,0,,can simplify here.
Dialogue: 0,0:32:57.13,0:32:58.17,Default,,0,0,0,,In string processing it's very
Dialogue: 0,0:32:58.21,0:32:59.81,Default,,0,0,0,,common to want to slice from an
Dialogue: 0,0:32:59.81,0:33:01.67,Default,,0,0,0,,index to the end of a string.
Dialogue: 0,0:33:03.03,0:33:04.28,Default,,0,0,0,,There's a shorthand in Swift 4
Dialogue: 0,0:33:04.28,0:33:04.94,Default,,0,0,0,,for that.
Dialogue: 0,0:33:05.04,0:33:06.16,Default,,0,0,0,,You can leave off the end of a
Dialogue: 0,0:33:06.16,0:33:07.31,Default,,0,0,0,,range whenever you're slicing a
Dialogue: 0,0:33:07.31,0:33:08.96,Default,,0,0,0,,collection and that means from
Dialogue: 0,0:33:08.96,0:33:10.15,Default,,0,0,0,,the index, to the end of the
Dialogue: 0,0:33:10.15,0:33:10.66,Default,,0,0,0,,collection.
Dialogue: 0,0:33:10.66,0:33:12.53,Default,,0,0,0,,And there's a similar syntax for
Dialogue: 0,0:33:12.53,0:33:15.98,Default,,0,0,0,,going from the start up to an
Dialogue: 0,0:33:16.34,0:33:16.55,Default,,0,0,0,,index.
Dialogue: 0,0:33:16.55,0:33:18.10,Default,,0,0,0,,Making strings collections means
Dialogue: 0,0:33:18.10,0:33:19.15,Default,,0,0,0,,they have all of the properties
Dialogue: 0,0:33:19.15,0:33:19.92,Default,,0,0,0,,you're use to in other
Dialogue: 0,0:33:19.92,0:33:21.29,Default,,0,0,0,,collections, so you can zip
Dialogue: 0,0:33:21.29,0:33:23.11,Default,,0,0,0,,them, map them, search or filter
Dialogue: 0,0:33:23.11,0:33:23.26,Default,,0,0,0,,them.
Dialogue: 0,0:33:24.20,0:33:25.40,Default,,0,0,0,,This makes building up string
Dialogue: 0,0:33:25.40,0:33:26.61,Default,,0,0,0,,processing a lot simpler.
Dialogue: 0,0:33:27.63,0:33:28.50,Default,,0,0,0,,We'll look at an example.
Dialogue: 0,0:33:30.02,0:33:31.27,Default,,0,0,0,,Supposing you want to detect
Dialogue: 0,0:33:31.51,0:33:33.49,Default,,0,0,0,,whether there was a country flag
Dialogue: 0,0:33:33.75,0:33:34.98,Default,,0,0,0,,in a message in your app in
Dialogue: 0,0:33:34.98,0:33:37.09,Default,,0,0,0,,order to trigger some logic.
Dialogue: 0,0:33:38.44,0:33:40.51,Default,,0,0,0,,Country flags in Unicode are
Dialogue: 0,0:33:40.51,0:33:41.93,Default,,0,0,0,,made up of pairs of special
Dialogue: 0,0:33:41.93,0:33:43.30,Default,,0,0,0,,regional indicators that spell
Dialogue: 0,0:33:43.30,0:33:44.66,Default,,0,0,0,,out the ISO country code of the
Dialogue: 0,0:33:44.75,0:33:45.07,Default,,0,0,0,,flag.
Dialogue: 0,0:33:45.36,0:33:46.38,Default,,0,0,0,,So, the Japanese flag for
Dialogue: 0,0:33:46.38,0:33:47.32,Default,,0,0,0,,example is JNP.
Dialogue: 0,0:33:47.32,0:33:49.63,Default,,0,0,0,,We can add an extension to
Dialogue: 0,0:33:49.63,0:33:51.07,Default,,0,0,0,,Unicode scaler to be able to
Dialogue: 0,0:33:51.07,0:33:52.26,Default,,0,0,0,,detect whether it's one of these
Dialogue: 0,0:33:52.26,0:33:53.59,Default,,0,0,0,,special regional indicators.
Dialogue: 0,0:33:54.27,0:33:58.28,Default,,0,0,0,,Next, we can extend character in
Dialogue: 0,0:33:58.28,0:34:00.12,Default,,0,0,0,,order to detect whether the
Dialogue: 0,0:34:00.12,0:34:01.31,Default,,0,0,0,,character is a flag.
Dialogue: 0,0:34:02.28,0:34:03.43,Default,,0,0,0,,This is using a new property
Dialogue: 0,0:34:03.43,0:34:04.75,Default,,0,0,0,,that's available in Swift 4 that
Dialogue: 0,0:34:04.75,0:34:06.15,Default,,0,0,0,,lets you access the underlying
Dialogue: 0,0:34:06.15,0:34:07.74,Default,,0,0,0,,Unicode scalers that make up the
Dialogue: 0,0:34:07.74,0:34:08.16,Default,,0,0,0,,graphic.
Dialogue: 0,0:34:08.73,0:34:10.69,Default,,0,0,0,,This is actually a really useful
Dialogue: 0,0:34:10.69,0:34:11.98,Default,,0,0,0,,thing to play around with, if
Dialogue: 0,0:34:11.98,0:34:13.07,Default,,0,0,0,,you want to learn more about how
Dialogue: 0,0:34:13.07,0:34:14.61,Default,,0,0,0,,Unicode works, especially in a
Dialogue: 0,0:34:14.61,0:34:15.41,Default,,0,0,0,,Swift playground.
Dialogue: 0,0:34:18.30,0:34:19.34,Default,,0,0,0,,Now that we have this, we can
Dialogue: 0,0:34:19.34,0:34:20.55,Default,,0,0,0,,use it with all of the familiar
Dialogue: 0,0:34:20.89,0:34:21.80,Default,,0,0,0,,collection API's.
Dialogue: 0,0:34:22.00,0:34:23.66,Default,,0,0,0,,So, we can search if the string
Dialogue: 0,0:34:23.66,0:34:24.52,Default,,0,0,0,,contains a flag.
Dialogue: 0,0:34:25.38,0:34:27.23,Default,,0,0,0,,Or, we can filter out just the
Dialogue: 0,0:34:27.23,0:34:28.68,Default,,0,0,0,,flags into a new string.
Dialogue: 0,0:34:28.84,0:34:32.73,Default,,0,0,0,,So, now that strings are
Dialogue: 0,0:34:32.73,0:34:34.14,Default,,0,0,0,,collections, you might notice
Dialogue: 0,0:34:34.14,0:34:35.30,Default,,0,0,0,,that they have a new method,
Dialogue: 0,0:34:35.54,0:34:35.92,Default,,0,0,0,,split.
Dialogue: 0,0:34:36.14,0:34:37.28,Default,,0,0,0,,Which is an existing method on
Dialogue: 0,0:34:37.28,0:34:37.74,Default,,0,0,0,,collection.
Dialogue: 0,0:34:38.98,0:34:41.11,Default,,0,0,0,,It breaks up a string into an
Dialogue: 0,0:34:41.11,0:34:42.12,Default,,0,0,0,,array of slices.
Dialogue: 0,0:34:42.97,0:34:44.78,Default,,0,0,0,,But if you run it on Swift, in
Dialogue: 0,0:34:44.84,0:34:46.17,Default,,0,0,0,,Swift 4, you'll notice it
Dialogue: 0,0:34:46.17,0:34:47.52,Default,,0,0,0,,doesn't return an array of
Dialogue: 0,0:34:47.52,0:34:47.96,Default,,0,0,0,,strings.
Dialogue: 0,0:34:49.56,0:34:51.00,Default,,0,0,0,,The slice type in Swift 4 for
Dialogue: 0,0:34:51.00,0:34:52.73,Default,,0,0,0,,strings is a substring.
Dialogue: 0,0:34:53.95,0:34:54.82,Default,,0,0,0,,So, why did we give it a
Dialogue: 0,0:34:54.82,0:34:55.54,Default,,0,0,0,,different type?
Dialogue: 0,0:34:56.79,0:34:58.35,Default,,0,0,0,,Well, there's some fundamental
Dialogue: 0,0:34:58.35,0:34:59.45,Default,,0,0,0,,engineering trade-offs to be
Dialogue: 0,0:34:59.45,0:35:01.53,Default,,0,0,0,,made when deciding how slicing
Dialogue: 0,0:35:01.53,0:35:02.73,Default,,0,0,0,,on collections ought to work.
Dialogue: 0,0:35:04.54,0:35:05.31,Default,,0,0,0,,When you're slicing a
Dialogue: 0,0:35:05.31,0:35:06.59,Default,,0,0,0,,collection, should it make a
Dialogue: 0,0:35:06.64,0:35:08.13,Default,,0,0,0,,copy of the elements that you're
Dialogue: 0,0:35:08.13,0:35:10.90,Default,,0,0,0,,slicing out, or should it return
Dialogue: 0,0:35:11.14,0:35:13.32,Default,,0,0,0,,a view into the internal storage
Dialogue: 0,0:35:13.43,0:35:14.59,Default,,0,0,0,,of the original collection.
Dialogue: 0,0:35:14.59,0:35:17.56,Default,,0,0,0,,From a performance point of
Dialogue: 0,0:35:17.56,0:35:19.62,Default,,0,0,0,,view, sharing storage is clearly
Dialogue: 0,0:35:19.62,0:35:20.40,Default,,0,0,0,,going to be faster.
Dialogue: 0,0:35:21.33,0:35:22.37,Default,,0,0,0,,As Bob mentioned earlier,
Dialogue: 0,0:35:22.43,0:35:24.69,Default,,0,0,0,,allocating and tracking heap
Dialogue: 0,0:35:24.69,0:35:26.20,Default,,0,0,0,,memory can be very expensive.
Dialogue: 0,0:35:26.52,0:35:27.93,Default,,0,0,0,,You could easily spend at least
Dialogue: 0,0:35:27.93,0:35:29.33,Default,,0,0,0,,half of the time in an operation
Dialogue: 0,0:35:29.33,0:35:31.12,Default,,0,0,0,,like Split, making copies.
Dialogue: 0,0:35:32.12,0:35:34.46,Default,,0,0,0,,What's more, if slicing takes
Dialogue: 0,0:35:34.46,0:35:35.87,Default,,0,0,0,,linear time, because we're
Dialogue: 0,0:35:35.87,0:35:37.17,Default,,0,0,0,,making copies of the elements,
Dialogue: 0,0:35:37.82,0:35:39.79,Default,,0,0,0,,then a loop that was performing
Dialogue: 0,0:35:39.79,0:35:40.93,Default,,0,0,0,,slicing operations might
Dialogue: 0,0:35:40.93,0:35:42.23,Default,,0,0,0,,accidentally be quadratic,
Dialogue: 0,0:35:42.50,0:35:43.79,Default,,0,0,0,,instead of running in the linear
Dialogue: 0,0:35:43.87,0:35:44.99,Default,,0,0,0,,time you might be expecting.
Dialogue: 0,0:35:46.53,0:35:47.76,Default,,0,0,0,,So, that's was slicing of any
Dialogue: 0,0:35:47.76,0:35:49.43,Default,,0,0,0,,collection in Swift needs to
Dialogue: 0,0:35:49.43,0:35:50.60,Default,,0,0,0,,happen in constant time.
Dialogue: 0,0:35:52.48,0:35:53.91,Default,,0,0,0,,But that shared storage approach
Dialogue: 0,0:35:53.91,0:35:55.64,Default,,0,0,0,,that we use instead also has a
Dialogue: 0,0:35:55.64,0:35:56.12,Default,,0,0,0,,downside.
Dialogue: 0,0:35:56.25,0:35:57.52,Default,,0,0,0,,And to understand what that is,
Dialogue: 0,0:35:58.06,0:35:59.06,Default,,0,0,0,,let's look at the internal
Dialogue: 0,0:35:59.06,0:36:00.41,Default,,0,0,0,,implementation of string.
Dialogue: 0,0:36:01.88,0:36:04.86,Default,,0,0,0,,So, currently in Swift strings
Dialogue: 0,0:36:04.86,0:36:06.03,Default,,0,0,0,,internally are made up of three
Dialogue: 0,0:36:06.03,0:36:06.51,Default,,0,0,0,,properties.
Dialogue: 0,0:36:07.65,0:36:08.77,Default,,0,0,0,,They have a pointer to the start
Dialogue: 0,0:36:08.77,0:36:09.20,Default,,0,0,0,,of the buffer.
Dialogue: 0,0:36:10.08,0:36:11.07,Default,,0,0,0,,They have a count of the number
Dialogue: 0,0:36:11.07,0:36:12.48,Default,,0,0,0,,of code units in the buffer, and
Dialogue: 0,0:36:12.61,0:36:14.09,Default,,0,0,0,,they have a reference to an
Dialogue: 0,0:36:14.09,0:36:14.84,Default,,0,0,0,,owner object.
Dialogue: 0,0:36:15.70,0:36:17.20,Default,,0,0,0,,The owner object is responsible
Dialogue: 0,0:36:17.20,0:36:18.53,Default,,0,0,0,,for tracking and managing the
Dialogue: 0,0:36:18.53,0:36:18.85,Default,,0,0,0,,buffer.
Dialogue: 0,0:36:18.97,0:36:20.22,Default,,0,0,0,,And this is a familiar pattern
Dialogue: 0,0:36:20.22,0:36:21.32,Default,,0,0,0,,if you know on copy on write
Dialogue: 0,0:36:21.32,0:36:22.38,Default,,0,0,0,,works in other collections.
Dialogue: 0,0:36:24.31,0:36:25.83,Default,,0,0,0,,When the original string struct
Dialogue: 0,0:36:25.83,0:36:28.95,Default,,0,0,0,,is destroyed, the reference
Dialogue: 0,0:36:28.95,0:36:30.12,Default,,0,0,0,,count and the owner object drops
Dialogue: 0,0:36:30.17,0:36:31.90,Default,,0,0,0,,to zero, and the [inaudible] on
Dialogue: 0,0:36:31.90,0:36:33.70,Default,,0,0,0,,the class frees the buffer.
Dialogue: 0,0:36:35.28,0:36:36.63,Default,,0,0,0,,Now, let's have a look at what
Dialogue: 0,0:36:36.63,0:36:37.82,Default,,0,0,0,,happens when we create a
Dialogue: 0,0:36:37.93,0:36:38.40,Default,,0,0,0,,substring.
Dialogue: 0,0:36:39.07,0:36:42.07,Default,,0,0,0,,So, supposing we sliced off just
Dialogue: 0,0:36:42.07,0:36:43.46,Default,,0,0,0,,the word well from the original
Dialogue: 0,0:36:43.46,0:36:43.74,Default,,0,0,0,,string.
Dialogue: 0,0:36:45.18,0:36:47.55,Default,,0,0,0,,The substring now has a start
Dialogue: 0,0:36:47.55,0:36:49.45,Default,,0,0,0,,that points to the W, has a
Dialogue: 0,0:36:49.45,0:36:51.66,Default,,0,0,0,,count of five, and the owner is
Dialogue: 0,0:36:51.66,0:36:53.14,Default,,0,0,0,,a shared reference to the
Dialogue: 0,0:36:53.14,0:36:54.15,Default,,0,0,0,,original strings owner.
Dialogue: 0,0:36:55.51,0:36:56.49,Default,,0,0,0,,Now what happens when that
Dialogue: 0,0:36:56.49,0:36:58.58,Default,,0,0,0,,original string goes out of
Dialogue: 0,0:36:59.50,0:36:59.71,Default,,0,0,0,,scope.
Dialogue: 0,0:37:00.53,0:37:01.80,Default,,0,0,0,,The owner's reference count is
Dialogue: 0,0:37:01.80,0:37:03.64,Default,,0,0,0,,decremented, but it's not
Dialogue: 0,0:37:03.64,0:37:04.55,Default,,0,0,0,,destroyed because it's being
Dialogue: 0,0:37:04.55,0:37:05.53,Default,,0,0,0,,shared by the substring.
Dialogue: 0,0:37:05.53,0:37:06.81,Default,,0,0,0,,So, the buffer isn't freed.
Dialogue: 0,0:37:07.16,0:37:08.50,Default,,0,0,0,,And that's good because the
Dialogue: 0,0:37:08.50,0:37:09.56,Default,,0,0,0,,substring is relying on the
Dialogue: 0,0:37:09.56,0:37:09.76,Default,,0,0,0,,buffer.
Dialogue: 0,0:37:09.76,0:37:12.24,Default,,0,0,0,,But the entire of the buffer
Dialogue: 0,0:37:12.24,0:37:12.61,Default,,0,0,0,,remains.
Dialogue: 0,0:37:12.82,0:37:14.30,Default,,0,0,0,,Not just the part, the substring
Dialogue: 0,0:37:14.30,0:37:14.95,Default,,0,0,0,,it's relying on.
Dialogue: 0,0:37:16.44,0:37:17.50,Default,,0,0,0,,Now in this case, it's no big
Dialogue: 0,0:37:17.50,0:37:18.52,Default,,0,0,0,,deal, it's just a few
Dialogue: 0,0:37:18.52,0:37:19.01,Default,,0,0,0,,characters.
Dialogue: 0,0:37:19.70,0:37:20.85,Default,,0,0,0,,But it can be a real problem.
Dialogue: 0,0:37:22.89,0:37:24.63,Default,,0,0,0,,Supposing you downloaded a giant
Dialogue: 0,0:37:24.63,0:37:25.82,Default,,0,0,0,,blob of text from the internet,
Dialogue: 0,0:37:26.60,0:37:28.05,Default,,0,0,0,,then you sliced out just a small
Dialogue: 0,0:37:28.05,0:37:29.64,Default,,0,0,0,,part of that text and assigned
Dialogue: 0,0:37:29.64,0:37:31.80,Default,,0,0,0,,it to some long-lived variable
Dialogue: 0,0:37:32.13,0:37:33.12,Default,,0,0,0,,like a UI label.
Dialogue: 0,0:37:34.22,0:37:35.50,Default,,0,0,0,,This ends up looking like a
Dialogue: 0,0:37:35.50,0:37:36.12,Default,,0,0,0,,memory leak.
Dialogue: 0,0:37:36.72,0:37:38.05,Default,,0,0,0,,Because the original giant blob
Dialogue: 0,0:37:38.05,0:37:39.69,Default,,0,0,0,,of text's buffer never gets
Dialogue: 0,0:37:39.69,0:37:40.07,Default,,0,0,0,,freed.
Dialogue: 0,0:37:41.17,0:37:42.21,Default,,0,0,0,,This was actually such a big
Dialogue: 0,0:37:42.21,0:37:43.46,Default,,0,0,0,,problem in Java that they
Dialogue: 0,0:37:43.46,0:37:45.04,Default,,0,0,0,,changed the behavior of slicing
Dialogue: 0,0:37:45.04,0:37:47.35,Default,,0,0,0,,on strings a few years ago to
Dialogue: 0,0:37:47.35,0:37:48.24,Default,,0,0,0,,make it make copies.
Dialogue: 0,0:37:49.57,0:37:50.68,Default,,0,0,0,,But as we've seen, that has a
Dialogue: 0,0:37:50.68,0:37:51.81,Default,,0,0,0,,performance downside, and we
Dialogue: 0,0:37:51.81,0:37:52.92,Default,,0,0,0,,don't necessarily want to make
Dialogue: 0,0:37:53.01,0:37:53.71,Default,,0,0,0,,that tradeoff.
Dialogue: 0,0:37:54.65,0:37:55.90,Default,,0,0,0,,The natural solution for a
Dialogue: 0,0:37:55.90,0:37:57.69,Default,,0,0,0,,problem like this in Swift is to
Dialogue: 0,0:37:57.78,0:37:58.45,Default,,0,0,0,,use a type.
Dialogue: 0,0:37:59.17,0:38:00.75,Default,,0,0,0,,And that's why substrings are a
Dialogue: 0,0:38:00.75,0:38:01.86,Default,,0,0,0,,different type to strings.
Dialogue: 0,0:38:02.87,0:38:04.49,Default,,0,0,0,,Now, when you're performing your
Dialogue: 0,0:38:04.49,0:38:06.09,Default,,0,0,0,,slicing operation on the
Dialogue: 0,0:38:06.09,0:38:07.90,Default,,0,0,0,,original large string, you'll
Dialogue: 0,0:38:07.90,0:38:09.32,Default,,0,0,0,,end up wanting to assign a
Dialogue: 0,0:38:09.36,0:38:10.99,Default,,0,0,0,,substring to a string and the
Dialogue: 0,0:38:10.99,0:38:12.19,Default,,0,0,0,,compiler will tell you about it.
Dialogue: 0,0:38:13.46,0:38:14.69,Default,,0,0,0,,If you apply the fix it, it's
Dialogue: 0,0:38:14.69,0:38:16.74,Default,,0,0,0,,going to suggest then you'll
Dialogue: 0,0:38:16.74,0:38:18.84,Default,,0,0,0,,create a new string, and that
Dialogue: 0,0:38:18.84,0:38:20.22,Default,,0,0,0,,will copy just the part of the
Dialogue: 0,0:38:20.22,0:38:21.25,Default,,0,0,0,,buffer that you sliced.
Dialogue: 0,0:38:22.29,0:38:23.56,Default,,0,0,0,,And that allows the original
Dialogue: 0,0:38:23.56,0:38:25.92,Default,,0,0,0,,buffer to go out of scope and be
Dialogue: 0,0:38:26.90,0:38:27.67,Default,,0,0,0,,freed up.
Dialogue: 0,0:38:28.52,0:38:33.29,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:38:33.79,0:38:35.71,Default,,0,0,0,,So, now we've got two different
Dialogue: 0,0:38:35.71,0:38:36.06,Default,,0,0,0,,types.
Dialogue: 0,0:38:36.06,0:38:37.06,Default,,0,0,0,,You might ask the question when
Dialogue: 0,0:38:37.06,0:38:38.61,Default,,0,0,0,,should I use substring in my
Dialogue: 0,0:38:38.61,0:38:38.74,Default,,0,0,0,,code.
Dialogue: 0,0:38:38.74,0:38:40.86,Default,,0,0,0,,And the answer is, you probably
Dialogue: 0,0:38:40.86,0:38:42.76,Default,,0,0,0,,shouldn't very often explicitly.
Dialogue: 0,0:38:43.31,0:38:45.60,Default,,0,0,0,,When defining interfaces, like
Dialogue: 0,0:38:45.60,0:38:47.22,Default,,0,0,0,,methods on types or properties,
Dialogue: 0,0:38:47.69,0:38:49.10,Default,,0,0,0,,you should prefer to use string,
Dialogue: 0,0:38:49.86,0:38:51.13,Default,,0,0,0,,both to avoid the memory leak
Dialogue: 0,0:38:51.13,0:38:52.70,Default,,0,0,0,,issues we just talked about, but
Dialogue: 0,0:38:52.70,0:38:54.34,Default,,0,0,0,,also because string is what we
Dialogue: 0,0:38:54.34,0:38:55.80,Default,,0,0,0,,call the common currency type.
Dialogue: 0,0:38:56.04,0:38:56.92,Default,,0,0,0,,It's the type that everybody
Dialogue: 0,0:38:56.92,0:38:58.45,Default,,0,0,0,,expects to see in APIs.
Dialogue: 0,0:39:00.08,0:39:01.39,Default,,0,0,0,,Most of the time, the only time
Dialogue: 0,0:39:01.39,0:39:03.18,Default,,0,0,0,,you will encounter a substring
Dialogue: 0,0:39:03.18,0:39:04.68,Default,,0,0,0,,type is when you're performing a
Dialogue: 0,0:39:04.68,0:39:05.57,Default,,0,0,0,,slicing operation.
Dialogue: 0,0:39:06.08,0:39:07.73,Default,,0,0,0,,And because Swift uses type
Dialogue: 0,0:39:07.79,0:39:09.19,Default,,0,0,0,,inference, you won't actually
Dialogue: 0,0:39:09.19,0:39:10.60,Default,,0,0,0,,name the substring type at all.
Dialogue: 0,0:39:12.20,0:39:13.71,Default,,0,0,0,,Substrings have many of the same
Dialogue: 0,0:39:13.71,0:39:14.86,Default,,0,0,0,,methods and properties as
Dialogue: 0,0:39:14.86,0:39:15.59,Default,,0,0,0,,regular strings.
Dialogue: 0,0:39:15.94,0:39:17.67,Default,,0,0,0,,So even though you're not naming
Dialogue: 0,0:39:17.67,0:39:19.61,Default,,0,0,0,,the type as a substring, much of
Dialogue: 0,0:39:19.69,0:39:20.81,Default,,0,0,0,,the code will operate just the
Dialogue: 0,0:39:20.90,0:39:22.69,Default,,0,0,0,,same as if it was operating on a
Dialogue: 0,0:39:22.69,0:39:23.06,Default,,0,0,0,,string.
Dialogue: 0,0:39:24.07,0:39:25.20,Default,,0,0,0,,And if you don't actually need
Dialogue: 0,0:39:25.20,0:39:26.04,Default,,0,0,0,,to create a string because
Dialogue: 0,0:39:26.04,0:39:26.84,Default,,0,0,0,,you're only doing local
Dialogue: 0,0:39:26.84,0:39:28.34,Default,,0,0,0,,operations, then that can be
Dialogue: 0,0:39:28.34,0:39:29.30,Default,,0,0,0,,avoided altogether.
Dialogue: 0,0:39:31.87,0:39:32.66,Default,,0,0,0,,So, that's almost it for
Dialogue: 0,0:39:32.66,0:39:33.03,Default,,0,0,0,,strings.
Dialogue: 0,0:39:33.39,0:39:34.53,Default,,0,0,0,,There's one last feature we want
Dialogue: 0,0:39:34.53,0:39:34.98,Default,,0,0,0,,to talk about.
Dialogue: 0,0:39:34.98,0:39:36.27,Default,,0,0,0,,And that's multiline string
Dialogue: 0,0:39:36.27,0:39:36.66,Default,,0,0,0,,literals.
Dialogue: 0,0:39:37.62,0:39:38.92,Default,,0,0,0,,Previously, these were a real
Dialogue: 0,0:39:38.92,0:39:39.59,Default,,0,0,0,,pain to write.
Dialogue: 0,0:39:39.73,0:39:41.26,Default,,0,0,0,,You had to write one big long
Dialogue: 0,0:39:41.26,0:39:42.78,Default,,0,0,0,,string literal with embedded
Dialogue: 0,0:39:42.85,0:39:43.52,Default,,0,0,0,,slash ends in it.
Dialogue: 0,0:39:44.61,0:39:46.61,Default,,0,0,0,,Swift 4 introduces the triple
Dialogue: 0,0:39:46.61,0:39:47.43,Default,,0,0,0,,quoting syntax.
Dialogue: 0,0:39:48.68,0:39:49.88,Default,,0,0,0,,You start your multiline string
Dialogue: 0,0:39:49.88,0:39:50.56,Default,,0,0,0,,with a triple quote.
Dialogue: 0,0:39:51.52,0:39:56.91,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:39:57.41,0:39:58.42,Default,,0,0,0,,And then you end it with a
Dialogue: 0,0:39:58.42,0:39:58.95,Default,,0,0,0,,triple quote.
Dialogue: 0,0:39:59.61,0:40:01.32,Default,,0,0,0,,The indentation of the closing
Dialogue: 0,0:40:01.32,0:40:02.97,Default,,0,0,0,,triple quote is what determines
Dialogue: 0,0:40:03.45,0:40:04.94,Default,,0,0,0,,the indentation for every line
Dialogue: 0,0:40:04.94,0:40:05.98,Default,,0,0,0,,of the multiline string.
Dialogue: 0,0:40:06.55,0:40:08.86,Default,,0,0,0,,You can see here, because we've
Dialogue: 0,0:40:08.86,0:40:10.00,Default,,0,0,0,,put our literal inside a
Dialogue: 0,0:40:10.00,0:40:10.87,Default,,0,0,0,,function, we want it to be
Dialogue: 0,0:40:10.87,0:40:12.09,Default,,0,0,0,,nicely indented to match the
Dialogue: 0,0:40:12.09,0:40:13.60,Default,,0,0,0,,formatting of the rest of our
Dialogue: 0,0:40:13.60,0:40:13.72,Default,,0,0,0,,code.
Dialogue: 0,0:40:14.59,0:40:15.71,Default,,0,0,0,,The rule is, whatever
Dialogue: 0,0:40:15.71,0:40:16.96,Default,,0,0,0,,indentation you use on the
Dialogue: 0,0:40:17.00,0:40:18.58,Default,,0,0,0,,closing quote, you need to
Dialogue: 0,0:40:18.58,0:40:20.14,Default,,0,0,0,,include at least that much
Dialogue: 0,0:40:20.14,0:40:21.94,Default,,0,0,0,,indentation on every line of the
Dialogue: 0,0:40:21.94,0:40:22.27,Default,,0,0,0,,string.
Dialogue: 0,0:40:23.08,0:40:24.60,Default,,0,0,0,,Then, when the code is compiled,
Dialogue: 0,0:40:25.55,0:40:27.36,Default,,0,0,0,,that indentation is stripped
Dialogue: 0,0:40:28.24,0:40:28.33,Default,,0,0,0,,off.
Dialogue: 0,0:40:29.44,0:40:30.81,Default,,0,0,0,,This is a really nice feature.
Dialogue: 0,0:40:30.81,0:40:31.64,Default,,0,0,0,,And one of the cool things to
Dialogue: 0,0:40:31.64,0:40:33.01,Default,,0,0,0,,mention about it is it's being
Dialogue: 0,0:40:33.01,0:40:35.70,Default,,0,0,0,,both proposed and implemented by
Dialogue: 0,0:40:35.70,0:40:36.90,Default,,0,0,0,,external members of the Swift
Dialogue: 0,0:40:36.90,0:40:38.04,Default,,0,0,0,,open source community.
Dialogue: 0,0:40:39.52,0:40:45.11,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:40:45.61,0:40:46.40,Default,,0,0,0,,So, that's it for string.
Dialogue: 0,0:40:46.40,0:40:47.33,Default,,0,0,0,,Now, let's talk about some of
Dialogue: 0,0:40:47.33,0:40:48.37,Default,,0,0,0,,the new generics features.
Dialogue: 0,0:40:49.52,0:40:50.76,Default,,0,0,0,,With each version of Swift,
Dialogue: 0,0:40:50.76,0:40:52.51,Default,,0,0,0,,we've been refining the generic
Dialogue: 0,0:40:52.58,0:40:52.92,Default,,0,0,0,,system.
Dialogue: 0,0:40:53.14,0:40:54.41,Default,,0,0,0,,Both to make it more powerful,
Dialogue: 0,0:40:55.12,0:40:56.77,Default,,0,0,0,,but also to make it more usable
Dialogue: 0,0:40:56.94,0:40:57.61,Default,,0,0,0,,and approachable.
Dialogue: 0,0:40:57.99,0:40:59.40,Default,,0,0,0,,Such as with protocol extensions
Dialogue: 0,0:40:59.40,0:41:00.36,Default,,0,0,0,,that came in Swift 2.
Dialogue: 0,0:41:01.58,0:41:03.62,Default,,0,0,0,,In this release, we are
Dialogue: 0,0:41:03.62,0:41:04.87,Default,,0,0,0,,introducing two features.
Dialogue: 0,0:41:05.56,0:41:06.85,Default,,0,0,0,,Where clauses on associated
Dialogue: 0,0:41:06.85,0:41:09.47,Default,,0,0,0,,types, and generic subscripts.
Dialogue: 0,0:41:10.02,0:41:10.81,Default,,0,0,0,,And I'm going to show you a
Dialogue: 0,0:41:10.81,0:41:12.18,Default,,0,0,0,,couple of examples of how we've
Dialogue: 0,0:41:12.18,0:41:13.02,Default,,0,0,0,,used them in the standard
Dialogue: 0,0:41:13.02,0:41:14.36,Default,,0,0,0,,library to give you an idea of
Dialogue: 0,0:41:14.36,0:41:15.38,Default,,0,0,0,,how you might be able to use
Dialogue: 0,0:41:15.41,0:41:17.01,Default,,0,0,0,,them in your code.
Dialogue: 0,0:41:18.26,0:41:20.39,Default,,0,0,0,,So, supposing you wanted to
Dialogue: 0,0:41:20.39,0:41:22.18,Default,,0,0,0,,detect whether every element of
Dialogue: 0,0:41:22.18,0:41:24.28,Default,,0,0,0,,a sequence was equal to a
Dialogue: 0,0:41:24.28,0:41:25.11,Default,,0,0,0,,particular value.
Dialogue: 0,0:41:26.17,0:41:27.81,Default,,0,0,0,,You can do this with a contains
Dialogue: 0,0:41:27.81,0:41:28.95,Default,,0,0,0,,method that already exists on
Dialogue: 0,0:41:28.95,0:41:29.37,Default,,0,0,0,,sequence.
Dialogue: 0,0:41:29.72,0:41:31.49,Default,,0,0,0,,But, that code is a bit clunky.
Dialogue: 0,0:41:31.88,0:41:33.55,Default,,0,0,0,,You have to write the sequence
Dialogue: 0,0:41:33.73,0:41:35.77,Default,,0,0,0,,doesn't contain any element not
Dialogue: 0,0:41:35.77,0:41:36.54,Default,,0,0,0,,equal to the value.
Dialogue: 0,0:41:37.66,0:41:38.68,Default,,0,0,0,,If you are writing this over and
Dialogue: 0,0:41:38.68,0:41:39.51,Default,,0,0,0,,over again, that might get
Dialogue: 0,0:41:39.51,0:41:41.04,Default,,0,0,0,,pretty annoying and protocol
Dialogue: 0,0:41:41.04,0:41:42.53,Default,,0,0,0,,extensions give you a really
Dialogue: 0,0:41:42.53,0:41:44.15,Default,,0,0,0,,nice way to wrap up code like
Dialogue: 0,0:41:44.15,0:41:46.05,Default,,0,0,0,,this into helper methods that
Dialogue: 0,0:41:46.05,0:41:46.85,Default,,0,0,0,,neaten up your code.
Dialogue: 0,0:41:48.00,0:41:49.79,Default,,0,0,0,,So, we can wrap this code inside
Dialogue: 0,0:41:49.79,0:41:51.69,Default,,0,0,0,,an extension on sequence that
Dialogue: 0,0:41:51.69,0:41:52.71,Default,,0,0,0,,gives us something much more
Dialogue: 0,0:41:52.71,0:41:53.57,Default,,0,0,0,,readable to call.
Dialogue: 0,0:41:55.03,0:41:56.80,Default,,0,0,0,,Now, when you're extending
Dialogue: 0,0:41:56.80,0:41:58.33,Default,,0,0,0,,sequence like this, there's one
Dialogue: 0,0:41:58.33,0:41:59.54,Default,,0,0,0,,thing that's slightly annoying.
Dialogue: 0,0:41:59.54,0:42:01.06,Default,,0,0,0,,And that's that you used to have
Dialogue: 0,0:42:01.09,0:42:03.15,Default,,0,0,0,,to write Iterator.Element to
Dialogue: 0,0:42:03.15,0:42:04.27,Default,,0,0,0,,refer to the type of the
Dialogue: 0,0:42:04.27,0:42:05.26,Default,,0,0,0,,elements of the sequence.
Dialogue: 0,0:42:06.31,0:42:08.12,Default,,0,0,0,,In Swift 4, you can drop the
Dialogue: 0,0:42:08.12,0:42:08.51,Default,,0,0,0,,Iterator.
Dialogue: 0,0:42:08.51,0:42:10.80,Default,,0,0,0,,because sequence has an element
Dialogue: 0,0:42:10.86,0:42:11.71,Default,,0,0,0,,type of its own.
Dialogue: 0,0:42:13.01,0:42:13.79,Default,,0,0,0,,Now, this might seem like a
Dialogue: 0,0:42:13.79,0:42:15.36,Default,,0,0,0,,really easy features we have
Dialogue: 0,0:42:15.36,0:42:15.49,Default,,0,0,0,,added.
Dialogue: 0,0:42:15.49,0:42:16.71,Default,,0,0,0,,But we actually couldn't do it
Dialogue: 0,0:42:17.02,0:42:18.51,Default,,0,0,0,,without the ability to constrain
Dialogue: 0,0:42:18.51,0:42:19.47,Default,,0,0,0,,associated types.
Dialogue: 0,0:42:19.52,0:42:20.40,Default,,0,0,0,,And I'll show you how.
Dialogue: 0,0:42:22.03,0:42:23.63,Default,,0,0,0,,So, in Swift 3, we had a
Dialogue: 0,0:42:23.63,0:42:25.58,Default,,0,0,0,,protocol sequence, it had an
Dialogue: 0,0:42:25.58,0:42:26.92,Default,,0,0,0,,associated type iterator.
Dialogue: 0,0:42:27.53,0:42:28.76,Default,,0,0,0,,And the iterator had an
Dialogue: 0,0:42:28.76,0:42:30.14,Default,,0,0,0,,associated type for the element.
Dialogue: 0,0:42:30.82,0:42:33.86,Default,,0,0,0,,In Swift 4, we added the
Dialogue: 0,0:42:33.86,0:42:36.74,Default,,0,0,0,,associated type Element and then
Dialogue: 0,0:42:37.25,0:42:38.86,Default,,0,0,0,,we add a where clause to the
Dialogue: 0,0:42:38.86,0:42:40.92,Default,,0,0,0,,Iterator associated type to
Dialogue: 0,0:42:40.92,0:42:43.03,Default,,0,0,0,,require that its element is the
Dialogue: 0,0:42:43.11,0:42:44.54,Default,,0,0,0,,same as sequence's element.
Dialogue: 0,0:42:45.37,0:42:46.34,Default,,0,0,0,,Otherwise they could get out of
Dialogue: 0,0:42:46.34,0:42:47.43,Default,,0,0,0,,sync and that would cause
Dialogue: 0,0:42:47.43,0:42:47.98,Default,,0,0,0,,difficulties.
Dialogue: 0,0:42:49.28,0:42:50.33,Default,,0,0,0,,We've used this in several
Dialogue: 0,0:42:50.33,0:42:51.66,Default,,0,0,0,,places in the standard library.
Dialogue: 0,0:42:52.40,0:42:54.37,Default,,0,0,0,,So, for example, previously
Dialogue: 0,0:42:54.37,0:42:56.00,Default,,0,0,0,,there was no guarantee the
Dialogue: 0,0:42:56.00,0:42:58.01,Default,,0,0,0,,elements of a subsequence were
Dialogue: 0,0:42:58.01,0:42:59.27,Default,,0,0,0,,the same type as the elements of
Dialogue: 0,0:42:59.27,0:42:59.74,Default,,0,0,0,,a sequence.
Dialogue: 0,0:43:00.65,0:43:01.90,Default,,0,0,0,,No one would ever want to write
Dialogue: 0,0:43:01.90,0:43:03.01,Default,,0,0,0,,a sequence where that wasn't the
Dialogue: 0,0:43:03.01,0:43:03.34,Default,,0,0,0,,case.
Dialogue: 0,0:43:03.67,0:43:05.03,Default,,0,0,0,,It would be impossible to use.
Dialogue: 0,0:43:05.29,0:43:06.75,Default,,0,0,0,,But, still it wasn't guaranteed
Dialogue: 0,0:43:06.75,0:43:08.36,Default,,0,0,0,,by the compiler, because we have
Dialogue: 0,0:43:08.36,0:43:09.85,Default,,0,0,0,,no way of expressing it in the
Dialogue: 0,0:43:09.85,0:43:10.38,Default,,0,0,0,,language.
Dialogue: 0,0:43:11.15,0:43:12.81,Default,,0,0,0,,Now, with where clauses on
Dialogue: 0,0:43:12.81,0:43:14.60,Default,,0,0,0,,associated types we can make
Dialogue: 0,0:43:14.60,0:43:15.28,Default,,0,0,0,,that guarantee.
Dialogue: 0,0:43:16.83,0:43:18.02,Default,,0,0,0,,So, what does this mean for your
Dialogue: 0,0:43:18.02,0:43:18.26,Default,,0,0,0,,code?
Dialogue: 0,0:43:19.87,0:43:21.06,Default,,0,0,0,,Well, if you've even extended
Dialogue: 0,0:43:21.09,0:43:22.44,Default,,0,0,0,,sequence or collection yourself,
Dialogue: 0,0:43:22.44,0:43:23.94,Default,,0,0,0,,you've probably found that you
Dialogue: 0,0:43:23.94,0:43:25.02,Default,,0,0,0,,had to add all of these
Dialogue: 0,0:43:25.02,0:43:26.74,Default,,0,0,0,,seemingly unnecessary where
Dialogue: 0,0:43:26.74,0:43:29.16,Default,,0,0,0,,clauses to your extension in
Dialogue: 0,0:43:29.16,0:43:30.20,Default,,0,0,0,,order to guarantee that it would
Dialogue: 0,0:43:30.20,0:43:31.70,Default,,0,0,0,,compile because the body was
Dialogue: 0,0:43:31.70,0:43:33.74,Default,,0,0,0,,relying on things the protocol
Dialogue: 0,0:43:33.85,0:43:34.61,Default,,0,0,0,,didn't guarantee.
Dialogue: 0,0:43:35.97,0:43:37.97,Default,,0,0,0,,Now, because we've done the
Dialogue: 0,0:43:37.97,0:43:38.69,Default,,0,0,0,,things you've seen in the
Dialogue: 0,0:43:38.69,0:43:40.55,Default,,0,0,0,,previous slides, it can
Dialogue: 0,0:43:40.55,0:43:41.21,Default,,0,0,0,,guarantee that.
Dialogue: 0,0:43:41.21,0:43:43.50,Default,,0,0,0,,And so, you'll get warnings
Dialogue: 0,0:43:43.80,0:43:44.82,Default,,0,0,0,,telling you that you now have
Dialogue: 0,0:43:44.88,0:43:45.99,Default,,0,0,0,,redundant constraints.
Dialogue: 0,0:43:47.10,0:43:48.73,Default,,0,0,0,,These are just warnings in both
Dialogue: 0,0:43:48.73,0:43:50.28,Default,,0,0,0,,Swift 3 and Swift 4 mode, and
Dialogue: 0,0:43:50.28,0:43:51.62,Default,,0,0,0,,all they're telling you is that
Dialogue: 0,0:43:51.62,0:43:53.18,Default,,0,0,0,,they're unnecessary and you can
Dialogue: 0,0:43:53.68,0:43:55.13,Default,,0,0,0,,neaten up your code, which you
Dialogue: 0,0:43:55.13,0:43:56.93,Default,,0,0,0,,can do at your own pace.
Dialogue: 0,0:43:58.06,0:43:59.33,Default,,0,0,0,,Now, there's one more thing to
Dialogue: 0,0:43:59.33,0:44:00.67,Default,,0,0,0,,know about these new constraints
Dialogue: 0,0:44:00.67,0:44:01.19,Default,,0,0,0,,that we've added.
Dialogue: 0,0:44:01.28,0:44:02.75,Default,,0,0,0,,And that's that this is one of
Dialogue: 0,0:44:02.75,0:44:04.48,Default,,0,0,0,,the few things that is not
Dialogue: 0,0:44:04.48,0:44:05.90,Default,,0,0,0,,backwardly compatible in Swift
Dialogue: 0,0:44:05.90,0:44:06.80,Default,,0,0,0,,3.2 mode.
Dialogue: 0,0:44:07.44,0:44:09.04,Default,,0,0,0,,Because protocol performance has
Dialogue: 0,0:44:09.12,0:44:10.19,Default,,0,0,0,,to be consistent across the
Dialogue: 0,0:44:10.19,0:44:11.19,Default,,0,0,0,,entire program.
Dialogue: 0,0:44:12.55,0:44:13.57,Default,,0,0,0,,So, if you written your own
Dialogue: 0,0:44:13.57,0:44:15.22,Default,,0,0,0,,custom collection types, that
Dialogue: 0,0:44:15.55,0:44:17.19,Default,,0,0,0,,might happen to violate some of
Dialogue: 0,0:44:17.19,0:44:18.79,Default,,0,0,0,,these constraints, you'll have
Dialogue: 0,0:44:18.85,0:44:20.27,Default,,0,0,0,,to resolve those issues before
Dialogue: 0,0:44:20.27,0:44:21.24,Default,,0,0,0,,you can compile with the new
Dialogue: 0,0:44:21.24,0:44:21.75,Default,,0,0,0,,compiler.
Dialogue: 0,0:44:22.69,0:44:24.08,Default,,0,0,0,,We think this is a pretty rare
Dialogue: 0,0:44:24.15,0:44:24.85,Default,,0,0,0,,thing to happen.
Dialogue: 0,0:44:25.09,0:44:26.67,Default,,0,0,0,,It's usually an oversight and
Dialogue: 0,0:44:26.67,0:44:28.14,Default,,0,0,0,,it's usually easily resolved.
Dialogue: 0,0:44:28.17,0:44:29.35,Default,,0,0,0,,But it's something to be aware
Dialogue: 0,0:44:29.35,0:44:31.01,Default,,0,0,0,,of if you have done this.
Dialogue: 0,0:44:32.72,0:44:34.30,Default,,0,0,0,,So, finally, let's talk about
Dialogue: 0,0:44:34.30,0:44:35.17,Default,,0,0,0,,generic subscripts.
Dialogue: 0,0:44:36.08,0:44:37.52,Default,,0,0,0,,Earlier, we saw an example of a
Dialogue: 0,0:44:37.52,0:44:38.88,Default,,0,0,0,,one-sided range syntax.
Dialogue: 0,0:44:39.67,0:44:40.54,Default,,0,0,0,,So, how did we actually
Dialogue: 0,0:44:40.54,0:44:41.90,Default,,0,0,0,,implement this internally within
Dialogue: 0,0:44:41.90,0:44:42.68,Default,,0,0,0,,the standard library?
Dialogue: 0,0:44:42.68,0:44:47.38,Default,,0,0,0,,Well, first, there's a new type
Dialogue: 0,0:44:47.57,0:44:48.60,Default,,0,0,0,,partial range from.
Dialogue: 0,0:44:49.12,0:44:50.11,Default,,0,0,0,,It looks a lot like a regular
Dialogue: 0,0:44:50.11,0:44:51.70,Default,,0,0,0,,range, but it only has a lower
Dialogue: 0,0:44:51.70,0:44:52.00,Default,,0,0,0,,bound.
Dialogue: 0,0:44:52.65,0:44:55.96,Default,,0,0,0,,Next, there's a protocol range
Dialogue: 0,0:44:55.96,0:44:57.64,Default,,0,0,0,,expression, which we've used to
Dialogue: 0,0:44:57.64,0:44:59.21,Default,,0,0,0,,unify all of the different kinds
Dialogue: 0,0:44:59.21,0:45:00.04,Default,,0,0,0,,of range types.
Dialogue: 0,0:45:00.78,0:45:01.86,Default,,0,0,0,,It has a method that takes a
Dialogue: 0,0:45:01.86,0:45:04.00,Default,,0,0,0,,collection and uses that to turn
Dialogue: 0,0:45:04.00,0:45:05.59,Default,,0,0,0,,any range expression into a
Dialogue: 0,0:45:05.59,0:45:07.18,Default,,0,0,0,,concrete range type that can be
Dialogue: 0,0:45:07.18,0:45:08.01,Default,,0,0,0,,used for slicing.
Dialogue: 0,0:45:08.63,0:45:11.94,Default,,0,0,0,,For example, partial range from
Dialogue: 0,0:45:12.10,0:45:13.78,Default,,0,0,0,,uses the collections end index
Dialogue: 0,0:45:14.01,0:45:15.38,Default,,0,0,0,,to fill in the missing upper
Dialogue: 0,0:45:15.38,0:45:15.72,Default,,0,0,0,,bound.
Dialogue: 0,0:45:16.43,0:45:19.59,Default,,0,0,0,,Now that we have that protocol,
Dialogue: 0,0:45:19.78,0:45:21.57,Default,,0,0,0,,we can extend string with a
Dialogue: 0,0:45:21.57,0:45:23.88,Default,,0,0,0,,generic subscript that will take
Dialogue: 0,0:45:23.96,0:45:25.66,Default,,0,0,0,,any kind of range expression and
Dialogue: 0,0:45:25.66,0:45:27.41,Default,,0,0,0,,use that range expression to
Dialogue: 0,0:45:27.41,0:45:28.53,Default,,0,0,0,,slice a substring.
Dialogue: 0,0:45:30.35,0:45:31.32,Default,,0,0,0,,But because strings now
Dialogue: 0,0:45:31.32,0:45:33.18,Default,,0,0,0,,collections, we're actually able
Dialogue: 0,0:45:33.18,0:45:34.78,Default,,0,0,0,,to put this feature directly on
Dialogue: 0,0:45:34.78,0:45:35.28,Default,,0,0,0,,collection.
Dialogue: 0,0:45:35.28,0:45:37.03,Default,,0,0,0,,And that includes any custom
Dialogue: 0,0:45:37.03,0:45:38.07,Default,,0,0,0,,collections that you might have
Dialogue: 0,0:45:38.07,0:45:39.46,Default,,0,0,0,,written, which get this feature,
Dialogue: 0,0:45:39.69,0:45:41.39,Default,,0,0,0,,automatically via the protocol.
Dialogue: 0,0:45:43.01,0:45:44.02,Default,,0,0,0,,We were actually able to clean
Dialogue: 0,0:45:44.02,0:45:45.37,Default,,0,0,0,,up a lot of code in the standard
Dialogue: 0,0:45:45.37,0:45:46.70,Default,,0,0,0,,library this way because we
Dialogue: 0,0:45:46.70,0:45:47.64,Default,,0,0,0,,could remove all of the
Dialogue: 0,0:45:47.64,0:45:49.45,Default,,0,0,0,,duplicated slicing operations we
Dialogue: 0,0:45:49.45,0:45:50.81,Default,,0,0,0,,had to hard code for each
Dialogue: 0,0:45:50.81,0:45:51.91,Default,,0,0,0,,different range type we wanted
Dialogue: 0,0:45:51.91,0:45:53.43,Default,,0,0,0,,to support and replace them with
Dialogue: 0,0:45:53.43,0:45:54.93,Default,,0,0,0,,a single generic subscript.
Dialogue: 0,0:45:55.50,0:45:56.75,Default,,0,0,0,,And we hope that you can find
Dialogue: 0,0:45:56.75,0:45:58.36,Default,,0,0,0,,similar ways to use generics to
Dialogue: 0,0:45:58.36,0:46:01.18,Default,,0,0,0,,clean up your code as well.
Dialogue: 0,0:46:01.68,0:46:02.40,Default,,0,0,0,,So, there are loads of new
Dialogue: 0,0:46:02.40,0:46:03.51,Default,,0,0,0,,features I didn't get a chance
Dialogue: 0,0:46:03.51,0:46:04.87,Default,,0,0,0,,to cover today, like some new
Dialogue: 0,0:46:04.87,0:46:05.80,Default,,0,0,0,,numeric protocols.
Dialogue: 0,0:46:06.16,0:46:06.96,Default,,0,0,0,,And some really cool
Dialogue: 0,0:46:06.96,0:46:08.12,Default,,0,0,0,,enhancements to the dictionary
Dialogue: 0,0:46:08.19,0:46:08.39,Default,,0,0,0,,type.
Dialogue: 0,0:46:09.51,0:46:11.09,Default,,0,0,0,,One of the things we've added is
Dialogue: 0,0:46:11.09,0:46:12.87,Default,,0,0,0,,a new method on collections that
Dialogue: 0,0:46:12.87,0:46:14.21,Default,,0,0,0,,allows you to swap two elements
Dialogue: 0,0:46:14.39,0:46:16.01,Default,,0,0,0,,in the collection, given two
Dialogue: 0,0:46:16.01,0:46:17.30,Default,,0,0,0,,indices instead of using the
Dialogue: 0,0:46:17.30,0:46:18.97,Default,,0,0,0,,global function that takes two
Dialogue: 0,0:46:18.97,0:46:19.74,Default,,0,0,0,,arguments in out.
Dialogue: 0,0:46:21.05,0:46:22.38,Default,,0,0,0,,And this was to support a new
Dialogue: 0,0:46:22.38,0:46:24.21,Default,,0,0,0,,feature of exclusive access to
Dialogue: 0,0:46:24.21,0:46:25.53,Default,,0,0,0,,memory that John's going to talk
Dialogue: 0,0:46:25.53,0:46:26.28,Default,,0,0,0,,to you more about now.
Dialogue: 0,0:46:27.52,0:46:34.27,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:46:34.77,0:46:35.49,Default,,0,0,0,,>> Thanks, Ben.
Dialogue: 0,0:46:36.03,0:46:37.32,Default,,0,0,0,,Thanks, Ben.
Dialogue: 0,0:46:38.62,0:46:40.56,Default,,0,0,0,,Exclusive access to memory is a
Dialogue: 0,0:46:40.56,0:46:42.13,Default,,0,0,0,,new rule that we're adding in
Dialogue: 0,0:46:42.13,0:46:42.97,Default,,0,0,0,,Swift 4.
Dialogue: 0,0:46:43.64,0:46:46.90,Default,,0,0,0,,It's really the first part of a
Dialogue: 0,0:46:46.90,0:46:48.56,Default,,0,0,0,,much larger feature that we call
Dialogue: 0,0:46:48.72,0:46:49.24,Default,,0,0,0,,ownership.
Dialogue: 0,0:46:49.95,0:46:51.67,Default,,0,0,0,,Ownership is all about making it
Dialogue: 0,0:46:51.67,0:46:53.20,Default,,0,0,0,,easier to understand the
Dialogue: 0,0:46:53.20,0:46:54.99,Default,,0,0,0,,performance of your program.
Dialogue: 0,0:46:55.83,0:46:57.30,Default,,0,0,0,,It's going to make it easier for
Dialogue: 0,0:46:57.30,0:46:59.11,Default,,0,0,0,,you to optimize your program by
Dialogue: 0,0:46:59.11,0:47:01.21,Default,,0,0,0,,eliminating unnecessary copies
Dialogue: 0,0:47:01.21,0:47:03.07,Default,,0,0,0,,and retains when you need to.
Dialogue: 0,0:47:03.22,0:47:04.97,Default,,0,0,0,,But it's also going to enable us
Dialogue: 0,0:47:05.13,0:47:07.34,Default,,0,0,0,,to make Swift, faster by default
Dialogue: 0,0:47:07.64,0:47:08.84,Default,,0,0,0,,in a number of cases.
Dialogue: 0,0:47:09.73,0:47:11.43,Default,,0,0,0,,And ultimately, it's going to
Dialogue: 0,0:47:11.43,0:47:13.94,Default,,0,0,0,,enable some really powerful new
Dialogue: 0,0:47:13.94,0:47:15.99,Default,,0,0,0,,language features for creating
Dialogue: 0,0:47:16.13,0:47:18.16,Default,,0,0,0,,safe and optimally efficient
Dialogue: 0,0:47:18.16,0:47:20.36,Default,,0,0,0,,abstractions, before we can do
Dialogue: 0,0:47:20.36,0:47:22.40,Default,,0,0,0,,any of that we have to make it
Dialogue: 0,0:47:22.48,0:47:23.98,Default,,0,0,0,,easier to reason about memory.
Dialogue: 0,0:47:24.33,0:47:26.12,Default,,0,0,0,,And that means enforcing
Dialogue: 0,0:47:26.15,0:47:27.92,Default,,0,0,0,,exclusive access to memory.
Dialogue: 0,0:47:28.98,0:47:30.19,Default,,0,0,0,,So, what do I mean by that.
Dialogue: 0,0:47:31.49,0:47:32.58,Default,,0,0,0,,Let's walk through an example.
Dialogue: 0,0:47:33.61,0:47:35.09,Default,,0,0,0,,Often it happens that I'm
Dialogue: 0,0:47:35.25,0:47:37.05,Default,,0,0,0,,iterating over a collection like
Dialogue: 0,0:47:37.13,0:47:38.77,Default,,0,0,0,,this and I want to modify each
Dialogue: 0,0:47:38.77,0:47:39.78,Default,,0,0,0,,element as I go.
Dialogue: 0,0:47:40.62,0:47:42.17,Default,,0,0,0,,This is a pretty common pattern.
Dialogue: 0,0:47:42.17,0:47:43.86,Default,,0,0,0,,So, I'm going to go ahead and
Dialogue: 0,0:47:43.86,0:47:45.75,Default,,0,0,0,,extract that into a method.
Dialogue: 0,0:47:46.49,0:47:49.10,Default,,0,0,0,,Now that I've got this method
Dialogue: 0,0:47:49.67,0:47:51.38,Default,,0,0,0,,I've got a generic operation
Dialogue: 0,0:47:51.55,0:47:53.35,Default,,0,0,0,,that I can use to modify any
Dialogue: 0,0:47:53.35,0:47:54.47,Default,,0,0,0,,mutable collection.
Dialogue: 0,0:47:54.98,0:47:58.96,Default,,0,0,0,,Each element at a time.
Dialogue: 0,0:47:59.16,0:48:01.97,Default,,0,0,0,,This operation is iterating over
Dialogue: 0,0:48:01.97,0:48:03.68,Default,,0,0,0,,a set of indices that it
Dialogue: 0,0:48:03.73,0:48:07.39,Default,,0,0,0,,captures at the start of the
Dialogue: 0,0:48:07.39,0:48:08.18,Default,,0,0,0,,iteration.
Dialogue: 0,0:48:09.23,0:48:11.26,Default,,0,0,0,,So, this only really works if
Dialogue: 0,0:48:11.26,0:48:13.29,Default,,0,0,0,,nothing within this operation
Dialogue: 0,0:48:13.64,0:48:15.19,Default,,0,0,0,,actually modifies the set of
Dialogue: 0,0:48:15.19,0:48:16.98,Default,,0,0,0,,indices by adding or removing
Dialogue: 0,0:48:16.98,0:48:18.19,Default,,0,0,0,,elements from the collection.
Dialogue: 0,0:48:19.36,0:48:21.46,Default,,0,0,0,,But I can pretty clearly see
Dialogue: 0,0:48:21.56,0:48:22.82,Default,,0,0,0,,nothing in this method is
Dialogue: 0,0:48:22.82,0:48:23.79,Default,,0,0,0,,actually modifying the
Dialogue: 0,0:48:23.79,0:48:24.29,Default,,0,0,0,,collection.
Dialogue: 0,0:48:24.42,0:48:28.19,Default,,0,0,0,,Right? Well, okay I do call this
Dialogue: 0,0:48:28.19,0:48:30.06,Default,,0,0,0,,closure that was passed in.
Dialogue: 0,0:48:30.06,0:48:31.73,Default,,0,0,0,,And a closure is arbitrary code.
Dialogue: 0,0:48:32.39,0:48:34.41,Default,,0,0,0,,But again, I look at this
Dialogue: 0,0:48:34.41,0:48:37.73,Default,,0,0,0,,method, and I think to myself OK
Dialogue: 0,0:48:37.86,0:48:39.65,Default,,0,0,0,,I'm only giving this closure
Dialogue: 0,0:48:39.65,0:48:41.82,Default,,0,0,0,,access to a specific element of
Dialogue: 0,0:48:41.82,0:48:43.20,Default,,0,0,0,,the collection, not to the
Dialogue: 0,0:48:43.20,0:48:44.22,Default,,0,0,0,,entire collection.
Dialogue: 0,0:48:44.62,0:48:47.13,Default,,0,0,0,,So, I should know that nothing
Dialogue: 0,0:48:47.13,0:48:48.41,Default,,0,0,0,,is allowed to modify the
Dialogue: 0,0:48:48.41,0:48:50.34,Default,,0,0,0,,collection while this operation
Dialogue: 0,0:48:50.34,0:48:50.99,Default,,0,0,0,,is underway.
Dialogue: 0,0:48:52.38,0:48:54.53,Default,,0,0,0,,Unfortunately, in Swift 3,
Dialogue: 0,0:48:54.63,0:48:55.59,Default,,0,0,0,,that's not really how the
Dialogue: 0,0:48:55.59,0:48:56.20,Default,,0,0,0,,language works.
Dialogue: 0,0:48:57.55,0:48:59.09,Default,,0,0,0,,Let's go back to that code that
Dialogue: 0,0:48:59.09,0:49:01.03,Default,,0,0,0,,I had where I was calling my
Dialogue: 0,0:49:01.03,0:49:01.49,Default,,0,0,0,,method.
Dialogue: 0,0:49:02.24,0:49:03.11,Default,,0,0,0,,What if instead of just
Dialogue: 0,0:49:03.11,0:49:06.03,Default,,0,0,0,,multiplying the element by 2, I
Dialogue: 0,0:49:06.48,0:49:08.30,Default,,0,0,0,,try to access the numbers
Dialogue: 0,0:49:08.30,0:49:08.98,Default,,0,0,0,,variable.
Dialogue: 0,0:49:09.98,0:49:11.28,Default,,0,0,0,,There's nothing stopping me from
Dialogue: 0,0:49:11.28,0:49:11.77,Default,,0,0,0,,doing that.
Dialogue: 0,0:49:12.08,0:49:14.76,Default,,0,0,0,,I can just, at any point in this
Dialogue: 0,0:49:14.76,0:49:17.34,Default,,0,0,0,,closure, remove something or add
Dialogue: 0,0:49:17.34,0:49:20.11,Default,,0,0,0,,something to the variable, to
Dialogue: 0,0:49:20.11,0:49:21.76,Default,,0,0,0,,the array while I'm iterating
Dialogue: 0,0:49:21.76,0:49:23.18,Default,,0,0,0,,over it in another method.
Dialogue: 0,0:49:23.80,0:49:26.47,Default,,0,0,0,,As soon as I do this, one thing
Dialogue: 0,0:49:26.47,0:49:27.87,Default,,0,0,0,,immediately stands out to me.
Dialogue: 0,0:49:28.33,0:49:30.22,Default,,0,0,0,,It's a lot harder to reason
Dialogue: 0,0:49:30.26,0:49:32.38,Default,,0,0,0,,about what's going on with this
Dialogue: 0,0:49:32.38,0:49:33.11,Default,,0,0,0,,numbers array.
Dialogue: 0,0:49:33.11,0:49:36.46,Default,,0,0,0,,It used to be the case before
Dialogue: 0,0:49:36.83,0:49:38.46,Default,,0,0,0,,that I could just look at each
Dialogue: 0,0:49:38.46,0:49:40.00,Default,,0,0,0,,individual function in my
Dialogue: 0,0:49:40.00,0:49:41.79,Default,,0,0,0,,program and think about what it
Dialogue: 0,0:49:41.99,0:49:44.19,Default,,0,0,0,,individually is doing to each
Dialogue: 0,0:49:44.31,0:49:46.11,Default,,0,0,0,,variable that it has access to.
Dialogue: 0,0:49:46.74,0:49:47.60,Default,,0,0,0,,And that's great.
Dialogue: 0,0:49:47.90,0:49:49.09,Default,,0,0,0,,That's one of the best
Dialogue: 0,0:49:49.16,0:49:50.98,Default,,0,0,0,,properties of what we call value
Dialogue: 0,0:49:50.98,0:49:51.42,Default,,0,0,0,,semantics.
Dialogue: 0,0:49:51.42,0:49:52.84,Default,,0,0,0,,That you get this kind of
Dialogue: 0,0:49:52.90,0:49:55.23,Default,,0,0,0,,isolation in each program, each
Dialogue: 0,0:49:55.27,0:49:56.29,Default,,0,0,0,,part of your program.
Dialogue: 0,0:49:56.79,0:49:58.71,Default,,0,0,0,,Everything composes together and
Dialogue: 0,0:49:58.87,0:50:00.21,Default,,0,0,0,,you don't have to reason about
Dialogue: 0,0:50:00.26,0:50:01.84,Default,,0,0,0,,everything all at once.
Dialogue: 0,0:50:03.14,0:50:05.59,Default,,0,0,0,,But unfortunately, because we
Dialogue: 0,0:50:05.59,0:50:07.48,Default,,0,0,0,,can do things like this we get a
Dialogue: 0,0:50:07.56,0:50:09.97,Default,,0,0,0,,sort of reference semantics like
Dialogue: 0,0:50:09.97,0:50:11.94,Default,,0,0,0,,affect, where you all the sudden
Dialogue: 0,0:50:11.94,0:50:13.56,Default,,0,0,0,,have to reason about your entire
Dialogue: 0,0:50:13.64,0:50:15.34,Default,,0,0,0,,program together in order to
Dialogue: 0,0:50:15.34,0:50:16.68,Default,,0,0,0,,understand what's going on.
Dialogue: 0,0:50:17.65,0:50:19.08,Default,,0,0,0,,Here, when I do this sort of
Dialogue: 0,0:50:19.18,0:50:21.06,Default,,0,0,0,,thing, I'm going to run past the
Dialogue: 0,0:50:21.12,0:50:21.88,Default,,0,0,0,,end of the array.
Dialogue: 0,0:50:22.69,0:50:24.84,Default,,0,0,0,,Now, it's pretty easy for me to
Dialogue: 0,0:50:24.84,0:50:26.88,Default,,0,0,0,,go ahead and try to fix that in
Dialogue: 0,0:50:26.88,0:50:29.57,Default,,0,0,0,,my method, by instead of
Dialogue: 0,0:50:29.86,0:50:31.01,Default,,0,0,0,,iterating over the set of
Dialogue: 0,0:50:31.01,0:50:32.36,Default,,0,0,0,,indices at the start of the
Dialogue: 0,0:50:32.42,0:50:34.64,Default,,0,0,0,,collection, I'm going to reload
Dialogue: 0,0:50:34.64,0:50:37.07,Default,,0,0,0,,the index each time through, and
Dialogue: 0,0:50:37.07,0:50:38.99,Default,,0,0,0,,compare that and that way, if I
Dialogue: 0,0:50:38.99,0:50:40.49,Default,,0,0,0,,move something from the end,
Dialogue: 0,0:50:40.49,0:50:41.42,Default,,0,0,0,,everything is going to work.
Dialogue: 0,0:50:41.94,0:50:46.27,Default,,0,0,0,,But, oh, there has to be another
Dialogue: 0,0:50:46.30,0:50:46.46,Default,,0,0,0,,way.
Dialogue: 0,0:50:46.66,0:50:47.34,Default,,0,0,0,,A better way.
Dialogue: 0,0:50:47.97,0:50:50.08,Default,,0,0,0,,Because I've made my code so
Dialogue: 0,0:50:50.08,0:50:51.95,Default,,0,0,0,,much uglier, and a little bit
Dialogue: 0,0:50:51.95,0:50:52.56,Default,,0,0,0,,slower.
Dialogue: 0,0:50:52.86,0:50:54.38,Default,,0,0,0,,And you know if that were good
Dialogue: 0,0:50:54.38,0:50:55.90,Default,,0,0,0,,enough, that would be a
Dialogue: 0,0:50:55.96,0:50:57.23,Default,,0,0,0,,reasonable tradeoff, right.
Dialogue: 0,0:50:57.85,0:50:59.49,Default,,0,0,0,,You know, lose a little bit of
Dialogue: 0,0:50:59.49,0:51:00.89,Default,,0,0,0,,performance, and making your
Dialogue: 0,0:51:00.89,0:51:03.83,Default,,0,0,0,,code a little bit uglier is OK,
Dialogue: 0,0:51:04.04,0:51:06.38,Default,,0,0,0,,if it leads it to it being more
Dialogue: 0,0:51:06.38,0:51:06.81,Default,,0,0,0,,correct.
Dialogue: 0,0:51:08.34,0:51:09.47,Default,,0,0,0,,But that's not really good
Dialogue: 0,0:51:09.47,0:51:09.99,Default,,0,0,0,,enough here.
Dialogue: 0,0:51:10.69,0:51:11.99,Default,,0,0,0,,Let's go back to this closure
Dialogue: 0,0:51:11.99,0:51:12.31,Default,,0,0,0,,again.
Dialogue: 0,0:51:12.86,0:51:14.97,Default,,0,0,0,,What if instead of removing one
Dialogue: 0,0:51:15.02,0:51:19.13,Default,,0,0,0,,thing at the end of the loop, I
Dialogue: 0,0:51:19.13,0:51:20.80,Default,,0,0,0,,actually just wipe the entire
Dialogue: 0,0:51:20.85,0:51:22.58,Default,,0,0,0,,array out before I even access
Dialogue: 0,0:51:22.67,0:51:23.22,Default,,0,0,0,,the element.
Dialogue: 0,0:51:23.83,0:51:26.44,Default,,0,0,0,,What is this even accessing at
Dialogue: 0,0:51:26.50,0:51:27.04,Default,,0,0,0,,this point?
Dialogue: 0,0:51:27.47,0:51:28.69,Default,,0,0,0,,Where is this going?
Dialogue: 0,0:51:29.52,0:51:31.28,Default,,0,0,0,,I'm assigning to something that
Dialogue: 0,0:51:31.28,0:51:32.86,Default,,0,0,0,,doesn't really exist anymore
Dialogue: 0,0:51:33.08,0:51:34.25,Default,,0,0,0,,because the array doesn't have
Dialogue: 0,0:51:34.25,0:51:35.71,Default,,0,0,0,,any elements in it.
Dialogue: 0,0:51:37.02,0:51:38.81,Default,,0,0,0,,That's a really good question
Dialogue: 0,0:51:38.84,0:51:40.12,Default,,0,0,0,,and in order to answer it we
Dialogue: 0,0:51:40.12,0:51:41.08,Default,,0,0,0,,need to dig into the
Dialogue: 0,0:51:41.08,0:51:42.76,Default,,0,0,0,,implementation of array a little
Dialogue: 0,0:51:43.34,0:51:43.58,Default,,0,0,0,,bit.
Dialogue: 0,0:51:43.58,0:51:45.85,Default,,0,0,0,,Array is a copy on write value
Dialogue: 0,0:51:45.85,0:51:47.16,Default,,0,0,0,,type, implemented with a
Dialogue: 0,0:51:47.27,0:51:49.17,Default,,0,0,0,,reference counted buffer.
Dialogue: 0,0:51:49.92,0:51:52.63,Default,,0,0,0,,At the beginning of the loop,
Dialogue: 0,0:51:53.96,0:51:57.03,Default,,0,0,0,,numbers is pointing to exactly
Dialogue: 0,0:51:57.08,0:51:58.85,Default,,0,0,0,,to that buffer.
Dialogue: 0,0:51:59.04,0:52:00.87,Default,,0,0,0,,For performance, Swift really
Dialogue: 0,0:52:00.87,0:52:02.84,Default,,0,0,0,,wants to bind the element
Dialogue: 0,0:52:03.07,0:52:05.82,Default,,0,0,0,,variable that's passed into the
Dialogue: 0,0:52:05.82,0:52:08.32,Default,,0,0,0,,closure directly to the memory
Dialogue: 0,0:52:08.32,0:52:09.30,Default,,0,0,0,,within that buffer.
Dialogue: 0,0:52:10.11,0:52:11.71,Default,,0,0,0,,But that creates a problem
Dialogue: 0,0:52:11.97,0:52:12.89,Default,,0,0,0,,because when we do this
Dialogue: 0,0:52:12.89,0:52:16.06,Default,,0,0,0,,assignment, numbers is no longer
Dialogue: 0,0:52:16.06,0:52:17.75,Default,,0,0,0,,pointing to that buffer, which
Dialogue: 0,0:52:17.75,0:52:19.03,Default,,0,0,0,,means it's no longer keeping it
Dialogue: 0,0:52:19.03,0:52:19.54,Default,,0,0,0,,alive.
Dialogue: 0,0:52:20.74,0:52:23.03,Default,,0,0,0,,Swift has to be a safe language.
Dialogue: 0,0:52:23.27,0:52:24.83,Default,,0,0,0,,We don't want to just leave this
Dialogue: 0,0:52:24.83,0:52:26.24,Default,,0,0,0,,as a dangling reference.
Dialogue: 0,0:52:26.65,0:52:28.26,Default,,0,0,0,,So, something has to be keeping
Dialogue: 0,0:52:28.26,0:52:30.23,Default,,0,0,0,,this buffer alive in order for
Dialogue: 0,0:52:30.23,0:52:31.65,Default,,0,0,0,,this to not end up crashing the
Dialogue: 0,0:52:31.65,0:52:32.22,Default,,0,0,0,,program.
Dialogue: 0,0:52:32.99,0:52:33.79,Default,,0,0,0,,How can that work?
Dialogue: 0,0:52:34.62,0:52:37.01,Default,,0,0,0,,Well the way it works is that
Dialogue: 0,0:52:37.10,0:52:39.56,Default,,0,0,0,,Swift actually implicitly
Dialogue: 0,0:52:39.56,0:52:41.99,Default,,0,0,0,,creates a reference to the
Dialogue: 0,0:52:41.99,0:52:43.98,Default,,0,0,0,,buffer for the duration of the
Dialogue: 0,0:52:43.98,0:52:45.21,Default,,0,0,0,,subscript operation.
Dialogue: 0,0:52:46.23,0:52:48.89,Default,,0,0,0,,And that makes things not crash.
Dialogue: 0,0:52:49.39,0:52:50.93,Default,,0,0,0,,But it creates this extra
Dialogue: 0,0:52:50.93,0:52:53.27,Default,,0,0,0,,performance penalty that we're
Dialogue: 0,0:52:53.27,0:52:55.10,Default,,0,0,0,,hoping with the optimizer will
Dialogue: 0,0:52:55.15,0:52:57.49,Default,,0,0,0,,clean up on every single time
Dialogue: 0,0:52:57.71,0:52:59.14,Default,,0,0,0,,that we subscript into the
Dialogue: 0,0:52:59.14,0:52:59.35,Default,,0,0,0,,array.
Dialogue: 0,0:52:59.95,0:53:03.91,Default,,0,0,0,,So, this kind of nonexclusive
Dialogue: 0,0:53:03.91,0:53:05.46,Default,,0,0,0,,access to memory creates
Dialogue: 0,0:53:05.46,0:53:07.45,Default,,0,0,0,,problems at multiple levels.
Dialogue: 0,0:53:07.68,0:53:09.17,Default,,0,0,0,,Cascading problems in your
Dialogue: 0,0:53:09.21,0:53:09.72,Default,,0,0,0,,program.
Dialogue: 0,0:53:10.17,0:53:11.77,Default,,0,0,0,,It makes things harder to reason
Dialogue: 0,0:53:11.77,0:53:12.14,Default,,0,0,0,,about.
Dialogue: 0,0:53:12.52,0:53:14.36,Default,,0,0,0,,It makes your code less general
Dialogue: 0,0:53:14.68,0:53:16.24,Default,,0,0,0,,and harder to prove correct.
Dialogue: 0,0:53:17.21,0:53:18.57,Default,,0,0,0,,And it creates performance
Dialogue: 0,0:53:18.57,0:53:20.49,Default,,0,0,0,,problems both in your part of
Dialogue: 0,0:53:20.49,0:53:22.95,Default,,0,0,0,,the program and for Swift, when
Dialogue: 0,0:53:22.95,0:53:24.76,Default,,0,0,0,,it's trying to optimize these
Dialogue: 0,0:53:24.76,0:53:26.09,Default,,0,0,0,,general data structures.
Dialogue: 0,0:53:27.16,0:53:28.83,Default,,0,0,0,,The solution is that we have to
Dialogue: 0,0:53:28.83,0:53:31.28,Default,,0,0,0,,have exclusive access to memory.
Dialogue: 0,0:53:31.81,0:53:35.34,Default,,0,0,0,,What do I mean by exclusive?
Dialogue: 0,0:53:35.50,0:53:39.02,Default,,0,0,0,,Well it's OK to have two
Dialogue: 0,0:53:39.02,0:53:40.09,Default,,0,0,0,,different parts of the program
Dialogue: 0,0:53:40.09,0:53:41.36,Default,,0,0,0,,that are reading from the same
Dialogue: 0,0:53:41.36,0:53:42.66,Default,,0,0,0,,variable at the same time.
Dialogue: 0,0:53:44.29,0:53:45.33,Default,,0,0,0,,But, when I have something
Dialogue: 0,0:53:45.33,0:53:46.93,Default,,0,0,0,,that's writing to the variable,
Dialogue: 0,0:53:47.27,0:53:48.95,Default,,0,0,0,,it's very important that nothing
Dialogue: 0,0:53:48.95,0:53:50.48,Default,,0,0,0,,else be accessing at all.
Dialogue: 0,0:53:50.95,0:53:52.17,Default,,0,0,0,,The thing that's writing to the
Dialogue: 0,0:53:52.17,0:53:53.87,Default,,0,0,0,,variable should be exclusive.
Dialogue: 0,0:53:54.74,0:53:55.25,Default,,0,0,0,,And that's it.
Dialogue: 0,0:53:55.73,0:53:56.62,Default,,0,0,0,,That's the rule.
Dialogue: 0,0:53:56.62,0:53:58.01,Default,,0,0,0,,That's the new rule that we're
Dialogue: 0,0:53:58.07,0:53:59.53,Default,,0,0,0,,adding in Swift 4.
Dialogue: 0,0:54:00.19,0:54:04.17,Default,,0,0,0,,So, how do we enforce it?
Dialogue: 0,0:54:04.80,0:54:08.90,Default,,0,0,0,,Well, in most cases, like in our
Dialogue: 0,0:54:08.90,0:54:10.90,Default,,0,0,0,,original example, Swift is
Dialogue: 0,0:54:10.90,0:54:12.68,Default,,0,0,0,,actually capable of enforcing
Dialogue: 0,0:54:12.68,0:54:15.85,Default,,0,0,0,,this at compile time.
Dialogue: 0,0:54:16.06,0:54:18.14,Default,,0,0,0,,Here I'm calling a mutating
Dialogue: 0,0:54:18.14,0:54:19.74,Default,,0,0,0,,method on numbers.
Dialogue: 0,0:54:19.99,0:54:22.05,Default,,0,0,0,,That initiates a right to it for
Dialogue: 0,0:54:22.05,0:54:23.17,Default,,0,0,0,,the duration of the call.
Dialogue: 0,0:54:23.17,0:54:27.31,Default,,0,0,0,,When I come along later within
Dialogue: 0,0:54:27.31,0:54:29.58,Default,,0,0,0,,that call, and call another
Dialogue: 0,0:54:29.58,0:54:30.88,Default,,0,0,0,,mutating method on it.
Dialogue: 0,0:54:31.50,0:54:33.23,Default,,0,0,0,,I've got a conflicting right
Dialogue: 0,0:54:33.64,0:54:34.86,Default,,0,0,0,,that violates the rule.
Dialogue: 0,0:54:35.35,0:54:36.60,Default,,0,0,0,,And Swift can just see that
Dialogue: 0,0:54:36.60,0:54:38.49,Default,,0,0,0,,that's happening at compile time
Dialogue: 0,0:54:38.80,0:54:39.81,Default,,0,0,0,,and tell you about it
Dialogue: 0,0:54:39.86,0:54:40.58,Default,,0,0,0,,immediately.
Dialogue: 0,0:54:41.17,0:54:44.04,Default,,0,0,0,,Now, that's generally going to
Dialogue: 0,0:54:44.04,0:54:46.73,Default,,0,0,0,,be true in most common value
Dialogue: 0,0:54:46.80,0:54:48.34,Default,,0,0,0,,semantics sorts of situations.
Dialogue: 0,0:54:49.35,0:54:50.91,Default,,0,0,0,,But there are some situations
Dialogue: 0,0:54:51.97,0:54:54.24,Default,,0,0,0,,where that's not possible,
Dialogue: 0,0:54:54.82,0:54:56.18,Default,,0,0,0,,generally because of some sort
Dialogue: 0,0:54:56.18,0:54:57.28,Default,,0,0,0,,of reference semantics.
Dialogue: 0,0:54:57.45,0:54:59.11,Default,,0,0,0,,Either a global variable, or
Dialogue: 0,0:54:59.11,0:55:01.12,Default,,0,0,0,,some sort of shared memory like
Dialogue: 0,0:55:01.12,0:55:02.13,Default,,0,0,0,,a class property.
Dialogue: 0,0:55:03.49,0:55:04.53,Default,,0,0,0,,So, let's go back to our
Dialogue: 0,0:55:04.53,0:55:05.45,Default,,0,0,0,,original example.
Dialogue: 0,0:55:05.98,0:55:08.21,Default,,0,0,0,,Here, numbers was a local
Dialogue: 0,0:55:08.21,0:55:08.78,Default,,0,0,0,,variable.
Dialogue: 0,0:55:09.27,0:55:12.40,Default,,0,0,0,,But what if instead it were a
Dialogue: 0,0:55:13.62,0:55:15.73,Default,,0,0,0,,class property?
Dialogue: 0,0:55:15.82,0:55:17.49,Default,,0,0,0,,Well, the situation is still
Dialogue: 0,0:55:17.49,0:55:20.19,Default,,0,0,0,,basically the same.
Dialogue: 0,0:55:20.39,0:55:22.11,Default,,0,0,0,,Here, I'm calling a mutating
Dialogue: 0,0:55:22.11,0:55:23.94,Default,,0,0,0,,method on a class property.
Dialogue: 0,0:55:25.08,0:55:27.33,Default,,0,0,0,,And within the closure, I'm
Dialogue: 0,0:55:27.33,0:55:29.62,Default,,0,0,0,,calling a mutating method on the
Dialogue: 0,0:55:30.17,0:55:31.37,Default,,0,0,0,,same class property.
Dialogue: 0,0:55:32.27,0:55:34.34,Default,,0,0,0,,But they are on objects that the
Dialogue: 0,0:55:34.34,0:55:36.82,Default,,0,0,0,,compiler can't reason whether
Dialogue: 0,0:55:36.82,0:55:38.45,Default,,0,0,0,,they're the same object or not.
Dialogue: 0,0:55:39.60,0:55:42.04,Default,,0,0,0,,In general, the point of class
Dialogue: 0,0:55:42.29,0:55:44.49,Default,,0,0,0,,types is that you can move them,
Dialogue: 0,0:55:44.49,0:55:46.50,Default,,0,0,0,,copy them around, share them
Dialogue: 0,0:55:46.50,0:55:47.67,Default,,0,0,0,,throughout your program.
Dialogue: 0,0:55:48.31,0:55:51.19,Default,,0,0,0,,And use them wherever you like.
Dialogue: 0,0:55:51.74,0:55:54.12,Default,,0,0,0,,But, that means that the
Dialogue: 0,0:55:54.12,0:55:55.75,Default,,0,0,0,,compiler can no longer really
Dialogue: 0,0:55:55.86,0:55:58.14,Default,,0,0,0,,tell you conclusively whether or
Dialogue: 0,0:55:58.14,0:56:00.46,Default,,0,0,0,,not any particular function all
Dialogue: 0,0:56:00.46,0:56:02.94,Default,,0,0,0,,or access like this is actually
Dialogue: 0,0:56:02.94,0:56:04.40,Default,,0,0,0,,accessing the same object.
Dialogue: 0,0:56:05.12,0:56:06.23,Default,,0,0,0,,So, the compiler has to be
Dialogue: 0,0:56:06.23,0:56:06.98,Default,,0,0,0,,conservative.
Dialogue: 0,0:56:07.54,0:56:09.56,Default,,0,0,0,,Now, it would be prohibitive if
Dialogue: 0,0:56:09.56,0:56:11.61,Default,,0,0,0,,we just banned all this sort of
Dialogue: 0,0:56:11.68,0:56:12.82,Default,,0,0,0,,thing all the time.
Dialogue: 0,0:56:12.82,0:56:14.49,Default,,0,0,0,,So, instead we do the check
Dialogue: 0,0:56:14.59,0:56:15.49,Default,,0,0,0,,dynamically.
Dialogue: 0,0:56:16.26,0:56:17.37,Default,,0,0,0,,Which means that we'll get an
Dialogue: 0,0:56:17.37,0:56:20.29,Default,,0,0,0,,error like this at run time.
Dialogue: 0,0:56:20.90,0:56:22.99,Default,,0,0,0,,But only if they're actually the
Dialogue: 0,0:56:22.99,0:56:23.70,Default,,0,0,0,,same object.
Dialogue: 0,0:56:23.85,0:56:24.81,Default,,0,0,0,,Of course, if they're different
Dialogue: 0,0:56:24.81,0:56:27.12,Default,,0,0,0,,objects, they're considered the
Dialogue: 0,0:56:27.26,0:56:29.08,Default,,0,0,0,,two class properties on them are
Dialogue: 0,0:56:29.08,0:56:30.78,Default,,0,0,0,,considered different memory.
Dialogue: 0,0:56:31.35,0:56:32.32,Default,,0,0,0,,And there's no conflict.
Dialogue: 0,0:56:32.85,0:56:37.73,Default,,0,0,0,,Now this enforcement that we do
Dialogue: 0,0:56:38.78,0:56:40.94,Default,,0,0,0,,is for performance reasons only
Dialogue: 0,0:56:40.94,0:56:42.49,Default,,0,0,0,,done within a single thread.
Dialogue: 0,0:56:43.12,0:56:45.48,Default,,0,0,0,,However, the thread sanitizer
Dialogue: 0,0:56:45.48,0:56:47.41,Default,,0,0,0,,tool that we make available in
Dialogue: 0,0:56:47.49,0:56:49.23,Default,,0,0,0,,Xcode will catch this sort of
Dialogue: 0,0:56:49.27,0:56:50.91,Default,,0,0,0,,problem even across threads.
Dialogue: 0,0:56:51.72,0:56:53.02,Default,,0,0,0,,There's a great session later
Dialogue: 0,0:56:53.02,0:56:53.55,Default,,0,0,0,,this week.
Dialogue: 0,0:56:53.87,0:56:55.49,Default,,0,0,0,,I strongly encourage any of you
Dialogue: 0,0:56:55.49,0:56:57.71,Default,,0,0,0,,to go to about finding bugs like
Dialogue: 0,0:56:57.78,0:56:59.33,Default,,0,0,0,,this with Xcode.
Dialogue: 0,0:57:03.22,0:57:05.23,Default,,0,0,0,,This is a Swift 4 rule.
Dialogue: 0,0:57:06.64,0:57:08.07,Default,,0,0,0,,Like we said yesterday in the
Dialogue: 0,0:57:08.31,0:57:12.60,Default,,0,0,0,,State of Union, Swift 3.2 is all
Dialogue: 0,0:57:12.60,0:57:15.47,Default,,0,0,0,,about allowing your existing
Dialogue: 0,0:57:15.47,0:57:16.90,Default,,0,0,0,,code to continue to work.
Dialogue: 0,0:57:17.61,0:57:19.53,Default,,0,0,0,,So, in Swift 3.2, this is just a
Dialogue: 0,0:57:19.59,0:57:19.89,Default,,0,0,0,,warning.
Dialogue: 0,0:57:20.72,0:57:23.44,Default,,0,0,0,,However, because Swift 4 and
Dialogue: 0,0:57:23.44,0:57:27.36,Default,,0,0,0,,Swift 3 need to interoperate in
Dialogue: 0,0:57:27.36,0:57:30.07,Default,,0,0,0,,a future version of Xcode we are
Dialogue: 0,0:57:30.07,0:57:31.68,Default,,0,0,0,,going to have to make this an
Dialogue: 0,0:57:31.73,0:57:33.50,Default,,0,0,0,,error even in Swift 3 mode.
Dialogue: 0,0:57:34.24,0:57:36.07,Default,,0,0,0,,So, we strongly encourage you to
Dialogue: 0,0:57:36.22,0:57:37.85,Default,,0,0,0,,pay attention to these warnings
Dialogue: 0,0:57:38.32,0:57:39.09,Default,,0,0,0,,and fix them.
Dialogue: 0,0:57:39.46,0:57:40.50,Default,,0,0,0,,Because they're just warnings
Dialogue: 0,0:57:40.54,0:57:41.78,Default,,0,0,0,,you can fix them in your own
Dialogue: 0,0:57:41.86,0:57:42.23,Default,,0,0,0,,time.
Dialogue: 0,0:57:42.23,0:57:44.12,Default,,0,0,0,,And at your own pace, but you
Dialogue: 0,0:57:44.12,0:57:45.49,Default,,0,0,0,,should take them seriously.
Dialogue: 0,0:57:52.08,0:57:53.97,Default,,0,0,0,,We're really looking forward to
Dialogue: 0,0:57:54.01,0:57:55.20,Default,,0,0,0,,the power this is going to
Dialogue: 0,0:57:55.20,0:57:55.58,Default,,0,0,0,,bring.
Dialogue: 0,0:57:55.87,0:57:57.07,Default,,0,0,0,,It's going to make it so much
Dialogue: 0,0:57:57.14,0:58:00.13,Default,,0,0,0,,easier to reason about code.
Dialogue: 0,0:58:00.13,0:58:03.72,Default,,0,0,0,,It's going to enable a lot of
Dialogue: 0,0:58:03.72,0:58:05.38,Default,,0,0,0,,really amazing optimizations,
Dialogue: 0,0:58:05.62,0:58:07.42,Default,,0,0,0,,both in the library and in the
Dialogue: 0,0:58:07.42,0:58:08.11,Default,,0,0,0,,compiler.
Dialogue: 0,0:58:08.42,0:58:09.78,Default,,0,0,0,,And it's also going to make it
Dialogue: 0,0:58:10.39,0:58:12.08,Default,,0,0,0,,you know a lot easier for us to
Dialogue: 0,0:58:12.08,0:58:14.67,Default,,0,0,0,,deliver tools that you can use
Dialogue: 0,0:58:15.02,0:58:18.50,Default,,0,0,0,,to take advantage of to optimize
Dialogue: 0,0:58:18.50,0:58:20.26,Default,,0,0,0,,your own code in ways that are
Dialogue: 0,0:58:20.26,0:58:21.24,Default,,0,0,0,,going to be really great.
Dialogue: 0,0:58:22.39,0:58:23.63,Default,,0,0,0,,If you're interested in reading
Dialogue: 0,0:58:23.63,0:58:25.12,Default,,0,0,0,,more about what we're planning
Dialogue: 0,0:58:25.12,0:58:26.80,Default,,0,0,0,,on doing with this, there's an
Dialogue: 0,0:58:26.95,0:58:28.74,Default,,0,0,0,,ownership manifesto on the Swift
Dialogue: 0,0:58:28.74,0:58:30.48,Default,,0,0,0,,website that I would encourage
Dialogue: 0,0:58:30.48,0:58:32.95,Default,,0,0,0,,you to check out.
Dialogue: 0,0:58:33.22,0:58:34.55,Default,,0,0,0,,Now, one caveat.
Dialogue: 0,0:58:34.71,0:58:36.28,Default,,0,0,0,,The developer preview that we've
Dialogue: 0,0:58:36.28,0:58:38.19,Default,,0,0,0,,given you this week, some of
Dialogue: 0,0:58:38.19,0:58:39.83,Default,,0,0,0,,this stuff is still in progress.
Dialogue: 0,0:58:40.23,0:58:41.40,Default,,0,0,0,,There's a lot of information in
Dialogue: 0,0:58:41.40,0:58:42.30,Default,,0,0,0,,the release notes.
Dialogue: 0,0:58:42.56,0:58:43.77,Default,,0,0,0,,I really encourage you to check
Dialogue: 0,0:58:43.82,0:58:44.26,Default,,0,0,0,,those out.
Dialogue: 0,0:58:44.85,0:58:46.41,Default,,0,0,0,,We really would like you to go
Dialogue: 0,0:58:46.41,0:58:48.50,Default,,0,0,0,,ahead and make sure that all of
Dialogue: 0,0:58:48.50,0:58:49.43,Default,,0,0,0,,this stuff is enabled.
Dialogue: 0,0:58:49.49,0:58:50.65,Default,,0,0,0,,And let us know if you run into
Dialogue: 0,0:58:50.65,0:58:50.98,Default,,0,0,0,,any problems.
Dialogue: 0,0:58:54.09,0:58:55.68,Default,,0,0,0,,And that's it for what's new in
Dialogue: 0,0:58:55.75,0:58:56.08,Default,,0,0,0,,Swift.
Dialogue: 0,0:58:56.84,0:58:58.31,Default,,0,0,0,,There are a lot of great new
Dialogue: 0,0:58:58.31,0:59:00.51,Default,,0,0,0,,refinements in addition to the
Dialogue: 0,0:59:00.51,0:59:03.42,Default,,0,0,0,,library, and to the language.
Dialogue: 0,0:59:04.04,0:59:05.68,Default,,0,0,0,,We've got a great new Swift type
Dialogue: 0,0:59:06.15,0:59:07.44,Default,,0,0,0,,and we've optimized a lot of
Dialogue: 0,0:59:07.44,0:59:07.90,Default,,0,0,0,,stuff.
Dialogue: 0,0:59:08.61,0:59:10.19,Default,,0,0,0,,And we've really done a ton of
Dialogue: 0,0:59:10.19,0:59:12.31,Default,,0,0,0,,work on the tools and improving
Dialogue: 0,0:59:12.31,0:59:13.53,Default,,0,0,0,,the performance and the code
Dialogue: 0,0:59:13.53,0:59:14.28,Default,,0,0,0,,size of your code.
Dialogue: 0,0:59:14.37,0:59:17.50,Default,,0,0,0,,I hope you have a great WWDC,
Dialogue: 0,0:59:17.59,0:59:18.63,Default,,0,0,0,,and thank you very much for
Dialogue: 0,0:59:18.63,0:59:18.82,Default,,0,0,0,,coming.
Dialogue: 0,0:59:19.52,0:59:23.50,Default,,0,0,0,,[ Applause ]
