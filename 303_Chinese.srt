1
00:00:20,954 --> 00:00:21,788
大家早上好

2
00:00:27,160 --> 00:00:28,762
欢迎来参加
“StoreKit新特性”演讲

3
00:00:29,162 --> 00:00:32,432
我叫Pete Hare 我是Apple App Store
团队的一名软件工程师

4
00:00:33,800 --> 00:00:37,037
程序内购买代表了收入的一大部分

5
00:00:37,104 --> 00:00:38,572
也就是由App Store中的
应用所产生的收入

6
00:00:38,639 --> 00:00:42,142
为了实现程序内购买
并且将内容卖给你的用户

7
00:00:42,209 --> 00:00:44,211
在这过程中
提供一个很棒的体验

8
00:00:44,278 --> 00:00:47,514
对你和你的生意来说变得越来越重要了

9
00:00:48,382 --> 00:00:50,350
我们在研究
可以让你们实现这些功能的方法

10
00:00:50,417 --> 00:00:51,618
以更加高效的方式

11
00:00:51,818 --> 00:00:53,120
我们今天会向你们介绍

12
00:00:53,187 --> 00:00:55,222
一些关于StoreKit框架的改进

13
00:00:55,756 --> 00:00:58,125
StoreKit就是用来
实现程序内购买的框架

14
00:00:58,192 --> 00:01:00,527
它还可以实现其他一些
与商店相关的功能

15
00:01:00,827 --> 00:01:02,729
我们还在iOS 11中
加入了一些新的改进

16
00:01:03,730 --> 00:01:05,165
首先 你现在可以

17
00:01:05,232 --> 00:01:08,268
可以直接在App Store应用中
推销你的程序内购买

18
00:01:08,602 --> 00:01:12,472
用户可以购买程序内购买
然后在你自己的应用中完成交易

19
00:01:13,740 --> 00:01:16,643
其次 我们会介绍一些关于订阅的改进

20
00:01:16,743 --> 00:01:18,145
自动续订流

21
00:01:18,378 --> 00:01:21,014
我们有了新的服务器用于订阅通知

22
00:01:21,281 --> 00:01:22,649
这会让你轻松许多

23
00:01:22,716 --> 00:01:25,052
如果你要处理自动续订的话

24
00:01:29,056 --> 00:01:32,159
我们还会介绍一些
关于订阅状态信息的新功能

25
00:01:32,326 --> 00:01:33,827
当你在进行服务端管理的时候

26
00:01:33,894 --> 00:01:35,495
这会让你们有更深刻的见解

27
00:01:35,562 --> 00:01:36,797
对于某些商业问题

28
00:01:36,864 --> 00:01:39,533
像是个体用户以及他们的订阅状态

29
00:01:40,934 --> 00:01:42,069
我们在今年早些时候还引入了

30
00:01:42,135 --> 00:01:45,072
可以让你回复
App Store中用户评论的功能

31
00:01:45,639 --> 00:01:47,407
除此之外 我们还有些新的改进

32
00:01:47,541 --> 00:01:49,776
是关于你请求评分和评论的

33
00:01:50,878 --> 00:01:52,846
在我们介绍这些新功能之前

34
00:01:53,013 --> 00:01:56,216
我想先概述一下程序内购买的整个流程

35
00:01:56,283 --> 00:01:59,086
让我们看下
如何实现你应用中的程序内购买

36
00:02:01,355 --> 00:02:03,090
程序内购买没有太多的变化

37
00:02:03,156 --> 00:02:04,725
它们在iOS 3中出现

38
00:02:05,392 --> 00:02:08,529
程序内购买可以让你售卖数字内容

39
00:02:08,595 --> 00:02:10,030
或者是你应用中的某个服务

40
00:02:10,731 --> 00:02:12,766
当提到实物的产品或是服务时

41
00:02:12,966 --> 00:02:14,601
那就不是太适合用程序内购买

42
00:02:14,668 --> 00:02:16,170
我们提供像是
Apple Pay这样的工具

43
00:02:16,336 --> 00:02:18,005
你也可以实现自己的支付系统

44
00:02:18,071 --> 00:02:19,940
来实现出售实物产品

45
00:02:20,073 --> 00:02:23,210
但是提到数字业务的时候
就该用程序内购买了

46
00:02:24,945 --> 00:02:27,614
你可以使用四种不同类型的程序内购买

47
00:02:28,615 --> 00:02:30,384
首先 我们有可消耗的产品

48
00:02:30,817 --> 00:02:31,818
这类程序内购买

49
00:02:31,885 --> 00:02:34,087
就是可以被消耗的程序内购买

50
00:02:34,154 --> 00:02:36,290
顾名思义 并且可以被用户用尽

51
00:02:36,356 --> 00:02:40,694
这可能是某个游戏中的金币
用户可以买来花掉

52
00:02:40,894 --> 00:02:44,198
它在后续的购买恢复
或是在新设备上不会被保存

53
00:02:45,199 --> 00:02:48,068
第二类是不可消耗的产品

54
00:02:49,536 --> 00:02:50,871
它和可消耗的产品有点不同

55
00:02:50,938 --> 00:02:52,039
就在于它是可保留的

56
00:02:52,105 --> 00:02:54,374
它可能更适合像是

57
00:02:54,441 --> 00:02:56,243
解锁你应用的专业功能

58
00:02:56,310 --> 00:02:58,779
或是下载某个游戏的关卡包

59
00:03:00,547 --> 00:03:02,816
我们还提供了两种不同类别的订阅产品

60
00:03:02,883 --> 00:03:05,352
我们有非续订的订阅

61
00:03:06,019 --> 00:03:06,920
顾名思义

62
00:03:06,987 --> 00:03:08,255
这类订阅产品

63
00:03:08,322 --> 00:03:11,558
不会在账单周期结束的时候
自动向用户扣费

64
00:03:11,692 --> 00:03:12,659
你可以把这类产品看成是

65
00:03:12,726 --> 00:03:15,529
某个有过期时间的可消耗产品

66
00:03:16,630 --> 00:03:19,366
最后一类就是可自动续订的订阅

67
00:03:20,133 --> 00:03:23,170
去年我们将可自动续订的
订阅种类开放到了

68
00:03:23,237 --> 00:03:25,539
更广的范畴

69
00:03:25,606 --> 00:03:26,907
且我们已看到一些很棒的应用了

70
00:03:27,841 --> 00:03:30,878
在本次演讲中
我们只会关注于前两种类型

71
00:03:30,944 --> 00:03:32,713
绝大部分是可消耗的和不可消耗的

72
00:03:32,946 --> 00:03:35,449
我们会更详细地介绍订阅

73
00:03:35,516 --> 00:03:37,184
在今天下午的高级演讲中

74
00:03:37,351 --> 00:03:39,720
它会于下午1:50
在大宴会厅A举办

75
00:03:39,786 --> 00:03:41,288
所以如果你要处理订阅

76
00:03:41,355 --> 00:03:43,056
在特定的服务端环境的话

77
00:03:43,123 --> 00:03:44,691
我强烈建议你去参加那场演讲

78
00:03:44,758 --> 00:03:46,693
我们会在那介绍一些很棒的新改进

79
00:03:48,095 --> 00:03:51,064
让我们看下如何在你的应用中
实现程序内购买

80
00:03:51,932 --> 00:03:55,903
它会从加载你应用中的
程序内购买标识符开始

81
00:03:56,303 --> 00:03:58,305
我们一会儿会介绍各步的更多细节

82
00:03:58,372 --> 00:03:59,573
但现在我就是给你们做个大体介绍

83
00:04:01,008 --> 00:04:02,209
使用这些程序内购买标识符

84
00:04:02,276 --> 00:04:05,078
你就从App Store
获取本地化的产品信息

85
00:04:05,679 --> 00:04:08,482
在你获取了产品的本地化信息之后

86
00:04:08,916 --> 00:04:11,285
你就可以将程序内购买的
UI呈现给用户

87
00:04:12,085 --> 00:04:15,889
这就可以让用户点击购买按钮
来同意购买它

88
00:04:16,190 --> 00:04:18,825
然后就取决于你什么时候
要向用户请求支付

89
00:04:20,560 --> 00:04:24,264
然后用户就可以选择
购买你的程序内购买 并验证支付

90
00:04:24,831 --> 00:04:28,068
然后就由你来处理
来自StoreKit的交易

91
00:04:29,903 --> 00:04:33,207
在交易被处理后
你就可以解锁相关内容

92
00:04:33,273 --> 00:04:35,342
让用户可用这个程序内购买

93
00:04:36,343 --> 00:04:39,079
最后一步就是要结束交易

94
00:04:40,113 --> 00:04:43,417
让我们开始介绍第一步
加载程序内购买标识符

95
00:04:46,019 --> 00:04:48,655
程序内购买标识符其实就是些产品信息

96
00:04:48,722 --> 00:04:50,357
也就是你在iTunes Connect中
设置好的那些

97
00:04:50,524 --> 00:04:52,593
每个你卖的产品都有一个自己的标识符

98
00:04:53,227 --> 00:04:54,828
当提到将其加载到应用中时

99
00:04:54,895 --> 00:04:56,163
你可以通过几种方式实现

100
00:04:56,230 --> 00:04:59,166
首先 你可以直接将它们
嵌入到你的应用中

101
00:04:59,366 --> 00:05:01,368
在这里 我有一个字符串数组

102
00:05:02,336 --> 00:05:05,305
或者 当然了
也可以从你自己的服务器中获取它们

103
00:05:07,441 --> 00:05:08,842
这些技术都可以使用

104
00:05:08,909 --> 00:05:11,311
但重要的是 你只有这个字符串集

105
00:05:11,378 --> 00:05:13,881
你只能使用这些程序内购买标识符

106
00:05:13,947 --> 00:05:15,582
来获取产品信息

107
00:05:16,283 --> 00:05:17,251
也就是下一步要做的

108
00:05:19,052 --> 00:05:20,153
如果你有了这些信息

109
00:05:21,054 --> 00:05:23,690
要加载产品的信息就很简单了

110
00:05:23,757 --> 00:05:24,791
让我们看看它的代码

111
00:05:26,627 --> 00:05:28,595
你获取了标识符集后

112
00:05:28,762 --> 00:05:31,732
你要将其传给
SKProductsRequest初始化器

113
00:05:32,733 --> 00:05:34,801
为该请求设置一个代理

114
00:05:34,968 --> 00:05:36,737
然后使用这个开始方法来启动

115
00:05:38,372 --> 00:05:40,707
现在你已经在它上面
设定了一个代理方法

116
00:05:40,774 --> 00:05:43,644
所以你会在didReceiveResponse
回调函数中获得一个反馈

117
00:05:45,512 --> 00:05:48,148
在这个回调函数中
你会收到一个产品的数组

118
00:05:48,215 --> 00:05:51,818
这个数组会与你所发送请求的
程序内购买标识符相匹配

119
00:05:52,519 --> 00:05:53,587
现在你可以循环遍历这些产品

120
00:05:53,654 --> 00:05:55,122
我们会着重标出某些区域

121
00:05:55,189 --> 00:05:57,758
这些区域是包含于产品对象中的

122
00:05:57,824 --> 00:06:01,195
这里有该产品的本地化标题
和本地化描述

123
00:06:02,296 --> 00:06:05,799
这还有关于商店中产品的
本地化价格信息

124
00:06:05,866 --> 00:06:07,100
也就是用户登录后得到的

125
00:06:08,902 --> 00:06:11,338
我们还有关于可下载内容的信息

126
00:06:11,405 --> 00:06:13,373
也就是可能和这个产品有关的信息

127
00:06:15,242 --> 00:06:17,311
而在这里更重要的一点 我要强调一下

128
00:06:17,377 --> 00:06:20,247
就是不应该将这时候返回的
SKProduct进行缓存

129
00:06:21,748 --> 00:06:23,984
重要的是你要获得最新的产品信息

130
00:06:24,084 --> 00:06:25,786
通过定期执行这些请求

131
00:06:25,986 --> 00:06:27,788
因为像是汇率这些东西可能会波动

132
00:06:27,921 --> 00:06:30,424
用户可能会注销
然后登录另一个地区的商店

133
00:06:30,490 --> 00:06:31,758
所以本地商店可能会变化

134
00:06:31,859 --> 00:06:33,260
请确保如你所需地

135
00:06:33,327 --> 00:06:35,963
从App Store
请求新的产品信息

136
00:06:36,029 --> 00:06:38,532
且不要一直坚持使用这些
SKProducts的同一个实例

137
00:06:39,900 --> 00:06:41,301
但现在你有了SKProduct对象

138
00:06:41,368 --> 00:06:44,705
而且你已经准备好了
将一个程序内购买UI展现给用户

139
00:06:45,606 --> 00:06:46,740
当提到显示UI的时候

140
00:06:46,807 --> 00:06:48,475
当然了 这取决于你的应用

141
00:06:48,542 --> 00:06:49,977
每个应用都是有点不同的

142
00:06:50,177 --> 00:06:52,179
有关如何将产品呈现给用户

143
00:06:54,448 --> 00:06:55,949
这对于销售会产生巨大的影响

144
00:06:56,016 --> 00:06:58,986
我建议你们真的要
小心处理如何构造这个UI

145
00:06:59,419 --> 00:07:00,821
如果你想了解关于这方面的更多信息

146
00:07:00,888 --> 00:07:04,224
在我们的开发者网站上
有些在线信息可供你们进行查阅

147
00:07:04,291 --> 00:07:06,994
这其中有些如何格式化这个页面的技巧

148
00:07:07,160 --> 00:07:10,430
以一种可以改善销售情况的方式

149
00:07:12,399 --> 00:07:14,501
有一个技巧是关于格式化产品价格的

150
00:07:14,568 --> 00:07:16,370
当提到产品价格的时候

151
00:07:16,737 --> 00:07:19,473
这就是你用来在UI中显示价格的技术

152
00:07:19,540 --> 00:07:21,074
创建一个数字格式化对象

153
00:07:21,808 --> 00:07:24,077
将数字的样式设定为汇率样式

154
00:07:25,746 --> 00:07:28,081
然后将本地场景
设定为产品价格的本地场景

155
00:07:28,148 --> 00:07:29,683
这是个很重要的步骤

156
00:07:29,850 --> 00:07:33,287
因为如果你不这么做的话
就会被默认设为系统设备的本地场景

157
00:07:33,387 --> 00:07:35,822
这可能和用户所登录的商店并不吻合

158
00:07:35,989 --> 00:07:38,358
用户可能登录的是中国商店

159
00:07:38,792 --> 00:07:40,527
但是设备是设为美式英文的

160
00:07:40,694 --> 00:07:42,729
对于所有的价格与汇率相关信息

161
00:07:42,896 --> 00:07:44,898
与它们在App Store中的
内容匹配是很重要的

162
00:07:45,199 --> 00:07:48,502
所以请确保设置了数字格式化器
下面的产品价格本地场景

163
00:07:49,269 --> 00:07:50,103
而在你完成了操作后

164
00:07:50,304 --> 00:07:52,372
你可以从数字格式化器获得一个字符串

165
00:07:52,673 --> 00:07:55,909
这样你就得到了一个可以显示在
UI中的格式化字符串

166
00:07:59,279 --> 00:08:02,249
还有一点是
不要自己执行任何的汇率转换

167
00:08:02,316 --> 00:08:04,585
你根本不需要转换汇率

168
00:08:04,651 --> 00:08:06,553
你可以让StoreKit来帮你实现

169
00:08:06,720 --> 00:08:08,989
你只要把数字和得到的价格本地场景

170
00:08:09,056 --> 00:08:10,691
交给数字格式化器就可以了

171
00:08:12,426 --> 00:08:15,529
接下来 在你显示了UI之后
就要请求支付了

172
00:08:15,596 --> 00:08:18,532
这里我们希望用户决定要
购买你的程序内购买

173
00:08:18,599 --> 00:08:19,766
他们点击了购买按钮

174
00:08:20,133 --> 00:08:23,070
现在就轮到你来向用户请求付款了

175
00:08:23,770 --> 00:08:25,072
这是个很简单的步骤

176
00:08:25,138 --> 00:08:26,173
只有几行代码

177
00:08:26,640 --> 00:08:29,009
你要把用户想买的SKProduct

178
00:08:29,243 --> 00:08:33,580
传给一个SKPayment初始化器
来创建一个支付对象

179
00:08:34,214 --> 00:08:37,818
然后你要把这个支付添加到
SKPaymentQueue的默认队列中

180
00:08:39,385 --> 00:08:41,522
在你将付款加到默认队列后

181
00:08:42,155 --> 00:08:45,926
用户就可以看到这个很漂亮的
程序内购买支付表单

182
00:08:45,993 --> 00:08:47,327
这是iOS 11中新加入的功能

183
00:08:53,300 --> 00:08:55,502
用户可以验证购买

184
00:08:55,569 --> 00:08:58,572
通过使用Touch ID
然后接着用你的应用

185
00:08:59,039 --> 00:09:00,607
我们觉得这是个有很大改进的设计

186
00:09:00,674 --> 00:09:03,010
这会极大地提升用户体验

187
00:09:04,144 --> 00:09:05,579
现在我想离题

188
00:09:05,646 --> 00:09:08,081
介绍一点关于检测非法活动的内容

189
00:09:08,749 --> 00:09:12,019
检测非法活动功能
会给我们警告符号

190
00:09:12,085 --> 00:09:15,455
如果在这个流程中有什么可疑情况的话

191
00:09:15,889 --> 00:09:19,193
Apple有个先进的引擎来检测
并且预防非法活动

192
00:09:19,259 --> 00:09:21,061
最理想情况就是在
非法活动出现之前

193
00:09:21,461 --> 00:09:24,998
不过有的时候是在支付完成后
检测到非法活动

194
00:09:25,065 --> 00:09:27,234
它只能在已经出现了
非法活动后才能检测到

195
00:09:27,935 --> 00:09:31,305
现在对于这种情况
我们会为适合的开发者或用户退款

196
00:09:31,371 --> 00:09:32,406
但是这不是个好办法

197
00:09:32,472 --> 00:09:35,075
所以我们现在想尝试
从你们那里获得一些合作

198
00:09:35,142 --> 00:09:37,911
来帮助我们能早一点发现这些非法活动

199
00:09:38,478 --> 00:09:39,913
现在我想做一个说明

200
00:09:39,980 --> 00:09:42,816
可以帮你们验证我刚才所说的内容

201
00:09:44,418 --> 00:09:45,986
比方说 我现在有三台设备

202
00:09:46,353 --> 00:09:48,789
三个用户用不同的
Apple ID登录账户

203
00:09:49,489 --> 00:09:52,292
这三个用户都在购买相同的金币产品

204
00:09:52,426 --> 00:09:54,528
从App Store中你的应用里

205
00:09:55,295 --> 00:09:56,697
这是个很普通的场景

206
00:09:56,763 --> 00:09:58,632
很多用户都会做很多次这样的操作

207
00:09:58,699 --> 00:09:59,833
全世界范围每天都会

208
00:10:00,934 --> 00:10:03,203
但是让我们再加点信息到这个问题中

209
00:10:03,270 --> 00:10:04,771
这会让问题大为不同

210
00:10:05,105 --> 00:10:08,342
比方说 这三个用户在你的应用中
购买了金币

211
00:10:08,809 --> 00:10:12,079
但是这些独立的ID
其实是把这些金币存入了

212
00:10:12,145 --> 00:10:14,748
你服务器上的一个相同的游戏账号

213
00:10:15,449 --> 00:10:17,518
这个场景突然就变得非常可疑了

214
00:10:18,785 --> 00:10:21,922
那么我们该如何在支付过程中
早点发现此类问题呢？

215
00:10:22,089 --> 00:10:25,592
我们想让你在支付步骤中
提供一个账号标识符

216
00:10:26,326 --> 00:10:28,962
这个标识符会用于
有自己账号管理系统的应用

217
00:10:29,263 --> 00:10:30,864
所以如果你有服务器账号

218
00:10:30,931 --> 00:10:32,766
而某个用户作为特殊用户登录

219
00:10:33,433 --> 00:10:35,802
我们就会在这步中
请求一个不透明的标识符

220
00:10:36,670 --> 00:10:38,472
什么是不透明的标识符呢？

221
00:10:39,239 --> 00:10:41,942
我们不是想让你将
用户的实际信息给我们

222
00:10:42,009 --> 00:10:44,545
我们已经知道该用户的Apple ID了
所以不用给我们这些信息

223
00:10:44,745 --> 00:10:48,682
我们不想知道该用户的用户名或者密码

224
00:10:48,749 --> 00:10:49,950
我们不想知道任何这些细节的信息

225
00:10:50,017 --> 00:10:51,018
我们建议你

226
00:10:51,084 --> 00:10:54,521
新建一个账户名的哈希值
或者是类似的东西

227
00:10:54,588 --> 00:10:57,858
这样我们就可以用这个独一无二的
标识符来匹配这些支付行为

228
00:10:57,991 --> 00:11:00,827
在不同的Apple ID之间
并且将它们关联到一起

229
00:11:01,962 --> 00:11:03,664
想要实现这个功能真的很简单

230
00:11:03,730 --> 00:11:04,798
当你在创建SKPayment时

231
00:11:04,865 --> 00:11:05,999
也就是我们刚才看过的那个对象

232
00:11:06,466 --> 00:11:07,534
你只需要再多加一步

233
00:11:07,601 --> 00:11:09,469
就是设置应用的用户名

234
00:11:10,003 --> 00:11:11,572
这里你可以设置

235
00:11:11,638 --> 00:11:13,607
账户名的哈希值
这样就可以帮助我们

236
00:11:13,674 --> 00:11:15,809
在此过程中更早地检测出非法的活动

237
00:11:17,611 --> 00:11:19,179
你只需要这么简单的一步

238
00:11:19,246 --> 00:11:21,481
就可以让你应用的支付行为更加安全

239
00:11:23,650 --> 00:11:25,419
在用户验证了支付行为后

240
00:11:25,485 --> 00:11:27,588
尽管信用卡已扣费
但还是取决于你来决定

241
00:11:27,654 --> 00:11:30,457
什么时候处理来自
StoreKit的交易行为

242
00:11:31,225 --> 00:11:32,526
我们看看这是什么样子的

243
00:11:33,026 --> 00:11:35,095
在你应用生命周期最开始的地方

244
00:11:35,162 --> 00:11:36,129
在这里 我所做的是

245
00:11:36,630 --> 00:11:39,967
实现了didFinishLaunching
WithOptions这个应用代理方法

246
00:11:40,267 --> 00:11:44,204
重要的是你要在SKPayment
队列上设置一个交易观察者

247
00:11:44,872 --> 00:11:47,274
这里我所添加的是应用代理本身

248
00:11:47,341 --> 00:11:49,510
作为我的SKPayment
交易观察者

249
00:11:49,576 --> 00:11:50,744
但你可以使用其他对象

250
00:11:50,811 --> 00:11:52,713
如果你想监视这些交易的话

251
00:11:52,913 --> 00:11:53,914
这里很重要的一点是

252
00:11:53,981 --> 00:11:57,084
你要在应用的生命周期
尽早地实现这个功能

253
00:11:57,584 --> 00:12:00,587
交易可能会在任何时间来到交易观察者

254
00:12:00,654 --> 00:12:02,856
在你应用的生命周期中

255
00:12:02,923 --> 00:12:04,925
所以请确保在开始的时候
你就注册好它了

256
00:12:05,959 --> 00:12:07,160
在它被注册之后

257
00:12:07,227 --> 00:12:09,897
你就可以开始在回调函数中接收交易了

258
00:12:10,797 --> 00:12:12,599
这里是个由回调函数更新的交易

259
00:12:12,666 --> 00:12:15,335
这就是功能实现的中心

260
00:12:16,103 --> 00:12:17,838
你会接收到一个交易的数组

261
00:12:17,905 --> 00:12:21,108
你可以检查每个交易的交易状态

262
00:12:21,909 --> 00:12:24,478
你要找处于已购买状态的交易

263
00:12:25,078 --> 00:12:27,314
这就是StoreKit
视作合适的交易

264
00:12:27,481 --> 00:12:31,818
你可以检查下有效性
然后解锁内容

265
00:12:33,187 --> 00:12:35,589
这里还有些其他状态
我们不在本次演讲中介绍了

266
00:12:35,656 --> 00:12:38,392
不过有一个状态我想讲一下
就是延迟状态

267
00:12:39,860 --> 00:12:41,128
某个交易会进入

268
00:12:41,195 --> 00:12:43,964
延迟状态 如果用户要求这么做的话

269
00:12:44,731 --> 00:12:47,100
小孩可能会请求购买某个程序内购买

270
00:12:47,167 --> 00:12:50,838
就会有个请求到达他们的父母那边
由父母来允许本次购买

271
00:12:51,271 --> 00:12:52,439
而这一过程可能会间隔

272
00:12:52,506 --> 00:12:55,042
几秒 几分钟 几个星期
谁知道会多久呢

273
00:12:55,108 --> 00:12:57,778
重要的是
如果进入了延迟状态

274
00:12:57,845 --> 00:13:00,914
在他们等待许可的时候
你仍会让他们访问应用

275
00:13:00,981 --> 00:13:02,249
让他们可一直用你的应用

276
00:13:02,316 --> 00:13:03,483
不要让他们卡在

277
00:13:03,550 --> 00:13:06,253
某些像是加载旋转这类界面上

278
00:13:06,887 --> 00:13:08,222
而这个支付会最终进入

279
00:13:08,288 --> 00:13:09,890
已购买状态
在它得到许可之后

280
00:13:09,957 --> 00:13:12,326
你可以像其他的购买交易
一样对它进行处理

281
00:13:13,827 --> 00:13:16,029
为了测试延迟交易

282
00:13:16,096 --> 00:13:17,497
我们提供了一个方法
来让你实现这个目的

283
00:13:17,564 --> 00:13:19,499
你可以创建一个可变支付对象

284
00:13:20,167 --> 00:13:23,136
你可以在这个对象上设置
simulatesAskToBuy旗帜

285
00:13:23,337 --> 00:13:25,806
这在你用沙盒环境的时候很有效

286
00:13:26,006 --> 00:13:27,975
我们不会在本次演讲中过多介绍沙盒

287
00:13:28,475 --> 00:13:29,710
它在代码上是这样的

288
00:13:31,011 --> 00:13:34,047
你可以把simulates
AskToBuyInSandbox旗帜设为真

289
00:13:34,114 --> 00:13:37,351
这就意味着在你测试程序内购买的时候

290
00:13:37,451 --> 00:13:39,586
这个交易就会进入

291
00:13:39,686 --> 00:13:42,389
一个更新的交易状态
叫作延迟交易

292
00:13:42,456 --> 00:13:45,292
你可以测试下如何处理这些情况

293
00:13:47,561 --> 00:13:50,030
在你处理错误的时候
有几点是你要记住的

294
00:13:50,097 --> 00:13:52,733
此过程中的错误不尽相同

295
00:13:53,300 --> 00:13:55,302
这就意味着 你要仔细看错误代码

296
00:13:55,369 --> 00:13:57,337
也就是在交易过程中的错误代码

297
00:13:57,704 --> 00:13:59,239
所以别急着显示一个警告

298
00:13:59,306 --> 00:14:02,576
除非是很有必要
向你的用户报告一个错误

299
00:14:03,076 --> 00:14:05,879
我们发现过
有时候可能用户就是取消了一笔支付

300
00:14:05,979 --> 00:14:07,848
这有个对应的错误代码

301
00:14:08,382 --> 00:14:10,951
你不需要给用户显示个警告来说
用户取消了支付

302
00:14:11,018 --> 00:14:13,620
他们既然点了取消按钮
肯定知道他们要取消支付

303
00:14:13,887 --> 00:14:15,088
你不用再次告诉他们了

304
00:14:16,623 --> 00:14:19,960
同样重要的是你要尽可能地
让StoreKit来处理交易流

305
00:14:20,527 --> 00:14:22,462
这就意味着 你不需要请求确认

306
00:14:22,529 --> 00:14:25,332
像是程序内购买这些事情
在他们选择购买之后

307
00:14:25,399 --> 00:14:27,534
我们有个新的支付表单
来为你实现这个功能

308
00:14:27,601 --> 00:14:29,002
你可交给StoreKit处理

309
00:14:30,270 --> 00:14:33,407
在交易进入支付状态后

310
00:14:33,774 --> 00:14:36,310
我提醒过你们
一定要验证这笔交易

311
00:14:36,476 --> 00:14:39,713
我们要如何实现呢？
我们怎么能保证钱已经易手了呢？

312
00:14:39,780 --> 00:14:42,850
我们要使用应用收据来实现这个功能

313
00:14:44,151 --> 00:14:45,686
这个应用收据很像是

314
00:14:45,752 --> 00:14:47,654
你从商店拿到的那种收据

315
00:14:47,821 --> 00:14:50,357
它就是支付的证据

316
00:14:50,424 --> 00:14:53,293
证明用户已经买了他们声称购买的东西

317
00:14:53,961 --> 00:14:55,262
在本例中

318
00:14:55,329 --> 00:14:57,798
它就是应用和程序内购买的可信记录

319
00:14:57,865 --> 00:14:59,733
就是出现在这个应用中的可信记录

320
00:15:00,434 --> 00:15:01,969
实际上每个应用都有应用收据

321
00:15:02,035 --> 00:15:04,638
因为它包含了
有关初始应用购买的信息

322
00:15:04,738 --> 00:15:08,275
甚至也包括了
初始免费应用下载的信息

323
00:15:09,443 --> 00:15:11,445
这个文档会保存在用户的设备上

324
00:15:11,512 --> 00:15:13,580
它由App Store颁布
并且放到那里的

325
00:15:14,548 --> 00:15:16,383
它还是个签过名的 可验证的文档

326
00:15:16,450 --> 00:15:19,119
所以你可以确保这个文档
是由Apple所签发的

327
00:15:19,219 --> 00:15:22,556
你可以用证书来验证文档的真实性

328
00:15:23,690 --> 00:15:26,260
最后 此收据是在该设备上
你的应用专用的

329
00:15:26,326 --> 00:15:29,029
这个收据文档不能跨设备共享

330
00:15:29,296 --> 00:15:32,165
而且它不能被一台设备上的
多个应用所共享

331
00:15:33,433 --> 00:15:34,868
为了保证这个文档

332
00:15:34,935 --> 00:15:37,604
也就是你用来检查交易的文档
确实是有效的

333
00:15:37,671 --> 00:15:39,506
你可以进行收据有效性验证

334
00:15:40,040 --> 00:15:42,109
收据有效性验证可以通过多种方法实现

335
00:15:42,843 --> 00:15:45,879
你可以直接在用户的设备上
使用设备有效性验证

336
00:15:45,946 --> 00:15:47,614
然后你可以解锁相应的功能

337
00:15:48,382 --> 00:15:51,051
另一个方法是使用
服务器到服务器的有效性验证

338
00:15:51,218 --> 00:15:53,287
你可以把加密的收据数据

339
00:15:53,353 --> 00:15:55,088
发送到你的服务器上

340
00:15:55,322 --> 00:15:57,791
你可从那将其发送到
App Store服务器上

341
00:15:58,025 --> 00:15:59,860
在那我们会为你做一些检查

342
00:16:01,261 --> 00:16:03,430
我们不会详细介绍
收据有效性验证的问题

343
00:16:03,497 --> 00:16:04,865
会介绍这些内容的演讲

344
00:16:04,932 --> 00:16:06,834
是在今天下午举办的高级演讲

345
00:16:06,900 --> 00:16:10,137
我会介绍如何从设备读取收据数据

346
00:16:10,204 --> 00:16:13,440
还有如何实现服务器到服务器的交换

347
00:16:14,641 --> 00:16:17,945
一旦你确认了某个收据是真实的文档

348
00:16:18,245 --> 00:16:19,947
你就可以读取交易

349
00:16:20,047 --> 00:16:22,683
并且确保在此过程中的交易

350
00:16:22,749 --> 00:16:23,917
会出现在收据上

351
00:16:24,051 --> 00:16:26,086
这就意味着你有了有效的购买

352
00:16:26,153 --> 00:16:27,955
可以接着进行下一步

353
00:16:29,089 --> 00:16:31,625
也就是为你的程序内购买
解锁相关内容

354
00:16:31,925 --> 00:16:33,460
很明显这是个重要的步骤

355
00:16:34,027 --> 00:16:36,997
可以让用户使用他们所购买的功能

356
00:16:37,431 --> 00:16:39,733
在这步中 你可能会下载些额外的内容

357
00:16:39,800 --> 00:16:41,168
且让用户可用这些内容

358
00:16:42,069 --> 00:16:43,904
如果你要下载程序内购买的内容

359
00:16:43,971 --> 00:16:45,539
有几种实现的方法

360
00:16:47,274 --> 00:16:50,511
Apple也给你们提供了两种
相关的技术来使用

361
00:16:50,611 --> 00:16:52,212
我们有响应式的资源

362
00:16:52,279 --> 00:16:54,581
这个API是我们在几年前引入的

363
00:16:54,882 --> 00:16:56,383
还有一种是我刚才提到过的

364
00:16:56,450 --> 00:16:58,952
寄存的程序内购买可下载内容

365
00:16:59,019 --> 00:17:01,321
你可以把可下载内容关联到

366
00:17:01,421 --> 00:17:06,026
iTunes Connect上 这样就可以直接
访问SKProduct对象了

367
00:17:06,859 --> 00:17:10,263
当然了 另一种方法就是
将内容存到你自己的服务器上

368
00:17:10,464 --> 00:17:11,431
这当然是可以的

369
00:17:11,498 --> 00:17:13,200
但是如果你这么做
我希望你们记得

370
00:17:13,267 --> 00:17:15,602
要使用合适的后台下载API

371
00:17:15,669 --> 00:17:18,305
这些API要使用NSURL会话
来确保下载

372
00:17:18,405 --> 00:17:21,074
不会被中断
当用户退出应用的时候

373
00:17:22,709 --> 00:17:24,111
在你解锁了内容之后

374
00:17:24,178 --> 00:17:27,647
你可能是将专业版应用给了你的用户

375
00:17:28,214 --> 00:17:29,917
你就可以结束此次交易了

376
00:17:29,983 --> 00:17:32,252
这是实现程序内购买的最后一步

377
00:17:32,786 --> 00:17:36,156
重要的是
你要结束此过程中所有的交易

378
00:17:36,223 --> 00:17:37,791
即使有些是错误状态的

379
00:17:37,891 --> 00:17:40,394
你必须结束流中的所有交易

380
00:17:40,694 --> 00:17:43,096
其中也包括自动续订的情况

381
00:17:43,163 --> 00:17:46,500
所有可续订的订阅也会出现在这个流中

382
00:17:46,567 --> 00:17:49,736
对于其中任何要续订的账单周期

383
00:17:49,803 --> 00:17:52,840
你必须要确保所有此过程中的
续订交易会被结束掉

384
00:17:54,474 --> 00:17:57,477
如果你没有结束交易的话
它们还会保留在支付队列中

385
00:17:57,544 --> 00:17:58,712
它们就会一直不停弹出

386
00:17:58,779 --> 00:18:01,715
每次应用启动 调用了更新交易
回调函数的时候都会这样

387
00:18:01,815 --> 00:18:03,483
所以请确保你已经结束了它们

388
00:18:03,550 --> 00:18:05,185
而且将它们移出了支付队列

389
00:18:05,752 --> 00:18:07,588
事实上 对于自动续订的订阅

390
00:18:07,654 --> 00:18:10,657
我们会介绍些关于重试支付的功能

391
00:18:10,824 --> 00:18:12,559
该功能依赖于最新的知识

392
00:18:12,626 --> 00:18:14,962
也就是有关所有
可续订交易状态的知识

393
00:18:15,028 --> 00:18:19,399
重要的是 你一定要把交易结束掉
并且让交易是最新的状态

394
00:18:20,701 --> 00:18:23,036
其实你只需要一行代码就可以结束交易

395
00:18:23,103 --> 00:18:24,638
所以你们没借口不结束交易了

396
00:18:24,771 --> 00:18:27,474
你只需要将交易传到
已结束交易回调函数中

397
00:18:27,674 --> 00:18:30,477
这是SKPaymentQueue
的默认队列中的一个API

398
00:18:32,312 --> 00:18:34,481
在你结束了交易之后

399
00:18:34,781 --> 00:18:36,250
这也就是最后一步来实现

400
00:18:36,316 --> 00:18:37,951
在设备上进行程序内购买

401
00:18:38,051 --> 00:18:41,255
现在用户就可以访问
他们已经付过款的程序内购买了

402
00:18:42,523 --> 00:18:44,291
这里有些小技巧

403
00:18:44,424 --> 00:18:47,361
当你在进行应用审核的时候
你必须有一个恢复按钮

404
00:18:47,427 --> 00:18:49,930
如果你有些非可消耗的

405
00:18:49,997 --> 00:18:52,833
或是在你的应用中自动续订的产品

406
00:18:53,333 --> 00:18:55,369
而且这个恢复按钮必须是个独立的按钮

407
00:18:55,435 --> 00:18:57,004
与真正的购买按钮区别开

408
00:18:57,137 --> 00:18:59,406
你可以把它放到应用中的设置里面

409
00:18:59,473 --> 00:19:03,310
它就是个用来让用户
恢复已完成交易的工具

410
00:19:03,377 --> 00:19:05,078
它不仅仅是个备份工具

411
00:19:05,145 --> 00:19:06,647
人们经常用到这个功能

412
00:19:06,713 --> 00:19:08,215
比如他们可能有了个新的设备

413
00:19:08,282 --> 00:19:09,650
如果他们买了新的iPad

414
00:19:09,850 --> 00:19:12,920
他们想解锁已经在手机上买过的内容

415
00:19:13,120 --> 00:19:15,389
他们就可以使用
恢复功能来实现这个目的

416
00:19:15,455 --> 00:19:17,624
所以你一定要有个恢复交易按钮

417
00:19:17,691 --> 00:19:19,326
在你应用的某个地方

418
00:19:20,227 --> 00:19:22,262
就如我所说的 它只能用于恢复

419
00:19:22,329 --> 00:19:25,432
非可消耗的 或是自动续订的产品交易

420
00:19:25,899 --> 00:19:28,936
如果你卖的是可消耗的产品
或是非续订的订阅的话

421
00:19:29,002 --> 00:19:31,205
你就得坚持这一点

422
00:19:31,371 --> 00:19:32,472
可能你有个游戏账户

423
00:19:32,539 --> 00:19:34,575
你可能将账户信息关联到了

424
00:19:34,641 --> 00:19:35,876
你自己服务器上的某处

425
00:19:37,511 --> 00:19:40,247
你们就可以用这个API来恢复它们

426
00:19:41,114 --> 00:19:42,950
你们要使用restore
CompletedTransactions这个方法

427
00:19:43,016 --> 00:19:44,518
它是默认支付队列上的方法

428
00:19:44,885 --> 00:19:48,188
如果你调用这个方法
就会让所有已完成的交易

429
00:19:48,255 --> 00:19:51,692
重新出现在更新交易回调函数上

430
00:19:51,992 --> 00:19:54,194
你可以使用刚才讲过的同样流程

431
00:19:54,695 --> 00:19:56,263
检查它们是不是处于购买状态

432
00:19:56,430 --> 00:19:58,999
做收据有效性验证
还有解锁所有功能

433
00:20:00,267 --> 00:20:03,003
关于恢复已完成交易
还有很多API可用

434
00:20:03,070 --> 00:20:04,671
你可以理解交易是否结束了

435
00:20:04,738 --> 00:20:06,707
或者某个过程中是否有错误出现

436
00:20:06,773 --> 00:20:08,408
不过这里真正要做的是

437
00:20:08,475 --> 00:20:11,778
要保证将交易观察者
尽早地注册到你的应用中

438
00:20:11,845 --> 00:20:13,580
这样你才可以处理所有交易

439
00:20:13,647 --> 00:20:16,450
在这些交易传入
更新交易回调函数的时候

440
00:20:18,619 --> 00:20:21,655
现在我们总结下刚才讲到的流程

441
00:20:21,722 --> 00:20:22,856
你一直要观察支付队列

442
00:20:22,923 --> 00:20:24,458
并且你要确保

443
00:20:24,525 --> 00:20:26,393
在你的应用声明周期中
越早实现越好

444
00:20:27,461 --> 00:20:30,664
使用SKProducts请求
来请求本地化的信息

445
00:20:30,764 --> 00:20:32,366
这些本地化信息是有关
App Store中产品的

446
00:20:32,533 --> 00:20:35,068
并且使用这些信息
来显示本地化的定价信息

447
00:20:35,269 --> 00:20:37,004
使用这项技术还有
我们刚才看到的数字格式化器

448
00:20:37,070 --> 00:20:41,875
来确保你的价格是以
用户本地商店的格式显示的

449
00:20:43,343 --> 00:20:47,247
使用收据来验证支付是否真正完成了

450
00:20:47,714 --> 00:20:49,449
这是个重要的安全性步骤

451
00:20:49,516 --> 00:20:51,685
我们今天下午会再介绍
有关它的更多内容

452
00:20:52,452 --> 00:20:54,488
你要记得把内容设成对用户是可用的

453
00:20:54,555 --> 00:20:56,323
保证他们能得到所买的东西

454
00:20:57,925 --> 00:21:00,360
然后在过程的最后结束交易

455
00:21:00,427 --> 00:21:01,795
请确保你调用了
finishTransaction方法

456
00:21:01,862 --> 00:21:03,430
且传入了该交易对象

457
00:21:03,764 --> 00:21:04,731
然后就是在你应用的某处

458
00:21:04,831 --> 00:21:06,633
有个恢复按钮
可以让用户

459
00:21:06,700 --> 00:21:09,837
在设备上恢复已完成的交易

460
00:21:10,871 --> 00:21:14,441
这就是关于实现
程序内购买及其过程的内容

461
00:21:14,908 --> 00:21:16,143
接下来 我们要讨论下

462
00:21:16,410 --> 00:21:20,013
在App Store应用中
直接推广程序内购买的新功能

463
00:21:20,147 --> 00:21:21,215
为了介绍关于这方面的更多内容

464
00:21:21,281 --> 00:21:23,350
我想有请Ross LeBeau
上台来给你们介绍一下

465
00:21:33,460 --> 00:21:36,430
大家好 我叫Ross
是App Store团队的工程师

466
00:21:37,164 --> 00:21:40,434
我很激动今天能给你们介绍一下
App Store新特性

467
00:21:41,368 --> 00:21:43,036
这就是推广程序内购买

468
00:21:43,504 --> 00:21:45,205
它可以让你有更广泛的受众

469
00:21:45,272 --> 00:21:46,673
让更多人知道你的应用
提供了什么功能

470
00:21:49,176 --> 00:21:52,045
在今天以前
如果用户没有积极地使用过你的应用

471
00:21:52,446 --> 00:21:54,214
你的程序内购买就很难被找到

472
00:21:55,516 --> 00:21:57,251
但是从iOS 11开始

473
00:21:57,317 --> 00:21:59,953
你的程序内购买可直接
在App Store中被找到

474
00:22:00,854 --> 00:22:02,155
它们可以在你的应用页面中被看到

475
00:22:03,223 --> 00:22:04,958
它们可以被编辑功能选用

476
00:22:05,726 --> 00:22:07,461
它们甚至还可以出现在搜索结果中

477
00:22:08,695 --> 00:22:09,530
不仅如此

478
00:22:09,863 --> 00:22:12,966
用户还可以直接从
App Store开始购买

479
00:22:14,468 --> 00:22:17,538
我们觉得这对于用户如何浏览
你的程序内购买 是巨大的改进

480
00:22:19,673 --> 00:22:20,807
它是如何运作的呢？

481
00:22:21,675 --> 00:22:23,977
推广你的程序内购买是很容易的

482
00:22:24,378 --> 00:22:25,846
你只需要做两件事

483
00:22:26,980 --> 00:22:30,784
首先 对于每个应用选择最多
20个程序内购买来推广

484
00:22:31,018 --> 00:22:33,554
并且在iTunes Connect中
为它们设置相应的图片

485
00:22:34,454 --> 00:22:36,823
然后 在你的应用中
实现一个单一代理方法

486
00:22:37,024 --> 00:22:39,259
来处理从App Store
发给你的购买信息

487
00:22:40,027 --> 00:22:43,230
在大多数情况下
你只需要一行代码就能实现

488
00:22:43,297 --> 00:22:45,532
StoreKit会为你处理
交易剩下的操作

489
00:22:47,134 --> 00:22:47,968
而且

490
00:22:49,436 --> 00:22:50,304
如果你需要的话

491
00:22:51,538 --> 00:22:55,075
你可以在本地重写
它们出现的顺序和可见性

492
00:22:56,043 --> 00:22:59,112
这不是必须的操作
但是它在很多情况下都挺有用

493
00:23:01,181 --> 00:23:02,316
我们已经介绍了很多关于

494
00:23:02,382 --> 00:23:03,984
如何设置
iTunes Connect的内容

495
00:23:04,051 --> 00:23:05,886
在“iTunes Connect
新特性”这场演讲中

496
00:23:06,119 --> 00:23:08,822
这场演讲是昨天举办的
如果你错过了 可以去网上看一下

497
00:23:09,323 --> 00:23:12,693
现在让我们看下如何处理你的交易信息

498
00:23:12,759 --> 00:23:14,094
它从App Store送到你手中时

499
00:23:17,331 --> 00:23:20,767
有个用户在App Store中
点击了购买你的程序内购买

500
00:23:22,069 --> 00:23:23,971
StoreKit
会自动打开你的应用

501
00:23:24,304 --> 00:23:26,406
并且将有关此次交易的信息发送给你

502
00:23:26,673 --> 00:23:30,410
通过SKPaymentTransaction
观察者协议上的一个新代理方法

503
00:23:30,944 --> 00:23:33,180
而且你已经有了一个
用来实现此协议的对象

504
00:23:33,247 --> 00:23:36,517
该对象可以观察交易状态
就像Pete刚才所讲的那样

505
00:23:37,618 --> 00:23:39,786
你可以将用来推广程序内购买的新代码

506
00:23:39,853 --> 00:23:41,355
放到你已有的代码旁边

507
00:23:43,156 --> 00:23:45,692
还有个好消息是
如果你的应用还没有被安装过

508
00:23:46,760 --> 00:23:49,263
App Store会下载你的应用
或让用户购买它

509
00:23:49,863 --> 00:23:51,598
在本例中 它不会自动被打开

510
00:23:51,665 --> 00:23:54,134
所以用户会收到一条通知

511
00:23:54,468 --> 00:23:55,536
当他们点击了通知时
交易信息就会被发送到你的应用中

512
00:24:01,208 --> 00:24:02,409
代码是什么样的呢？

513
00:24:05,279 --> 00:24:08,348
这就是所有你需要
开始推广程序内购买的代码了

514
00:24:09,583 --> 00:24:13,420
StoreKit会发送给你SKPayment队列
SKPayment 还有SKProduct

515
00:24:13,554 --> 00:24:15,355
也就是所有你处理交易要用的工具

516
00:24:15,756 --> 00:24:18,292
而且SKPayment已经设置好了
SKProduct

517
00:24:19,826 --> 00:24:20,794
当你返回真的时候

518
00:24:21,628 --> 00:24:24,331
就会给用户显示一个很漂亮的
新程序内购买支付表单

519
00:24:24,698 --> 00:24:26,066
他们可以通过表单来完成交易

520
00:24:26,266 --> 00:24:27,701
这就是所有要做的内容了
我们都完成了

521
00:24:27,901 --> 00:24:28,836
已经可以用这个功能了

522
00:24:30,604 --> 00:24:33,240
如果用户是处于某种中间状态呢？

523
00:24:33,841 --> 00:24:34,708
如果他们正在创建账户呢？

524
00:24:34,775 --> 00:24:37,344
如果他们已经解锁了
他们想要购买的项目呢？

525
00:24:39,980 --> 00:24:43,283
如果是这样 你可以先暂停支付过程
并返回假

526
00:24:44,351 --> 00:24:47,087
然后当用户准备好了
或是干完了要做的事情之后

527
00:24:47,855 --> 00:24:49,223
你就只需将支付添加到支付队列中

528
00:24:49,289 --> 00:24:51,191
就像是对待普通的程序内购买那样

529
00:24:52,226 --> 00:24:53,927
重要的是你要添加的
SKPayment

530
00:24:53,994 --> 00:24:55,362
是在这个代理方法中发送给你的

531
00:24:55,429 --> 00:24:57,364
而不是为相同的产品再创建一个新的
SKPayment

532
00:24:58,699 --> 00:25:01,168
如果出于某种原因
你需要完全取消此交易

533
00:25:01,768 --> 00:25:04,004
只需要返回假就可以了
不需要再进行任何操作

534
00:25:06,406 --> 00:25:08,542
如果你要取消或者延迟某个支付

535
00:25:08,909 --> 00:25:11,411
你应该通过某种方式让用户知道

536
00:25:12,145 --> 00:25:12,980
你最好不要让这种情况发生

537
00:25:13,046 --> 00:25:15,749
就是用户点击了
App Store中的程序内购买

538
00:25:16,183 --> 00:25:17,985
来购买你的应用 然后什么都没发生

539
00:25:18,752 --> 00:25:20,954
他们会认为这是个错误 那可不太好

540
00:25:24,024 --> 00:25:27,327
现在你已经把这些内容都设置好了
你会测试一下 对吧

541
00:25:28,595 --> 00:25:31,198
你的程序内购买
不会出现在App store中

542
00:25:31,298 --> 00:25:34,835
直到你提交了一个
具有此代理方法的二进制

543
00:25:34,902 --> 00:25:37,070
这样我们就知道你可以处理交易了

544
00:25:38,572 --> 00:25:41,341
我们创建了一个
系统URL来供你们使用

545
00:25:42,476 --> 00:25:45,913
这个URL具有ITMS业务协议
还有三个参数

546
00:25:46,480 --> 00:25:49,283
第一个参数是动作
它一直都是以购买为目的

547
00:25:50,317 --> 00:25:51,451
第二个参数是bundleID

548
00:25:51,518 --> 00:25:53,387
也就是你应用的bundleID

549
00:25:54,521 --> 00:25:55,856
最后一个参数是产品标识符

550
00:25:55,923 --> 00:25:57,791
你所填入的就是产品标识符

551
00:25:57,858 --> 00:25:59,493
也就是你想测试的
程序内购买的产品标识符

552
00:26:01,461 --> 00:26:03,430
在你像这样构建了这个URL之后

553
00:26:03,897 --> 00:26:05,933
你可以将它发送自己
用iMessage

554
00:26:06,366 --> 00:26:08,802
电子邮件 或是在设备上点击它都可以

555
00:26:09,870 --> 00:26:12,406
你能知道它是正常工作的
因为你的应用会自动打开

556
00:26:13,240 --> 00:26:14,741
然后你就可以从这开始测试了

557
00:26:19,012 --> 00:26:21,748
现在我们已经介绍了如何处理支付信息

558
00:26:21,815 --> 00:26:23,016
当它被从App Store中
发给你时

559
00:26:24,284 --> 00:26:25,886
让我们来看下更高级的设置

560
00:26:28,455 --> 00:26:31,225
当你在iTunes Connect中
设置推广程序内购买时

561
00:26:31,792 --> 00:26:35,629
你可以选择它们
出现在你应用页面的默认顺序

562
00:26:36,129 --> 00:26:38,031
你还可以选择隐藏其中某些推广

563
00:26:38,098 --> 00:26:39,233
这样它们就根本不会显示了

564
00:26:40,400 --> 00:26:42,236
然后当你的应用在设备上运行的时候

565
00:26:43,270 --> 00:26:46,640
你可以在本地重写这些内容
来改变可视性的顺序

566
00:26:47,875 --> 00:26:51,044
例如 如果你在开发一个竞速游戏

567
00:26:51,111 --> 00:26:52,946
你可能会隐藏某辆车
将其作为程序内购买

568
00:26:53,013 --> 00:26:54,982
直到用户解锁了这辆车才显示

569
00:26:56,016 --> 00:26:56,917
而当他们确实买了这辆车时

570
00:26:58,285 --> 00:27:02,122
你可以把这个程序内购买移到
列表的最上面 并且取消对它的隐藏

571
00:27:02,756 --> 00:27:03,991
这样他们就解锁了这辆车

572
00:27:04,324 --> 00:27:06,326
现在他们就可以看到
有最大关系的程序内购买

573
00:27:06,426 --> 00:27:07,461
出现在了列表的前面

574
00:27:09,162 --> 00:27:11,632
你要知道的是
它们是不会跨设备同步的

575
00:27:11,698 --> 00:27:13,267
它们被本地保存在每台设备上

576
00:27:15,836 --> 00:27:17,938
所以如果你需要复制相同的行为

577
00:27:18,138 --> 00:27:21,408
你应该确保你的应用
可以本地复制这些结果

578
00:27:24,545 --> 00:27:27,080
让我们看些实际的例子吧

579
00:27:29,850 --> 00:27:31,818
这里我们有个叫作
Forest Explorer的应用

580
00:27:32,386 --> 00:27:33,453
我们开发了这个应用

581
00:27:33,520 --> 00:27:38,091
来帮助人们探索并到目的地去旅行

582
00:27:40,394 --> 00:27:41,695
这个应用不存在于App Store

583
00:27:41,762 --> 00:27:42,930
它仅为这次演示而开发

584
00:27:43,864 --> 00:27:45,732
这里我们要推广三个程序内购买

585
00:27:45,799 --> 00:27:47,067
我们有专业版订阅

586
00:27:47,267 --> 00:27:49,269
它会升级用户能看到的细致程度

587
00:27:49,336 --> 00:27:50,370
地图 还有路线

588
00:27:51,138 --> 00:27:54,007
我们还有钓鱼热点 和隐藏的沙滩包

589
00:27:54,208 --> 00:27:57,144
它会解锁更多相关主题的路线

590
00:27:59,546 --> 00:28:01,114
你可能想实现这个功能

591
00:28:01,281 --> 00:28:04,151
比如说某个用户已经购买了
专业版订阅程序内购买

592
00:28:05,052 --> 00:28:06,854
你要将这个程序内购买
在应用页面上隐藏

593
00:28:07,054 --> 00:28:10,157
StoreKit或是App Store
不会自动实现这一功能

594
00:28:10,724 --> 00:28:12,860
如果他们购买了这个程序内购买
然后进入App Store

595
00:28:12,926 --> 00:28:14,494
他们还是会在你的列表中看到它

596
00:28:15,229 --> 00:28:16,263
这可能不太合情理

597
00:28:16,330 --> 00:28:17,464
因为他们不能再买一次了

598
00:28:18,599 --> 00:28:21,034
你可以使用本地可视化

599
00:28:21,101 --> 00:28:24,271
重写来隐藏这个程序内购买

600
00:28:24,338 --> 00:28:27,107
然后他们就只能在你的应用页面中
看到跟他们有关的项目了

601
00:28:29,877 --> 00:28:31,144
该功能的代码是什么样的呢？

602
00:28:34,815 --> 00:28:38,552
就像是这样 首先
你要获取SKProduct

603
00:28:38,619 --> 00:28:40,754
这样你就从服务器获得了最新的信息

604
00:28:41,255 --> 00:28:43,957
这里我们要获取的是关于
专业版订阅程序内购买的信息

605
00:28:45,626 --> 00:28:49,363
然后 我们有个新的
用来处理这些本地重写的类

606
00:28:49,429 --> 00:28:51,965
叫作
SKProductStorePromotionController

607
00:28:52,900 --> 00:28:54,468
你要获取默认的控制器

608
00:28:56,136 --> 00:28:57,504
然后将你的SKProduct传到

609
00:28:57,571 --> 00:29:00,474
updateStorePromotionVisibility
ForProduct方法中

610
00:29:00,908 --> 00:29:02,776
还有你想设置的新可视性

611
00:29:03,510 --> 00:29:05,179
这里我们想将专业版订阅进行隐藏

612
00:29:05,245 --> 00:29:06,547
因为用户刚刚买了它

613
00:29:08,482 --> 00:29:10,050
就是这样了
这很简单

614
00:29:11,451 --> 00:29:13,887
如果现在你想看看
你已经设置了哪些重写

615
00:29:16,423 --> 00:29:18,325
还是要从获取SKProduct开始

616
00:29:18,525 --> 00:29:20,093
这里让我们看下隐藏沙滩包

617
00:29:21,428 --> 00:29:23,764
把它传到fetch
StorePromotionVisibility

618
00:29:23,830 --> 00:29:24,831
forProduct这个方法中

619
00:29:25,832 --> 00:29:28,836
我们可以发现 可视化被默认实现了

620
00:29:29,136 --> 00:29:31,138
这是因为我们还没有设置任何的重写

621
00:29:31,738 --> 00:29:33,507
这就意味着 它会隐藏或是显示

622
00:29:33,574 --> 00:29:35,909
取决于你在iTunes Connect
上的默认设置

623
00:29:39,780 --> 00:29:42,282
我们已经介绍了重写可视性

624
00:29:42,616 --> 00:29:43,717
改变下顺序怎么样

625
00:29:43,784 --> 00:29:45,819
就是改变下你的程序内购买
出现在应用页面上的顺序

626
00:29:47,821 --> 00:29:49,323
让我们回到
Forest Explorer

627
00:29:51,225 --> 00:29:53,527
你可能一直在看你的调查数据

628
00:29:53,594 --> 00:29:56,363
就会发现用户会去很多的沙滩

629
00:29:57,431 --> 00:29:59,132
这时候就可以把隐藏的沙滩移

630
00:29:59,199 --> 00:30:02,569
回列表的前面
这样他们就更有可能看到它了

631
00:30:03,036 --> 00:30:04,905
由于这是些他们感兴趣的东西

632
00:30:04,972 --> 00:30:06,106
他们可能会买它

633
00:30:10,444 --> 00:30:14,281
它的代码看起来和
更新可视化重写的代码很相似

634
00:30:15,449 --> 00:30:18,886
你要为每个想要重写的
程序内购买获取SKProduct

635
00:30:18,952 --> 00:30:20,521
你想重写的是顺序
这里我们会重写全部三个

636
00:30:20,587 --> 00:30:23,824
我们会重写专业版订阅
钓鱼热点 还有隐藏的沙滩

637
00:30:24,858 --> 00:30:27,895
然后创建一个
包含这些程序内购买的数组

638
00:30:27,961 --> 00:30:30,163
其顺序就是你想将它们重写的顺序

639
00:30:30,631 --> 00:30:32,099
我要把隐藏的沙滩移到最前面

640
00:30:33,800 --> 00:30:37,404
最后把这个数组传到
updateStorePromotionOrder方法中

641
00:30:38,872 --> 00:30:40,107
这样就可以了 已经更新好了

642
00:30:42,843 --> 00:30:45,179
现在如果我们想看下已经设置好的重写

643
00:30:46,213 --> 00:30:47,514
这也是非常类似的

644
00:30:48,448 --> 00:30:50,384
你要获取storePromotionController

645
00:30:50,651 --> 00:30:52,719
还要使用
fetchStorePromotionalOrder方法

646
00:30:54,388 --> 00:30:58,192
这样我们就有了一个数组
隐藏的沙滩是在最前面的

647
00:30:58,258 --> 00:30:59,793
因为我们刚刚设置了它的重写

648
00:31:01,828 --> 00:31:04,865
你不需要用到数组中的每个程序内购买

649
00:31:04,932 --> 00:31:06,233
在你设置重写的时候

650
00:31:06,333 --> 00:31:08,335
你可以随意使用它们的子集

651
00:31:09,002 --> 00:31:12,906
如果你这么做的话
该子集就会出现在列表的最前面

652
00:31:13,674 --> 00:31:15,742
以你表述重写的顺序进行排列

653
00:31:16,176 --> 00:31:19,146
你剩下的程序内购买会出现在它们后面

654
00:31:19,213 --> 00:31:21,448
跟你在iTunes Connect中
设置的顺序一样

655
00:31:23,116 --> 00:31:25,319
你还可以从这个方法接收一个空数组

656
00:31:25,719 --> 00:31:28,255
这就意味着
你根本没有设置任何的顺序重写

657
00:31:29,022 --> 00:31:32,726
同样地
你可以将一个空数组传入更新方法中

658
00:31:32,926 --> 00:31:35,963
这就相当于取消了所有的重写

659
00:31:36,363 --> 00:31:39,466
你可以将其看成是用了个重写的空集

660
00:31:42,703 --> 00:31:45,272
这就是用于推广程序内购买的所有代码

661
00:31:46,139 --> 00:31:49,309
新的代理方法和
测试URL现在就已经可用了

662
00:31:49,376 --> 00:31:51,478
它们就在我们本周早些时候
发出的Seed中

663
00:31:52,880 --> 00:31:55,883
而顺序和可视性重写
会在后面的Seed中可用

664
00:31:59,019 --> 00:32:00,888
总结下推广程序内购买

665
00:32:02,289 --> 00:32:03,657
它可以让程序内购买更容易被找到

666
00:32:03,724 --> 00:32:05,025
通过将它们推广到
App Store中

667
00:32:06,293 --> 00:32:08,428
你可以为每个应用选择最多20
个进行推广

668
00:32:08,495 --> 00:32:09,897
并在iTunes Connect中对它们进行设置

669
00:32:11,265 --> 00:32:14,568
然后用户就可在App Store中
点击来进行购买

670
00:32:16,637 --> 00:32:18,639
交易信息会被送到你的应用中

671
00:32:18,705 --> 00:32:21,308
在它通过新的代理方法自动打开的时候

672
00:32:21,375 --> 00:32:23,844
这些都发生在SKPayment
的交易观察者协议上

673
00:32:25,646 --> 00:32:29,149
最后 如果你想的话 你可以重写

674
00:32:29,216 --> 00:32:32,186
它们出现在应用页面上的顺序和可视性
这会在运行时间本地完成

675
00:32:33,453 --> 00:32:34,488
我很激动地想看看

676
00:32:34,555 --> 00:32:36,657
你们所有人会如何在应用中
使用推广程序内购买

677
00:32:37,191 --> 00:32:39,193
不过现在我还是将讲台交回给Pete
他将介绍更多关于用户评论的内容

678
00:32:48,068 --> 00:32:51,738
谢谢 Ross 我迫不及待想试试
Forest Explorer了

679
00:32:51,805 --> 00:32:52,840
看似是个不错的应用

680
00:32:53,674 --> 00:32:56,310
现在我们已经介绍了
一些关于实现程序内购买

681
00:32:56,376 --> 00:32:58,011
以及如何在App Store中
推广它们的内容

682
00:32:58,278 --> 00:33:01,281
让我们看下你可以用来跟
用户交流的一些方式

683
00:33:02,549 --> 00:33:05,586
在iOS 11中 我们有了这个
看似非常棒的App Store设计

684
00:33:06,186 --> 00:33:07,187
这是个产品页面

685
00:33:07,254 --> 00:33:11,358
如果你向下滚动产品页面
就会看到这个新的评分和评分区域

686
00:33:11,425 --> 00:33:13,327
这里有个统一的评分

687
00:33:13,794 --> 00:33:16,530
用户可以滑动来切换不同的评论

688
00:33:16,730 --> 00:33:20,534
这样就可以阅读关于你
应用用户体验的信息

689
00:33:20,667 --> 00:33:21,902
这里有什么新东西呢？

690
00:33:21,969 --> 00:33:23,904
我们在这有一些新功能要介绍

691
00:33:23,971 --> 00:33:27,341
首先第一个 就是你现在可以选择
你想让评分重置的时间

692
00:33:27,541 --> 00:33:28,876
当你发布应用的时候

693
00:33:28,942 --> 00:33:30,844
你可以选择要不要重置评分

694
00:33:30,911 --> 00:33:33,914
在原来 这样做会每次都重置你的评分

695
00:33:33,981 --> 00:33:35,749
而现在就完全取决于你了
不错吧

696
00:33:40,554 --> 00:33:42,523
我们最近还加入了可以让你

697
00:33:42,589 --> 00:33:44,157
在App Store中
回复评论的功能

698
00:33:44,224 --> 00:33:46,727
现在你就可以和用户进行对话了

699
00:33:47,561 --> 00:33:49,897
还有些新的方法让你请求评分和评论

700
00:33:49,963 --> 00:33:52,065
它是通过SKStoreReviewController
实现的

701
00:33:52,833 --> 00:33:56,270
最后就是 我们在iOS 10.3中
加入了一个新的深度链接

702
00:33:56,336 --> 00:33:59,273
打开该链接就可以直接在
App Store中写评论

703
00:34:00,507 --> 00:34:04,478
我们还在iOS中加入了
帮助和报告担心的问题

704
00:34:04,745 --> 00:34:05,746
这看起来是什么样呢？

705
00:34:06,013 --> 00:34:09,049
现在用户可以在评论上
使用3D Touch

706
00:34:09,116 --> 00:34:12,052
这样他们就可以看到
这个有帮助或是没有帮助菜单

707
00:34:12,119 --> 00:34:13,920
他们可将其标记为有帮助
或没帮助的

708
00:34:13,987 --> 00:34:17,024
他们甚至可以直接在iOS 应用中
报告一个担心的问题

709
00:34:19,359 --> 00:34:23,197
我们是在iOS 10.3中
引入反馈评论的

710
00:34:23,263 --> 00:34:24,864
而这个功能的反响是非常不错的

711
00:34:25,264 --> 00:34:26,667
我们觉得用户很喜欢该功能

712
00:34:26,733 --> 00:34:29,536
而且我们看到开发者真的
很好地运用了这个功能

713
00:34:29,703 --> 00:34:31,438
当你回复某个用户评论时

714
00:34:31,505 --> 00:34:33,507
用户会在他们的设备上获得一条通知

715
00:34:33,574 --> 00:34:35,708
通知他们你有回复了

716
00:34:36,143 --> 00:34:37,710
他们还会收到一封邮件

717
00:34:38,011 --> 00:34:40,647
其中详细地写了关于他们评论的回复

718
00:34:41,114 --> 00:34:42,114
在这封邮件的最下面

719
00:34:42,181 --> 00:34:43,417
有一个链接

720
00:34:43,516 --> 00:34:44,818
可以让他们更新评论

721
00:34:44,885 --> 00:34:45,953
我们给了他们这个机会

722
00:34:46,018 --> 00:34:47,254
来点击该链接

723
00:34:47,454 --> 00:34:49,590
他们就有机会编辑他们的评分

724
00:34:49,656 --> 00:34:51,525
或者还会更改他们的评论

725
00:34:52,092 --> 00:34:53,893
并且我们发现在用户这么做的时候

726
00:34:53,960 --> 00:34:56,597
当他们在收到回复后更新评论的时候

727
00:34:56,730 --> 00:35:00,434
我们发现评论会平均增加
1.5星的评分

728
00:35:00,701 --> 00:35:04,238
正如你所见
这是个不错的机会来获得更好的评分

729
00:35:04,304 --> 00:35:05,806
这会让你的用户获得更棒的体验

730
00:35:05,873 --> 00:35:08,876
也会让你的应用
在App Store中获得更好评分

731
00:35:09,776 --> 00:35:13,380
有关这方面的更多信息
我们有个在线指南 讲的是

732
00:35:13,614 --> 00:35:16,750
回复评分 还有跟用户进行交流的
好方法和技术

733
00:35:17,184 --> 00:35:18,085
我们也在

734
00:35:18,151 --> 00:35:19,987
昨天举办的“iTunes Connect
新特性”这场演讲中提到过相关的内容

735
00:35:20,053 --> 00:35:22,422
如果你没有去听的话 我建议你们

736
00:35:22,489 --> 00:35:23,891
去看下那场演讲的视频

737
00:35:25,826 --> 00:35:27,361
在提到接收评论的时候

738
00:35:27,427 --> 00:35:29,129
现在你有几种方法可以实现这个功能

739
00:35:29,196 --> 00:35:33,700
你可以在SKStoreReviewController
类中提醒用户进行评论

740
00:35:34,101 --> 00:35:35,302
我们还提供了这个深度链接

741
00:35:35,369 --> 00:35:37,938
来让你直接在App Store中
写评论

742
00:35:38,772 --> 00:35:41,341
首先让我们看下
SKStoreReviewController

743
00:35:41,408 --> 00:35:44,211
这是我们在iOS 10.3中
引入的一个类

744
00:35:44,278 --> 00:35:46,947
它提供了一个非常简洁美观的界面

745
00:35:47,014 --> 00:35:49,950
让用户可以不用离开你的应用就能评分

746
00:35:50,017 --> 00:35:52,352
现在他们可以点击星数
点击提交就行了

747
00:35:52,519 --> 00:35:55,122
对你的应用进行评分
就成了一个无缝的体验

748
00:35:55,189 --> 00:35:57,791
他们现在甚至不用离开你的应用
就可以写评论了

749
00:35:58,859 --> 00:36:02,829
如果你现在还在用其他的警告
或是弹出框来请求评论的话

750
00:36:02,896 --> 00:36:05,332
我强烈建议你们开始使用这个API

751
00:36:05,399 --> 00:36:06,400
因为在未来某个时候

752
00:36:06,466 --> 00:36:09,236
我们会开始要求任何弹出框显示

753
00:36:09,303 --> 00:36:13,106
任何弹出请求评论
都要使用这个API

754
00:36:13,440 --> 00:36:16,243
对于使用这个API还有几个限制

755
00:36:17,711 --> 00:36:19,680
对于每台设备请求数是有限制的

756
00:36:19,746 --> 00:36:23,717
我们会限制用户被这些提醒轰炸的次数

757
00:36:23,784 --> 00:36:26,787
现在iOS 11中 用户可在
设置应用中关闭请求评论功能

758
00:36:26,854 --> 00:36:28,388
他们可以进入App store设置

759
00:36:28,755 --> 00:36:31,558
点击下开关就可以将
这些请求评分的弹出框功能关闭

760
00:36:31,825 --> 00:36:33,560
我们觉得这会是个不错的体验

761
00:36:33,627 --> 00:36:35,295
对于用户和开发者来说都是

762
00:36:36,930 --> 00:36:39,099
这里有些如何实现此功能的小技巧

763
00:36:40,334 --> 00:36:43,537
SKStoreReviewController是个弹出框
所以它自然而然就带有中断性

764
00:36:43,604 --> 00:36:46,206
所以你最好实现这个功能的时候

765
00:36:46,273 --> 00:36:47,608
是在某些用户交互的尾声

766
00:36:47,674 --> 00:36:49,743
可能是在用户已经完成了某项任务之后

767
00:36:50,010 --> 00:36:52,746
就可以借此机会
请求他们进行评分或是评论

768
00:36:52,813 --> 00:36:54,982
不要在他们正在做什么事情时
去打扰他们

769
00:36:55,949 --> 00:36:58,719
你也不适合用按钮来使用这个API

770
00:36:58,785 --> 00:37:01,655
因为你不能保证会有UI能呈现给用户

771
00:37:01,855 --> 00:37:03,524
基于我们刚才看到的那些限制

772
00:37:04,024 --> 00:37:08,028
所以通过你的应用中的嵌入式链接
来使用这个API也是不合适的

773
00:37:08,929 --> 00:37:11,031
不过如果你真要这么做
其代码是这样的

774
00:37:11,098 --> 00:37:12,366
就是一行代码

775
00:37:12,699 --> 00:37:14,434
但你可把它包含到
你自己的业务逻辑里去

776
00:37:14,501 --> 00:37:17,471
在本例中 我们在检查这个用户是不是

777
00:37:17,538 --> 00:37:20,073
那种我们想要请求写评论的用户

778
00:37:21,074 --> 00:37:22,676
如果我们确定他们是的话

779
00:37:22,976 --> 00:37:25,279
我们就可以调用
SKStoreReviewController上

780
00:37:25,345 --> 00:37:27,047
的requestReview方法了

781
00:37:27,281 --> 00:37:28,482
你只需要调用这个方法

782
00:37:28,549 --> 00:37:30,317
该方法会将评分弹出框呈现给用户

783
00:37:30,384 --> 00:37:32,252
当他们在使用你的应用时

784
00:37:34,855 --> 00:37:37,824
另一种方法当然就是我刚才提到的
用来写评论的新深度链接

785
00:37:39,059 --> 00:37:41,528
它其实也是在
iOS 10.3中被引入的

786
00:37:41,595 --> 00:37:42,963
不过我们现在会介绍一下它

787
00:37:43,163 --> 00:37:46,133
它会为你提供一个可以打开
App Store中应用页面链接

788
00:37:46,266 --> 00:37:48,702
该链接可以立刻给你显示写评论的表单

789
00:37:48,769 --> 00:37:51,004
或是本例中这样对评论进行编辑
如果他们已经写过评论

790
00:37:51,638 --> 00:37:54,174
它对于像是用户初始化动作
这类操作更为适合

791
00:37:54,241 --> 00:37:57,077
在这里你可能想在应用中
建立一个长期存在的链接

792
00:37:57,144 --> 00:37:59,980
可能是你设置里的一个用来在
App Store中为你的应用写评论的按钮

793
00:38:00,314 --> 00:38:03,317
这对于SKStoreReviewController
来说有一点不同之处

794
00:38:03,383 --> 00:38:05,352
你可以当它想成是完全相反的

795
00:38:05,586 --> 00:38:07,788
所以设置中的按钮更为合适

796
00:38:07,855 --> 00:38:10,357
或者是你应用中的某些嵌入内容

797
00:38:10,424 --> 00:38:12,793
因为它提供的是持续的体验

798
00:38:12,860 --> 00:38:14,628
可以保证会发生的操作

799
00:38:15,529 --> 00:38:17,531
然而 通过警告来使用并不合适

800
00:38:17,598 --> 00:38:20,601
我刚才提过
如果你要使用警告来提示用户进行评论

801
00:38:20,667 --> 00:38:23,670
请确保你已经开始用
SKStoreReviewController来替代了

802
00:38:26,540 --> 00:38:28,475
这就是你生成深度链接的方法

803
00:38:29,443 --> 00:38:31,578
这里你有应用页面的URL

804
00:38:31,645 --> 00:38:33,514
你可以从链接制作网站来在线获取

805
00:38:33,580 --> 00:38:34,848
如果你还不知道的话

806
00:38:35,282 --> 00:38:37,084
你可以把查询参数操作

807
00:38:37,150 --> 00:38:38,986
等于写评论
加到它的末尾

808
00:38:39,453 --> 00:38:41,388
这就意味着
在用户看到你的应用页面时

809
00:38:41,488 --> 00:38:43,257
他们会看到这个写评论表单

810
00:38:46,093 --> 00:38:48,195
有关评分和评论的更多信息

811
00:38:48,262 --> 00:38:49,696
还有我们之前介绍过的今年的一些改变

812
00:38:49,763 --> 00:38:52,432
我建议你们去看下
这里列出的开发者网站

813
00:38:52,766 --> 00:38:54,001
我们在那有更多关于这方面的信息

814
00:38:55,736 --> 00:38:57,771
我们今天介绍了几个新功能

815
00:38:57,838 --> 00:38:59,239
包括StoreKit新特性

816
00:38:59,506 --> 00:39:01,708
总结一下 我们介绍了

817
00:39:01,775 --> 00:39:03,810
在你的应用中实现程序内购买的方法

818
00:39:03,877 --> 00:39:06,246
也就是实现程序内购买的七步流程

819
00:39:06,580 --> 00:39:08,348
Ross上台给你们介绍了
一些最新的方法

820
00:39:08,415 --> 00:39:10,117
你们可以用这些方法来推广程序内购买

821
00:39:10,184 --> 00:39:11,285
直接在App Store中

822
00:39:11,351 --> 00:39:14,354
你现就可以在用户浏览App Store
应用时出售你的内容了

823
00:39:15,355 --> 00:39:16,924
我们介绍了新的
App Store设计

824
00:39:16,990 --> 00:39:19,293
新的评分和评论区域

825
00:39:19,393 --> 00:39:20,794
包括开发者的回复

826
00:39:21,028 --> 00:39:22,930
并且我们发现 使用了开发者回复后

827
00:39:22,996 --> 00:39:24,398
我们就会有很大的机会

828
00:39:24,464 --> 00:39:27,201
可以看到你的评分和评论有了改善

829
00:39:27,367 --> 00:39:29,536
同时还会获得更好的用户体验

830
00:39:31,538 --> 00:39:35,108
有关本场演讲的更多信息
我们把网址链接放到了这里

831
00:39:35,175 --> 00:39:36,577
这是演讲303

832
00:39:37,678 --> 00:39:40,280
本场演讲还有一些相关的演讲
特别是今天下午的

833
00:39:40,347 --> 00:39:42,049
“高级StoreKit”演讲

834
00:39:42,149 --> 00:39:44,651
我希望能在那场演讲上看到你们

835
00:39:44,718 --> 00:39:47,588
我们还介绍了关于
收据有效性验证的内容

836
00:39:47,654 --> 00:39:50,090
我们会深入介绍订阅管理

837
00:39:50,157 --> 00:39:52,559
跨服务器环境的持续性状态
诸如此类的东西

838
00:39:52,626 --> 00:39:56,230
所以请来参加一下那场演讲
我们还有更多的内容等着给你们介绍

839
00:39:56,563 --> 00:39:57,831
不过今天就是这些内容了

840
00:39:57,898 --> 00:39:59,132
感谢你们来参加本场演讲

841
00:39:59,199 --> 00:40:00,200
希望你们享用很棒的午餐

