1
00:00:22,990 --> 00:00:24,424
大家下午好

2
00:00:24,491 --> 00:00:27,094
欢迎参加本演讲 我是Kieran Senior

3
00:00:27,160 --> 00:00:29,463
是Apple的Xcode工程师

4
00:00:30,130 --> 00:00:31,865
很高兴与大家分享

5
00:00:31,932 --> 00:00:35,469
Xcode 9中的一些新源代码管理功能

6
00:00:35,869 --> 00:00:41,241
这是Xcode中的新功能

7
00:00:42,075 --> 00:00:45,179
今天 我们将讨论一些SCM概念

8
00:00:45,245 --> 00:00:47,314
以及它们在Xcode 9中的运用

9
00:00:47,981 --> 00:00:49,016
让我们开始

10
00:00:50,284 --> 00:00:52,286
今天的内容比较多

11
00:00:53,020 --> 00:00:55,556
我首先要做的是调出我的项目

12
00:00:56,089 --> 00:00:58,292
我复制这个项目

13
00:01:00,627 --> 00:01:04,565
接下来 我检查项目中的一些更改

14
00:01:04,932 --> 00:01:06,400
然后我查看一些提交

15
00:01:08,068 --> 00:01:10,370
我将完成一些功能开发工作

16
00:01:10,971 --> 00:01:12,239
然后我要创建一个分支

17
00:01:12,306 --> 00:01:15,175
确保我的更改不会影响团队其它成员

18
00:01:17,444 --> 00:01:20,013
之后发布应用到App Store

19
00:01:20,514 --> 00:01:24,117
我将创建一个标记
确保我知道我已完成这项工作

20
00:01:26,053 --> 00:01:28,622
我首先要做的是克隆项目

21
00:01:29,389 --> 00:01:31,825
你们也许熟悉这样的做法

22
00:01:33,594 --> 00:01:35,662
大多数情况下
你将会创建一个

23
00:01:35,729 --> 00:01:37,931
源代码的集中式副本

24
00:01:38,465 --> 00:01:40,734
它被称为远程存储库

25
00:01:41,401 --> 00:01:43,871
存储项目的所有历史

26
00:01:44,071 --> 00:01:46,173
和所有历史变更

27
00:01:47,975 --> 00:01:49,209
顾名思义

28
00:01:49,443 --> 00:01:52,746
克隆将会创建所有代码的副本

29
00:01:52,813 --> 00:01:56,183
然后就可以下载到你的MacBook
开始运行

30
00:01:56,917 --> 00:01:58,986
在Xcode 9中 这是如何实现的呢？

31
00:02:01,088 --> 00:02:03,790
结合GitHub帐户

32
00:02:03,991 --> 00:02:07,160
我们引入全新的克隆流程

33
00:02:08,395 --> 00:02:09,663
当你添加GitHub账户时

34
00:02:09,729 --> 00:02:11,965
将会获得个人存储库列表

35
00:02:12,266 --> 00:02:14,134
还会获得评星副本列表

36
00:02:14,468 --> 00:02:16,803
所有这些都属于你的公司

37
00:02:18,172 --> 00:02:21,108
很容易发现你想要查找的项目

38
00:02:21,508 --> 00:02:24,111
我可以即时查看我的所有存储库

39
00:02:26,747 --> 00:02:28,749
底部有一个详情窗格

40
00:02:28,815 --> 00:02:31,318
可以看到这些存储库的更多信息

41
00:02:31,518 --> 00:02:34,021
在这里 甚至可以对存储库评星级

42
00:02:34,087 --> 00:02:35,489
以后可以返回到这里

43
00:02:36,290 --> 00:02:38,225
这里有完整的搜索功能

44
00:02:38,559 --> 00:02:40,594
在最上方 使用地址栏

45
00:02:40,661 --> 00:02:43,630
输入搜索条件
在GitHub范围内搜索

46
00:02:43,964 --> 00:02:47,701
这样你就不必跳转到GitHub
以查找你想要的存储库

47
00:02:49,536 --> 00:02:52,105
我选这个TOTP应用

48
00:02:53,307 --> 00:02:57,744
我还可以克隆不属于GitHub的
任何其它存储库

49
00:02:57,978 --> 00:03:00,781
我只需要在地址栏中输入其URL

50
00:03:02,049 --> 00:03:04,651
在发现要找的内容之后
点击“克隆”按钮

51
00:03:05,652 --> 00:03:07,421
将会询问保存位置

52
00:03:08,455 --> 00:03:11,558
选择这个位置 点击“克隆”
将会进行克隆

53
00:03:11,625 --> 00:03:12,559
就是这么简单

54
00:03:14,862 --> 00:03:18,065
早上 在我喝咖啡时

55
00:03:18,765 --> 00:03:20,601
我想要访问我的存储库

56
00:03:20,667 --> 00:03:22,970
我并不想回到Xcode

57
00:03:23,036 --> 00:03:24,171
也不想进行搜索

58
00:03:24,838 --> 00:03:27,007
因此我使用GitHub

59
00:03:27,441 --> 00:03:31,211
可以从github.com克隆你的项目

60
00:03:31,812 --> 00:03:33,680
找到你的存储库

61
00:03:34,014 --> 00:03:35,516
点击“克隆”或“下载”按钮

62
00:03:35,949 --> 00:03:38,085
可以看到Xcode中有一个“打开”按钮

63
00:03:38,619 --> 00:03:40,587
非常简单 非常方便

64
00:03:45,726 --> 00:03:47,361
这就是Xcode 9中的克隆

65
00:03:48,729 --> 00:03:51,865
接下来
让我们来看最近进行的一些更改

66
00:03:52,733 --> 00:03:54,234
让我们来看提交

67
00:03:54,801 --> 00:03:56,737
如果你不熟悉提交
让我们来看这个

68
00:03:57,437 --> 00:04:00,440
这个星星表示一次提交

69
00:04:01,074 --> 00:04:03,010
它是我的项目在一个时间点

70
00:04:03,076 --> 00:04:05,879
发生的所有变更的快照

71
00:04:07,981 --> 00:04:09,650
在一天之内 你可能会多次

72
00:04:09,850 --> 00:04:12,386
提交变更到你的项目

73
00:04:13,520 --> 00:04:16,490
每次提交将添加新历史记录到你的项目

74
00:04:17,658 --> 00:04:21,261
这个历史记录
对于跟踪你的代码库具有很高的价值

75
00:04:21,327 --> 00:04:23,797
让你知道更改内容和原因

76
00:04:25,499 --> 00:04:27,734
现在 每次提交都会记录作者信息

77
00:04:28,635 --> 00:04:30,003
让你知道责任人员

78
00:04:30,737 --> 00:04:34,942
另外还有描述信息
让你知道为什么进行更改

79
00:04:35,843 --> 00:04:38,745
此外还有日期
显示更改发生时间

80
00:04:38,946 --> 00:04:40,214
最后还有一个SHA

81
00:04:40,280 --> 00:04:42,449
是提交操作的唯一标识符

82
00:04:43,250 --> 00:04:45,586
以后可能在需要时引用它

83
00:04:46,887 --> 00:04:50,557
结合这些信息
以及提交所捕获的变更内容

84
00:04:50,991 --> 00:04:53,493
共同构成项目的丰富历史记录

85
00:04:54,094 --> 00:04:55,896
在Xcode 9中这是如何完成的？

86
00:04:56,830 --> 00:04:58,065
在这里我们可以看到

87
00:05:00,634 --> 00:05:04,238
在Xcode 9中
有一个全新的源代码管理功能

88
00:05:04,304 --> 00:05:05,772
允许你查看项目的历史

89
00:05:06,573 --> 00:05:10,143
在左侧 我们引入一个全新导航器

90
00:05:10,477 --> 00:05:13,847
列出你的项目的工作副本

91
00:05:14,481 --> 00:05:16,450
当你选择一个工作副本时

92
00:05:16,517 --> 00:05:18,652
会调出这个新历史视图

93
00:05:19,386 --> 00:05:23,156
列出你的所有提交
我们一直在Xcode代码库中使用此功能

94
00:05:23,657 --> 00:05:27,728
这里有非常多的提交
可以滚动显示

95
00:05:27,794 --> 00:05:28,729
这非常不错

96
00:05:30,597 --> 00:05:34,201
对于这些条目
有一些详细信息 前面你已经见过

97
00:05:34,701 --> 00:05:38,105
作者、描述等…
这是非常有用的信息

98
00:05:38,505 --> 00:05:42,442
在关联你的GitHub账户之后
我们可以获取你的头像

99
00:05:42,976 --> 00:05:46,947
可以为姓名提供头像
或者为头像提供姓名

100
00:05:49,249 --> 00:05:51,485
我们来看一个具体的提交

101
00:05:51,652 --> 00:05:54,688
这是我的同事Eric最近进行的提交

102
00:05:55,389 --> 00:05:57,491
我并不非常确定我要找什么

103
00:05:58,926 --> 00:06:02,663
现在我们可以按令牌搜索

104
00:06:03,330 --> 00:06:06,300
在这里 指定我要搜索Eric

105
00:06:06,967 --> 00:06:08,502
这会列出大量的提交

106
00:06:08,569 --> 00:06:10,504
我缩小搜索范围

107
00:06:10,871 --> 00:06:13,941
让我们搜索昨天发生的提交
因为我知道它是最近发生的

108
00:06:14,441 --> 00:06:18,412
我使用这个范围条
搜索最近24小时的内容

109
00:06:18,712 --> 00:06:19,680
获得四个结果

110
00:06:19,746 --> 00:06:22,449
我比较懒 不想阅读提交信息

111
00:06:22,683 --> 00:06:26,186
我知道

112
00:06:27,521 --> 00:06:28,889
它可能与复制有关

113
00:06:28,956 --> 00:06:31,625
这会缩小范围

114
00:06:31,692 --> 00:06:33,060
这是我要找的

115
00:06:33,727 --> 00:06:35,796
这些搜索结果立即显示出来

116
00:06:35,863 --> 00:06:36,997
非常快速

117
00:06:37,497 --> 00:06:38,732
你们应该尝试一下

118
00:06:40,267 --> 00:06:42,336
这就是Xcode 9中的提交

119
00:06:45,339 --> 00:06:48,108
现在 我已经克隆项目
并且检查提交

120
00:06:48,175 --> 00:06:51,545
现在我做的事情有一点风险

121
00:06:52,145 --> 00:06:56,049
为此我创建一个分支
这将把我的更改

122
00:06:56,383 --> 00:06:58,752
与团队其他人的工作隔离开来
让他们不会受到影响

123
00:07:00,354 --> 00:07:03,123
返回刚才的提交点

124
00:07:03,190 --> 00:07:05,626
我的主分支完好无损

125
00:07:05,926 --> 00:07:09,363
一切都很稳定
我的机器人通过设备测试

126
00:07:09,796 --> 00:07:11,698
我从那里开始创建一个分支

127
00:07:12,399 --> 00:07:15,802
进入新导航器
点击“从主分支创建新分支…”

128
00:07:16,203 --> 00:07:18,205
Xcode将会创建分支

129
00:07:19,573 --> 00:07:22,242
现在 我的新分支将会放入列表最上方

130
00:07:22,409 --> 00:07:23,544
标记为当前分支

131
00:07:23,877 --> 00:07:25,612
让我知道我正在处理的分支是哪一个

132
00:07:25,679 --> 00:07:26,747
很容易看到

133
00:07:27,648 --> 00:07:30,684
在这个图表中可以看到
历史已经发生分叉

134
00:07:30,751 --> 00:07:33,921
这意味着我的提交
已经不是主分支的组成部分

135
00:07:34,321 --> 00:07:36,723
我的变更不会影响我的团队

136
00:07:38,025 --> 00:07:39,927
他们也会进行提交

137
00:07:40,928 --> 00:07:43,130
但是不会影响我

138
00:07:43,197 --> 00:07:45,732
在我进行变更时
这不会影响他们

139
00:07:45,999 --> 00:07:48,802
当进行含有风险的工作时
可以选择创建分支

140
00:07:49,970 --> 00:07:52,105
我的测试在功能分支上得到通过

141
00:07:52,172 --> 00:07:55,375
然后我想将这些变更
放入主分支

142
00:07:55,976 --> 00:07:59,213
为此 我进入新源代码管理导航器

143
00:08:00,047 --> 00:08:03,517
我点击“合并”按钮
我的变更被载入

144
00:08:05,686 --> 00:08:08,922
这些变更没有被发布到我的服务

145
00:08:08,989 --> 00:08:11,124
团队的其它人员不能看到它们

146
00:08:12,392 --> 00:08:15,462
那么 这种功能是如何加入到
Xcode的新导航器之中的呢？

147
00:08:15,829 --> 00:08:18,866
让我们回到前面的云端演示

148
00:08:19,666 --> 00:08:22,302
当我和其他人进行更改时

149
00:08:22,369 --> 00:08:24,104
我们需要同步这些更改

150
00:08:24,638 --> 00:08:28,642
为此 你可以从远程存储库中
取出更改内容

151
00:08:29,710 --> 00:08:32,513
在我进行更改之后 再重新推入

152
00:08:33,647 --> 00:08:36,350
进行团队合作时 这尤其有用

153
00:08:36,650 --> 00:08:38,952
因为你可以进行推入和取出

154
00:08:39,019 --> 00:08:41,087
确保获得其他所有人的更改

155
00:08:45,859 --> 00:08:50,697
进行合并之后
我需要推入这些更改

156
00:08:50,764 --> 00:08:52,566
有三个提交版本需要推入

157
00:08:53,133 --> 00:08:56,370
Xcode将自动在新导航器中
显示这些版本

158
00:08:56,436 --> 00:08:58,172
因为我知道我的团队不能看到它们

159
00:08:58,839 --> 00:09:03,577
在Xcode 9 我们从你的远程存储库中
取出变更内容

160
00:09:03,944 --> 00:09:07,247
这让你知道你的团队
是否已经发生更改

161
00:09:07,314 --> 00:09:08,615
以及你是否需要取出这些更改内容

162
00:09:08,682 --> 00:09:10,751
你可以看到
利用这些上下箭头

163
00:09:10,951 --> 00:09:14,054
可以知道
在你推入它们的更改之前

164
00:09:14,121 --> 00:09:15,856
你不能进行推入

165
00:09:17,858 --> 00:09:20,360
这就是Xcode 9中的分支

166
00:09:23,063 --> 00:09:25,766
现在 我准备发布应用beta版本

167
00:09:26,033 --> 00:09:28,802
测试已经通过
我将所有的内容合并到主版本之中

168
00:09:29,636 --> 00:09:31,905
让我们来看这些圆点
前面我们已经见过

169
00:09:32,873 --> 00:09:35,776
在项目特定的历史时间点

170
00:09:36,109 --> 00:09:37,311
你想要创建一个标记

171
00:09:37,377 --> 00:09:41,381
让你知道在此时间点之前
进行所有的变更

172
00:09:41,849 --> 00:09:43,150
当你将应用发布到App Store时

173
00:09:43,217 --> 00:09:45,319
这样做是明智的

174
00:09:45,385 --> 00:09:47,721
可以帮助你跟踪所进行的变更

175
00:09:49,656 --> 00:09:52,726
让我们继续
我创建Beta 4标记

176
00:09:53,160 --> 00:09:54,661
当你发布更多的版本到App Store时

177
00:09:54,728 --> 00:09:57,631
需要继续创建这些标记

178
00:10:00,567 --> 00:10:04,037
在Xcode 9中
我们有完整的标记支持

179
00:10:04,605 --> 00:10:06,440
你可以转到这个新历史视图

180
00:10:07,407 --> 00:10:09,843
点击一个提交
选择“标记”

181
00:10:10,244 --> 00:10:12,312
你将看到这个窗格
用于创建标记

182
00:10:13,547 --> 00:10:18,385
在标记命名规则的基础上
使用反斜杠

183
00:10:18,619 --> 00:10:23,423
Xcode将自动分组你的标记
更轻松地组织它们

184
00:10:24,024 --> 00:10:25,893
让查找变得更加轻松

185
00:10:25,959 --> 00:10:28,462
在本例中
我们将创建一个beta版本分组

186
00:10:29,096 --> 00:10:31,965
当你创建标记时
它将会立即

187
00:10:32,032 --> 00:10:35,102
出现在新历史视图之中

188
00:10:36,603 --> 00:10:40,474
如果我们打开Tags文件夹
可以看到这些标记

189
00:10:41,241 --> 00:10:45,512
选择Beta 4标记
我只能看到此标记的历史信息

190
00:10:46,280 --> 00:10:49,516
你可能会想
查看标记的历史信息有什么用呢？

191
00:10:49,883 --> 00:10:51,785
这些信息让你准确地发现

192
00:10:51,852 --> 00:10:56,390
特定应用版本中引入哪些变更和功能

193
00:10:56,657 --> 00:10:59,526
使用新搜索和过滤功能

194
00:10:59,893 --> 00:11:00,994
可以更轻松地找到它们

195
00:11:02,062 --> 00:11:06,300
这些信息告诉我Beta 3有一个漏洞

196
00:11:06,967 --> 00:11:09,736
我转到新导航器
选择Beta 3标记

197
00:11:10,504 --> 00:11:14,308
在这里看到
在上次提交之后 仅进行两项变更

198
00:11:14,708 --> 00:11:16,310
有一个是Eric的更改 另一个是我的

199
00:11:17,177 --> 00:11:20,881
在最上方 看上去很抽象

200
00:11:20,948 --> 00:11:22,883
我不确定
它是不是作者信息

201
00:11:22,950 --> 00:11:25,385
这里它们不再是头像

202
00:11:25,452 --> 00:11:27,087
而成为面部照片

203
00:11:29,189 --> 00:11:34,628
我选择这个家伙 双击他
然后看到这个新视图

204
00:11:35,462 --> 00:11:39,233
你可能在以前版本的Xcode中
见过这个视图

205
00:11:39,566 --> 00:11:41,134
它用于显示表格

206
00:11:41,768 --> 00:11:44,204
这时的问题是
这会阻止你的工作流程

207
00:11:44,438 --> 00:11:47,875
利用这个视图
可以打开一个选项卡 继续工作

208
00:11:48,542 --> 00:11:52,212
这里提供丰富的协助支持
Eric后面将会为我们展示这些支持

209
00:11:52,446 --> 00:11:56,016
可以轻松地查看代码中的更改

210
00:11:57,217 --> 00:11:59,553
这里我们可以看到
这里是我编写的强制尝试

211
00:12:00,387 --> 00:12:02,122
这会造成应用崩溃

212
00:12:03,223 --> 00:12:06,193
新编辑器非常好用
这体现在多个方面

213
00:12:06,260 --> 00:12:08,996
例如 它支持全面的跳转功能

214
00:12:09,263 --> 00:12:11,999
可以非常快速地浏览你的文件

215
00:12:12,266 --> 00:12:15,602
可以收起文件列表
腾出更多屏幕空间

216
00:12:15,936 --> 00:12:17,871
在底部有一个详情窗格

217
00:12:17,938 --> 00:12:19,740
让你知道 你在查看
你想要的提交

218
00:12:21,742 --> 00:12:22,910
这就是Xcode 9中的

219
00:12:22,976 --> 00:12:25,579
全新标记功能

220
00:12:27,014 --> 00:12:29,616
结合新的克隆功能

221
00:12:30,083 --> 00:12:31,985
新源代码管理导航器

222
00:12:32,419 --> 00:12:35,822
和新的分支流程和标记

223
00:12:36,190 --> 00:12:38,525
源代码管理功能和Xcode 9

224
00:12:38,759 --> 00:12:40,394
使工作变得更加轻松

225
00:12:41,261 --> 00:12:45,599
现在我想请Eric Dudiak克上台
为大家展示这些新功能

226
00:12:52,406 --> 00:12:53,307
谢谢Kieran

227
00:12:54,241 --> 00:12:55,142
正如他所说的那样

228
00:12:55,375 --> 00:12:58,645
我会为大家介绍Xcode 9
和源代码管理新功能

229
00:12:59,913 --> 00:13:03,317
我已经设置计算机
而且安装了Xcode 9

230
00:13:03,851 --> 00:13:05,586
但是我还没有任何项目

231
00:13:06,253 --> 00:13:07,421
我想要从GitHub中克隆

232
00:13:07,487 --> 00:13:11,325
为此 我需要登录Github账户

233
00:13:12,693 --> 00:13:16,563
我转到Xcode首选项设置
进入“账户”窗格

234
00:13:17,698 --> 00:13:19,433
可以看到 我并没有账户

235
00:13:20,167 --> 00:13:23,003
点击左下角的加号

236
00:13:24,671 --> 00:13:27,074
看到一个选项
用于添加Xcode支持的任何账户

237
00:13:27,140 --> 00:13:29,676
例如我的Apple ID
用于配置和签名

238
00:13:29,877 --> 00:13:31,979
Xcode Server账户用于持续性集成

239
00:13:32,379 --> 00:13:33,747
GitHub账户用于源代码管理

240
00:13:35,215 --> 00:13:38,552
我想指出的是
我们还支持GitHub Enterprise

241
00:13:38,619 --> 00:13:41,255
如果你的公司
使用GitHub Enterprise服务器

242
00:13:41,588 --> 00:13:43,924
这里展示的所有配合Github
使用的功能

243
00:13:44,024 --> 00:13:45,792
也可以配合贵公司的
GitHub Enterprise

244
00:13:45,859 --> 00:13:47,160
服务器使用

245
00:13:48,295 --> 00:13:50,731
但是今天
我只会使用github.com

246
00:13:53,100 --> 00:13:54,168
我将会登录…

247
00:13:57,738 --> 00:13:59,306
复制我的密码

248
00:14:00,307 --> 00:14:01,875
将它输入“密码”字段

249
00:14:02,609 --> 00:14:04,311
使用二元身份验证

250
00:14:04,711 --> 00:14:07,648
Xcode 9支持
GitHub二元身份验证

251
00:14:07,714 --> 00:14:09,516
这可以保证账户安全

252
00:14:09,650 --> 00:14:12,186
确保你仅访问自己的源代码

253
00:14:18,892 --> 00:14:22,129
好极了 我登录Xcode
或者在Xcode中登录GitHub

254
00:14:22,796 --> 00:14:26,567
我看到 Xcode
已经自动检测到我的SSH密钥

255
00:14:27,534 --> 00:14:31,271
我可以使用HTTPS
或SSH进行克隆

256
00:14:32,439 --> 00:14:34,141
我设置为HTTPS

257
00:14:34,208 --> 00:14:37,678
在进行克隆之前
进入源代码管理首选项

258
00:14:37,744 --> 00:14:40,280
确保按照我的想法完成所有设置

259
00:14:42,249 --> 00:14:45,586
在这里 如果我转到“源代码管理”
可以看到已经启用源代码管理

260
00:14:45,652 --> 00:14:47,654
如果我转到“Get”设置

261
00:14:48,155 --> 00:14:51,625
可以看到 在Xcode 9中
你可以配置你的“Get Author”

262
00:14:51,692 --> 00:14:54,194
且可在Xcode中配置全局忽略文件

263
00:14:55,562 --> 00:14:58,632
这样 你获得作者信息
你的用户名和电子邮件

264
00:14:58,866 --> 00:15:01,702
当你进行提交时
用户能够看到这些信息

265
00:15:01,802 --> 00:15:04,371
当用户发现漏洞时
知道应该联系谁

266
00:15:06,039 --> 00:15:07,307
这里的设置完成了

267
00:15:07,708 --> 00:15:09,309
让我们转到欢迎窗口

268
00:15:09,776 --> 00:15:11,812
转到前面我们见过的新克隆窗口

269
00:15:11,879 --> 00:15:15,282
我在欢迎窗口中
直接克隆现有的项目

270
00:15:16,250 --> 00:15:19,820
很快就会调出一个项目列表

271
00:15:20,521 --> 00:15:21,421
这是我在Github上

272
00:15:21,488 --> 00:15:23,690
拥有和维护的所有项目

273
00:15:24,091 --> 00:15:26,660
以及已经在Github上
评星级的所有项目

274
00:15:26,727 --> 00:15:28,695
表明我可能对这项目感兴趣

275
00:15:29,162 --> 00:15:29,997
此外

276
00:15:30,063 --> 00:15:34,434
如果我是任何组织的成员
而这个组织在GitHub上拥有存储库

277
00:15:34,501 --> 00:15:36,870
比如这里的Apple组织

278
00:15:37,137 --> 00:15:38,872
我也能看到这些存储库

279
00:15:40,507 --> 00:15:43,210
如果这些不是我想要的项目
我可以进行搜索

280
00:15:43,277 --> 00:15:46,914
刚才基Kieran诉我说
应该了解

281
00:15:47,447 --> 00:15:50,484
ResearchKit是Apple的开源框架

282
00:15:50,551 --> 00:15:53,620
用于创建医学检索应用
现在已经在GitHub上提供

283
00:15:53,921 --> 00:15:54,955
我进行搜索…

284
00:15:56,190 --> 00:15:57,124
Research Kit

285
00:15:57,891 --> 00:16:00,260
我将它输入搜索字段

286
00:16:00,761 --> 00:16:02,529
将会返回Research Kit搜索结果

287
00:16:03,263 --> 00:16:05,332
我不确定
这是否是我要找的项目

288
00:16:05,399 --> 00:16:07,935
在详情视图中 可以看到更多信息

289
00:16:08,268 --> 00:16:09,770
如果放大这里 我们看到

290
00:16:10,237 --> 00:16:13,674
完整名称 如果点击
将会转到GitHub页面

291
00:16:14,541 --> 00:16:17,344
通常我所需要的内容都在这里
我看到描述信息

292
00:16:17,411 --> 00:16:20,814
语言 改动这个项目的人员数量

293
00:16:21,114 --> 00:16:25,118
给这个项目评星级人数
以及项目自述文件

294
00:16:25,752 --> 00:16:26,887
如果我点击自述文件

295
00:16:28,622 --> 00:16:31,391
将会获得项目在GitHub上
发布的自述文件

296
00:16:31,458 --> 00:16:35,395
自述评论含有更多的项目相关信息

297
00:16:35,462 --> 00:16:38,565
介绍如何使用程序
甚至可能含有一些示例代码

298
00:16:38,832 --> 00:16:42,002
其中一个好处是
许多内容是使用markdown编写的

299
00:16:42,069 --> 00:16:44,471
当你克隆项目时
它们在我们的源代码编辑器中

300
00:16:44,538 --> 00:16:48,242
在Xcode
的新增强markdown支持下完美地工作

301
00:16:50,177 --> 00:16:52,779
这是我喜欢的功能
因此我给它一颗星

302
00:16:53,480 --> 00:16:55,816
在Xcode中
当我点击星星按钮时

303
00:16:55,883 --> 00:16:59,386
我们看星星数量增加
因为我现在给这个存储库打一颗星

304
00:17:01,121 --> 00:17:04,156
如果查看我的搜索结果

305
00:17:04,525 --> 00:17:07,261
在默认视图中
可以看到Research Kit

306
00:17:07,493 --> 00:17:10,664
我登录任何计算机
都可以轻松地找到Research Kit

307
00:17:10,731 --> 00:17:12,232
以后我们会讨论这个功能

308
00:17:13,700 --> 00:17:15,669
现在让我们来看TOTP程序

309
00:17:15,736 --> 00:17:18,539
TOTP是一次性密码生成器

310
00:17:18,605 --> 00:17:21,340
刚才我登录GitHub时
就使用了这个应用

311
00:17:22,843 --> 00:17:26,880
我克隆它 将它到保存到
“我的文档”文件夹

312
00:17:29,216 --> 00:17:32,719
在Xcode 9中
从Github复制项目非常简单

313
00:17:32,786 --> 00:17:33,854
选择项目之后

314
00:17:33,921 --> 00:17:36,490
并不会有太多的提示或选择

315
00:17:37,858 --> 00:17:39,660
在开始克隆时

316
00:17:39,860 --> 00:17:42,596
Xcode会打开项目
显示一个非常熟悉的视图

317
00:17:42,729 --> 00:17:46,567
你看到项目导航器
和编辑器区域

318
00:17:46,633 --> 00:17:50,370
在左侧
也就是项目导航器旁边

319
00:17:50,437 --> 00:17:52,239
我们看新的源代码管理导航器

320
00:17:53,507 --> 00:17:56,677
它会自动载入项目的每个工作副本

321
00:17:56,743 --> 00:17:59,279
在本例中 我只有

322
00:17:59,346 --> 00:18:02,182
TOTP工作副本

323
00:18:02,683 --> 00:18:04,852
然后我看到
当我从Github Master克隆时

324
00:18:04,918 --> 00:18:06,787
自动克隆的一个分支

325
00:18:08,021 --> 00:18:11,291
如果我选择主分支
会立即获得项目的完整历史

326
00:18:12,092 --> 00:18:14,127
这里我们看到项目的所有提交

327
00:18:14,194 --> 00:18:15,596
以及描述信息

328
00:18:17,431 --> 00:18:18,398
刚才

329
00:18:18,465 --> 00:18:20,901
Kieran讲到有一个问题
看上去像是漏洞

330
00:18:20,968 --> 00:18:24,238
我们应该解决这个问题
然后继续

331
00:18:25,472 --> 00:18:28,408
我需要找到它
我发现它是Kieran进行的提交

332
00:18:29,943 --> 00:18:31,578
因为我看到作者是Kieran

333
00:18:32,446 --> 00:18:34,147
这里是Kieran进行的所有提交

334
00:18:34,848 --> 00:18:38,418
这个问题好像与生成器有关

335
00:18:38,485 --> 00:18:41,588
消息提示说是

336
00:18:42,155 --> 00:18:43,957
生成器

337
00:18:44,491 --> 00:18:45,626
找到了

338
00:18:47,194 --> 00:18:50,631
我看到关于此提交的更多信息

339
00:18:50,998 --> 00:18:52,733
除了新的源代码管理导航器之外

340
00:18:52,799 --> 00:18:54,434
还有新的源代码管理历史视图

341
00:18:54,668 --> 00:18:56,737
另外还有一个新的源代码管理检查器

342
00:18:57,371 --> 00:18:59,273
在这个检查器中
我选择一个提交

343
00:18:59,339 --> 00:19:01,708
获得这个提交的附加信息

344
00:19:02,242 --> 00:19:03,744
比如完整SHA

345
00:19:04,344 --> 00:19:06,246
准确的提交日期和时间

346
00:19:06,847 --> 00:19:07,748
作者

347
00:19:08,448 --> 00:19:10,417
以及完整提交信息

348
00:19:10,484 --> 00:19:13,587
可以看到
此提交所修改的文件

349
00:19:13,654 --> 00:19:16,723
如果我想要查看任何文件更改

350
00:19:16,790 --> 00:19:19,326
可以点击这个箭头
直接找到它们

351
00:19:20,527 --> 00:19:23,063
Kieran前面说过
还有更好的方法

352
00:19:23,130 --> 00:19:25,666
只需要点击这个箭头
就可以找到更改内容

353
00:19:25,732 --> 00:19:28,068
这需要使用
Xcode的协助编辑器

354
00:19:28,569 --> 00:19:31,705
你们很多人已经熟悉
Xcode的协助编辑器

355
00:19:31,939 --> 00:19:33,740
但是大多数人都发现它位于右侧

356
00:19:33,807 --> 00:19:37,811
我想留出更多的空间
以便于查看更改内容

357
00:19:38,045 --> 00:19:40,647
如果点击并且按住协助编辑器按钮

358
00:19:40,948 --> 00:19:43,116
可以将协助编辑器拖放到底部

359
00:19:44,151 --> 00:19:46,053
编辑器打开时

360
00:19:46,119 --> 00:19:49,189
会自动显示我选定的提交的详细信息

361
00:19:50,023 --> 00:19:52,793
这很不错 我可以直接
找到Kieran进行的更改

362
00:19:52,860 --> 00:19:55,929
我们可以解决问题

363
00:19:56,997 --> 00:19:58,265
我已经向你们展示

364
00:19:58,332 --> 00:20:00,300
即使我想查看其它提交

365
00:20:00,968 --> 00:20:02,469
也可以调出它们 只需点击

366
00:20:02,536 --> 00:20:05,305
就可以获得所有文件
和提交中进行的更改

367
00:20:06,206 --> 00:20:10,143
我们关闭这个协助编辑器

368
00:20:11,078 --> 00:20:14,681
转到应用委托
这里存在错误

369
00:20:15,215 --> 00:20:16,049
在这里

370
00:20:16,416 --> 00:20:19,753
修复这个错误

371
00:20:21,522 --> 00:20:24,691
这段代码中的漏洞消除了

372
00:20:26,593 --> 00:20:27,794
通常情况下

373
00:20:27,861 --> 00:20:30,898
我会将修改内容提交到主分支

374
00:20:30,964 --> 00:20:32,165
但我们应该使用这些变更

375
00:20:32,232 --> 00:20:35,335
进行更多的测试
以确保修复漏洞

376
00:20:35,402 --> 00:20:36,637
因为我需要确保这一点

377
00:20:37,671 --> 00:20:39,706
如果我返回源代码管理导航器

378
00:20:39,773 --> 00:20:42,342
我选择主分支 控制点击它

379
00:20:43,944 --> 00:20:46,013
可以从主分支创建一个新分支

380
00:20:48,248 --> 00:20:51,952
我将这个分支命名为fix

381
00:20:53,453 --> 00:20:56,790
Xcode将自动检查它

382
00:20:56,990 --> 00:21:00,694
现在 我的所有未提交更改
位于fix分支的最上方

383
00:21:02,663 --> 00:21:04,965
我将会提交它们

384
00:21:05,032 --> 00:21:07,067
因此我转到源代码管理界面
选择“提交”

385
00:21:08,602 --> 00:21:10,571
确保我的更改是正确的

386
00:21:10,838 --> 00:21:14,675
我们看到 已经修复崩溃问题

387
00:21:15,909 --> 00:21:19,580
很好 这次提交
也会被载入我的项目历史

388
00:21:20,147 --> 00:21:22,382
如果在源代码管理导航器中

389
00:21:22,449 --> 00:21:24,551
转到这个分支 可以看到这一点

390
00:21:24,852 --> 00:21:27,287
这里我们看到
我今天创建的全新分支

391
00:21:28,655 --> 00:21:30,290
我发现一种经常出现的情况是

392
00:21:30,357 --> 00:21:32,192
当我创建分支
并且进行提交时

393
00:21:32,259 --> 00:21:34,962
我会忘记哪些提交
位于哪些分支

394
00:21:35,028 --> 00:21:37,631
很容易丢失它们的跟踪记录
而且很不容易弄清楚

395
00:21:37,698 --> 00:21:40,300
你所进行的提交
是否位于正确的分支之中

396
00:21:40,901 --> 00:21:41,735
现在Xcode 9

397
00:21:41,802 --> 00:21:43,303
有一个很好的方法来解决这个问题

398
00:21:43,770 --> 00:21:45,339
如果我选择我的提交

399
00:21:45,873 --> 00:21:49,510
放大检查器的这个位置
我们看到有一个分支区域

400
00:21:50,277 --> 00:21:53,881
为这个提交所列出的
唯一分支是fix

401
00:21:54,281 --> 00:21:56,917
因此这个提交位于fix分支之中

402
00:21:58,118 --> 00:22:00,187
如果我返回查看以前的提交

403
00:22:01,255 --> 00:22:05,092
如果我查看这个提交

404
00:22:05,158 --> 00:22:08,795
它确实位于fix分支和主分支之中

405
00:22:08,862 --> 00:22:11,098
这样就很容易发现你的分支位于哪里

406
00:22:11,164 --> 00:22:13,500
而且准确地知道你的发行版本

407
00:22:15,169 --> 00:22:17,271
通常我创建一个Xcode Server机器人

408
00:22:17,337 --> 00:22:19,606
用来集成这些内容
进行所有测试和相关工作

409
00:22:19,673 --> 00:22:22,976
但是这里有很多的朋友

410
00:22:23,043 --> 00:22:27,414
想要检查我的代码修改
因此我将它合并到主分支

411
00:22:28,115 --> 00:22:31,652
这样如果我在导航器中控制点击主分支

412
00:22:31,919 --> 00:22:34,555
我可以将fix分支合并到主分支

413
00:22:36,223 --> 00:22:38,225
只需要一步 就已经将fix分支

414
00:22:38,292 --> 00:22:40,494
合并到主分支之中
并切换到主分支

415
00:22:41,261 --> 00:22:43,297
在源代码管理导航器
非常容易完成

416
00:22:44,097 --> 00:22:46,066
当然 历史视图会更新

417
00:22:51,038 --> 00:22:54,908
这个视图会更新
我可以看到

418
00:22:54,975 --> 00:22:56,977
我的fix分支已经位于主分支上

419
00:22:57,044 --> 00:22:58,712
如果我放大这里

420
00:22:59,079 --> 00:23:01,982
如果我需要确认
这些更改已经被转移到主分支

421
00:23:02,282 --> 00:23:03,650
将会列出主分支

422
00:23:05,419 --> 00:23:08,222
这个崩溃漏洞影响很多用户

423
00:23:08,288 --> 00:23:10,390
因此我想要快速发布这个应用版本

424
00:23:10,490 --> 00:23:11,825
因此我对它进行标记

425
00:23:12,259 --> 00:23:14,094
如果我控制点击一个提交

426
00:23:14,161 --> 00:23:17,164
可以看到 我可以在一次提交中
进行很多项操作

427
00:23:17,698 --> 00:23:20,100
如同你在Xcode 9中的分支上
进行的操作一样

428
00:23:20,167 --> 00:23:22,236
你可以对提交执行操作

429
00:23:22,302 --> 00:23:25,539
例如进行检查
设置分支支持

430
00:23:26,807 --> 00:23:29,109
我想要标记这个提交

431
00:23:29,176 --> 00:23:31,945
以确定将哪个版本作为V1.2进行分布

432
00:23:33,547 --> 00:23:34,815
我选择标记

433
00:23:35,148 --> 00:23:40,153
选择版本v1.2

434
00:23:41,388 --> 00:23:42,356
创建标记

435
00:23:43,190 --> 00:23:44,858
完成这些操作之后

436
00:23:44,925 --> 00:23:47,427
标记被自动添加给提交

437
00:23:48,161 --> 00:23:52,766
可以在源代码管理导航器的
标记文件夹中看到这一点

438
00:23:53,233 --> 00:23:54,368
因为所有标记使用斜杠和

439
00:23:54,434 --> 00:23:57,171
名称作为前缀

440
00:23:57,237 --> 00:24:00,307
我们看到Xcode在导航器中

441
00:24:00,474 --> 00:24:03,644
为我创建一个自动层次结构
让我很容易组织我的项目

442
00:24:04,912 --> 00:24:06,480
我们将应用发布到App Store

443
00:24:06,547 --> 00:24:09,416
崩溃问题导致我们仅获得一星评价
此次发布将会改变这种局面

444
00:24:10,184 --> 00:24:13,453
刚才Kieran在台上时
我想到一个很好的主意

445
00:24:13,520 --> 00:24:16,056
我想要创建一个新项目

446
00:24:18,225 --> 00:24:19,593
我们打开Xcode

447
00:24:19,927 --> 00:24:23,230
开发一个新Xcode项目

448
00:24:23,864 --> 00:24:25,265
我刚才的想法很有趣

449
00:24:25,332 --> 00:24:29,236
我们为iOS制作一些SCM便利贴

450
00:24:29,469 --> 00:24:31,238
我将会创建一个便利贴应用

451
00:24:31,772 --> 00:24:35,576
选择这个项目
其名称是SCM Stickers

452
00:24:37,411 --> 00:24:39,780
每次在Xcode中创建新项目时

453
00:24:39,847 --> 00:24:42,783
Xcode始终提供选项

454
00:24:42,850 --> 00:24:45,586
用于创建git存储库

455
00:24:46,053 --> 00:24:49,022
这是我个人的做法
即使这只是一个临时项目

456
00:24:49,089 --> 00:24:50,924
或者进行代码测试
因为你并不知道

457
00:24:50,991 --> 00:24:54,895
你需要处理这些工作多长时间
利用这种方法

458
00:24:54,962 --> 00:24:57,764
从项目开始起
会始终保存项目历史

459
00:24:59,099 --> 00:25:01,468
我们在Mac计算机上
创建这个git存储库

460
00:25:02,936 --> 00:25:04,371
我现已创建便利贴程序项目

461
00:25:05,305 --> 00:25:07,441
如果我进入源代码管理导航器

462
00:25:07,975 --> 00:25:11,712
会看到Xcode自动创建的工作副本

463
00:25:12,112 --> 00:25:14,314
它有一个当前分支

464
00:25:15,682 --> 00:25:19,152
而且具有初始提交
此提交实质上

465
00:25:19,786 --> 00:25:21,421
Xcode的所有模板内容

466
00:25:22,222 --> 00:25:24,691
现在我把便利贴放进应用

467
00:25:25,659 --> 00:25:29,263
转到项目导航器
选择便利贴文件夹

468
00:25:31,098 --> 00:25:33,400
这里有多个便利贴

469
00:25:33,700 --> 00:25:35,369
这里有一个标牌图标

470
00:25:36,136 --> 00:25:39,039
还有几个表情从保险箱后面伸出来

471
00:25:39,206 --> 00:25:40,574
这是我的SCM项目

472
00:25:42,509 --> 00:25:46,947
让我们把所有这些内容放入Sticker包

473
00:25:47,781 --> 00:25:49,383
进行提交

474
00:25:51,151 --> 00:25:52,886
我提交所有Sticker内容

475
00:25:57,090 --> 00:25:59,359
现在它们全部成为历史中的一部分

476
00:26:01,061 --> 00:26:02,996
如果查看我的分支
可以看到两个提交

477
00:26:04,264 --> 00:26:06,967
如果打开远程文件夹
并不会看到远程存储库

478
00:26:07,367 --> 00:26:10,137
事实上 此项目仅存在于本地

479
00:26:10,204 --> 00:26:12,206
此时Git跟踪我的项目历史

480
00:26:12,272 --> 00:26:14,241
如果我要想要在其它计算机上查看

481
00:26:14,541 --> 00:26:15,909
或者与其他人分享

482
00:26:16,877 --> 00:26:20,113
或者丢失此计算机
这是唯一的副本

483
00:26:20,180 --> 00:26:22,716
因此我需要确保将它放入其它位置

484
00:26:22,783 --> 00:26:25,152
一个安全、容易与其它人分享的位置

485
00:26:25,519 --> 00:26:26,920
为此我将再次使用GitHub.com

486
00:26:27,855 --> 00:26:29,923
如果我控制点击远程文件夹

487
00:26:30,390 --> 00:26:34,161
会看到一个选项
指示我可以在GitHub上

488
00:26:34,228 --> 00:26:35,796
创建SCM便利贴应用远程存储库

489
00:26:36,763 --> 00:26:39,867
如果我选择它
将会打开一个新表格

490
00:26:39,933 --> 00:26:43,170
询问关于在Github上
创建项目副本的所有相关信息

491
00:26:43,770 --> 00:26:46,540
我选择想要使用的账户
我将使用自己的账户

492
00:26:47,107 --> 00:26:48,675
可以选择所有者

493
00:26:48,742 --> 00:26:50,644
如果你是组织成员

494
00:26:50,711 --> 00:26:53,313
而且有权限为你的组织创建存储库

495
00:26:53,380 --> 00:26:56,817
就可以为你的组织创建存储库

496
00:26:57,784 --> 00:27:01,255
我为项目选择一个名称

497
00:27:01,321 --> 00:27:03,357
默认选择项目名称SCM Stickers

498
00:27:03,891 --> 00:27:08,529
可以看到名称和存储库名称

499
00:27:08,595 --> 00:27:11,765
组合成为URL
从而可以在互联网上访问

500
00:27:12,566 --> 00:27:14,401
然后输入描述信息

501
00:27:17,571 --> 00:27:20,274
前面我说过可以在互联网上访问

502
00:27:20,340 --> 00:27:24,645
但实际上我可以把它设为私有资产
只有我才能看到

503
00:27:24,711 --> 00:27:26,480
因为我还没有准备进行全球发布

504
00:27:27,614 --> 00:27:29,216
然后我选择“创建”

505
00:27:29,383 --> 00:27:32,119
将在GitHub上创建
并放入我的账户

506
00:27:32,519 --> 00:27:35,022
所有的变更都被推入服务器

507
00:27:36,056 --> 00:27:38,825
我忘记一张便利贴
那是我最喜欢的一张

508
00:27:39,126 --> 00:27:42,796
因此我回到项目导航器
选择便利贴

509
00:27:43,664 --> 00:27:47,367
这只猫是GitHub的标志

510
00:27:47,601 --> 00:27:50,337
在这里我将会

511
00:27:50,404 --> 00:27:51,805
选择这只猫

512
00:27:52,306 --> 00:27:54,141
将它作为便利贴

513
00:27:55,275 --> 00:27:58,445
然后我进行提交

514
00:27:58,879 --> 00:28:00,914
确保将这个猫图案便利贴

515
00:28:02,316 --> 00:28:03,317
也提交到GitHub

516
00:28:03,917 --> 00:28:07,888
现在我有了一个远程存储库
因此可以将所有更改内容

517
00:28:07,955 --> 00:28:10,057
推入到GitHub上
那里很安全和可靠

518
00:28:10,123 --> 00:28:14,027
这可以帮助我在以后省去大量的工作

519
00:28:14,094 --> 00:28:17,831
这样我就有了一个远程分支

520
00:28:18,465 --> 00:28:20,834
因此我将提交并推入这些文件

521
00:28:21,935 --> 00:28:24,938
现在这个标贴将上传到GitHub

522
00:28:26,573 --> 00:28:29,710
如果再次进入源代码管理导航器

523
00:28:29,776 --> 00:28:31,478
查看我的主分支

524
00:28:31,545 --> 00:28:35,315
现在它有三个提交
我看到远程原始主分支

525
00:28:35,382 --> 00:28:36,817
也位于相同的地方

526
00:28:37,618 --> 00:28:40,954
如果我想要进一步
确保已经提交到GitHub

527
00:28:41,021 --> 00:28:44,625
或者我想要在GitHub上查看它
我可以控制点击提交

528
00:28:45,192 --> 00:28:47,995
与源代码管理和Xcode中
的任何其它对象一样

529
00:28:48,061 --> 00:28:51,832
比如分支或标记或远程库
我可以在GitHub看到它

530
00:28:52,132 --> 00:28:54,701
如果我选择它

531
00:28:54,768 --> 00:28:59,072
Safari将会直接在GitHub打开
我看到这只漂亮的猫

532
00:29:05,746 --> 00:29:07,814
我希望Kieran也能看到我提交的内容

533
00:29:07,881 --> 00:29:08,782
但是我已经将它设为私有

534
00:29:08,849 --> 00:29:10,984
我们转到设置

535
00:29:11,051 --> 00:29:12,186
将他添加为协作者

536
00:29:13,187 --> 00:29:14,454
同时确保我们的安全性

537
00:29:17,024 --> 00:29:19,159
让我们添加Kieran

538
00:29:19,726 --> 00:29:20,594
找到他了

539
00:29:21,461 --> 00:29:24,565
将他添加为协作者
现在他也能看到这个私有存储库

540
00:29:25,666 --> 00:29:27,768
我希望他能够立即看到

541
00:29:27,835 --> 00:29:31,004
因此我想要为他简化操作

542
00:29:31,071 --> 00:29:32,206
我进入Github

543
00:29:32,272 --> 00:29:35,108
在GitHub上 我们看到“克隆”
或“下载”按钮

544
00:29:35,175 --> 00:29:38,478
就像在Xcode中一样

545
00:29:38,545 --> 00:29:43,016
我们可以选择它
在电子邮件中与他分享链接

546
00:29:43,483 --> 00:29:44,451
我们看这里

547
00:29:44,918 --> 00:29:46,620
将链接发送给Kieran

548
00:29:47,554 --> 00:29:51,491
查看我的便利贴

549
00:29:52,226 --> 00:29:54,161
发送给Kieran
让他能够

550
00:29:54,228 --> 00:29:56,096
在自己的计算机上
点击这个链接

551
00:29:56,163 --> 00:29:58,999
Xcode将会打开并克隆
他就能够看到我的小猫便利贴

552
00:30:00,367 --> 00:30:02,102
太好了

553
00:30:02,769 --> 00:30:05,439
现在我想请他上台

554
00:30:05,506 --> 00:30:08,008
为大家总结源代码管理和Xcode

555
00:30:08,075 --> 00:30:08,909
谢谢

556
00:30:14,248 --> 00:30:15,716
谢谢埃Eric

557
00:30:15,782 --> 00:30:18,619
我肯定会下载你的应用

558
00:30:19,219 --> 00:30:20,821
我喜欢这个应用

559
00:30:22,222 --> 00:30:27,461
Eric向我们展示了
如何使用源代码管理和Xcode

560
00:30:27,928 --> 00:30:32,966
通过添加GitHub账户
你可以快速访问你的所有存储库

561
00:30:33,534 --> 00:30:35,502
利用新的源代码管理导航器

562
00:30:35,569 --> 00:30:39,840
可以轻松地管理
你的分支、标记和存储库

563
00:30:40,407 --> 00:30:41,375
最后

564
00:30:41,441 --> 00:30:45,112
我们可以看到
很容易在GitHub上创建新项目

565
00:30:45,179 --> 00:30:46,547
和推入你的所有代码

566
00:30:47,181 --> 00:30:51,685
有关更多信息

567
00:30:51,752 --> 00:30:53,020
请在developer.apple.com
上观看演讲405

568
00:30:53,086 --> 00:30:55,722
另外还有一些相关的演讲

569
00:30:56,123 --> 00:30:57,224
欢迎大家观看

570
00:30:57,958 --> 00:30:59,159
另请关注本周的其它演讲

571
00:30:59,226 --> 00:31:00,060
谢谢！

