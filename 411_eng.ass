[Script Info]
; Script generated by FFmpeg/Lavc57.89.100
ScriptType: v4.00+
PlayResX: 384
PlayResY: 288

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,16,&Hffffff,&Hffffff,&H0,&H0,0,0,0,0,100,100,0,0,1,1,0,2,10,10,10,0

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:21.52,0:00:25.59,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:00:26.09,0:00:28.45,Default,,0,0,0,,>> Hello. Welcome to What's New
Dialogue: 0,0:00:28.45,0:00:29.02,Default,,0,0,0,,in LLVM.
Dialogue: 0,0:00:29.74,0:00:31.40,Default,,0,0,0,,I'm Devin, an engineer on the
Dialogue: 0,0:00:31.40,0:00:32.65,Default,,0,0,0,,Program Analysis Team.
Dialogue: 0,0:00:33.64,0:00:35.66,Default,,0,0,0,,We've got a lot of great, new
Dialogue: 0,0:00:35.66,0:00:36.77,Default,,0,0,0,,features to tell you about
Dialogue: 0,0:00:36.77,0:00:37.08,Default,,0,0,0,,today.
Dialogue: 0,0:00:38.27,0:00:39.62,Default,,0,0,0,,We'll start by introducing you
Dialogue: 0,0:00:39.85,0:00:41.31,Default,,0,0,0,,to availability checking for
Dialogue: 0,0:00:41.31,0:00:41.98,Default,,0,0,0,,Objective-C.
Dialogue: 0,0:00:41.98,0:00:44.09,Default,,0,0,0,,This will help you safely deploy
Dialogue: 0,0:00:44.09,0:00:46.14,Default,,0,0,0,,your apps back to older OS's.
Dialogue: 0,0:00:47.19,0:00:48.25,Default,,0,0,0,,Then, we'll describe new static
Dialogue: 0,0:00:48.25,0:00:49.63,Default,,0,0,0,,analyzer checks and compiler
Dialogue: 0,0:00:49.63,0:00:51.51,Default,,0,0,0,,warnings to help you find bugs.
Dialogue: 0,0:00:52.68,0:00:54.34,Default,,0,0,0,,We'll dive into some fantastic,
Dialogue: 0,0:00:54.34,0:00:56.20,Default,,0,0,0,,new features for C++ developers,
Dialogue: 0,0:00:56.65,0:00:58.37,Default,,0,0,0,,including a tour of refactoring
Dialogue: 0,0:00:58.37,0:01:01.06,Default,,0,0,0,,support for C++ in Xcode, and
Dialogue: 0,0:01:01.06,0:01:02.87,Default,,0,0,0,,wrap up with an update on
Dialogue: 0,0:01:02.87,0:01:04.00,Default,,0,0,0,,link-time optimization.
Dialogue: 0,0:01:04.51,0:01:07.79,Default,,0,0,0,,Let's start with availability
Dialogue: 0,0:01:07.79,0:01:08.00,Default,,0,0,0,,checking.
Dialogue: 0,0:01:10.56,0:01:12.32,Default,,0,0,0,,Every major OS release comes
Dialogue: 0,0:01:12.61,0:01:14.56,Default,,0,0,0,,with great, new features, and
Dialogue: 0,0:01:14.56,0:01:16.10,Default,,0,0,0,,your customers expect you to
Dialogue: 0,0:01:16.10,0:01:18.05,Default,,0,0,0,,adopt these APIs in your apps.
Dialogue: 0,0:01:19.09,0:01:20.26,Default,,0,0,0,,But you still have to support
Dialogue: 0,0:01:20.26,0:01:22.63,Default,,0,0,0,,your users on older OS's where
Dialogue: 0,0:01:22.63,0:01:24.14,Default,,0,0,0,,those APIs aren't available.
Dialogue: 0,0:01:24.14,0:01:29.25,Default,,0,0,0,,On our platforms, we support
Dialogue: 0,0:01:29.25,0:01:30.77,Default,,0,0,0,,backwards deployment by
Dialogue: 0,0:01:30.77,0:01:32.69,Default,,0,0,0,,separating the Base SDK version
Dialogue: 0,0:01:32.95,0:01:34.03,Default,,0,0,0,,from the deployment target
Dialogue: 0,0:01:34.03,0:01:34.46,Default,,0,0,0,,version.
Dialogue: 0,0:01:35.30,0:01:36.72,Default,,0,0,0,,What this means is that you will
Dialogue: 0,0:01:36.72,0:01:38.59,Default,,0,0,0,,always compile against the
Dialogue: 0,0:01:38.59,0:01:41.29,Default,,0,0,0,,newest SDK, even when deploying
Dialogue: 0,0:01:41.29,0:01:42.50,Default,,0,0,0,,back to older OS's.
Dialogue: 0,0:01:43.27,0:01:45.74,Default,,0,0,0,,So for example, in Xcode 9, you
Dialogue: 0,0:01:45.74,0:01:49.33,Default,,0,0,0,,use the iOS 11 SDK, and if your
Dialogue: 0,0:01:49.33,0:01:52.09,Default,,0,0,0,,app only targets iOS 11, you'll
Dialogue: 0,0:01:52.09,0:01:53.72,Default,,0,0,0,,use that as the deployment
Dialogue: 0,0:01:53.72,0:01:54.60,Default,,0,0,0,,target as well.
Dialogue: 0,0:01:55.15,0:01:57.67,Default,,0,0,0,,But I know a lot of you will
Dialogue: 0,0:01:57.67,0:01:59.47,Default,,0,0,0,,want to support your users on
Dialogue: 0,0:01:59.55,0:02:01.61,Default,,0,0,0,,iOS 10 to give them a chance to
Dialogue: 0,0:02:01.61,0:02:02.22,Default,,0,0,0,,upgrade.
Dialogue: 0,0:02:03.42,0:02:04.41,Default,,0,0,0,,To do that, you can go to your
Dialogue: 0,0:02:04.41,0:02:07.13,Default,,0,0,0,,Build settings and select 10.0
Dialogue: 0,0:02:07.52,0:02:08.66,Default,,0,0,0,,for your deployment target.
Dialogue: 0,0:02:09.76,0:02:11.35,Default,,0,0,0,,This is a promise on the part of
Dialogue: 0,0:02:11.35,0:02:12.89,Default,,0,0,0,,your app that it will support
Dialogue: 0,0:02:12.89,0:02:15.30,Default,,0,0,0,,all versions of iOS 10 and
Dialogue: 0,0:02:15.30,0:02:15.75,Default,,0,0,0,,greater.
Dialogue: 0,0:02:15.75,0:02:20.98,Default,,0,0,0,,Now, this can be tricky because
Dialogue: 0,0:02:21.14,0:02:23.42,Default,,0,0,0,,it's only safe to call APIs that
Dialogue: 0,0:02:23.49,0:02:25.66,Default,,0,0,0,,are actually available on the
Dialogue: 0,0:02:25.66,0:02:26.50,Default,,0,0,0,,running OS.
Dialogue: 0,0:02:27.24,0:02:29.48,Default,,0,0,0,,If you call in newer API on an
Dialogue: 0,0:02:29.48,0:02:31.49,Default,,0,0,0,,older OS, then your app could
Dialogue: 0,0:02:31.49,0:02:33.15,Default,,0,0,0,,crash or have other unexpected
Dialogue: 0,0:02:33.15,0:02:33.65,Default,,0,0,0,,behavior.
Dialogue: 0,0:02:33.65,0:02:37.77,Default,,0,0,0,,In the past, we've recommended
Dialogue: 0,0:02:37.77,0:02:39.68,Default,,0,0,0,,querying the Objective-C runtime
Dialogue: 0,0:02:40.11,0:02:41.90,Default,,0,0,0,,to determine whether an API is
Dialogue: 0,0:02:41.90,0:02:42.39,Default,,0,0,0,,available.
Dialogue: 0,0:02:43.50,0:02:45.24,Default,,0,0,0,,But this was easy to get wrong
Dialogue: 0,0:02:45.24,0:02:47.35,Default,,0,0,0,,or even forget, and it was hard
Dialogue: 0,0:02:47.35,0:02:47.84,Default,,0,0,0,,to test.
Dialogue: 0,0:02:49.29,0:02:51.34,Default,,0,0,0,,Further, it required a different
Dialogue: 0,0:02:51.44,0:02:54.59,Default,,0,0,0,,syntax for checking each of
Dialogue: 0,0:02:55.14,0:02:58.07,Default,,0,0,0,,globals, functions, classes,
Dialogue: 0,0:02:58.58,0:03:00.30,Default,,0,0,0,,instance methods, and class
Dialogue: 0,0:03:00.30,0:03:00.67,Default,,0,0,0,,methods.
Dialogue: 0,0:03:01.29,0:03:04.96,Default,,0,0,0,,Now, those of you using Swift
Dialogue: 0,0:03:04.96,0:03:06.90,Default,,0,0,0,,may be wondering, what's the big
Dialogue: 0,0:03:06.90,0:03:07.70,Default,,0,0,0,,deal here?
Dialogue: 0,0:03:07.96,0:03:09.43,Default,,0,0,0,,Swift has a unified syntax,
Dialogue: 0,0:03:09.48,0:03:11.52,Default,,0,0,0,,#available, for querying API
Dialogue: 0,0:03:11.52,0:03:13.47,Default,,0,0,0,,availability at runtime, and the
Dialogue: 0,0:03:13.47,0:03:16.18,Default,,0,0,0,,compiler can even catch missing
Dialogue: 0,0:03:16.18,0:03:18.35,Default,,0,0,0,,availability checks at compile
Dialogue: 0,0:03:18.79,0:03:18.88,Default,,0,0,0,,time.
Dialogue: 0,0:03:20.66,0:03:21.94,Default,,0,0,0,,For more information on
Dialogue: 0,0:03:21.94,0:03:23.00,Default,,0,0,0,,availability in Swift, you
Dialogue: 0,0:03:23.00,0:03:24.41,Default,,0,0,0,,should check out the Swift in
Dialogue: 0,0:03:24.41,0:03:29.28,Default,,0,0,0,,Practice talk from WWDC 2015.
Dialogue: 0,0:03:29.38,0:03:31.40,Default,,0,0,0,,Today we brought Swift-style
Dialogue: 0,0:03:31.40,0:03:32.82,Default,,0,0,0,,availability checking to
Dialogue: 0,0:03:32.82,0:03:33.52,Default,,0,0,0,,Objective-C.
Dialogue: 0,0:03:34.52,0:03:39.41,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:03:39.91,0:03:41.10,Default,,0,0,0,,I would love to tell you about
Dialogue: 0,0:03:41.95,0:03:42.00,Default,,0,0,0,,it.
Dialogue: 0,0:03:43.05,0:03:44.73,Default,,0,0,0,,So suppose you have an app that
Dialogue: 0,0:03:44.90,0:03:46.80,Default,,0,0,0,,you're deploying back to iOS 10
Dialogue: 0,0:03:47.73,0:03:49.54,Default,,0,0,0,,and you decide to take advantage
Dialogue: 0,0:03:49.72,0:03:51.96,Default,,0,0,0,,of the fantastic, new face
Dialogue: 0,0:03:51.96,0:03:53.81,Default,,0,0,0,,detection APIs from the Vision
Dialogue: 0,0:03:53.81,0:03:55.43,Default,,0,0,0,,framework in iOS 11.
Dialogue: 0,0:03:56.63,0:03:57.89,Default,,0,0,0,,When you add these APIs to your
Dialogue: 0,0:03:57.89,0:04:00.61,Default,,0,0,0,,app and then build, you will now
Dialogue: 0,0:04:00.61,0:04:02.71,Default,,0,0,0,,get a compiler warning telling
Dialogue: 0,0:04:02.71,0:04:04.74,Default,,0,0,0,,you that these APIs are only
Dialogue: 0,0:04:04.74,0:04:07.05,Default,,0,0,0,,available in iOS 11 or newer.
Dialogue: 0,0:04:07.58,0:04:10.34,Default,,0,0,0,,You can address these warnings
Dialogue: 0,0:04:10.70,0:04:12.87,Default,,0,0,0,,by using the new @available
Dialogue: 0,0:04:12.87,0:04:14.83,Default,,0,0,0,,construct to query for API
Dialogue: 0,0:04:14.83,0:04:15.49,Default,,0,0,0,,availability.
Dialogue: 0,0:04:16.57,0:04:18.66,Default,,0,0,0,,This will return true when iOS
Dialogue: 0,0:04:18.66,0:04:20.47,Default,,0,0,0,,11 APIs are available.
Dialogue: 0,0:04:20.92,0:04:23.08,Default,,0,0,0,,It's safe to call them.
Dialogue: 0,0:04:23.27,0:04:24.27,Default,,0,0,0,,And if they're not, you can
Dialogue: 0,0:04:24.27,0:04:25.24,Default,,0,0,0,,provide a fallback.
Dialogue: 0,0:04:26.52,0:04:28.64,Default,,0,0,0,,Let's take a closer look at the
Dialogue: 0,0:04:28.86,0:04:29.00,Default,,0,0,0,,query.
Dialogue: 0,0:04:31.05,0:04:35.05,Default,,0,0,0,,As I mentioned, on iOS 11 or
Dialogue: 0,0:04:35.05,0:04:37.18,Default,,0,0,0,,greater, this will return true.
Dialogue: 0,0:04:37.74,0:04:40.03,Default,,0,0,0,,The star is required.
Dialogue: 0,0:04:41.00,0:04:42.68,Default,,0,0,0,,It indicates that on all other
Dialogue: 0,0:04:42.68,0:04:44.98,Default,,0,0,0,,platforms, the query always
Dialogue: 0,0:04:44.98,0:04:45.80,Default,,0,0,0,,returns true.
Dialogue: 0,0:04:47.17,0:04:48.32,Default,,0,0,0,,What this means is that if you
Dialogue: 0,0:04:48.32,0:04:49.91,Default,,0,0,0,,decide to port your app to
Dialogue: 0,0:04:49.91,0:04:51.81,Default,,0,0,0,,another platform -- say, macOS
Dialogue: 0,0:04:52.49,0:04:54.29,Default,,0,0,0,,-- then by default it will take
Dialogue: 0,0:04:54.29,0:04:55.63,Default,,0,0,0,,advantage of the new face
Dialogue: 0,0:04:55.63,0:04:56.68,Default,,0,0,0,,detection APIs.
Dialogue: 0,0:04:57.74,0:04:58.66,Default,,0,0,0,,Of course, the compiler will
Dialogue: 0,0:04:58.66,0:05:00.28,Default,,0,0,0,,still warn you if your port to
Dialogue: 0,0:05:00.28,0:05:02.15,Default,,0,0,0,,macOS supports an earlier
Dialogue: 0,0:05:02.15,0:05:03.41,Default,,0,0,0,,deployment target where those
Dialogue: 0,0:05:03.41,0:05:04.70,Default,,0,0,0,,APIs aren't available.
Dialogue: 0,0:05:04.99,0:05:08.79,Default,,0,0,0,,So you'll need to add a check.
Dialogue: 0,0:05:10.07,0:05:11.17,Default,,0,0,0,,Once you've been working with
Dialogue: 0,0:05:11.17,0:05:12.76,Default,,0,0,0,,availability for a while, you
Dialogue: 0,0:05:12.76,0:05:14.48,Default,,0,0,0,,will find that it's really
Dialogue: 0,0:05:14.48,0:05:16.54,Default,,0,0,0,,useful to write entire methods
Dialogue: 0,0:05:16.85,0:05:18.96,Default,,0,0,0,,that will only be called on iOS
Dialogue: 0,0:05:18.96,0:05:19.73,Default,,0,0,0,,11 or greater.
Dialogue: 0,0:05:19.79,0:05:23.24,Default,,0,0,0,,You can annotate these methods
Dialogue: 0,0:05:23.24,0:05:25.06,Default,,0,0,0,,with the new API availability
Dialogue: 0,0:05:25.06,0:05:25.52,Default,,0,0,0,,macro.
Dialogue: 0,0:05:26.94,0:05:29.32,Default,,0,0,0,,Then, inside that method, you
Dialogue: 0,0:05:29.32,0:05:31.22,Default,,0,0,0,,don't need to use @available to
Dialogue: 0,0:05:31.22,0:05:33.36,Default,,0,0,0,,check for availability, but
Dialogue: 0,0:05:33.36,0:05:35.39,Default,,0,0,0,,anyone who calls the method will
Dialogue: 0,0:05:35.39,0:05:36.17,Default,,0,0,0,,need to do so.
Dialogue: 0,0:05:36.53,0:05:37.37,Default,,0,0,0,,Otherwise, they'll get a
Dialogue: 0,0:05:37.37,0:05:37.78,Default,,0,0,0,,warning.
Dialogue: 0,0:05:38.14,0:05:42.03,Default,,0,0,0,,You can similarly apply this to
Dialogue: 0,0:05:42.03,0:05:42.89,Default,,0,0,0,,entire classes.
Dialogue: 0,0:05:43.48,0:05:44.22,Default,,0,0,0,,Then, you don't need to use
Dialogue: 0,0:05:44.22,0:05:46.27,Default,,0,0,0,,@available inside the class, but
Dialogue: 0,0:05:46.27,0:05:48.05,Default,,0,0,0,,anyone who instantiates it will
Dialogue: 0,0:05:48.05,0:05:48.77,Default,,0,0,0,,need to do so.
Dialogue: 0,0:05:52.76,0:05:54.45,Default,,0,0,0,,Now, availability checking is
Dialogue: 0,0:05:54.45,0:05:55.95,Default,,0,0,0,,not just for Objective-C.
Dialogue: 0,0:05:56.71,0:05:59.29,Default,,0,0,0,,We also support C and C++ with
Dialogue: 0,0:05:59.29,0:06:00.92,Default,,0,0,0,,the builtin available query.
Dialogue: 0,0:06:01.86,0:06:03.46,Default,,0,0,0,,This acts exactly like
Dialogue: 0,0:06:03.46,0:06:04.35,Default,,0,0,0,,@available.
Dialogue: 0,0:06:04.66,0:06:05.79,Default,,0,0,0,,It has the same syntax.
Dialogue: 0,0:06:06.36,0:06:07.58,Default,,0,0,0,,It just has a different name
Dialogue: 0,0:06:07.75,0:06:08.93,Default,,0,0,0,,that's compatible with C and
Dialogue: 0,0:06:08.93,0:06:09.63,Default,,0,0,0,,C++.
Dialogue: 0,0:06:10.16,0:06:13.18,Default,,0,0,0,,You can also use the API
Dialogue: 0,0:06:13.18,0:06:15.20,Default,,0,0,0,,availability macro in C, but you
Dialogue: 0,0:06:15.20,0:06:16.37,Default,,0,0,0,,will need to include the os
Dialogue: 0,0:06:16.37,0:06:18.84,Default,,0,0,0,,availability.h header to get
Dialogue: 0,0:06:18.84,0:06:19.65,Default,,0,0,0,,access to it.
Dialogue: 0,0:06:20.10,0:06:23.19,Default,,0,0,0,,And you can even annotate your
Dialogue: 0,0:06:23.19,0:06:24.76,Default,,0,0,0,,C++ class definitions.
Dialogue: 0,0:06:24.76,0:06:28.40,Default,,0,0,0,,All right, so how's this going
Dialogue: 0,0:06:28.72,0:06:31.72,Default,,0,0,0,,to work in practice?
Dialogue: 0,0:06:31.72,0:06:33.74,Default,,0,0,0,,For existing projects, we will
Dialogue: 0,0:06:33.74,0:06:35.57,Default,,0,0,0,,warn starting with APIs
Dialogue: 0,0:06:35.57,0:06:38.82,Default,,0,0,0,,introduced in iOS 11, tvOS 11,
Dialogue: 0,0:06:38.82,0:06:41.40,Default,,0,0,0,,macOS 10.13, and watchOS 4.
Dialogue: 0,0:06:42.50,0:06:45.23,Default,,0,0,0,,APIs from older SDKs will not be
Dialogue: 0,0:06:45.23,0:06:46.41,Default,,0,0,0,,checked at compile time.
Dialogue: 0,0:06:47.68,0:06:48.87,Default,,0,0,0,,This means that you won't need
Dialogue: 0,0:06:48.87,0:06:51.58,Default,,0,0,0,,to change any existing code, but
Dialogue: 0,0:06:51.58,0:06:53.60,Default,,0,0,0,,if you do decide to adopt the
Dialogue: 0,0:06:53.60,0:06:55.86,Default,,0,0,0,,new APIs, you'll need to use
Dialogue: 0,0:06:55.86,0:06:57.47,Default,,0,0,0,,@available to check for them.
Dialogue: 0,0:06:58.66,0:06:59.73,Default,,0,0,0,,We think this is the best and
Dialogue: 0,0:06:59.73,0:07:00.73,Default,,0,0,0,,safest way to check for
Dialogue: 0,0:07:00.73,0:07:02.39,Default,,0,0,0,,availability, and so we highly
Dialogue: 0,0:07:02.39,0:07:03.97,Default,,0,0,0,,encourage you to use it.
Dialogue: 0,0:07:05.73,0:07:08.90,Default,,0,0,0,,For new projects, all APIs will
Dialogue: 0,0:07:08.90,0:07:10.20,Default,,0,0,0,,be checked at compile time.
Dialogue: 0,0:07:11.03,0:07:12.38,Default,,0,0,0,,This means you'll need to use
Dialogue: 0,0:07:12.38,0:07:13.99,Default,,0,0,0,,@available for all APIs
Dialogue: 0,0:07:13.99,0:07:15.98,Default,,0,0,0,,introduced after your deployment
Dialogue: 0,0:07:16.38,0:07:16.57,Default,,0,0,0,,target.
Dialogue: 0,0:07:17.74,0:07:20.04,Default,,0,0,0,,Existing projects can opt in to
Dialogue: 0,0:07:20.04,0:07:22.32,Default,,0,0,0,,this all-API behavior by going
Dialogue: 0,0:07:22.32,0:07:23.69,Default,,0,0,0,,to the Build settings and
Dialogue: 0,0:07:23.69,0:07:25.93,Default,,0,0,0,,selecting Yes (All Versions) for
Dialogue: 0,0:07:25.93,0:07:27.04,Default,,0,0,0,,the Unguarded availability
Dialogue: 0,0:07:27.04,0:07:27.39,Default,,0,0,0,,setting.
Dialogue: 0,0:07:28.19,0:07:30.01,Default,,0,0,0,,This is going to make it a lot
Dialogue: 0,0:07:30.01,0:07:31.85,Default,,0,0,0,,easier to safely deploy your
Dialogue: 0,0:07:31.85,0:07:33.33,Default,,0,0,0,,apps back to older OS's.
Dialogue: 0,0:07:33.89,0:07:36.38,Default,,0,0,0,,So that's availability checking.
Dialogue: 0,0:07:36.73,0:07:37.61,Default,,0,0,0,,You could say it's now
Dialogue: 0,0:07:37.61,0:07:40.51,Default,,0,0,0,,@available for C, C++, and
Dialogue: 0,0:07:40.51,0:07:41.16,Default,,0,0,0,,Objective-C.
Dialogue: 0,0:07:42.52,0:07:47.69,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:07:48.19,0:07:49.90,Default,,0,0,0,,All right, let's move on to the
Dialogue: 0,0:07:49.90,0:07:50.72,Default,,0,0,0,,static analyzer.
Dialogue: 0,0:07:52.10,0:07:54.98,Default,,0,0,0,,The analyzer is great at
Dialogue: 0,0:07:54.98,0:07:56.43,Default,,0,0,0,,catching hard-to-reproduce
Dialogue: 0,0:07:56.53,0:07:58.71,Default,,0,0,0,,edge-case bugs, and it can even
Dialogue: 0,0:07:58.71,0:07:59.88,Default,,0,0,0,,show you the sequence of
Dialogue: 0,0:07:59.88,0:08:01.94,Default,,0,0,0,,corner-case events that led to
Dialogue: 0,0:08:02.02,0:08:03.28,Default,,0,0,0,,those bugs.
Dialogue: 0,0:08:03.56,0:08:04.41,Default,,0,0,0,,Today I'm going to tell you
Dialogue: 0,0:08:04.41,0:08:05.66,Default,,0,0,0,,about three new checks that
Dialogue: 0,0:08:05.66,0:08:07.93,Default,,0,0,0,,we've added to the analyzer: a
Dialogue: 0,0:08:07.93,0:08:09.43,Default,,0,0,0,,check for suspicious comparison
Dialogue: 0,0:08:09.43,0:08:11.47,Default,,0,0,0,,of NSNumber, a check for use of
Dialogue: 0,0:08:11.47,0:08:12.76,Default,,0,0,0,,dispatch once on instance
Dialogue: 0,0:08:12.76,0:08:14.55,Default,,0,0,0,,variables, and a check for
Dialogue: 0,0:08:14.55,0:08:16.35,Default,,0,0,0,,auto-synthesized copy properties
Dialogue: 0,0:08:16.64,0:08:18.35,Default,,0,0,0,,of NSMutable type.
Dialogue: 0,0:08:20.76,0:08:24.60,Default,,0,0,0,,A particularly pernicious bug is
Dialogue: 0,0:08:24.60,0:08:26.51,Default,,0,0,0,,to mistakenly compare an
Dialogue: 0,0:08:26.51,0:08:28.40,Default,,0,0,0,,NSNumber pointer value to the
Dialogue: 0,0:08:28.40,0:08:30.84,Default,,0,0,0,,scalar zero because this
Dialogue: 0,0:08:31.04,0:08:33.49,Default,,0,0,0,,actually compares to nil and not
Dialogue: 0,0:08:33.49,0:08:34.98,Default,,0,0,0,,the zero NSNumber instance.
Dialogue: 0,0:08:36.03,0:08:37.01,Default,,0,0,0,,Here's an example of how this
Dialogue: 0,0:08:37.01,0:08:37.94,Default,,0,0,0,,can be a problem.
Dialogue: 0,0:08:39.12,0:08:40.89,Default,,0,0,0,,In the hasPhotos method, the
Dialogue: 0,0:08:40.89,0:08:43.71,Default,,0,0,0,,programmer intends to return no
Dialogue: 0,0:08:43.86,0:08:45.16,Default,,0,0,0,,when the photo album is empty,
Dialogue: 0,0:08:46.14,0:08:47.24,Default,,0,0,0,,but because they're comparing
Dialogue: 0,0:08:47.24,0:08:49.87,Default,,0,0,0,,the photo count to nil, this
Dialogue: 0,0:08:49.87,0:08:52.22,Default,,0,0,0,,will actually return yes, even
Dialogue: 0,0:08:52.22,0:08:54.27,Default,,0,0,0,,when photo count holds the zero
Dialogue: 0,0:08:54.32,0:08:55.36,Default,,0,0,0,,NSNumber instance.
Dialogue: 0,0:08:56.04,0:08:57.21,Default,,0,0,0,,And so the analyzer will now
Dialogue: 0,0:08:57.21,0:08:59.88,Default,,0,0,0,,warn about this.
Dialogue: 0,0:09:00.11,0:09:02.34,Default,,0,0,0,,You can fix this error by
Dialogue: 0,0:09:02.34,0:09:03.99,Default,,0,0,0,,instead calling the integerValue
Dialogue: 0,0:09:03.99,0:09:06.20,Default,,0,0,0,,property to compare integers to
Dialogue: 0,0:09:06.20,0:09:06.76,Default,,0,0,0,,integers.
Dialogue: 0,0:09:07.11,0:09:07.69,Default,,0,0,0,,This is safe.
Dialogue: 0,0:09:08.24,0:09:11.63,Default,,0,0,0,,There's a similar problem with
Dialogue: 0,0:09:11.63,0:09:14.06,Default,,0,0,0,,implicit conversions to Booleans
Dialogue: 0,0:09:14.45,0:09:16.47,Default,,0,0,0,,because these also check for nil
Dialogue: 0,0:09:16.50,0:09:17.75,Default,,0,0,0,,and not the zero number.
Dialogue: 0,0:09:18.28,0:09:20.96,Default,,0,0,0,,This method counts the number of
Dialogue: 0,0:09:21.05,0:09:23.29,Default,,0,0,0,,faces in a photo, and since this
Dialogue: 0,0:09:23.29,0:09:24.97,Default,,0,0,0,,is an expensive operation, it
Dialogue: 0,0:09:24.97,0:09:26.58,Default,,0,0,0,,returns early if they've already
Dialogue: 0,0:09:26.58,0:09:27.22,Default,,0,0,0,,been counted.
Dialogue: 0,0:09:28.28,0:09:29.78,Default,,0,0,0,,But someone reading this code
Dialogue: 0,0:09:30.07,0:09:31.44,Default,,0,0,0,,might find it ambiguous.
Dialogue: 0,0:09:32.36,0:09:33.55,Default,,0,0,0,,Did the programmer intend to
Dialogue: 0,0:09:33.55,0:09:35.66,Default,,0,0,0,,return early if face count was
Dialogue: 0,0:09:35.66,0:09:37.81,Default,,0,0,0,,non-nil or non-zero?
Dialogue: 0,0:09:38.81,0:09:40.40,Default,,0,0,0,,The analyzer will now warn about
Dialogue: 0,0:09:40.40,0:09:41.55,Default,,0,0,0,,this kind of ambiguity.
Dialogue: 0,0:09:41.98,0:09:44.45,Default,,0,0,0,,In this case, the programmer
Dialogue: 0,0:09:44.45,0:09:47.39,Default,,0,0,0,,meant non-nil, and so she can
Dialogue: 0,0:09:47.48,0:09:49.14,Default,,0,0,0,,express her intent directly in
Dialogue: 0,0:09:49.14,0:09:51.13,Default,,0,0,0,,the code and silence the
Dialogue: 0,0:09:51.13,0:09:53.48,Default,,0,0,0,,analyzer warning by adding the
Dialogue: 0,0:09:53.48,0:09:54.90,Default,,0,0,0,,comparison explicitly.
Dialogue: 0,0:09:55.46,0:09:59.11,Default,,0,0,0,,You can control the level of
Dialogue: 0,0:09:59.11,0:10:00.32,Default,,0,0,0,,this check in your Build
Dialogue: 0,0:10:00.32,0:10:00.66,Default,,0,0,0,,setting.
Dialogue: 0,0:10:01.49,0:10:02.96,Default,,0,0,0,,If you choose Yes (Aggressive),
Dialogue: 0,0:10:03.61,0:10:05.57,Default,,0,0,0,,then the analyzer will warn when
Dialogue: 0,0:10:05.57,0:10:06.79,Default,,0,0,0,,it's not sure that you've made a
Dialogue: 0,0:10:06.79,0:10:08.49,Default,,0,0,0,,mistake, but it does think your
Dialogue: 0,0:10:08.49,0:10:09.33,Default,,0,0,0,,code is ambiguous.
Dialogue: 0,0:10:09.95,0:10:13.70,Default,,0,0,0,,Let's move on to dispatch once.
Dialogue: 0,0:10:16.08,0:10:17.78,Default,,0,0,0,,Grand Central Dispatch provides
Dialogue: 0,0:10:17.87,0:10:20.90,Default,,0,0,0,,a fantastic API, dispatch once,
Dialogue: 0,0:10:21.10,0:10:22.31,Default,,0,0,0,,that guarantees that a block is
Dialogue: 0,0:10:22.31,0:10:24.26,Default,,0,0,0,,called once and only once.
Dialogue: 0,0:10:24.90,0:10:27.28,Default,,0,0,0,,It is really useful for safely
Dialogue: 0,0:10:27.28,0:10:28.44,Default,,0,0,0,,initializing shared global
Dialogue: 0,0:10:28.44,0:10:28.84,Default,,0,0,0,,state.
Dialogue: 0,0:10:29.95,0:10:31.58,Default,,0,0,0,,In this example, the programmer
Dialogue: 0,0:10:32.19,0:10:34.19,Default,,0,0,0,,uses it to load and initialize a
Dialogue: 0,0:10:34.19,0:10:36.14,Default,,0,0,0,,shared array of photos.
Dialogue: 0,0:10:37.62,0:10:39.52,Default,,0,0,0,,The first argument to dispatch
Dialogue: 0,0:10:39.52,0:10:41.34,Default,,0,0,0,,once is the address of a
Dialogue: 0,0:10:41.34,0:10:43.18,Default,,0,0,0,,variable of a special type,
Dialogue: 0,0:10:43.51,0:10:44.70,Default,,0,0,0,,dispatch once t.
Dialogue: 0,0:10:45.55,0:10:46.85,Default,,0,0,0,,Grand Central Dispatch uses this
Dialogue: 0,0:10:47.16,0:10:48.93,Default,,0,0,0,,to make sure that the block is
Dialogue: 0,0:10:48.93,0:10:51.61,Default,,0,0,0,,only called once.
Dialogue: 0,0:10:51.69,0:10:53.85,Default,,0,0,0,,Now, it's really important that
Dialogue: 0,0:10:53.85,0:10:56.05,Default,,0,0,0,,this variable be either a static
Dialogue: 0,0:10:56.27,0:10:57.28,Default,,0,0,0,,or a global variable.
Dialogue: 0,0:10:58.28,0:10:59.76,Default,,0,0,0,,That's because if it's ever been
Dialogue: 0,0:10:59.76,0:11:01.56,Default,,0,0,0,,the case that the variable held
Dialogue: 0,0:11:01.56,0:11:03.27,Default,,0,0,0,,a non-zero value in the past,
Dialogue: 0,0:11:04.09,0:11:05.21,Default,,0,0,0,,then Grand Central Dispatch
Dialogue: 0,0:11:05.43,0:11:06.92,Default,,0,0,0,,might not be able to make the
Dialogue: 0,0:11:06.92,0:11:09.01,Default,,0,0,0,,once and only once guarantee in
Dialogue: 0,0:11:09.01,0:11:09.99,Default,,0,0,0,,multithreaded code.
Dialogue: 0,0:11:10.51,0:11:14.36,Default,,0,0,0,,What this means is that it's not
Dialogue: 0,0:11:14.58,0:11:17.31,Default,,0,0,0,,safe to use dispatch once t in
Dialogue: 0,0:11:17.31,0:11:19.15,Default,,0,0,0,,instance variables or, indeed,
Dialogue: 0,0:11:19.15,0:11:21.70,Default,,0,0,0,,in any other memory on the heap
Dialogue: 0,0:11:22.16,0:11:23.32,Default,,0,0,0,,that might have been reused.
Dialogue: 0,0:11:23.99,0:11:25.06,Default,,0,0,0,,And so the analyzer will now
Dialogue: 0,0:11:25.06,0:11:26.49,Default,,0,0,0,,warn about this.
Dialogue: 0,0:11:27.30,0:11:29.69,Default,,0,0,0,,To fix this, you can use your
Dialogue: 0,0:11:29.79,0:11:31.50,Default,,0,0,0,,favorite non-recursive lock.
Dialogue: 0,0:11:32.31,0:11:34.08,Default,,0,0,0,,Here I'll use NSLock, but you
Dialogue: 0,0:11:34.08,0:11:35.92,Default,,0,0,0,,could use OSUnfairLock or a
Dialogue: 0,0:11:35.92,0:11:37.02,Default,,0,0,0,,pthread mutex as well.
Dialogue: 0,0:11:38.42,0:11:41.32,Default,,0,0,0,,After acquiring the lock, check
Dialogue: 0,0:11:41.32,0:11:42.35,Default,,0,0,0,,to see whether the data's
Dialogue: 0,0:11:42.35,0:11:43.51,Default,,0,0,0,,initialized, and if not,
Dialogue: 0,0:11:43.51,0:11:46.34,Default,,0,0,0,,initialize it, and then don't
Dialogue: 0,0:11:46.41,0:11:48.35,Default,,0,0,0,,forget to release the lock.
Dialogue: 0,0:11:49.24,0:11:50.71,Default,,0,0,0,,This will guarantee that the
Dialogue: 0,0:11:50.71,0:11:52.38,Default,,0,0,0,,data's initialized once and only
Dialogue: 0,0:11:52.38,0:11:54.06,Default,,0,0,0,,once, exactly like you expect.
Dialogue: 0,0:11:54.42,0:12:00.03,Default,,0,0,0,,Finally, I'm going to tell you
Dialogue: 0,0:12:00.03,0:12:01.58,Default,,0,0,0,,about a check that we've added
Dialogue: 0,0:12:01.88,0:12:03.79,Default,,0,0,0,,for auto-synthesized copy
Dialogue: 0,0:12:03.79,0:12:05.77,Default,,0,0,0,,properties of NSMutable types.
Dialogue: 0,0:12:07.24,0:12:09.07,Default,,0,0,0,,Copy properties call the copy
Dialogue: 0,0:12:09.07,0:12:11.10,Default,,0,0,0,,method in their setter on the
Dialogue: 0,0:12:11.10,0:12:12.98,Default,,0,0,0,,passed-in value to story a copy.
Dialogue: 0,0:12:14.01,0:12:16.74,Default,,0,0,0,,But calling copy on a mutable
Dialogue: 0,0:12:16.74,0:12:18.92,Default,,0,0,0,,array results in an immutable
Dialogue: 0,0:12:18.92,0:12:19.35,Default,,0,0,0,,copy.
Dialogue: 0,0:12:20.42,0:12:21.17,Default,,0,0,0,,Here's how this can be a
Dialogue: 0,0:12:21.17,0:12:21.68,Default,,0,0,0,,problem.
Dialogue: 0,0:12:22.61,0:12:25.30,Default,,0,0,0,,It, this method tries to reset
Dialogue: 0,0:12:25.30,0:12:27.31,Default,,0,0,0,,the photos property by setting
Dialogue: 0,0:12:27.31,0:12:29.41,Default,,0,0,0,,it to an empty mutable array and
Dialogue: 0,0:12:29.41,0:12:31.90,Default,,0,0,0,,then adding in a single photo.
Dialogue: 0,0:12:33.20,0:12:34.87,Default,,0,0,0,,Unfortunately, this will lead to
Dialogue: 0,0:12:34.87,0:12:37.24,Default,,0,0,0,,a really nasty surprise at
Dialogue: 0,0:12:37.24,0:12:39.86,Default,,0,0,0,,runtime because you can't add an
Dialogue: 0,0:12:39.86,0:12:41.77,Default,,0,0,0,,object to an immutable array.
Dialogue: 0,0:12:42.60,0:12:43.50,Default,,0,0,0,,You'll get an exception.
Dialogue: 0,0:12:44.06,0:12:46.83,Default,,0,0,0,,The analyzer will now warn you
Dialogue: 0,0:12:46.83,0:12:48.17,Default,,0,0,0,,about these kinds of properties
Dialogue: 0,0:12:48.22,0:12:50.16,Default,,0,0,0,,to help you prevent this runtime
Dialogue: 0,0:12:50.16,0:12:50.67,Default,,0,0,0,,exception.
Dialogue: 0,0:12:51.22,0:12:53.67,Default,,0,0,0,,The fix here is simple.
Dialogue: 0,0:12:54.12,0:12:55.72,Default,,0,0,0,,All you need to do is write the
Dialogue: 0,0:12:55.72,0:12:57.52,Default,,0,0,0,,setter explicitly to have it
Dialogue: 0,0:12:57.52,0:12:58.63,Default,,0,0,0,,call mutableCopy.
Dialogue: 0,0:12:59.43,0:13:00.33,Default,,0,0,0,,This guarantees that your
Dialogue: 0,0:13:00.33,0:13:02.95,Default,,0,0,0,,property always holds a mutable
Dialogue: 0,0:13:02.95,0:13:03.00,Default,,0,0,0,,array.
Dialogue: 0,0:13:06.24,0:13:07.71,Default,,0,0,0,,So those are just three of the
Dialogue: 0,0:13:07.71,0:13:08.74,Default,,0,0,0,,new checks that we've added to
Dialogue: 0,0:13:08.74,0:13:09.75,Default,,0,0,0,,the analyzer this year.
Dialogue: 0,0:13:10.61,0:13:11.78,Default,,0,0,0,,You should run it on your code.
Dialogue: 0,0:13:11.78,0:13:13.19,Default,,0,0,0,,It will help you find bugs.
Dialogue: 0,0:13:14.56,0:13:16.66,Default,,0,0,0,,To do that, choose Analyze from
Dialogue: 0,0:13:16.66,0:13:17.63,Default,,0,0,0,,Xcode's Product menu.
Dialogue: 0,0:13:19.09,0:13:20.61,Default,,0,0,0,,You could even have Xcode run
Dialogue: 0,0:13:20.61,0:13:23.57,Default,,0,0,0,,the analyzer on every compile by
Dialogue: 0,0:13:23.57,0:13:25.19,Default,,0,0,0,,going to your Build settings and
Dialogue: 0,0:13:25.19,0:13:27.10,Default,,0,0,0,,enabling Analyze During 'Build.'
Dialogue: 0,0:13:27.10,0:13:29.09,Default,,0,0,0,,This will help you catch your
Dialogue: 0,0:13:29.09,0:13:30.34,Default,,0,0,0,,bugs early and often.
Dialogue: 0,0:13:30.98,0:13:33.14,Default,,0,0,0,,If you're interested in other
Dialogue: 0,0:13:33.14,0:13:34.63,Default,,0,0,0,,tools to help you find bugs, I
Dialogue: 0,0:13:34.96,0:13:36.50,Default,,0,0,0,,highly encourage you to check
Dialogue: 0,0:13:36.50,0:13:38.27,Default,,0,0,0,,out finding bugs using Xcode
Dialogue: 0,0:13:38.27,0:13:39.57,Default,,0,0,0,,runtime tools online.
Dialogue: 0,0:13:39.57,0:13:41.92,Default,,0,0,0,,So that's what's new in the
Dialogue: 0,0:13:41.92,0:13:42.47,Default,,0,0,0,,analyzer.
Dialogue: 0,0:13:42.92,0:13:44.62,Default,,0,0,0,,I'm not going to hand it over to
Dialogue: 0,0:13:44.62,0:13:46.27,Default,,0,0,0,,Duncan, who will tell us about
Dialogue: 0,0:13:46.27,0:13:47.32,Default,,0,0,0,,new compiler warnings.
Dialogue: 0,0:13:48.52,0:13:54.05,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:13:54.55,0:13:57.77,Default,,0,0,0,,>> Thanks, Devin.
Dialogue: 0,0:13:58.58,0:14:00.99,Default,,0,0,0,,Xcode 9 comes with over 100 new
Dialogue: 0,0:14:00.99,0:14:02.53,Default,,0,0,0,,errors and warnings to help find
Dialogue: 0,0:14:02.53,0:14:03.43,Default,,0,0,0,,bugs in your code.
Dialogue: 0,0:14:03.75,0:14:05.63,Default,,0,0,0,,Let's talk about two warnings
Dialogue: 0,0:14:05.63,0:14:06.47,Default,,0,0,0,,that are important for
Dialogue: 0,0:14:06.47,0:14:07.17,Default,,0,0,0,,Objective-C.
Dialogue: 0,0:14:09.69,0:14:11.90,Default,,0,0,0,,Under ARC, most parameters are
Dialogue: 0,0:14:11.90,0:14:13.35,Default,,0,0,0,,safe to capture in blocks.
Dialogue: 0,0:14:13.88,0:14:16.36,Default,,0,0,0,,In this example, the
Dialogue: 0,0:14:16.36,0:14:18.26,Default,,0,0,0,,validateDictionary usingChecker
Dialogue: 0,0:14:18.26,0:14:21.04,Default,,0,0,0,,method takes an NSDictionary and
Dialogue: 0,0:14:21.04,0:14:22.72,Default,,0,0,0,,visits every entry by calling
Dialogue: 0,0:14:22.72,0:14:24.26,Default,,0,0,0,,enumerateKeysAndObjects
Dialogue: 0,0:14:24.26,0:14:24.89,Default,,0,0,0,,UsingBlock.
Dialogue: 0,0:14:26.34,0:14:28.22,Default,,0,0,0,,Block captures the checker
Dialogue: 0,0:14:28.22,0:14:28.75,Default,,0,0,0,,parameter.
Dialogue: 0,0:14:29.47,0:14:30.85,Default,,0,0,0,,This is safe and works really
Dialogue: 0,0:14:30.85,0:14:31.10,Default,,0,0,0,,well.
Dialogue: 0,0:14:32.91,0:14:34.80,Default,,0,0,0,,Notice the checkObject forKey
Dialogue: 0,0:14:35.07,0:14:35.54,Default,,0,0,0,,can fail.
Dialogue: 0,0:14:36.38,0:14:38.86,Default,,0,0,0,,The block sets stop to yes to
Dialogue: 0,0:14:38.86,0:14:40.23,Default,,0,0,0,,abort the enumeration early.
Dialogue: 0,0:14:41.58,0:14:43.55,Default,,0,0,0,,Since this is a validation
Dialogue: 0,0:14:43.55,0:14:45.02,Default,,0,0,0,,method, it should also return
Dialogue: 0,0:14:45.02,0:14:46.55,Default,,0,0,0,,BOOL and create an NS error.
Dialogue: 0,0:14:47.12,0:14:48.07,Default,,0,0,0,,Let's make that change.
Dialogue: 0,0:14:49.64,0:14:52.01,Default,,0,0,0,,OK. Let's walk through the code.
Dialogue: 0,0:14:52.36,0:14:54.20,Default,,0,0,0,,Before enumerating, isValid is
Dialogue: 0,0:14:54.20,0:14:54.90,Default,,0,0,0,,set to yes.
Dialogue: 0,0:14:55.59,0:14:57.72,Default,,0,0,0,,The block runs the checker and
Dialogue: 0,0:14:57.72,0:14:58.86,Default,,0,0,0,,returns on success.
Dialogue: 0,0:14:59.91,0:15:02.33,Default,,0,0,0,,If the checker fails, isValid is
Dialogue: 0,0:15:02.33,0:15:04.36,Default,,0,0,0,,set to no and an NS error is
Dialogue: 0,0:15:04.36,0:15:04.80,Default,,0,0,0,,created.
Dialogue: 0,0:15:06.24,0:15:08.62,Default,,0,0,0,,After enumerating, isValid is
Dialogue: 0,0:15:08.62,0:15:10.92,Default,,0,0,0,,returned, but there's a bug
Dialogue: 0,0:15:10.92,0:15:11.16,Default,,0,0,0,,here.
Dialogue: 0,0:15:12.60,0:15:14.63,Default,,0,0,0,,Out parameters like error are
Dialogue: 0,0:15:14.63,0:15:16.07,Default,,0,0,0,,implicitly autoreleasing.
Dialogue: 0,0:15:16.68,0:15:18.83,Default,,0,0,0,,Assigning to them is not safe in
Dialogue: 0,0:15:19.57,0:15:20.32,Default,,0,0,0,,a block.
Dialogue: 0,0:15:20.93,0:15:22.27,Default,,0,0,0,,enumerateKeysAndObjects
Dialogue: 0,0:15:22.27,0:15:24.24,Default,,0,0,0,,UsingBlock calls the block
Dialogue: 0,0:15:24.24,0:15:25.59,Default,,0,0,0,,inside an autorelease pool.
Dialogue: 0,0:15:26.54,0:15:28.48,Default,,0,0,0,,When it returns, the NS error
Dialogue: 0,0:15:28.48,0:15:29.70,Default,,0,0,0,,will get destroyed as well.
Dialogue: 0,0:15:30.42,0:15:31.80,Default,,0,0,0,,It isn't safe to use.
Dialogue: 0,0:15:32.32,0:15:36.34,Default,,0,0,0,,In Xcode 9, this unsafe capture
Dialogue: 0,0:15:36.34,0:15:37.27,Default,,0,0,0,,will trigger a warning.
Dialogue: 0,0:15:38.50,0:15:40.70,Default,,0,0,0,,The easiest fix is to make the
Dialogue: 0,0:15:40.70,0:15:41.87,Default,,0,0,0,,out parameter a strong
Dialogue: 0,0:15:41.87,0:15:42.50,Default,,0,0,0,,reference.
Dialogue: 0,0:15:43.16,0:15:44.58,Default,,0,0,0,,This will keep the value alive
Dialogue: 0,0:15:44.82,0:15:46.61,Default,,0,0,0,,across any autorelease pools.
Dialogue: 0,0:15:47.86,0:15:49.29,Default,,0,0,0,,This works as long as all
Dialogue: 0,0:15:49.29,0:15:50.88,Default,,0,0,0,,callers of validateDictionary
Dialogue: 0,0:15:50.88,0:15:52.50,Default,,0,0,0,,usingChecker are using ARC.
Dialogue: 0,0:15:54.03,0:15:55.56,Default,,0,0,0,,The other option is to use a
Dialogue: 0,0:15:55.56,0:15:56.76,Default,,0,0,0,,local block variable.
Dialogue: 0,0:15:57.84,0:16:00.04,Default,,0,0,0,,Here strongError is initialized
Dialogue: 0,0:16:00.04,0:16:00.41,Default,,0,0,0,,to nil.
Dialogue: 0,0:16:01.13,0:16:03.32,Default,,0,0,0,,If the enumeration stops early,
Dialogue: 0,0:16:03.57,0:16:05.89,Default,,0,0,0,,strongError safely stores the NS
Dialogue: 0,0:16:05.89,0:16:06.23,Default,,0,0,0,,error.
Dialogue: 0,0:16:07.47,0:16:09.19,Default,,0,0,0,,Then, the out parameter is
Dialogue: 0,0:16:09.19,0:16:11.06,Default,,0,0,0,,updated after the enumeration is
Dialogue: 0,0:16:11.06,0:16:11.52,Default,,0,0,0,,complete.
Dialogue: 0,0:16:12.01,0:16:14.82,Default,,0,0,0,,That's the first warning.
Dialogue: 0,0:16:15.66,0:16:16.68,Default,,0,0,0,,Let's move on to the second.
Dialogue: 0,0:16:17.98,0:16:19.79,Default,,0,0,0,,In this example, the function
Dialogue: 0,0:16:19.79,0:16:21.48,Default,,0,0,0,,foo is declared without any
Dialogue: 0,0:16:21.48,0:16:22.11,Default,,0,0,0,,parameters.
Dialogue: 0,0:16:23.69,0:16:25.88,Default,,0,0,0,,In C and Objective-C, that means
Dialogue: 0,0:16:25.88,0:16:27.30,Default,,0,0,0,,that foo can be called with any
Dialogue: 0,0:16:27.30,0:16:28.98,Default,,0,0,0,,number or type of argument.
Dialogue: 0,0:16:30.03,0:16:31.24,Default,,0,0,0,,A function with an empty
Dialogue: 0,0:16:31.24,0:16:32.70,Default,,0,0,0,,parameter list is called a
Dialogue: 0,0:16:32.70,0:16:34.37,Default,,0,0,0,,non-prototype declaration.
Dialogue: 0,0:16:35.65,0:16:36.93,Default,,0,0,0,,This behavior dates from the
Dialogue: 0,0:16:37.00,0:16:38.89,Default,,0,0,0,,early days of C where parameters
Dialogue: 0,0:16:38.89,0:16:40.26,Default,,0,0,0,,were only listed at function
Dialogue: 0,0:16:40.26,0:16:41.72,Default,,0,0,0,,definitions, but this
Dialogue: 0,0:16:41.72,0:16:43.50,Default,,0,0,0,,declaration is not type safe.
Dialogue: 0,0:16:44.03,0:16:45.42,Default,,0,0,0,,This is never really what you
Dialogue: 0,0:16:45.42,0:16:45.77,Default,,0,0,0,,want.
Dialogue: 0,0:16:46.45,0:16:47.41,Default,,0,0,0,,Calls that don't match the
Dialogue: 0,0:16:47.41,0:16:49.83,Default,,0,0,0,,definition can crash at runtime.
Dialogue: 0,0:16:50.80,0:16:52.87,Default,,0,0,0,,In Xcode 9, the compiler has a
Dialogue: 0,0:16:52.87,0:16:54.42,Default,,0,0,0,,new warning that enforces strict
Dialogue: 0,0:16:54.42,0:16:55.03,Default,,0,0,0,,prototypes.
Dialogue: 0,0:16:57.70,0:17:00.13,Default,,0,0,0,,Usually, the fix is to add void.
Dialogue: 0,0:17:00.81,0:17:02.66,Default,,0,0,0,,This specifies exactly zero
Dialogue: 0,0:17:02.66,0:17:03.37,Default,,0,0,0,,parameters.
Dialogue: 0,0:17:03.77,0:17:05.50,Default,,0,0,0,,Any calls with arguments will
Dialogue: 0,0:17:05.50,0:17:06.12,Default,,0,0,0,,give an error.
Dialogue: 0,0:17:07.66,0:17:08.97,Default,,0,0,0,,Since function pointers and
Dialogue: 0,0:17:08.97,0:17:10.76,Default,,0,0,0,,blocks have a common declaration
Dialogue: 0,0:17:10.76,0:17:12.80,Default,,0,0,0,,syntax with functions, you'll
Dialogue: 0,0:17:12.80,0:17:14.09,Default,,0,0,0,,also see this if you have a
Dialogue: 0,0:17:14.09,0:17:15.90,Default,,0,0,0,,function or method that takes a
Dialogue: 0,0:17:15.90,0:17:16.98,Default,,0,0,0,,block as an argument.
Dialogue: 0,0:17:18.24,0:17:19.84,Default,,0,0,0,,The fix is the same as with
Dialogue: 0,0:17:19.84,0:17:20.96,Default,,0,0,0,,function declarations.
Dialogue: 0,0:17:21.45,0:17:23.72,Default,,0,0,0,,Add void to specify exactly zero
Dialogue: 0,0:17:23.72,0:17:24.50,Default,,0,0,0,,parameters.
Dialogue: 0,0:17:25.35,0:17:26.85,Default,,0,0,0,,Then, you'll get an error if you
Dialogue: 0,0:17:26.85,0:17:28.57,Default,,0,0,0,,pass in a block with the wrong
Dialogue: 0,0:17:29.46,0:17:29.57,Default,,0,0,0,,type.
Dialogue: 0,0:17:30.26,0:17:32.29,Default,,0,0,0,,Xcode's project modernization
Dialogue: 0,0:17:32.37,0:17:33.83,Default,,0,0,0,,will turn these warnings on in
Dialogue: 0,0:17:33.83,0:17:35.82,Default,,0,0,0,,your Build settings, or you can
Dialogue: 0,0:17:35.85,0:17:37.36,Default,,0,0,0,,upgrade later by selecting your
Dialogue: 0,0:17:37.36,0:17:39.03,Default,,0,0,0,,project and choosing Validate
Dialogue: 0,0:17:39.03,0:17:40.35,Default,,0,0,0,,Settings from the Editor menu.
Dialogue: 0,0:17:40.92,0:17:43.82,Default,,0,0,0,,You can also upgrade new
Dialogue: 0,0:17:43.82,0:17:45.49,Default,,0,0,0,,warnings to errors by selecting
Dialogue: 0,0:17:45.68,0:17:47.27,Default,,0,0,0,,Yes (Error) in the Build
Dialogue: 0,0:17:47.27,0:17:47.72,Default,,0,0,0,,settings.
Dialogue: 0,0:17:49.20,0:17:50.15,Default,,0,0,0,,That's it today for new
Dialogue: 0,0:17:50.15,0:17:50.71,Default,,0,0,0,,warnings.
Dialogue: 0,0:17:52.15,0:17:53.52,Default,,0,0,0,,Let's move on to C++.
Dialogue: 0,0:17:55.04,0:17:57.47,Default,,0,0,0,,This year, we've put a lot of
Dialogue: 0,0:17:57.47,0:17:59.29,Default,,0,0,0,,effort into improving the C++
Dialogue: 0,0:17:59.29,0:18:00.43,Default,,0,0,0,,experience in Xcode.
Dialogue: 0,0:18:01.86,0:18:03.00,Default,,0,0,0,,That includes refactoring
Dialogue: 0,0:18:03.00,0:18:03.43,Default,,0,0,0,,support.
Dialogue: 0,0:18:04.11,0:18:05.87,Default,,0,0,0,,We support a lot of operations.
Dialogue: 0,0:18:06.41,0:18:08.29,Default,,0,0,0,,I'd like to give a short tour of
Dialogue: 0,0:18:08.29,0:18:10.54,Default,,0,0,0,,using Xcode to refactor LLVM.
Dialogue: 0,0:18:10.54,0:18:13.98,Default,,0,0,0,,This is a large C++ code base
Dialogue: 0,0:18:13.98,0:18:15.08,Default,,0,0,0,,that shows off the engine.
Dialogue: 0,0:18:16.34,0:18:18.32,Default,,0,0,0,,But even if you're not a C++
Dialogue: 0,0:18:18.32,0:18:19.80,Default,,0,0,0,,developer, you could still get
Dialogue: 0,0:18:19.80,0:18:21.60,Default,,0,0,0,,an idea of how refactoring in
Dialogue: 0,0:18:21.63,0:18:23.10,Default,,0,0,0,,Xcode can improve your work
Dialogue: 0,0:18:23.10,0:18:23.34,Default,,0,0,0,,flow.
Dialogue: 0,0:18:23.91,0:18:27.14,Default,,0,0,0,,I started at a member function
Dialogue: 0,0:18:27.14,0:18:28.65,Default,,0,0,0,,definition from the InstCombiner
Dialogue: 0,0:18:28.65,0:18:29.15,Default,,0,0,0,,class.
Dialogue: 0,0:18:30.28,0:18:31.75,Default,,0,0,0,,This is a utility for combining
Dialogue: 0,0:18:31.75,0:18:32.47,Default,,0,0,0,,instructions.
Dialogue: 0,0:18:33.77,0:18:35.55,Default,,0,0,0,,I never liked the Inst short
Dialogue: 0,0:18:35.55,0:18:37.38,Default,,0,0,0,,form for instruction, so I
Dialogue: 0,0:18:37.38,0:18:39.03,Default,,0,0,0,,Command-clicked in Xcode and
Dialogue: 0,0:18:39.03,0:18:39.80,Default,,0,0,0,,selected Rename.
Dialogue: 0,0:18:41.69,0:18:43.58,Default,,0,0,0,,This worked even though I wasn't
Dialogue: 0,0:18:43.58,0:18:44.75,Default,,0,0,0,,at the class declaration.
Dialogue: 0,0:18:46.45,0:18:48.03,Default,,0,0,0,,InstructionCombiner is more
Dialogue: 0,0:18:48.03,0:18:48.52,Default,,0,0,0,,clear to me.
Dialogue: 0,0:18:50.42,0:18:52.41,Default,,0,0,0,,Xcode updated the name in place.
Dialogue: 0,0:18:52.41,0:18:53.86,Default,,0,0,0,,This saved me a lot of hunting
Dialogue: 0,0:18:53.86,0:18:54.10,Default,,0,0,0,,around.
Dialogue: 0,0:18:54.73,0:18:57.10,Default,,0,0,0,,I double-checked the class
Dialogue: 0,0:18:57.10,0:18:57.74,Default,,0,0,0,,declaration.
Dialogue: 0,0:18:58.27,0:18:59.27,Default,,0,0,0,,It was updated too.
Dialogue: 0,0:19:00.35,0:19:02.85,Default,,0,0,0,,So was its use in the CRTP base
Dialogue: 0,0:19:02.85,0:19:04.22,Default,,0,0,0,,class, InstVisitor.
Dialogue: 0,0:19:05.56,0:19:07.50,Default,,0,0,0,,InstVisitor uses the same short
Dialogue: 0,0:19:07.50,0:19:08.75,Default,,0,0,0,,form, and so does
Dialogue: 0,0:19:08.81,0:19:10.04,Default,,0,0,0,,InstCombineWorklist.
Dialogue: 0,0:19:10.64,0:19:11.73,Default,,0,0,0,,But I had better leave those for
Dialogue: 0,0:19:11.73,0:19:12.34,Default,,0,0,0,,a separate commit.
Dialogue: 0,0:19:14.22,0:19:15.80,Default,,0,0,0,,Since changing a class name from
Dialogue: 0,0:19:15.80,0:19:17.05,Default,,0,0,0,,one of its member functions
Dialogue: 0,0:19:17.05,0:19:18.77,Default,,0,0,0,,worked, I moved on to something
Dialogue: 0,0:19:18.80,0:19:19.86,Default,,0,0,0,,even more complicated.
Dialogue: 0,0:19:20.60,0:19:21.56,Default,,0,0,0,,I went to a template
Dialogue: 0,0:19:21.56,0:19:23.18,Default,,0,0,0,,specialization for simplified
Dialogue: 0,0:19:23.18,0:19:26.03,Default,,0,0,0,,type, a utility we use on smart
Dialogue: 0,0:19:26.03,0:19:27.65,Default,,0,0,0,,pointers and custom iterators.
Dialogue: 0,0:19:28.16,0:19:30.75,Default,,0,0,0,,I think the function
Dialogue: 0,0:19:30.82,0:19:32.96,Default,,0,0,0,,getSimplifiedValue is named
Dialogue: 0,0:19:32.96,0:19:33.41,Default,,0,0,0,,wrong.
Dialogue: 0,0:19:34.07,0:19:35.63,Default,,0,0,0,,It should use STL naming
Dialogue: 0,0:19:35.63,0:19:37.40,Default,,0,0,0,,conventions like its class name.
Dialogue: 0,0:19:38.42,0:19:39.53,Default,,0,0,0,,I selected Rename again.
Dialogue: 0,0:19:40.89,0:19:42.06,Default,,0,0,0,,Tying together template
Dialogue: 0,0:19:42.06,0:19:43.83,Default,,0,0,0,,specializations from across the
Dialogue: 0,0:19:43.83,0:19:46.15,Default,,0,0,0,,project is complicated, but
Dialogue: 0,0:19:46.15,0:19:47.59,Default,,0,0,0,,Xcode can handle it.
Dialogue: 0,0:19:48.26,0:19:50.47,Default,,0,0,0,,The specialization I was looking
Dialogue: 0,0:19:50.47,0:19:52.66,Default,,0,0,0,,at was updated and so was the
Dialogue: 0,0:19:52.66,0:19:53.85,Default,,0,0,0,,main template declaration.
Dialogue: 0,0:19:55.00,0:19:56.33,Default,,0,0,0,,There's another specialization
Dialogue: 0,0:19:56.33,0:19:58.25,Default,,0,0,0,,right below, and it was fixed
Dialogue: 0,0:19:58.93,0:19:59.00,Default,,0,0,0,,too.
Dialogue: 0,0:20:01.40,0:20:03.39,Default,,0,0,0,,Next, I moved to Constants.h,
Dialogue: 0,0:20:03.68,0:20:04.86,Default,,0,0,0,,where we have a class called
Dialogue: 0,0:20:04.90,0:20:06.56,Default,,0,0,0,,ConstantInt for representing
Dialogue: 0,0:20:06.74,0:20:07.62,Default,,0,0,0,,constant integers.
Dialogue: 0,0:20:08.74,0:20:09.82,Default,,0,0,0,,It has nice convenience
Dialogue: 0,0:20:09.82,0:20:11.48,Default,,0,0,0,,functions for getting true and
Dialogue: 0,0:20:11.48,0:20:12.47,Default,,0,0,0,,false values.
Dialogue: 0,0:20:13.67,0:20:15.52,Default,,0,0,0,,I added declarations for a
Dialogue: 0,0:20:15.52,0:20:17.41,Default,,0,0,0,,getMax function to get the
Dialogue: 0,0:20:17.41,0:20:18.82,Default,,0,0,0,,maximum integer value.
Dialogue: 0,0:20:20.30,0:20:21.98,Default,,0,0,0,,Then, I Command-clicked and
Dialogue: 0,0:20:21.98,0:20:23.15,Default,,0,0,0,,generated the missing function
Dialogue: 0,0:20:23.15,0:20:26.09,Default,,0,0,0,,definitions for each of them.
Dialogue: 0,0:20:26.69,0:20:28.48,Default,,0,0,0,,Here they are in Constants.cpp.
Dialogue: 0,0:20:29.58,0:20:31.49,Default,,0,0,0,,What I like about this is where
Dialogue: 0,0:20:31.49,0:20:32.67,Default,,0,0,0,,the functions showed up in the
Dialogue: 0,0:20:32.67,0:20:33.08,Default,,0,0,0,,file.
Dialogue: 0,0:20:34.28,0:20:35.56,Default,,0,0,0,,My new definitions were
Dialogue: 0,0:20:35.56,0:20:37.36,Default,,0,0,0,,generated after the last member
Dialogue: 0,0:20:37.36,0:20:38.93,Default,,0,0,0,,functions defined for the same
Dialogue: 0,0:20:38.93,0:20:42.19,Default,,0,0,0,,class, ConstantInt, but before
Dialogue: 0,0:20:42.19,0:20:43.48,Default,,0,0,0,,the member functions for the
Dialogue: 0,0:20:43.48,0:20:44.20,Default,,0,0,0,,next class.
Dialogue: 0,0:20:45.50,0:20:47.00,Default,,0,0,0,,This is exactly where I want
Dialogue: 0,0:20:47.00,0:20:47.20,Default,,0,0,0,,them.
Dialogue: 0,0:20:48.52,0:20:53.83,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:20:54.33,0:20:56.01,Default,,0,0,0,,LVM has lots of code for
Dialogue: 0,0:20:56.01,0:20:57.08,Default,,0,0,0,,representing integers.
Dialogue: 0,0:20:57.63,0:20:58.90,Default,,0,0,0,,I had a look at this greatest
Dialogue: 0,0:20:58.90,0:21:00.64,Default,,0,0,0,,common divisor function, and I
Dialogue: 0,0:21:00.64,0:21:03.00,Default,,0,0,0,,noticed a local variable, Pow2,
Dialogue: 0,0:21:03.00,0:21:03.92,Default,,0,0,0,,that is complicated to
Dialogue: 0,0:21:03.92,0:21:04.47,Default,,0,0,0,,calculate.
Dialogue: 0,0:21:05.84,0:21:07.69,Default,,0,0,0,,Its computation really belongs
Dialogue: 0,0:21:07.69,0:21:08.55,Default,,0,0,0,,in its own function.
Dialogue: 0,0:21:10.35,0:21:11.86,Default,,0,0,0,,I selected the code and opened
Dialogue: 0,0:21:11.86,0:21:13.57,Default,,0,0,0,,the contextual menu, where I
Dialogue: 0,0:21:13.57,0:21:15.28,Default,,0,0,0,,clicked on Extract Function.
Dialogue: 0,0:21:15.28,0:21:17.16,Default,,0,0,0,,I was a little sloppy with my
Dialogue: 0,0:21:17.16,0:21:19.02,Default,,0,0,0,,selection, but Xcode is smart
Dialogue: 0,0:21:19.02,0:21:20.14,Default,,0,0,0,,enough that it worked anyway.
Dialogue: 0,0:21:21.47,0:21:23.12,Default,,0,0,0,,That entered me straight into
Dialogue: 0,0:21:23.12,0:21:24.27,Default,,0,0,0,,rename at the bottom of the
Dialogue: 0,0:21:24.27,0:21:24.66,Default,,0,0,0,,screen.
Dialogue: 0,0:21:25.47,0:21:27.98,Default,,0,0,0,,I chose countCommonPowersOf2.
Dialogue: 0,0:21:29.28,0:21:30.50,Default,,0,0,0,,Let's scroll up and look at the
Dialogue: 0,0:21:30.50,0:21:31.04,Default,,0,0,0,,definition.
Dialogue: 0,0:21:31.78,0:21:33.89,Default,,0,0,0,,The key thing here is that the
Dialogue: 0,0:21:33.89,0:21:35.63,Default,,0,0,0,,arguments A and B were
Dialogue: 0,0:21:35.66,0:21:36.93,Default,,0,0,0,,automatically captured by
Dialogue: 0,0:21:36.93,0:21:37.63,Default,,0,0,0,,reference.
Dialogue: 0,0:21:38.70,0:21:40.29,Default,,0,0,0,,That's important because they're
Dialogue: 0,0:21:40.29,0:21:41.05,Default,,0,0,0,,being modified.
Dialogue: 0,0:21:41.83,0:21:45.21,Default,,0,0,0,,Extract Function got it right.
Dialogue: 0,0:21:45.86,0:21:47.34,Default,,0,0,0,,Extracting the function was a
Dialogue: 0,0:21:47.34,0:21:49.34,Default,,0,0,0,,nice opportunity to clean up the
Dialogue: 0,0:21:49.34,0:21:51.00,Default,,0,0,0,,code to use early returns.
Dialogue: 0,0:21:53.50,0:21:55.47,Default,,0,0,0,,That got me bouncing around a
Dialogue: 0,0:21:55.47,0:21:57.00,Default,,0,0,0,,little, and I found this code in
Dialogue: 0,0:21:57.00,0:21:58.39,Default,,0,0,0,,the optimizer for unrolling
Dialogue: 0,0:21:58.39,0:21:58.87,Default,,0,0,0,,loops.
Dialogue: 0,0:21:59.98,0:22:02.67,Default,,0,0,0,,I noticed a call to getLoopFor
Dialogue: 0,0:22:02.74,0:22:03.69,Default,,0,0,0,,and an if statement.
Dialogue: 0,0:22:05.07,0:22:06.59,Default,,0,0,0,,The same function is called with
Dialogue: 0,0:22:06.59,0:22:08.70,Default,,0,0,0,,the same argument again right
Dialogue: 0,0:22:08.70,0:22:11.21,Default,,0,0,0,,below in a while loop.
Dialogue: 0,0:22:11.78,0:22:13.45,Default,,0,0,0,,getLoopFor does a hash table
Dialogue: 0,0:22:13.45,0:22:14.79,Default,,0,0,0,,lookup, which isn't free.
Dialogue: 0,0:22:15.60,0:22:17.15,Default,,0,0,0,,Since the while loop doesn't
Dialogue: 0,0:22:17.15,0:22:18.82,Default,,0,0,0,,change the hash table, I
Dialogue: 0,0:22:18.82,0:22:20.45,Default,,0,0,0,,Command-clicked and selected
Dialogue: 0,0:22:20.55,0:22:22.36,Default,,0,0,0,,Extract Repeated Expression.
Dialogue: 0,0:22:24.29,0:22:25.53,Default,,0,0,0,,This stored the result of the
Dialogue: 0,0:22:25.53,0:22:27.06,Default,,0,0,0,,function call in a local
Dialogue: 0,0:22:27.06,0:22:28.90,Default,,0,0,0,,variable, so it was only called
Dialogue: 0,0:22:28.90,0:22:30.64,Default,,0,0,0,,once, and then I immediately
Dialogue: 0,0:22:30.64,0:22:31.68,Default,,0,0,0,,used Rename.
Dialogue: 0,0:22:32.29,0:22:35.04,Default,,0,0,0,,I chose the name LoopLatch.
Dialogue: 0,0:22:35.61,0:22:37.57,Default,,0,0,0,,That was easy.
Dialogue: 0,0:22:38.07,0:22:39.86,Default,,0,0,0,,Extract and Rename work cleanly
Dialogue: 0,0:22:39.86,0:22:40.26,Default,,0,0,0,,together.
Dialogue: 0,0:22:42.68,0:22:44.71,Default,,0,0,0,,After all that refactoring, I
Dialogue: 0,0:22:44.71,0:22:45.85,Default,,0,0,0,,thought I'd write some new code.
Dialogue: 0,0:22:47.27,0:22:48.86,Default,,0,0,0,,ArrayRef is a generalized
Dialogue: 0,0:22:48.86,0:22:50.53,Default,,0,0,0,,reference to contiguous values,
Dialogue: 0,0:22:51.00,0:22:52.78,Default,,0,0,0,,whether they're in an STL vector
Dialogue: 0,0:22:52.89,0:22:54.81,Default,,0,0,0,,or in one of LVM's custom data
Dialogue: 0,0:22:54.81,0:22:55.47,Default,,0,0,0,,structures.
Dialogue: 0,0:22:56.47,0:22:58.02,Default,,0,0,0,,Notice that ArrayRef is
Dialogue: 0,0:22:58.02,0:22:59.89,Default,,0,0,0,,templated on the value type in
Dialogue: 0,0:22:59.89,0:23:00.29,Default,,0,0,0,,the array.
Dialogue: 0,0:23:01.36,0:23:03.12,Default,,0,0,0,,I thought it might be useful to
Dialogue: 0,0:23:03.12,0:23:04.63,Default,,0,0,0,,compare two ArrayRefs.
Dialogue: 0,0:23:05.49,0:23:06.89,Default,,0,0,0,,Why not implement a string like
Dialogue: 0,0:23:06.89,0:23:07.48,Default,,0,0,0,,comparison?
Dialogue: 0,0:23:08.47,0:23:09.90,Default,,0,0,0,,I need to loop from zero to the
Dialogue: 0,0:23:09.90,0:23:11.42,Default,,0,0,0,,minimum size between left-hand
Dialogue: 0,0:23:11.42,0:23:12.77,Default,,0,0,0,,side and right-hand side.
Dialogue: 0,0:23:13.59,0:23:14.76,Default,,0,0,0,,When I hit the dot after
Dialogue: 0,0:23:14.76,0:23:16.80,Default,,0,0,0,,left-hand side, code completion
Dialogue: 0,0:23:16.80,0:23:17.28,Default,,0,0,0,,kicked in.
Dialogue: 0,0:23:18.29,0:23:20.67,Default,,0,0,0,,Remember, left-hand side is
Dialogue: 0,0:23:20.71,0:23:21.89,Default,,0,0,0,,templated on T here.
Dialogue: 0,0:23:22.37,0:23:24.87,Default,,0,0,0,,That's pretty cool.
Dialogue: 0,0:23:25.63,0:23:27.68,Default,,0,0,0,,Code completion works with
Dialogue: 0,0:23:27.68,0:23:29.72,Default,,0,0,0,,templates, new in Xcode 9.
Dialogue: 0,0:23:30.52,0:23:36.23,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:23:36.73,0:23:38.53,Default,,0,0,0,,And that's C++ refactoring and
Dialogue: 0,0:23:38.53,0:23:39.97,Default,,0,0,0,,code completion in Xcode.
Dialogue: 0,0:23:40.32,0:23:43.23,Default,,0,0,0,,Let's talk about a few features
Dialogue: 0,0:23:43.23,0:23:44.93,Default,,0,0,0,,from the C++17 standard.
Dialogue: 0,0:23:45.44,0:23:49.06,Default,,0,0,0,,I'll start with STL's tuple, a
Dialogue: 0,0:23:49.06,0:23:51.48,Default,,0,0,0,,useful type from C++11 that
Dialogue: 0,0:23:51.48,0:23:53.17,Default,,0,0,0,,enables multiple return values.
Dialogue: 0,0:23:54.13,0:23:55.54,Default,,0,0,0,,But decomposing it is awkward.
Dialogue: 0,0:23:56.39,0:23:58.18,Default,,0,0,0,,Decomposition requires a tie
Dialogue: 0,0:23:58.18,0:24:00.71,Default,,0,0,0,,around the variables, the types
Dialogue: 0,0:24:00.71,0:24:02.72,Default,,0,0,0,,can't be inferred, and the
Dialogue: 0,0:24:02.72,0:24:03.86,Default,,0,0,0,,variable names need to be
Dialogue: 0,0:24:03.86,0:24:04.49,Default,,0,0,0,,duplicated.
Dialogue: 0,0:24:05.75,0:24:07.91,Default,,0,0,0,,C++17 solves this with
Dialogue: 0,0:24:07.91,0:24:10.14,Default,,0,0,0,,structured binding, which binds
Dialogue: 0,0:24:10.14,0:24:11.68,Default,,0,0,0,,names directly to the returned
Dialogue: 0,0:24:11.84,0:24:12.89,Default,,0,0,0,,tuple elements.
Dialogue: 0,0:24:14.67,0:24:16.07,Default,,0,0,0,,This is a great feature.
Dialogue: 0,0:24:16.23,0:24:17.44,Default,,0,0,0,,Now, it's much easier to work
Dialogue: 0,0:24:17.44,0:24:18.13,Default,,0,0,0,,with tuples.
Dialogue: 0,0:24:18.71,0:24:20.02,Default,,0,0,0,,Structured binding can be used
Dialogue: 0,0:24:20.02,0:24:21.53,Default,,0,0,0,,anywhere get can be used.
Dialogue: 0,0:24:22.25,0:24:23.98,Default,,0,0,0,,It also works out of the box
Dialogue: 0,0:24:24.02,0:24:25.32,Default,,0,0,0,,with plain-old data types like
Dialogue: 0,0:24:25.42,0:24:25.68,Default,,0,0,0,,Point.
Dialogue: 0,0:24:26.73,0:24:28.48,Default,,0,0,0,,The syntax is exactly the same
Dialogue: 0,0:24:28.48,0:24:29.32,Default,,0,0,0,,as with tuples.
Dialogue: 0,0:24:29.60,0:24:32.49,Default,,0,0,0,,That's structured binding.
Dialogue: 0,0:24:33.14,0:24:35.66,Default,,0,0,0,,The next feature is initializers
Dialogue: 0,0:24:35.66,0:24:36.59,Default,,0,0,0,,in if statements.
Dialogue: 0,0:24:38.22,0:24:39.01,Default,,0,0,0,,Here's an example.
Dialogue: 0,0:24:39.81,0:24:41.66,Default,,0,0,0,,The initializer finds the last
Dialogue: 0,0:24:41.66,0:24:43.18,Default,,0,0,0,,slash in a path string.
Dialogue: 0,0:24:43.88,0:24:45.62,Default,,0,0,0,,The slash variable scope is
Dialogue: 0,0:24:45.62,0:24:46.91,Default,,0,0,0,,limited to the if statement.
Dialogue: 0,0:24:48.63,0:24:50.02,Default,,0,0,0,,Then, the condition checks
Dialogue: 0,0:24:50.18,0:24:51.46,Default,,0,0,0,,whether slash was found.
Dialogue: 0,0:24:52.93,0:24:55.30,Default,,0,0,0,,If so, then slash is used to
Dialogue: 0,0:24:55.30,0:24:57.56,Default,,0,0,0,,split the path.
Dialogue: 0,0:24:58.04,0:24:59.09,Default,,0,0,0,,The same feature works for
Dialogue: 0,0:24:59.09,0:24:59.91,Default,,0,0,0,,switch statements.
Dialogue: 0,0:25:01.41,0:25:02.79,Default,,0,0,0,,Minimizing the scope of the
Dialogue: 0,0:25:02.79,0:25:04.95,Default,,0,0,0,,slash variable helps to prevent
Dialogue: 0,0:25:04.95,0:25:05.41,Default,,0,0,0,,bugs.
Dialogue: 0,0:25:06.14,0:25:07.66,Default,,0,0,0,,If this function continues,
Dialogue: 0,0:25:07.90,0:25:09.61,Default,,0,0,0,,we'll get an error if we try to
Dialogue: 0,0:25:09.67,0:25:11.09,Default,,0,0,0,,reuse the slash variable.
Dialogue: 0,0:25:11.93,0:25:13.87,Default,,0,0,0,,This is good because the logic
Dialogue: 0,0:25:13.87,0:25:14.51,Default,,0,0,0,,is unrelated.
Dialogue: 0,0:25:15.03,0:25:18.76,Default,,0,0,0,,Let's move on to a feature for
Dialogue: 0,0:25:18.76,0:25:19.81,Default,,0,0,0,,templated functions.
Dialogue: 0,0:25:21.56,0:25:23.36,Default,,0,0,0,,Advance is a simple template
Dialogue: 0,0:25:23.36,0:25:24.74,Default,,0,0,0,,algorithm for in advancing an
Dialogue: 0,0:25:24.74,0:25:25.23,Default,,0,0,0,,iterator.
Dialogue: 0,0:25:26.01,0:25:27.45,Default,,0,0,0,,It has been in the STL for a
Dialogue: 0,0:25:27.45,0:25:29.55,Default,,0,0,0,,long time, but let's use it as
Dialogue: 0,0:25:29.55,0:25:30.08,Default,,0,0,0,,an example.
Dialogue: 0,0:25:31.17,0:25:32.62,Default,,0,0,0,,For n greater than 0, it moves
Dialogue: 0,0:25:32.62,0:25:35.09,Default,,0,0,0,,the iterator forward, and for n
Dialogue: 0,0:25:35.09,0:25:36.08,Default,,0,0,0,,less than 0, it moves the
Dialogue: 0,0:25:36.08,0:25:37.57,Default,,0,0,0,,iterator backward.
Dialogue: 0,0:25:38.78,0:25:40.54,Default,,0,0,0,,For example, you might want to
Dialogue: 0,0:25:40.54,0:25:42.38,Default,,0,0,0,,look ahead five nodes in a
Dialogue: 0,0:25:42.38,0:25:43.04,Default,,0,0,0,,linked list.
Dialogue: 0,0:25:43.77,0:25:45.55,Default,,0,0,0,,Advance will count forward one
Dialogue: 0,0:25:45.55,0:25:46.03,Default,,0,0,0,,by one.
Dialogue: 0,0:25:47.94,0:25:50.41,Default,,0,0,0,,The same code works for getting
Dialogue: 0,0:25:50.41,0:25:51.71,Default,,0,0,0,,the fifth character in a string.
Dialogue: 0,0:25:52.35,0:25:53.83,Default,,0,0,0,,It's powerful to have the same
Dialogue: 0,0:25:53.83,0:25:55.50,Default,,0,0,0,,interface for advancing in both
Dialogue: 0,0:25:55.50,0:25:56.28,Default,,0,0,0,,data structures.
Dialogue: 0,0:25:57.49,0:25:59.66,Default,,0,0,0,,But this code is really slow for
Dialogue: 0,0:25:59.66,0:26:00.24,Default,,0,0,0,,strings.
Dialogue: 0,0:26:00.68,0:26:02.16,Default,,0,0,0,,For strings in arrays, which
Dialogue: 0,0:26:02.16,0:26:03.98,Default,,0,0,0,,have random access iterators, we
Dialogue: 0,0:26:03.98,0:26:04.62,Default,,0,0,0,,don't need a loop.
Dialogue: 0,0:26:05.42,0:26:06.95,Default,,0,0,0,,Operator + will jump ahead in
Dialogue: 0,0:26:06.95,0:26:07.64,Default,,0,0,0,,concept time.
Dialogue: 0,0:26:08.19,0:26:11.52,Default,,0,0,0,,But adding a simple if statement
Dialogue: 0,0:26:11.52,0:26:13.12,Default,,0,0,0,,won't work because it's just a
Dialogue: 0,0:26:13.16,0:26:14.08,Default,,0,0,0,,runtime check.
Dialogue: 0,0:26:15.20,0:26:17.15,Default,,0,0,0,,Its body is required to compile
Dialogue: 0,0:26:17.15,0:26:19.17,Default,,0,0,0,,for all template instantiations,
Dialogue: 0,0:26:19.51,0:26:21.02,Default,,0,0,0,,but linked list iterators don't
Dialogue: 0,0:26:21.02,0:26:22.52,Default,,0,0,0,,have operator +.
Dialogue: 0,0:26:23.02,0:26:25.77,Default,,0,0,0,,We have a problem.
Dialogue: 0,0:26:27.25,0:26:29.25,Default,,0,0,0,,Advance needs a common interface
Dialogue: 0,0:26:29.25,0:26:30.91,Default,,0,0,0,,that compiles for linked lists
Dialogue: 0,0:26:31.70,0:26:34.39,Default,,0,0,0,,and a fast path for strings and
Dialogue: 0,0:26:34.57,0:26:34.67,Default,,0,0,0,,arrays.
Dialogue: 0,0:26:34.97,0:26:36.21,Default,,0,0,0,,The classic solution is a
Dialogue: 0,0:26:36.21,0:26:37.67,Default,,0,0,0,,technique called compile time
Dialogue: 0,0:26:37.67,0:26:39.37,Default,,0,0,0,,dispatch, where the logic is
Dialogue: 0,0:26:39.37,0:26:40.69,Default,,0,0,0,,split into overloaded helper
Dialogue: 0,0:26:40.69,0:26:42.44,Default,,0,0,0,,functions and advance calls the
Dialogue: 0,0:26:42.44,0:26:44.15,Default,,0,0,0,,right overload based on a
Dialogue: 0,0:26:44.15,0:26:45.43,Default,,0,0,0,,compile time type trait.
Dialogue: 0,0:26:45.95,0:26:48.50,Default,,0,0,0,,And compile time dispatch works.
Dialogue: 0,0:26:48.87,0:26:50.57,Default,,0,0,0,,It's what C++ Library authors
Dialogue: 0,0:26:50.57,0:26:51.66,Default,,0,0,0,,have been doing for decades.
Dialogue: 0,0:26:52.82,0:26:54.24,Default,,0,0,0,,But it's an advanced technique,
Dialogue: 0,0:26:54.54,0:26:55.99,Default,,0,0,0,,and what we're trying to do is
Dialogue: 0,0:26:56.04,0:26:56.57,Default,,0,0,0,,pretty simple.
Dialogue: 0,0:26:58.28,0:27:00.38,Default,,0,0,0,,The original not working code
Dialogue: 0,0:27:00.59,0:27:01.75,Default,,0,0,0,,was easy to understand.
Dialogue: 0,0:27:03.02,0:27:06.88,Default,,0,0,0,,In C++17, constexpr if allows
Dialogue: 0,0:27:06.88,0:27:08.08,Default,,0,0,0,,you to express this logic
Dialogue: 0,0:27:08.32,0:27:08.91,Default,,0,0,0,,naturally.
Dialogue: 0,0:27:10.83,0:27:12.80,Default,,0,0,0,,constexpr if discards the not
Dialogue: 0,0:27:12.80,0:27:14.28,Default,,0,0,0,,taken paths when instantiating
Dialogue: 0,0:27:14.28,0:27:16.26,Default,,0,0,0,,temples, so the linked list code
Dialogue: 0,0:27:16.26,0:27:18.90,Default,,0,0,0,,will still compile, but advance
Dialogue: 0,0:27:18.90,0:27:20.28,Default,,0,0,0,,will use the fast path for
Dialogue: 0,0:27:20.28,0:27:22.59,Default,,0,0,0,,strings and arrays.
Dialogue: 0,0:27:23.27,0:27:25.62,Default,,0,0,0,,constexpr if makes reading and
Dialogue: 0,0:27:25.62,0:27:27.64,Default,,0,0,0,,writing generic code much
Dialogue: 0,0:27:27.64,0:27:28.01,Default,,0,0,0,,simpler.
Dialogue: 0,0:27:30.96,0:27:32.73,Default,,0,0,0,,Let's finish with a new library
Dialogue: 0,0:27:32.73,0:27:34.02,Default,,0,0,0,,facility for strings.
Dialogue: 0,0:27:35.28,0:27:38.15,Default,,0,0,0,,The STL string class has a rich
Dialogue: 0,0:27:38.15,0:27:40.14,Default,,0,0,0,,API, but it's not always the
Dialogue: 0,0:27:40.14,0:27:40.66,Default,,0,0,0,,right tool.
Dialogue: 0,0:27:41.72,0:27:43.14,Default,,0,0,0,,This example might look
Dialogue: 0,0:27:43.14,0:27:43.64,Default,,0,0,0,,familiar.
Dialogue: 0,0:27:44.49,0:27:46.46,Default,,0,0,0,,The function split searches for
Dialogue: 0,0:27:46.46,0:27:48.04,Default,,0,0,0,,the last slash in the path
Dialogue: 0,0:27:48.04,0:27:48.46,Default,,0,0,0,,argument.
Dialogue: 0,0:27:49.00,0:27:51.82,Default,,0,0,0,,If it finds a slash, it splits
Dialogue: 0,0:27:51.82,0:27:53.69,Default,,0,0,0,,the path into directory and
Dialogue: 0,0:27:53.69,0:27:54.24,Default,,0,0,0,,filename.
Dialogue: 0,0:27:55.56,0:27:57.12,Default,,0,0,0,,Without a slash, it returns the
Dialogue: 0,0:27:57.12,0:27:58.47,Default,,0,0,0,,full path as the filename.
Dialogue: 0,0:28:00.00,0:28:02.44,Default,,0,0,0,,Because of string's API, this
Dialogue: 0,0:28:02.44,0:28:04.39,Default,,0,0,0,,code was easy to write, but
Dialogue: 0,0:28:04.87,0:28:06.13,Default,,0,0,0,,there's a performance problem
Dialogue: 0,0:28:06.13,0:28:06.44,Default,,0,0,0,,lurking.
Dialogue: 0,0:28:07.84,0:28:09.99,Default,,0,0,0,,Split is returning copies of the
Dialogue: 0,0:28:09.99,0:28:10.39,Default,,0,0,0,,string.
Dialogue: 0,0:28:11.59,0:28:12.99,Default,,0,0,0,,Heavy use of functions like
Dialogue: 0,0:28:12.99,0:28:15.05,Default,,0,0,0,,split can introduce expensive
Dialogue: 0,0:28:15.05,0:28:15.78,Default,,0,0,0,,allocations.
Dialogue: 0,0:28:17.69,0:28:20.21,Default,,0,0,0,,C++17 has a new facility for
Dialogue: 0,0:28:20.21,0:28:21.27,Default,,0,0,0,,referencing strings.
Dialogue: 0,0:28:22.21,0:28:23.11,Default,,0,0,0,,It's called string view.
Dialogue: 0,0:28:24.40,0:28:26.08,Default,,0,0,0,,A string view encapsulates a raw
Dialogue: 0,0:28:26.08,0:28:27.27,Default,,0,0,0,,const char [inaudible] and a
Dialogue: 0,0:28:27.27,0:28:27.88,Default,,0,0,0,,size.
Dialogue: 0,0:28:29.07,0:28:30.67,Default,,0,0,0,,It has a rich API, just like
Dialogue: 0,0:28:30.67,0:28:32.49,Default,,0,0,0,,string, so it's convenient for
Dialogue: 0,0:28:32.49,0:28:33.43,Default,,0,0,0,,string manipulation.
Dialogue: 0,0:28:34.86,0:28:36.48,Default,,0,0,0,,And as the name suggests, it's
Dialogue: 0,0:28:36.51,0:28:37.05,Default,,0,0,0,,just a view.
Dialogue: 0,0:28:37.94,0:28:40.11,Default,,0,0,0,,It doesn't own any storage, and
Dialogue: 0,0:28:40.11,0:28:43.04,Default,,0,0,0,,so it never makes a copy.
Dialogue: 0,0:28:43.49,0:28:44.71,Default,,0,0,0,,String view is great for
Dialogue: 0,0:28:44.71,0:28:46.29,Default,,0,0,0,,performance, but there is a
Dialogue: 0,0:28:46.29,0:28:48.87,Default,,0,0,0,,caveat: String view isn't always
Dialogue: 0,0:28:48.87,0:28:49.41,Default,,0,0,0,,safe.
Dialogue: 0,0:28:51.16,0:28:52.31,Default,,0,0,0,,Because it doesn't own its
Dialogue: 0,0:28:52.31,0:28:54.43,Default,,0,0,0,,storage, using a string view
Dialogue: 0,0:28:54.46,0:28:56.04,Default,,0,0,0,,after the original string is
Dialogue: 0,0:28:56.04,0:28:58.21,Default,,0,0,0,,destroyed or modified can cause
Dialogue: 0,0:28:58.21,0:28:59.24,Default,,0,0,0,,a use after free.
Dialogue: 0,0:29:01.34,0:29:02.88,Default,,0,0,0,,Referencing a raw string literal
Dialogue: 0,0:29:02.95,0:29:05.94,Default,,0,0,0,,like resources/images is always
Dialogue: 0,0:29:05.94,0:29:08.40,Default,,0,0,0,,safe because raw string literals
Dialogue: 0,0:29:08.43,0:29:09.31,Default,,0,0,0,,have the lifetime of the
Dialogue: 0,0:29:09.31,0:29:09.83,Default,,0,0,0,,program.
Dialogue: 0,0:29:12.04,0:29:13.15,Default,,0,0,0,,Taking a string view as an
Dialogue: 0,0:29:13.15,0:29:15.56,Default,,0,0,0,,argument is safe, but avoid
Dialogue: 0,0:29:15.56,0:29:16.96,Default,,0,0,0,,storing a string view argument
Dialogue: 0,0:29:17.09,0:29:18.34,Default,,0,0,0,,past the function return.
Dialogue: 0,0:29:21.06,0:29:23.29,Default,,0,0,0,,Be careful of return values.
Dialogue: 0,0:29:23.83,0:29:25.47,Default,,0,0,0,,If a string view is derived from
Dialogue: 0,0:29:25.47,0:29:26.92,Default,,0,0,0,,an argument, it will be safe to
Dialogue: 0,0:29:26.92,0:29:28.41,Default,,0,0,0,,use as long as the argument
Dialogue: 0,0:29:28.58,0:29:30.05,Default,,0,0,0,,isn't changed or destroyed.
Dialogue: 0,0:29:31.19,0:29:32.96,Default,,0,0,0,,In this example, directory and
Dialogue: 0,0:29:32.96,0:29:35.45,Default,,0,0,0,,filename are safe to use as long
Dialogue: 0,0:29:35.45,0:29:38.24,Default,,0,0,0,,as path remains constant and
Dialogue: 0,0:29:38.24,0:29:38.62,Default,,0,0,0,,valid.
Dialogue: 0,0:29:39.13,0:29:42.55,Default,,0,0,0,,But if we replace path with a
Dialogue: 0,0:29:42.55,0:29:44.81,Default,,0,0,0,,computed string, then accessing
Dialogue: 0,0:29:44.92,0:29:46.67,Default,,0,0,0,,either directory or filename
Dialogue: 0,0:29:46.75,0:29:48.22,Default,,0,0,0,,will cause a use after free.
Dialogue: 0,0:29:49.82,0:29:52.23,Default,,0,0,0,,The root cause is that split was
Dialogue: 0,0:29:52.23,0:29:53.48,Default,,0,0,0,,passed a temporary.
Dialogue: 0,0:29:54.14,0:29:56.01,Default,,0,0,0,,The temporary is destroyed after
Dialogue: 0,0:29:56.01,0:29:57.57,Default,,0,0,0,,the call to split, and its
Dialogue: 0,0:29:57.57,0:29:59.12,Default,,0,0,0,,references are invalidated.
Dialogue: 0,0:30:01.16,0:30:03.28,Default,,0,0,0,,Accessing the temporary invokes
Dialogue: 0,0:30:03.28,0:30:04.32,Default,,0,0,0,,undefined behavior.
Dialogue: 0,0:30:05.16,0:30:06.70,Default,,0,0,0,,AddressSanitizer can catch this
Dialogue: 0,0:30:06.75,0:30:06.97,Default,,0,0,0,,bug.
Dialogue: 0,0:30:08.18,0:30:09.71,Default,,0,0,0,,Watch Understanding Undefined
Dialogue: 0,0:30:09.71,0:30:11.23,Default,,0,0,0,,Behavior to learn more about
Dialogue: 0,0:30:11.23,0:30:13.20,Default,,0,0,0,,this kind of bug and Finding
Dialogue: 0,0:30:13.20,0:30:15.24,Default,,0,0,0,,Bugs Using Xcode Runtime Tools
Dialogue: 0,0:30:15.24,0:30:16.66,Default,,0,0,0,,to learn about tools to combat
Dialogue: 0,0:30:16.92,0:30:17.00,Default,,0,0,0,,them.
Dialogue: 0,0:30:18.48,0:30:20.39,Default,,0,0,0,,String view is the last C++17
Dialogue: 0,0:30:20.39,0:30:21.53,Default,,0,0,0,,feature I'll show you today.
Dialogue: 0,0:30:22.66,0:30:26.43,Default,,0,0,0,,To try out C++17, set the C++
Dialogue: 0,0:30:26.43,0:30:28.00,Default,,0,0,0,,language dialect in your Build
Dialogue: 0,0:30:28.00,0:30:28.46,Default,,0,0,0,,settings.
Dialogue: 0,0:30:29.24,0:30:32.09,Default,,0,0,0,,C++17 gives you the standardized
Dialogue: 0,0:30:32.09,0:30:33.79,Default,,0,0,0,,language without extensions.
Dialogue: 0,0:30:34.65,0:30:37.06,Default,,0,0,0,,GNU++17 adds the usual
Dialogue: 0,0:30:37.06,0:30:37.72,Default,,0,0,0,,extensions.
Dialogue: 0,0:30:38.22,0:30:40.73,Default,,0,0,0,,Now, I have a quick update on
Dialogue: 0,0:30:40.73,0:30:41.77,Default,,0,0,0,,link-time optimization.
Dialogue: 0,0:30:43.14,0:30:45.20,Default,,0,0,0,,Link-time optimization, or LTO,
Dialogue: 0,0:30:45.83,0:30:47.58,Default,,0,0,0,,optimizes the executable at link
Dialogue: 0,0:30:47.58,0:30:49.39,Default,,0,0,0,,time, blurring the line between
Dialogue: 0,0:30:49.39,0:30:50.72,Default,,0,0,0,,source files and enabling
Dialogue: 0,0:30:50.72,0:30:52.11,Default,,0,0,0,,powerful optimizations.
Dialogue: 0,0:30:53.08,0:30:54.52,Default,,0,0,0,,Incremental LTO, which we
Dialogue: 0,0:30:54.52,0:30:56.00,Default,,0,0,0,,introduced last year, is the
Dialogue: 0,0:30:56.00,0:30:56.87,Default,,0,0,0,,state of the art.
Dialogue: 0,0:30:57.77,0:30:59.64,Default,,0,0,0,,For more information, watch last
Dialogue: 0,0:30:59.64,0:31:01.18,Default,,0,0,0,,year's talk, What's New in LLVM.
Dialogue: 0,0:31:02.15,0:31:06.04,Default,,0,0,0,,In the past, when using LTO on
Dialogue: 0,0:31:06.04,0:31:08.35,Default,,0,0,0,,large C++ programs, we've
Dialogue: 0,0:31:08.35,0:31:10.48,Default,,0,0,0,,recommended changing the Debug
Dialogue: 0,0:31:10.48,0:31:12.91,Default,,0,0,0,,Info Level Build setting to Line
Dialogue: 0,0:31:12.91,0:31:13.75,Default,,0,0,0,,Tables Only.
Dialogue: 0,0:31:14.85,0:31:16.31,Default,,0,0,0,,But in Xcode 9, we took
Dialogue: 0,0:31:16.31,0:31:17.95,Default,,0,0,0,,incremental LTO to the next
Dialogue: 0,0:31:17.95,0:31:18.36,Default,,0,0,0,,level.
Dialogue: 0,0:31:19.67,0:31:20.93,Default,,0,0,0,,Let's look at the time to link
Dialogue: 0,0:31:21.00,0:31:23.30,Default,,0,0,0,,the Apple LLVM compiler itself.
Dialogue: 0,0:31:24.17,0:31:26.72,Default,,0,0,0,,In Xcode 8, a clean link with
Dialogue: 0,0:31:26.72,0:31:28.60,Default,,0,0,0,,full debug info took almost six
Dialogue: 0,0:31:28.60,0:31:29.06,Default,,0,0,0,,minutes.
Dialogue: 0,0:31:29.71,0:31:30.80,Default,,0,0,0,,Line Tables Only was
Dialogue: 0,0:31:30.80,0:31:32.30,Default,,0,0,0,,three-and-a-half minutes faster.
Dialogue: 0,0:31:33.71,0:31:35.51,Default,,0,0,0,,We sped up incremental LTO with
Dialogue: 0,0:31:35.51,0:31:38.27,Default,,0,0,0,,full debug info by 35% in Xcode
Dialogue: 0,0:31:38.27,0:31:38.57,Default,,0,0,0,,9.
Dialogue: 0,0:31:39.41,0:31:40.62,Default,,0,0,0,,Line Tables Only is still
Dialogue: 0,0:31:40.62,0:31:42.76,Default,,0,0,0,,faster, but the overhead is now
Dialogue: 0,0:31:42.76,0:31:44.04,Default,,0,0,0,,only 90 seconds.
Dialogue: 0,0:31:44.52,0:31:46.91,Default,,0,0,0,,That was a clean link.
Dialogue: 0,0:31:47.62,0:31:50.01,Default,,0,0,0,,The true power of incremental
Dialogue: 0,0:31:50.01,0:31:52.24,Default,,0,0,0,,LTO is its fast incremental
Dialogue: 0,0:31:52.24,0:31:52.78,Default,,0,0,0,,builds.
Dialogue: 0,0:31:53.36,0:31:55.45,Default,,0,0,0,,When only one file changes, the
Dialogue: 0,0:31:55.45,0:31:56.35,Default,,0,0,0,,link doesn't repeat
Dialogue: 0,0:31:56.35,0:31:58.21,Default,,0,0,0,,optimizations unnecessarily.
Dialogue: 0,0:31:59.46,0:32:01.43,Default,,0,0,0,,In Xcode 8, an incremental link
Dialogue: 0,0:32:01.43,0:32:02.82,Default,,0,0,0,,of the Apple LLVM compiler
Dialogue: 0,0:32:02.82,0:32:05.72,Default,,0,0,0,,itself took 21 seconds with full
Dialogue: 0,0:32:05.72,0:32:08.13,Default,,0,0,0,,debug info, more than two times
Dialogue: 0,0:32:08.13,0:32:09.53,Default,,0,0,0,,longer than Line Tables Only.
Dialogue: 0,0:32:10.38,0:32:12.44,Default,,0,0,0,,This is why we recommended
Dialogue: 0,0:32:12.44,0:32:14.19,Default,,0,0,0,,changing the debug info level in
Dialogue: 0,0:32:15.10,0:32:16.75,Default,,0,0,0,,the past.
Dialogue: 0,0:32:16.92,0:32:18.24,Default,,0,0,0,,But in Xcode 9, the same
Dialogue: 0,0:32:18.24,0:32:19.46,Default,,0,0,0,,incremental link is
Dialogue: 0,0:32:19.51,0:32:21.05,Default,,0,0,0,,two-and-a-half times faster.
Dialogue: 0,0:32:21.56,0:32:23.19,Default,,0,0,0,,At just over eight seconds, it's
Dialogue: 0,0:32:23.19,0:32:24.82,Default,,0,0,0,,even faster than Line Tables
Dialogue: 0,0:32:24.82,0:32:26.12,Default,,0,0,0,,Only mode was last year.
Dialogue: 0,0:32:26.99,0:32:28.72,Default,,0,0,0,,If you looked at incremental LTO
Dialogue: 0,0:32:28.72,0:32:30.23,Default,,0,0,0,,but didn't want to change your
Dialogue: 0,0:32:30.23,0:32:32.24,Default,,0,0,0,,debug info level, it's time to
Dialogue: 0,0:32:32.24,0:32:32.75,Default,,0,0,0,,look again.
Dialogue: 0,0:32:33.52,0:32:39.16,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:32:39.66,0:32:40.88,Default,,0,0,0,,We recommend turning on
Dialogue: 0,0:32:40.91,0:32:43.81,Default,,0,0,0,,incremental LTO today, even if
Dialogue: 0,0:32:43.81,0:32:45.25,Default,,0,0,0,,you're using full debug info.
Dialogue: 0,0:32:45.85,0:32:49.37,Default,,0,0,0,,So that's what's new in LLVM.
Dialogue: 0,0:32:50.60,0:32:52.88,Default,,0,0,0,,Use @available to safely use new
Dialogue: 0,0:32:52.88,0:32:54.99,Default,,0,0,0,,APIs when supporting older OS's.
Dialogue: 0,0:32:55.82,0:32:57.15,Default,,0,0,0,,Run the static analyzer while
Dialogue: 0,0:32:57.15,0:32:57.62,Default,,0,0,0,,you build.
Dialogue: 0,0:32:58.92,0:33:00.85,Default,,0,0,0,,Use Xcode to refactor your code.
Dialogue: 0,0:33:01.91,0:33:03.33,Default,,0,0,0,,Try out the new features in
Dialogue: 0,0:33:03.33,0:33:04.56,Default,,0,0,0,,C++17.
Dialogue: 0,0:33:05.34,0:33:07.66,Default,,0,0,0,,And turn on incremental LTO to
Dialogue: 0,0:33:07.66,0:33:09.12,Default,,0,0,0,,upgrade your performance without
Dialogue: 0,0:33:09.12,0:33:10.77,Default,,0,0,0,,sacrificing incremental build
Dialogue: 0,0:33:10.77,0:33:11.05,Default,,0,0,0,,time.
Dialogue: 0,0:33:12.13,0:33:13.80,Default,,0,0,0,,For more information, see the
Dialogue: 0,0:33:13.80,0:33:14.30,Default,,0,0,0,,website.
Dialogue: 0,0:33:15.41,0:33:16.52,Default,,0,0,0,,I recommend you watch the
Dialogue: 0,0:33:16.52,0:33:17.45,Default,,0,0,0,,related sessions.
Dialogue: 0,0:33:18.25,0:33:18.58,Default,,0,0,0,,Thank you.
Dialogue: 0,0:33:19.52,0:33:22.50,Default,,0,0,0,,[ Applause ]
