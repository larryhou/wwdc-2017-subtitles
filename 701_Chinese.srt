1
00:00:33,696 --> 00:00:35,746
>>  早上好

2
00:00:35,746 --> 00:00:37,316
欢迎来听

3
00:00:37,376 --> 00:00:38,326
有关应用软件和演化网络安全标准的介绍

4
00:00:38,846 --> 00:00:41,086
我是 Bailey Basile

5
00:00:41,086 --> 00:00:42,636
苹果公司的

6
00:00:42,636 --> 00:00:43,086
安全传输工程师

7
00:00:43,856 --> 00:00:45,406
今天  我的同事 Chris 和我

8
00:00:45,406 --> 00:00:46,966
将会向你介绍网络安全标准的变化

9
00:00:46,966 --> 00:00:48,876
以及这些变化给你

10
00:00:48,916 --> 00:00:51,106
和你的应用软件

11
00:00:51,106 --> 00:00:52,616
所带来的影响

12
00:00:53,766 --> 00:00:55,896
相信所有用户

13
00:00:55,896 --> 00:00:57,936
都像我们一样

14
00:00:57,936 --> 00:00:59,256
关心隐私和安全问题

15
00:00:59,256 --> 00:01:01,446
这也是为什么

16
00:01:01,446 --> 00:01:04,226
当你看到像 Beast  Crime 和 Drown 一样的攻击时

17
00:01:04,306 --> 00:01:06,656
你会担忧

18
00:01:06,656 --> 00:01:09,856
你的 App 是否受到了影响

19
00:01:10,336 --> 00:01:13,346
不幸的是

20
00:01:13,476 --> 00:01:15,856
所有协议都有使用期限

21
00:01:15,856 --> 00:01:18,166
这些协议在公众中使用

22
00:01:18,166 --> 00:01:19,086
随着时间的推移  它们会受到越来越多的攻击

23
00:01:20,136 --> 00:01:23,356
更糟的是

24
00:01:23,356 --> 00:01:26,906
标准所依赖的算法

25
00:01:26,906 --> 00:01:29,346
都有自身的保质期

26
00:01:29,836 --> 00:01:32,126
这意味着它们会过时

27
00:01:32,206 --> 00:01:34,886
随着电脑的速度越来越快

28
00:01:34,886 --> 00:01:36,726
这些算法在面对诸如冲突

29
00:01:36,726 --> 00:01:38,926
因式分解和暴力这些攻击时

30
00:01:39,346 --> 00:01:41,696
更加的脆弱

31
00:01:43,086 --> 00:01:44,856
这些听起来很可怕的攻击

32
00:01:44,896 --> 00:01:47,286
像是 Flame Breach

33
00:01:47,616 --> 00:01:49,586
和 Poodle

34
00:01:49,586 --> 00:01:51,136
也许 Poodle 听起来

35
00:01:51,136 --> 00:01:51,686
并没有那么可怕

36
00:01:52,796 --> 00:01:54,316
当你听到这些可怕的攻击

37
00:01:54,316 --> 00:01:56,856
你就会开始想你能做些什么

38
00:01:56,856 --> 00:01:59,336
来避免你的 App

39
00:01:59,336 --> 00:02:01,066
在下一个严重攻击发生时

40
00:02:01,406 --> 00:02:03,146
受到影响

41
00:02:03,816 --> 00:02:05,376
这也是为什么

42
00:02:05,376 --> 00:02:06,736
今天我要讲一些

43
00:02:06,736 --> 00:02:09,466
你可以执行的方法

44
00:02:09,496 --> 00:02:11,926
来保证你的 App

45
00:02:11,926 --> 00:02:12,716
不受影响

46
00:02:13,166 --> 00:02:14,986
我也会讲到一些

47
00:02:14,986 --> 00:02:18,896
关于苹果

48
00:02:18,896 --> 00:02:20,956
是如何通过把不安全的选项移除我们的运行平台

49
00:02:20,956 --> 00:02:21,916
来帮助你的

50
00:02:23,176 --> 00:02:24,416
Chris 会向你介绍

51
00:02:24,466 --> 00:02:26,356
App 传输安全的更新

52
00:02:26,396 --> 00:02:28,156
这是一个机制

53
00:02:28,156 --> 00:02:30,736
你可以用在你的 App 中

54
00:02:30,736 --> 00:02:32,286
来保证

55
00:02:32,286 --> 00:02:33,856
最优运行

56
00:02:35,236 --> 00:02:36,916
最后

57
00:02:36,916 --> 00:02:39,466
Chris 将会向你介绍

58
00:02:39,466 --> 00:02:42,386
传输层安全

59
00:02:42,386 --> 00:02:44,416
和该协议的重大革新

60
00:02:45,436 --> 00:02:46,966
现在

61
00:02:47,006 --> 00:02:48,046
就让我们开始吧

62
00:02:48,886 --> 00:02:50,876
我会从高层开始

63
00:02:51,576 --> 00:02:53,256
首先

64
00:02:53,256 --> 00:02:56,386
你需要记住

65
00:02:56,386 --> 00:02:58,476
你不能设置

66
00:02:58,476 --> 00:03:00,376
和忘记你 App 的安全性

67
00:03:00,376 --> 00:03:03,186
因为我说过所有的协议都有寿命

68
00:03:03,236 --> 00:03:05,576
这些标准都有内置的保质期

69
00:03:06,486 --> 00:03:08,246
你必须定期进行检查

70
00:03:08,246 --> 00:03:10,886
并确认你的 App

71
00:03:10,886 --> 00:03:12,386
是最新的

72
00:03:12,806 --> 00:03:14,926
想知道需要改变什么

73
00:03:14,926 --> 00:03:16,516
你必须紧跟标准机构

74
00:03:16,556 --> 00:03:19,226
学术研究

75
00:03:19,226 --> 00:03:21,506
和行业最佳实践

76
00:03:22,256 --> 00:03:24,706
但好消息是

77
00:03:24,706 --> 00:03:26,996
你已经这样做了

78
00:03:26,996 --> 00:03:28,776
因为你今天

79
00:03:28,866 --> 00:03:29,366
坐在这里

80
00:03:30,616 --> 00:03:34,076
如果你是开发人员

81
00:03:34,076 --> 00:03:35,916
或者是库开发者

82
00:03:35,916 --> 00:03:38,416
你可能在使用你 App 中的

83
00:03:38,416 --> 00:03:39,466
第三方库

84
00:03:39,466 --> 00:03:41,276
这对你的应用程序是非常危险的

85
00:03:41,776 --> 00:03:42,986
特别是

86
00:03:42,986 --> 00:03:44,226
如果你在整合第三方库时

87
00:03:44,226 --> 00:03:46,136
你必须确保第三方库

88
00:03:46,226 --> 00:03:47,246
保持最新

89
00:03:47,696 --> 00:03:49,376
你三年前集成的库

90
00:03:49,486 --> 00:03:52,156
已经过时了

91
00:03:52,156 --> 00:03:54,576
而且

92
00:03:54,646 --> 00:03:55,406
可能被削弱了安全性

93
00:03:55,636 --> 00:03:57,446
这意味着你的用户

94
00:03:57,446 --> 00:03:59,166
没有得到你想让他们得到的

95
00:03:59,166 --> 00:03:59,766
安全性

96
00:04:01,456 --> 00:04:04,096
如果你在使用我们的 API

97
00:04:04,096 --> 00:04:05,026
我们将竭诚为您服务

98
00:04:05,386 --> 00:04:07,396
首先

99
00:04:07,396 --> 00:04:10,146
我们删除了很多我们的 API 里不安全的选项

100
00:04:10,416 --> 00:04:12,406
来让你不受影响

101
00:04:13,756 --> 00:04:15,586
我们也提供了 App 传输安全

102
00:04:15,846 --> 00:04:18,255
即 ATS

103
00:04:18,255 --> 00:04:19,736
来使你能够在你的 App 中

104
00:04:19,736 --> 00:04:21,755
执行最佳实践

105
00:04:21,755 --> 00:04:23,986
只要你避免

106
00:04:23,986 --> 00:04:26,246
ATS 异常

107
00:04:27,986 --> 00:04:29,436
最后

108
00:04:29,686 --> 00:04:32,236
在这些攻击发生之前

109
00:04:32,236 --> 00:04:34,446
你必须提醒你的客户

110
00:04:34,476 --> 00:04:37,306
投资者和经理人

111
00:04:37,646 --> 00:04:39,246
为你的 App 提供维护费

112
00:04:39,296 --> 00:04:42,126
用来对 App 进行更新是十分值得的

113
00:04:42,126 --> 00:04:44,376
因为这样一来

114
00:04:44,376 --> 00:04:46,526
当下一次攻击发生时

115
00:04:46,526 --> 00:04:48,716
你不会因为被指责成一个表现欠佳的 App 被扰乱

116
00:04:48,716 --> 00:04:51,536
而疯狂补救

117
00:04:52,166 --> 00:04:56,516
浪费自身的时间

118
00:04:56,626 --> 00:04:59,086
力气和金钱

119
00:04:59,246 --> 00:05:01,196
所以

120
00:05:01,196 --> 00:05:02,376
让我们回头看看

121
00:05:02,376 --> 00:05:03,076
我之前提到的那些攻击

122
00:05:04,046 --> 00:05:05,246
我想详细介绍一些最佳的做法

123
00:05:05,286 --> 00:05:07,126
你可以用来

124
00:05:07,126 --> 00:05:08,806
避免这些攻击

125
00:05:09,346 --> 00:05:11,036
具体来说

126
00:05:11,036 --> 00:05:13,506
在加密领域中

127
00:05:13,506 --> 00:05:17,776
有加密杂凑  公钥  协议

128
00:05:18,446 --> 00:05:19,846
和撤销几种方法

129
00:05:19,846 --> 00:05:23,326
所以

130
00:05:23,326 --> 00:05:24,546
让我们开始介绍一下加密

131
00:05:25,376 --> 00:05:27,236
加密

132
00:05:27,236 --> 00:05:29,786
大家都知道

133
00:05:29,786 --> 00:05:31,996
是一种可以用来防止攻击者

134
00:05:31,996 --> 00:05:33,756
读取你的用户数据的机制

135
00:05:34,876 --> 00:05:36,556
但不幸的是

136
00:05:36,556 --> 00:05:38,246
一些我们长久以来

137
00:05:38,246 --> 00:05:40,036
一直使用的加密算法

138
00:05:40,396 --> 00:05:42,536
在面对攻击时是十分脆弱的

139
00:05:42,536 --> 00:05:46,226
因为攻击者可以轻易的

140
00:05:46,226 --> 00:05:48,136
恢复关键数据

141
00:05:48,166 --> 00:05:48,766
甚至原文

142
00:05:49,126 --> 00:05:51,096
比如

143
00:05:51,176 --> 00:05:53,986
RC 4 是非常容易被攻击的

144
00:05:53,986 --> 00:05:55,896
因为密钥

145
00:05:55,896 --> 00:05:57,646
可以在三天内被恢复出来

146
00:05:58,636 --> 00:06:00,906
此外

147
00:06:00,906 --> 00:06:04,856
Triple-DES 和 AES 的 CBC 模式

148
00:06:04,856 --> 00:06:06,816
都是容易受到像 Beast

149
00:06:07,186 --> 00:06:11,036
和 Lucky 13 这样的攻击

150
00:06:11,516 --> 00:06:13,106
这意味着你的算法

151
00:06:13,206 --> 00:06:15,086
并没有向你的用户提供

152
00:06:15,086 --> 00:06:18,646
预期中那么高的安全性

153
00:06:19,366 --> 00:06:22,696
将来

154
00:06:22,696 --> 00:06:25,336
我们打算删除我们平台下 TLS 中的

155
00:06:25,396 --> 00:06:26,856
RC 4 和 Triple-DES

156
00:06:27,236 --> 00:06:29,916
所以现在是时候升级了

157
00:06:31,336 --> 00:06:32,926
同时

158
00:06:32,996 --> 00:06:34,526
你应该使用认证加密算法

159
00:06:34,526 --> 00:06:37,206
如 AES-GCM

160
00:06:37,206 --> 00:06:39,726
或 ChaCha20 / Poly1305

161
00:06:40,686 --> 00:06:42,026
这些算法将确保

162
00:06:42,026 --> 00:06:45,426
你不仅有最好的加密

163
00:06:45,426 --> 00:06:47,516
并且可以检测到数据

164
00:06:47,516 --> 00:06:48,196
是否被修改

165
00:06:49,306 --> 00:06:50,726
说到修改数据

166
00:06:51,126 --> 00:06:52,156
我们来讨论一下

167
00:06:52,156 --> 00:06:53,826
加密杂凑

168
00:06:54,026 --> 00:06:56,516
众所周知

169
00:06:56,516 --> 00:06:58,446
加密杂凑是一种

170
00:06:58,446 --> 00:07:01,136
让你可以监测到数据

171
00:07:01,136 --> 00:07:03,556
是否被修改的机制

172
00:07:04,016 --> 00:07:05,716
但不幸的是

173
00:07:05,716 --> 00:07:07,536
一些我们一直在使用的

174
00:07:07,586 --> 00:07:09,896
加密杂凑

175
00:07:09,896 --> 00:07:11,086
容易受到所谓的

176
00:07:11,086 --> 00:07:11,856
碰撞攻击

177
00:07:12,536 --> 00:07:14,126
碰撞攻击

178
00:07:14,126 --> 00:07:15,866
是两个不同的输入

179
00:07:15,866 --> 00:07:17,546
产生完全相同的输出

180
00:07:17,846 --> 00:07:21,046
所以

181
00:07:21,616 --> 00:07:23,606
你不知道什么时候

182
00:07:23,896 --> 00:07:25,396
攻击者修改了数据

183
00:07:25,476 --> 00:07:25,986
因为得到的哈希值会是相同的

184
00:07:26,436 --> 00:07:29,716
特别是 MD-5

185
00:07:29,716 --> 00:07:32,026
和 SHA-1

186
00:07:32,026 --> 00:07:32,636
都已经证实了碰撞攻击

187
00:07:34,296 --> 00:07:37,096
事实上

188
00:07:37,096 --> 00:07:39,296
MD-5 的碰撞

189
00:07:39,296 --> 00:07:41,896
是用于火焰恶意软件绕过平台安全

190
00:07:41,946 --> 00:07:43,756
来获得

191
00:07:43,756 --> 00:07:44,826
访问用户系统的权限

192
00:07:45,536 --> 00:07:48,506
前几年

193
00:07:48,586 --> 00:07:50,096
我们删除了我们平台上的

194
00:07:50,156 --> 00:07:52,166
所有 MD-5 证书

195
00:07:53,736 --> 00:07:56,616
SHA-1

196
00:07:56,886 --> 00:07:57,036
刚刚受到了一次攻击

197
00:07:57,036 --> 00:07:58,726
这次攻击

198
00:07:59,166 --> 00:08:01,656
是在今年早些时候发生的

199
00:08:01,656 --> 00:08:03,396
所以这是一个最新的信息

200
00:08:03,856 --> 00:08:06,806
知道 SHA-1 的攻击即将来临

201
00:08:06,926 --> 00:08:08,516
我们删除了

202
00:08:08,596 --> 00:08:10,756
使用 WebKit 和 Safari 建立连接时

203
00:08:10,756 --> 00:08:13,446
所有对于 TLS 服务器

204
00:08:13,896 --> 00:08:16,936
签署的

205
00:08:17,066 --> 00:08:18,126
SHA-1 证书

206
00:08:19,026 --> 00:08:20,376
我们已经看到

207
00:08:20,376 --> 00:08:23,346
SHA-1 证书中

208
00:08:23,346 --> 00:08:25,696
磁盘使用的改进

209
00:08:25,776 --> 00:08:26,856
今天我宣布

210
00:08:26,856 --> 00:08:29,516
我们要清除

211
00:08:29,716 --> 00:08:32,015
所有 SHA-1 证书中的

212
00:08:32,056 --> 00:08:32,716
TLS 连接

213
00:08:33,306 --> 00:08:35,066
我会再更多地介绍

214
00:08:35,066 --> 00:08:36,616
这将如何影响你

215
00:08:36,616 --> 00:08:38,296
和你的 App

216
00:08:39,316 --> 00:08:41,216
此外

217
00:08:41,216 --> 00:08:44,296
为了获得最好的安全性

218
00:08:44,296 --> 00:08:46,746
并避免这些碰撞攻击

219
00:08:47,106 --> 00:08:48,766
你应该使用任何一种 SHA-2 系列的

220
00:08:50,156 --> 00:08:50,316
哈希算法

221
00:08:50,606 --> 00:08:51,836
接下来

222
00:08:52,046 --> 00:08:52,786
我想谈谈公钥

223
00:08:53,366 --> 00:08:55,746
像大家熟知的一样

224
00:08:55,746 --> 00:08:58,346
公钥是一种

225
00:08:58,346 --> 00:09:00,746
提供身份的

226
00:09:00,746 --> 00:09:01,186
机制

227
00:09:01,486 --> 00:09:03,906
因此

228
00:09:03,906 --> 00:09:05,676
别人可以验证

229
00:09:05,676 --> 00:09:07,526
你签署的东西是你签的

230
00:09:07,586 --> 00:09:08,206
而不是其他人签的

231
00:09:08,936 --> 00:09:11,256
并可以用来

232
00:09:11,256 --> 00:09:14,026
给你发送只有你可以用你的私钥解密的

233
00:09:14,026 --> 00:09:15,906
加密数据

234
00:09:16,956 --> 00:09:19,646
但不幸的是

235
00:09:19,846 --> 00:09:22,236
RSA 密钥大小小于 1024 位

236
00:09:22,236 --> 00:09:25,856
所以对于因式分解类的攻击来说

237
00:09:25,916 --> 00:09:26,166
是非常脆弱的

238
00:09:27,226 --> 00:09:30,566
特别是

239
00:09:30,566 --> 00:09:33,966
一个 768 位的 RSA 密钥

240
00:09:34,476 --> 00:09:36,806
在 2009 年就被因式分解了

241
00:09:36,866 --> 00:09:39,436
这就是为什么我们在 2016 年春季的时候

242
00:09:39,536 --> 00:09:42,866
就移除了

243
00:09:42,866 --> 00:09:44,956
所有使用小于 1024 位 RSA 的证书

244
00:09:46,216 --> 00:09:49,916
但现实是

245
00:09:49,916 --> 00:09:52,856
哪怕 1024 位的 RSA 密钥

246
00:09:52,856 --> 00:09:53,226
都不是足够完美的

247
00:09:53,566 --> 00:09:55,796
并且我们认为马上

248
00:09:55,796 --> 00:09:58,866
就会有一次针对 1024 位 RSA 密钥的攻击

249
00:09:59,216 --> 00:10:02,556
所以这意味着

250
00:10:02,556 --> 00:10:04,136
我们将会移除

251
00:10:04,136 --> 00:10:06,836
所有

252
00:10:06,906 --> 00:10:09,346
TLS 服务器连接中的

253
00:10:09,756 --> 00:10:11,976
小于 2048 位密钥尺寸的

254
00:10:11,976 --> 00:10:12,546
证书

255
00:10:13,496 --> 00:10:15,406
为了避免这些清除

256
00:10:15,866 --> 00:10:18,586
并确保你有最好的安全保障

257
00:10:18,726 --> 00:10:20,596
你应该

258
00:10:20,656 --> 00:10:22,986
使用密钥大小大于

259
00:10:23,036 --> 00:10:26,526
或等于 2048 位的RSA密钥

260
00:10:26,526 --> 00:10:27,966
或任何我们平台信任的

261
00:10:27,966 --> 00:10:29,916
椭圆曲线

262
00:10:30,576 --> 00:10:33,396
接下来

263
00:10:33,396 --> 00:10:34,916
我想花一些时间谈论协议

264
00:10:36,136 --> 00:10:38,696
众所周知

265
00:10:38,696 --> 00:10:40,956
协议是

266
00:10:40,956 --> 00:10:42,436
与服务器交流时使用的机制

267
00:10:42,796 --> 00:10:44,196
它们是能共同操作的

268
00:10:44,196 --> 00:10:45,346
这意味着

269
00:10:45,346 --> 00:10:47,336
你不必担心

270
00:10:47,336 --> 00:10:49,306
你所交流的服务器

271
00:10:49,696 --> 00:10:51,086
是否支持

272
00:10:51,086 --> 00:10:51,666
你使用的协议

273
00:10:52,656 --> 00:10:53,956
不幸的是

274
00:10:54,026 --> 00:10:58,026
其中一些协议

275
00:10:58,136 --> 00:10:59,886
比较薄弱或不提供安全性

276
00:10:59,886 --> 00:11:02,716
如果你使用 http

277
00:11:02,716 --> 00:11:04,326
那么

278
00:11:04,326 --> 00:11:05,936
你所有的用户数据都会被透明地传输

279
00:11:06,366 --> 00:11:08,106
这意味着

280
00:11:08,106 --> 00:11:09,996
任何人都可以知道这些数据

281
00:11:11,286 --> 00:11:13,796
但是

282
00:11:14,156 --> 00:11:16,356
一些较旧的 TLS 版本

283
00:11:16,836 --> 00:11:20,986
如 SSL Version 3 TLS 1.0 和 TLS 1.1

284
00:11:20,986 --> 00:11:23,086
也是容易受到众多攻击的

285
00:11:24,216 --> 00:11:26,426
所以

286
00:11:26,426 --> 00:11:28,746
当你配置你的服务器时

287
00:11:28,746 --> 00:11:29,346
应该避免这些

288
00:11:30,006 --> 00:11:32,656
在 2015 年秋天

289
00:11:32,656 --> 00:11:36,136
我们删除了 SSLVersion 3

290
00:11:36,136 --> 00:11:37,786
所以

291
00:11:38,006 --> 00:11:39,386
你暂时是受到保护的

292
00:11:40,306 --> 00:11:42,176
并且

293
00:11:42,516 --> 00:11:47,146
你应该使用

294
00:11:47,766 --> 00:11:50,246
HTTPS 和 TLS 1.2

295
00:11:50,846 --> 00:11:53,266
TLS 1.2

296
00:11:53,626 --> 00:11:56,636
是目前可用于 TLS 安全的

297
00:11:56,886 --> 00:11:57,496
最好的标准

298
00:11:58,146 --> 00:11:59,376
但我很高兴地宣布

299
00:11:59,376 --> 00:12:00,876
今天

300
00:12:00,876 --> 00:12:03,166
我们正在增加

301
00:12:03,346 --> 00:12:04,706
对于 TLS 1.3 草案规范的支持

302
00:12:05,586 --> 00:12:07,376
Chris 一会将会更多地

303
00:12:07,406 --> 00:12:08,696
谈论这方面的信息

304
00:12:10,126 --> 00:12:11,936
最后

305
00:12:12,186 --> 00:12:13,076
我想谈谈撤销

306
00:12:13,686 --> 00:12:15,646
撤销

307
00:12:15,646 --> 00:12:18,546
是一种客户用来

308
00:12:18,546 --> 00:12:19,916
验证证书

309
00:12:19,916 --> 00:12:21,326
并确定

310
00:12:21,326 --> 00:12:23,946
当证书处理不当

311
00:12:23,946 --> 00:12:26,996
或过期时

312
00:12:27,476 --> 00:12:28,296
该证书是否应该被信任的机制

313
00:12:28,896 --> 00:12:31,036
当然

314
00:12:31,036 --> 00:12:32,636
最糟糕的是

315
00:12:32,636 --> 00:12:36,746
你可以不检查就撤销

316
00:12:36,876 --> 00:12:39,466
不幸的是

317
00:12:39,466 --> 00:12:41,896
目前

318
00:12:42,026 --> 00:12:44,176
我们的平台默认情况下不检查撤销

319
00:12:44,406 --> 00:12:44,896
我之后会解释这是为什么

320
00:12:45,606 --> 00:12:48,196
也就是说

321
00:12:48,196 --> 00:12:50,266
除非你正在使用 OCSP Stapling

322
00:12:50,796 --> 00:12:53,136
OCSP 是

323
00:12:53,226 --> 00:12:54,996
在线证书状态协议

324
00:12:55,526 --> 00:12:57,606
如果

325
00:12:57,606 --> 00:13:00,776
你的服务器正在使用 OCSP Stapling

326
00:13:00,886 --> 00:13:02,116
你的证书就会

327
00:13:02,116 --> 00:13:02,866
总是被检查撤销

328
00:13:03,706 --> 00:13:05,646
所以

329
00:13:05,646 --> 00:13:09,326
让我们深入了解一下 OCSP 和

330
00:13:10,036 --> 00:13:13,596
OCSP Stapling 工作机制 首先

331
00:13:13,776 --> 00:13:15,906
像往常一样

332
00:13:16,126 --> 00:13:17,816
服务器从可信的

333
00:13:17,876 --> 00:13:18,966
被称为证书颁发机构的第三方请求证书

334
00:13:19,756 --> 00:13:22,206
然后

335
00:13:22,206 --> 00:13:24,306
服务器使用这个证书

336
00:13:24,366 --> 00:13:26,676
来让连接到它的客户端识别自己

337
00:13:27,376 --> 00:13:29,486
客户端

338
00:13:29,486 --> 00:13:32,406
为了验证那个身份

339
00:13:32,716 --> 00:13:34,796
从证书颁发机构

340
00:13:34,796 --> 00:13:36,696
请求

341
00:13:36,766 --> 00:13:38,136
关于该证书状态的信息

342
00:13:38,806 --> 00:13:39,976
认证机构

343
00:13:39,976 --> 00:13:41,876
回复一条

344
00:13:42,026 --> 00:13:44,676
已认证的消息

345
00:13:44,676 --> 00:13:45,996
来表明

346
00:13:45,996 --> 00:13:47,626
客户端所查找的证书的状态

347
00:13:47,806 --> 00:13:49,096
客户端

348
00:13:49,096 --> 00:13:50,916
确定该回应后

349
00:13:51,206 --> 00:13:53,366
使用返回的证书状态

350
00:13:53,366 --> 00:13:55,356
来判断是否

351
00:13:55,446 --> 00:13:55,836
要继续连接服务器

352
00:13:56,806 --> 00:13:59,516
但不幸的是

353
00:13:59,516 --> 00:14:00,076
OCSP 有一些缺点

354
00:14:00,926 --> 00:14:02,636
从之前的介绍

355
00:14:02,896 --> 00:14:04,736
你可以看出

356
00:14:04,736 --> 00:14:06,846
对于每一个

357
00:14:07,196 --> 00:14:08,896
对服务器的连接

358
00:14:08,896 --> 00:14:09,446
它都需要一个额外的网络连接

359
00:14:10,726 --> 00:14:12,806
这意味着

360
00:14:12,806 --> 00:14:15,346
你的 App 内部连接会很慢

361
00:14:15,346 --> 00:14:17,696
这是我们不想看到的

362
00:14:18,146 --> 00:14:20,726
此外

363
00:14:20,876 --> 00:14:21,836
OCSP 是完全透明的执行的

364
00:14:22,306 --> 00:14:23,616
这意味着

365
00:14:24,026 --> 00:14:25,166
所有的传输

366
00:14:25,206 --> 00:14:27,016
都表明了用户想要查询哪一个证书

367
00:14:27,046 --> 00:14:29,306
这对于任何人

368
00:14:29,456 --> 00:14:30,216
都是透明的

369
00:14:30,706 --> 00:14:33,076
OCSP

370
00:14:33,076 --> 00:14:35,366
之所以透明化的原因是

371
00:14:36,026 --> 00:14:37,816
你需要它

372
00:14:37,816 --> 00:14:40,136
来建立安全的连接

373
00:14:40,296 --> 00:14:41,746
所以

374
00:14:41,806 --> 00:14:44,486
如果你需要建立一个安全连接

375
00:14:44,656 --> 00:14:46,046
来实现 OCSP

376
00:14:46,046 --> 00:14:46,646
你将会陷入一个死循环

377
00:14:47,266 --> 00:14:49,786
这就是为什么

378
00:14:49,786 --> 00:14:51,386
OCSP 是对用户隐私的

379
00:14:51,426 --> 00:14:52,156
巨大牺牲

380
00:14:52,636 --> 00:14:54,146
因为

381
00:14:54,146 --> 00:14:54,716
所有的信息都是透明化的

382
00:14:55,316 --> 00:14:57,546
任何正在监听的人

383
00:14:57,626 --> 00:14:59,296
都可以找出

384
00:14:59,406 --> 00:15:00,786
客户端在试图连接哪一个服务器

385
00:15:01,476 --> 00:15:03,416
此外

386
00:15:03,476 --> 00:15:06,006
该第三方证书颁发机构

387
00:15:06,006 --> 00:15:08,506
可以汇总

388
00:15:08,506 --> 00:15:10,286
关于哪个客户端试图连接哪个服务器

389
00:15:10,286 --> 00:15:13,366
向哪个 IP 地址传输等这些信息

390
00:15:13,366 --> 00:15:15,516
并将这些信息售卖给别人

391
00:15:15,516 --> 00:15:18,566
这是非常糟糕的

392
00:15:18,676 --> 00:15:20,916
这两个缺点的原因

393
00:15:20,916 --> 00:15:24,436
是

394
00:15:24,436 --> 00:15:25,256
我们没有默认启用 OCSP

395
00:15:25,926 --> 00:15:28,156
如果你想在你的 App 中

396
00:15:28,156 --> 00:15:30,566
启用 OCSP

397
00:15:30,566 --> 00:15:33,786
你将不得不集成额外的 API

398
00:15:34,436 --> 00:15:36,996
所以

399
00:15:37,176 --> 00:15:39,126
接下来我想谈谈 OCSP Stapling

400
00:15:39,126 --> 00:15:42,666
这是一个 OCSP 的

401
00:15:42,956 --> 00:15:44,646
巨大改进

402
00:15:44,646 --> 00:15:46,356
并且是协议的一个重大革新

403
00:15:46,356 --> 00:15:48,326
因为它删掉了 OCSP 的很多缺点

404
00:15:49,146 --> 00:15:51,116
像以前一样

405
00:15:51,116 --> 00:15:52,976
服务器从证书颁发机构

406
00:15:52,976 --> 00:15:53,546
得到一个证书

407
00:15:54,336 --> 00:15:56,646
但

408
00:15:56,646 --> 00:15:58,536
在发送证书给客户端之前

409
00:15:58,696 --> 00:16:01,156
服务器

410
00:16:01,156 --> 00:16:04,256
请求从证书颁发机构的

411
00:16:04,256 --> 00:16:04,826
OCSP 回复

412
00:16:05,126 --> 00:16:06,336
当传回已认证的回复后

413
00:16:06,336 --> 00:16:08,956
服务器

414
00:16:08,956 --> 00:16:11,216
会对该回复进行验证

415
00:16:11,216 --> 00:16:13,306
然后再将该回复

416
00:16:13,306 --> 00:16:13,846
与证书一起传回给客户端

417
00:16:14,646 --> 00:16:16,756
客户端

418
00:16:16,786 --> 00:16:18,426
便能同时

419
00:16:18,426 --> 00:16:19,486
验证证书

420
00:16:19,636 --> 00:16:20,746
和撤销状态

421
00:16:21,346 --> 00:16:23,326
所以

422
00:16:23,326 --> 00:16:25,096
这是一个巨大的改进

423
00:16:25,096 --> 00:16:26,506
在性能方面

424
00:16:26,506 --> 00:16:27,636
你不必再在你的客户端上

425
00:16:27,636 --> 00:16:28,076
建立额外的网络连接

426
00:16:28,726 --> 00:16:31,236
在隐私方面

427
00:16:31,236 --> 00:16:32,806
客户端

428
00:16:32,806 --> 00:16:35,216
不必连接到第三方

429
00:16:35,216 --> 00:16:37,166
来查找撤销状态

430
00:16:38,546 --> 00:16:41,346
但是

431
00:16:41,346 --> 00:16:41,876
即使是 OCSP Stapling 也有一些缺点

432
00:16:42,826 --> 00:16:44,946
我们注意到

433
00:16:44,946 --> 00:16:46,956
尽管鼓励大家

434
00:16:46,956 --> 00:16:48,556
在自己的服务器上采用该机制

435
00:16:48,556 --> 00:16:50,226
这个采用的过程都很缓慢

436
00:16:51,246 --> 00:16:54,006
我们知道

437
00:16:54,006 --> 00:16:56,696
在一些开源服务器中

438
00:16:56,896 --> 00:16:59,176
启用 OCSP

439
00:16:59,176 --> 00:16:59,606
会有一些缺点

440
00:17:00,216 --> 00:17:02,076
但是

441
00:17:02,076 --> 00:17:05,146
我们还是鼓励你

442
00:17:05,146 --> 00:17:07,806
去解决这些问题

443
00:17:07,806 --> 00:17:10,955
并且采用 OCSP

444
00:17:10,955 --> 00:17:12,796
来提高你 App 的安全性和速度

445
00:17:13,076 --> 00:17:15,856
但是

446
00:17:15,856 --> 00:17:17,766
OCSP 最糟糕的事情是

447
00:17:17,766 --> 00:17:20,516
它实际上

448
00:17:20,576 --> 00:17:21,116
并没有保护用户免受恶意服务器的攻击

449
00:17:21,766 --> 00:17:23,665
特别是

450
00:17:23,665 --> 00:17:26,195
恶意服务器

451
00:17:26,195 --> 00:17:28,616
只需要省略 OCSP 响应

452
00:17:28,616 --> 00:17:31,276
客户端

453
00:17:31,276 --> 00:17:33,016
就永远都不会知道恶意服务器的证书

454
00:17:33,016 --> 00:17:33,786
已经被撤销

455
00:17:35,106 --> 00:17:36,446
今天

456
00:17:36,446 --> 00:17:39,066
我很高兴的向大家宣布

457
00:17:39,066 --> 00:17:41,946
我们正在加强

458
00:17:41,946 --> 00:17:43,266
我们所有平台的

459
00:17:43,926 --> 00:17:46,256
撤销机制

460
00:17:46,746 --> 00:17:49,126
首先

461
00:17:49,286 --> 00:17:51,176
我们从证书透明度日志

462
00:17:51,176 --> 00:17:51,646
收集信息

463
00:17:52,146 --> 00:17:54,246
证书透明度日志

464
00:17:54,356 --> 00:17:58,256
包含

465
00:17:58,336 --> 00:18:00,376
一个证书的

466
00:18:00,456 --> 00:18:01,136
加密证明

467
00:18:01,756 --> 00:18:04,166
你可以通过

468
00:18:04,536 --> 00:18:06,856
看去年的“安全新特性”

469
00:18:06,856 --> 00:18:08,336
来得到更多

470
00:18:08,336 --> 00:18:10,626
关于证书透明度的信息

471
00:18:10,926 --> 00:18:13,066
以及它是怎样工作的

472
00:18:13,146 --> 00:18:13,666
你要如何使用它来提高你 App 的安全性

473
00:18:15,016 --> 00:18:16,696
我们使用

474
00:18:16,746 --> 00:18:18,966
从证书透明度日志上

475
00:18:19,046 --> 00:18:21,056
得到的信息

476
00:18:21,056 --> 00:18:22,646
来找到所有

477
00:18:22,646 --> 00:18:23,516
我们平台所信任的证书

478
00:18:23,866 --> 00:18:25,406
如果

479
00:18:25,626 --> 00:18:28,086
你想帮助我们

480
00:18:28,086 --> 00:18:29,806
搜集有关你的 App

481
00:18:29,806 --> 00:18:32,246
和服务器的证书信息

482
00:18:32,646 --> 00:18:34,286
你需要验证你的证书是否

483
00:18:34,286 --> 00:18:35,936
已经记录在了证书透明度日志中

484
00:18:36,566 --> 00:18:39,176
许多 CA 将为你做这件事

485
00:18:39,176 --> 00:18:41,886
所以你只需要检查

486
00:18:42,776 --> 00:18:45,406
有了这些信息

487
00:18:45,406 --> 00:18:47,206
我们就能知道

488
00:18:47,206 --> 00:18:50,126
所有被我们平台所信任的

489
00:18:50,466 --> 00:18:52,056
证书颁发机构

490
00:18:52,216 --> 00:18:54,336
并且

491
00:18:54,336 --> 00:18:57,076
通过这些信息

492
00:18:57,076 --> 00:18:58,736
我们可以从证书颁发机构

493
00:18:58,736 --> 00:18:59,866
请求所有的撤销信息

494
00:19:01,176 --> 00:19:03,316
然后

495
00:19:03,316 --> 00:19:04,756
我们收集所有这些撤销信息

496
00:19:05,556 --> 00:19:07,566
我们把这些撤销信息

497
00:19:07,566 --> 00:19:09,796
都聚集在一起

498
00:19:09,796 --> 00:19:11,746
我们的所有客户端

499
00:19:11,746 --> 00:19:12,136
都可以使用这些信息

500
00:19:13,726 --> 00:19:15,516
那些客户

501
00:19:15,516 --> 00:19:18,466
定期登记

502
00:19:18,466 --> 00:19:20,466
来获取撤销信息

503
00:19:21,626 --> 00:19:24,916
并且

504
00:19:25,016 --> 00:19:27,386
当他们在检查

505
00:19:27,746 --> 00:19:30,046
他们所用的服务器证书时

506
00:19:30,046 --> 00:19:31,206
使用这些最新的撤销信息

507
00:19:32,466 --> 00:19:36,176
如果客户端点击

508
00:19:36,246 --> 00:19:38,346
一个在撤销列表中的证书

509
00:19:38,346 --> 00:19:40,436
客户端就会运行 OCSP

510
00:19:40,766 --> 00:19:43,586
除非

511
00:19:43,846 --> 00:19:45,866
你的 App 在使用 OCSP Stapling

512
00:19:47,116 --> 00:19:49,586
客户端

513
00:19:49,586 --> 00:19:51,206
使用这种方法来

514
00:19:51,206 --> 00:19:51,726
验证证书真的已经被撤销

515
00:19:51,726 --> 00:19:54,436
所以

516
00:19:54,436 --> 00:19:56,336
我们说

517
00:19:56,406 --> 00:19:58,246
对于当年我们平台的撤销状态

518
00:19:58,246 --> 00:19:58,986
这是一个巨大的进步

519
00:20:00,046 --> 00:20:02,346
在隐私妥协领域

520
00:20:02,606 --> 00:20:04,496
也有一个重大的改进

521
00:20:05,336 --> 00:20:06,896
我们所提供的

522
00:20:06,896 --> 00:20:08,296
撤销信息

523
00:20:08,296 --> 00:20:09,996
对于我们所有的客户端

524
00:20:10,156 --> 00:20:11,756
和所有的平台都是相同的

525
00:20:12,216 --> 00:20:15,106
所以

526
00:20:15,106 --> 00:20:16,906
我们永远不会知道是哪个客户端

527
00:20:17,736 --> 00:20:20,016
连接到了哪个服务器 此外

528
00:20:20,016 --> 00:20:23,636
只有在那个列表中的证书

529
00:20:23,636 --> 00:20:26,156
才需要额外的 OCSP 连接

530
00:20:27,566 --> 00:20:30,946
所以

531
00:20:30,946 --> 00:20:33,436
如果你的服务器

532
00:20:33,536 --> 00:20:35,796
没有用 OCSP Stapling

533
00:20:35,976 --> 00:20:38,076
只有小部分证书

534
00:20:38,076 --> 00:20:38,826
将面临额外隐私妥协的危险

535
00:20:40,186 --> 00:20:43,556
另一个巨大的优势

536
00:20:43,596 --> 00:20:47,376
是

537
00:20:47,516 --> 00:20:48,216
信息是自动更新的

538
00:20:49,166 --> 00:20:50,316
这意味着

539
00:20:50,596 --> 00:20:52,946
当客户端

540
00:20:52,946 --> 00:20:55,026
在建立连接时

541
00:20:55,026 --> 00:20:56,906
他们总能获得

542
00:20:56,906 --> 00:20:59,476
最新的撤销信息

543
00:20:59,476 --> 00:21:01,156
并且这一切都是免费的

544
00:21:01,486 --> 00:21:03,196
你不需要

545
00:21:03,196 --> 00:21:05,176
建立一个单独的 API

546
00:21:05,176 --> 00:21:07,906
来获得这种最高的安全性

547
00:21:08,026 --> 00:21:08,806
和更快的连接速度

548
00:21:09,976 --> 00:21:12,426
在之前的二十分钟

549
00:21:12,426 --> 00:21:14,036
我已经讲了大部分的内容

550
00:21:14,036 --> 00:21:16,346
接下来

551
00:21:16,346 --> 00:21:16,726
我想对这些内容进行一下回顾

552
00:21:17,386 --> 00:21:19,636
首先

553
00:21:19,916 --> 00:21:21,766
我们讨论了加密

554
00:21:21,766 --> 00:21:24,856
和在你的服务器或 App 中使用

555
00:21:24,946 --> 00:21:25,956
认证的加密密码

556
00:21:27,106 --> 00:21:29,836
我们讨论了哈希算法

557
00:21:29,836 --> 00:21:33,236
以及如何避免碰撞攻击

558
00:21:33,426 --> 00:21:35,936
我们谈论了公钥

559
00:21:35,936 --> 00:21:38,336
和使用强大的

560
00:21:38,336 --> 00:21:40,966
不受因式分解影响的

561
00:21:41,056 --> 00:21:42,176
公钥

562
00:21:43,256 --> 00:21:45,246
我们还谈及了协议

563
00:21:45,246 --> 00:21:47,826
以及使用最新的协议

564
00:21:47,826 --> 00:21:51,966
如 TLS 1.2 和 HTTPS

565
00:21:51,966 --> 00:21:53,266
来保护你的 App

566
00:21:53,646 --> 00:21:55,316
最后

567
00:21:55,316 --> 00:21:57,916
我们谈了一下撤销

568
00:21:57,916 --> 00:22:00,276
及如何通过

569
00:22:00,486 --> 00:22:03,186
在服务器上使用撤销

570
00:22:03,186 --> 00:22:04,736
来提高你的 App 的安全性

571
00:22:04,736 --> 00:22:06,506
及我们研究出的

572
00:22:06,506 --> 00:22:08,596
可以帮助到你的

573
00:22:08,596 --> 00:22:09,246
全新的撤销机制

574
00:22:10,806 --> 00:22:12,586
现在

575
00:22:12,586 --> 00:22:14,956
我要讲一下

576
00:22:15,026 --> 00:22:16,616
我之前所提到的

577
00:22:16,696 --> 00:22:17,226
移除一些不安全选项

578
00:22:18,206 --> 00:22:20,286
我们先来回忆一下刚才提到的

579
00:22:20,366 --> 00:22:22,006
移除的内容都是什么

580
00:22:23,416 --> 00:22:25,396
首先

581
00:22:25,396 --> 00:22:28,676
我提到说

582
00:22:28,786 --> 00:22:30,906
我们会在所有我们的平台中

583
00:22:30,906 --> 00:22:32,786
移除所有对 TLS 服务器连接的

584
00:22:32,846 --> 00:22:34,986
SHA-1 的证书

585
00:22:35,906 --> 00:22:37,816
我还说过

586
00:22:37,816 --> 00:22:39,356
我们将会移除所有

587
00:22:39,396 --> 00:22:41,976
使用密钥尺寸小于 2048 位 RSA 的证书

588
00:22:42,136 --> 00:22:46,446
包括

589
00:22:46,446 --> 00:22:48,266
对服务器的所有

590
00:22:48,266 --> 00:22:48,736
TLS 连接

591
00:22:50,206 --> 00:22:52,086
如果

592
00:22:52,206 --> 00:22:55,976
你用来连接到服务器的 TLS

593
00:22:55,976 --> 00:22:58,256
包含

594
00:22:58,256 --> 00:23:01,106
以上所提到的安全性较低的证书

595
00:23:01,286 --> 00:23:04,166
你的 App 会无法在

596
00:23:04,586 --> 00:23:07,366
macOS High Sierra iOS 11 watchOS 4

597
00:23:07,586 --> 00:23:08,996
和 Apple tvOS 11上 建立连接

598
00:23:09,836 --> 00:23:13,516
让我们接下来讨论一下

599
00:23:13,516 --> 00:23:16,496
基于我刚才的讲解

600
00:23:16,496 --> 00:23:18,196
哪些证书是在信任移除中

601
00:23:18,626 --> 00:23:19,926
没有受到影响的

602
00:23:20,866 --> 00:23:23,876
首先

603
00:23:23,876 --> 00:23:24,556
根证书并没有受到影响

604
00:23:25,606 --> 00:23:27,466
因为

605
00:23:27,516 --> 00:23:29,936
根证书不受到

606
00:23:29,976 --> 00:23:31,376
我们所担忧的

607
00:23:31,376 --> 00:23:34,076
SHA-1 中的碰撞攻击的影响

608
00:23:35,196 --> 00:23:38,526
并且

609
00:23:38,526 --> 00:23:40,116
在 2015 年秋季

610
00:23:40,116 --> 00:23:43,026
我们就已经移除了

611
00:23:43,496 --> 00:23:45,996
所有使用的密钥尺寸小于 2048 位的根证书

612
00:23:46,226 --> 00:23:47,666
所以

613
00:23:47,786 --> 00:23:48,616
你目前是受到保护的

614
00:23:50,096 --> 00:23:51,906
这些信任

615
00:23:51,906 --> 00:23:53,826
也并没有影响到

616
00:23:53,826 --> 00:23:55,966
移除移动设备管理中的

617
00:23:55,966 --> 00:23:57,816
企业分布式证书

618
00:23:58,496 --> 00:24:00,486
它也没有影响到

619
00:24:00,486 --> 00:24:02,626
邮件 Safari 和钥匙串访问中的

620
00:24:02,626 --> 00:24:05,596
用户安装证书

621
00:24:06,766 --> 00:24:08,336
最后

622
00:24:08,716 --> 00:24:11,096
它也不影响在 TLS 中

623
00:24:11,336 --> 00:24:13,516
使用相互认证的

624
00:24:13,616 --> 00:24:13,986
客户端证书

625
00:24:15,196 --> 00:24:16,776
这并不是说

626
00:24:16,846 --> 00:24:19,076
我们不担心对于证书的攻击

627
00:24:19,156 --> 00:24:21,236
事实上，我们非常担忧

628
00:24:21,916 --> 00:24:24,156
但是我们知道

629
00:24:24,826 --> 00:24:26,886
企业和用户

630
00:24:26,956 --> 00:24:29,676
需要花费一些时间

631
00:24:29,976 --> 00:24:31,956
来更新他们的证书

632
00:24:31,956 --> 00:24:33,496
以及更新他们的基础设施以便使用最新的算法

633
00:24:33,916 --> 00:24:35,346
所以

634
00:24:35,346 --> 00:24:36,596
我们为他们预留了一些时间

635
00:24:37,446 --> 00:24:39,936
所以

636
00:24:39,936 --> 00:24:41,086
我们将会晚一些

637
00:24:41,086 --> 00:24:42,376
再移除那些证书

638
00:24:42,706 --> 00:24:44,896
所以

639
00:24:44,896 --> 00:24:46,516
现在是时候开始更新的工作了

640
00:24:47,936 --> 00:24:49,506
你也许会好奇说

641
00:24:49,506 --> 00:24:51,036
移除的证书到底看起来是什么样子的

642
00:24:51,466 --> 00:24:52,646
因为如果它们会影响到你的App

643
00:24:52,896 --> 00:24:53,746
你是应该做一些了解的

644
00:24:54,526 --> 00:24:56,596
如果你使用 Safari

645
00:24:56,596 --> 00:24:57,726
你会看到一个像这样的

646
00:24:57,726 --> 00:24:59,106
错误对话框

647
00:24:59,726 --> 00:25:01,776
如果

648
00:25:01,836 --> 00:25:04,056
我们深入看一下证书窗格

649
00:25:04,056 --> 00:25:06,136
我们就会发现

650
00:25:06,176 --> 00:25:08,416
对于这些移除的证书

651
00:25:08,506 --> 00:25:08,916
都会有一个具体的错误信息

652
00:25:08,916 --> 00:25:11,616
这样

653
00:25:11,666 --> 00:25:13,136
你就会知道

654
00:25:13,136 --> 00:25:13,766
你是否连接到了一个这样的证书

655
00:25:15,076 --> 00:25:16,536
你们中的很多人

656
00:25:16,646 --> 00:25:18,206
都是 App 开发人员

657
00:25:18,206 --> 00:25:19,346
所以

658
00:25:19,346 --> 00:25:20,086
你们会更加关心你将会在日志中看到些什么

659
00:25:20,086 --> 00:25:21,706
因为你可能永远不会通过 Safari

660
00:25:21,706 --> 00:25:23,806
来连接到这个服务器

661
00:25:24,466 --> 00:25:25,796
如果你正在查看日志

662
00:25:26,046 --> 00:25:28,036
你会在你的 URL 会话

663
00:25:28,166 --> 00:25:33,086
或者 URL 连接中

664
00:25:33,086 --> 00:25:34,836
看到无效搜索

665
00:25:34,916 --> 00:25:35,506
或者 -9807 SSL 错误信息

666
00:25:37,336 --> 00:25:39,836
你只能通过一个方法

667
00:25:39,836 --> 00:25:41,636
来修复这个问题

668
00:25:41,636 --> 00:25:43,996
就是让你的服务器管理员

669
00:25:43,996 --> 00:25:46,456
升级他们的服务器

670
00:25:46,456 --> 00:25:48,056
以使用

671
00:25:48,126 --> 00:25:48,986
新的证书

672
00:25:50,186 --> 00:25:52,346
好消息是

673
00:25:52,406 --> 00:25:54,016
所有我们平台

674
00:25:54,086 --> 00:25:57,146
所信任的证书颁发机构

675
00:25:57,146 --> 00:25:58,556
都不受到

676
00:25:58,796 --> 00:26:01,446
这些证书移除的影响

677
00:26:01,446 --> 00:26:03,196
并且

678
00:26:03,196 --> 00:26:04,776
你可以从这个连接上

679
00:26:04,776 --> 00:26:08,926
找到所有我们平台所信任的

680
00:26:09,026 --> 00:26:09,146
根证书列表

681
00:26:09,236 --> 00:26:11,156
我们现在的讲解

682
00:26:11,156 --> 00:26:13,986
又更多地覆盖了一些内容

683
00:26:13,986 --> 00:26:15,796
现在当我回到我的办公室

684
00:26:15,796 --> 00:26:18,656
至少我会开始想我应该做些什么

685
00:26:18,656 --> 00:26:21,626
我应该怎样才能保证

686
00:26:21,626 --> 00:26:23,056
我有最好的安全措施

687
00:26:23,526 --> 00:26:24,756
所以

688
00:26:24,756 --> 00:26:26,916
你需要做的第一件事

689
00:26:26,916 --> 00:26:29,026
就是依据那些我所提到的

690
00:26:29,176 --> 00:26:30,766
最好的安全措施

691
00:26:30,766 --> 00:26:32,386
来检查你的执行 库和服务器

692
00:26:33,066 --> 00:26:34,646
我们甚至有一些

693
00:26:34,706 --> 00:26:36,976
很方便的图表

694
00:26:36,976 --> 00:26:39,096
你可以使用它们来确保你使用了

695
00:26:39,926 --> 00:26:42,006
最好的算法 如果

696
00:26:42,006 --> 00:26:43,656
你是一个服务器开发人员

697
00:26:43,656 --> 00:26:46,416
你需要做一些工作

698
00:26:46,496 --> 00:26:48,236
来确保你为你所有的客户端

699
00:26:48,386 --> 00:26:49,296
提供了最好的安全性

700
00:26:51,216 --> 00:26:52,366
你需要浏览

701
00:26:52,366 --> 00:26:55,336
并替换

702
00:26:55,406 --> 00:26:58,376
所有 SHA-1

703
00:26:58,376 --> 00:27:00,626
或者薄弱的 RSA 密钥证书

704
00:27:00,756 --> 00:27:01,786
来保证你的客户不会在我们的平台运行失败

705
00:27:02,506 --> 00:27:04,546
此外

706
00:27:04,546 --> 00:27:06,816
你应该将你的服务器升级至 TLS 1.2

707
00:27:06,816 --> 00:27:09,946
并且

708
00:27:10,156 --> 00:27:11,936
使用我之前所提到的

709
00:27:12,026 --> 00:27:13,286
任何一种权威的加密密码

710
00:27:14,756 --> 00:27:16,986
你应该

711
00:27:16,986 --> 00:27:19,506
让用户来决定这些密码的顺序

712
00:27:19,506 --> 00:27:22,326
因为

713
00:27:22,326 --> 00:27:25,346
对于同等安全性的密码

714
00:27:25,346 --> 00:27:27,806
用户倾向于

715
00:27:27,806 --> 00:27:30,356
使用那些

716
00:27:30,456 --> 00:27:32,106
更好更快的密码

717
00:27:33,596 --> 00:27:34,716
同时

718
00:27:34,876 --> 00:27:37,866
你还需要启用 OCSP Stapling

719
00:27:37,866 --> 00:27:40,166
以确认

720
00:27:40,166 --> 00:27:42,556
你所有的客户端

721
00:27:42,556 --> 00:27:44,436
都实时得到

722
00:27:44,796 --> 00:27:46,756
最新的撤销信息

723
00:27:46,756 --> 00:27:48,866
并且保证你的客户

724
00:27:48,936 --> 00:27:49,656
不需要建立额外的隐私妥协网络连接

725
00:27:51,036 --> 00:27:52,886
最后

726
00:27:53,246 --> 00:27:54,836
为了帮助我们建立

727
00:27:54,836 --> 00:27:56,746
我们新的撤销机制

728
00:27:56,746 --> 00:27:58,726
我们需要你检查你的证书

729
00:27:58,726 --> 00:28:00,496
是否已经记录在了

730
00:28:00,496 --> 00:28:00,836
证书透明度日志中

731
00:28:02,166 --> 00:28:04,246
你们中的很多人

732
00:28:04,416 --> 00:28:05,096
是 App 开发人员

733
00:28:05,986 --> 00:28:07,616
你们来说好消息是

734
00:28:07,616 --> 00:28:09,926
你们只需要做一个工作

735
00:28:10,816 --> 00:28:13,016
我们平台易于

736
00:28:13,016 --> 00:28:15,556
让你们采用最佳实践

737
00:28:15,556 --> 00:28:18,616
并且你们要做的

738
00:28:18,906 --> 00:28:19,796
只是避免使用例外的 ATS

739
00:28:19,976 --> 00:28:22,026
如果

740
00:28:22,026 --> 00:28:22,626
你正在使用一个例外的 ATS

741
00:28:22,626 --> 00:28:25,856
你的连接

742
00:28:25,856 --> 00:28:28,606
就不能达到我们平台

743
00:28:28,656 --> 00:28:30,536
所想要实现的安全级别

744
00:28:31,306 --> 00:28:34,716
所以

745
00:28:34,716 --> 00:28:36,236
现在 Chris 将会向你介绍更多的

746
00:28:36,236 --> 00:28:37,996
一些关于 App 传输安全的内容

747
00:28:37,996 --> 00:28:39,436
并且

748
00:28:39,436 --> 00:28:40,676
向你介绍当前的最新动态

749
00:28:41,106 --> 00:28:41,326
Chris

750
00:28:42,516 --> 00:28:48,696
[掌声]

751
00:28:49,196 --> 00:28:49,826
>>  谢谢 Bailey

752
00:28:49,826 --> 00:28:51,906
现在

753
00:28:51,996 --> 00:28:54,206
我想更深入地

754
00:28:54,206 --> 00:28:55,666
探讨一下

755
00:28:56,876 --> 00:28:57,136
ATS

756
00:28:57,136 --> 00:28:57,956
ATS 其实就是

757
00:28:57,956 --> 00:28:59,126
我们在 iOS 9 中

758
00:28:59,126 --> 00:29:01,106
所添加的一个功能

759
00:29:01,596 --> 00:29:02,966
旨在

760
00:29:02,966 --> 00:29:04,346
提高用户数据的

761
00:29:04,346 --> 00:29:05,126
安全性和隐私性

762
00:29:05,796 --> 00:29:09,106
ATS 确保大部分

763
00:29:09,106 --> 00:29:10,466
通过网络发送的

764
00:29:10,466 --> 00:29:11,806
应用数据

765
00:29:11,806 --> 00:29:12,826
都被默认加密和保护

766
00:29:14,716 --> 00:29:16,266
这意味着

767
00:29:16,266 --> 00:29:18,656
我们从不安全的 HTTP

768
00:29:18,946 --> 00:29:19,816
转变成了 HTTPS

769
00:29:19,816 --> 00:29:22,166
这也意味着一些事情

770
00:29:22,936 --> 00:29:25,076
首先

771
00:29:25,076 --> 00:29:26,506
意味着要使用最新标准版本的 TLS

772
00:29:26,746 --> 00:29:27,636
即 版本 1.2

773
00:29:28,176 --> 00:29:29,556
这些

774
00:29:29,556 --> 00:29:31,256
都在这几年间

775
00:29:31,256 --> 00:29:32,846
进行了不断地更新和维护

776
00:29:32,846 --> 00:29:34,136
因为我们考虑了之前 Bailey 所提及的那些攻击

777
00:29:35,046 --> 00:29:36,256
这也意味着

778
00:29:36,256 --> 00:29:36,886
使用更强力的加密

779
00:29:37,646 --> 00:29:39,306
这意味着

780
00:29:39,306 --> 00:29:41,096
使用块加密

781
00:29:41,096 --> 00:29:41,926
像SHA-2种类中的 AES 算法和哈希函数

782
00:29:43,236 --> 00:29:44,696
更重要的是

783
00:29:44,696 --> 00:29:46,186
它也意味着

784
00:29:46,186 --> 00:29:47,366
使用密钥交换算法来提供保密性

785
00:29:47,366 --> 00:29:49,226
在当今社会

786
00:29:49,226 --> 00:29:50,566
你的应用数据

787
00:29:50,566 --> 00:29:54,156
在网络上传输时

788
00:29:54,156 --> 00:29:56,486
可以保持安全

789
00:29:56,486 --> 00:29:58,386
甚至

790
00:29:58,386 --> 00:29:59,926
在服务器长时间有效的私钥受到威胁的时候

791
00:29:59,926 --> 00:30:01,136
应用数据也能保持安全

792
00:30:01,136 --> 00:30:02,376
这变得越来越重要

793
00:30:03,706 --> 00:30:05,566
现如今

794
00:30:05,566 --> 00:30:07,276
我们生活的世界中

795
00:30:07,466 --> 00:30:09,266
不是所有的传输层服务器都是相同的

796
00:30:09,266 --> 00:30:10,806
也不是所有的传输层服务器

797
00:30:10,806 --> 00:30:11,586
都是相同的版本和配置

798
00:30:12,296 --> 00:30:14,416
举例来说

799
00:30:14,416 --> 00:30:15,646
你可能需要连接一个

800
00:30:15,646 --> 00:30:17,136
根本不支持 HTTPS 的服务器

801
00:30:18,026 --> 00:30:18,976
这时候你该怎么办

802
00:30:20,026 --> 00:30:21,136
这

803
00:30:21,136 --> 00:30:21,366
就是一个例外

804
00:30:22,256 --> 00:30:24,696
这种例外的情况

805
00:30:24,696 --> 00:30:26,916
在特定领域

806
00:30:26,916 --> 00:30:29,496
或者全球领域

807
00:30:29,496 --> 00:30:30,546
允许你的 App 退出 ATS

808
00:30:32,026 --> 00:30:33,916
例外情况

809
00:30:33,916 --> 00:30:35,926
可以在服务器

810
00:30:35,926 --> 00:30:37,716
向更新的 TLS 配置更新时

811
00:30:37,716 --> 00:30:39,456
暂时性的

812
00:30:39,456 --> 00:30:40,426
帮你保持功能

813
00:30:41,996 --> 00:30:43,816
去年

814
00:30:43,816 --> 00:30:45,486
我们提出针对 App store 的例外情况

815
00:30:45,486 --> 00:30:47,446
需要提供理由这一方案

816
00:30:48,586 --> 00:30:50,706
自那开始

817
00:30:50,706 --> 00:30:51,946
我们发现

818
00:30:51,946 --> 00:30:53,686
我们当前所有可用的例外情况

819
00:30:53,846 --> 00:30:54,976
并没有完全解决你们所有的情况

820
00:30:55,656 --> 00:30:58,326
但是

821
00:30:58,326 --> 00:31:01,216
因为全球化的 ATS 使用

822
00:31:01,216 --> 00:31:03,056
一直是我们的目标

823
00:31:03,056 --> 00:31:03,866
我们一直在花时间

824
00:31:03,866 --> 00:31:05,846
更新我们所有的例外情况

825
00:31:05,846 --> 00:31:07,206
以便可以满足所有的情况

826
00:31:07,576 --> 00:31:08,766
所以

827
00:31:08,766 --> 00:31:10,596
现在我想谈论一些

828
00:31:10,596 --> 00:31:11,076
我们最近刚刚添加的例外情况

829
00:31:11,866 --> 00:31:13,536
具体来说

830
00:31:13,536 --> 00:31:14,746
我们已经不再

831
00:31:14,746 --> 00:31:15,196
仅仅接受 WebKit 的内容

832
00:31:16,016 --> 00:31:17,116
现在

833
00:31:17,116 --> 00:31:18,916
有一些例外情况

834
00:31:18,916 --> 00:31:20,176
可以确保说你在通过 AVFoundation

835
00:31:20,176 --> 00:31:21,406
来进行数据流传输时

836
00:31:21,406 --> 00:31:23,176
你可以

837
00:31:23,176 --> 00:31:24,516
对于这些特定的数据

838
00:31:24,516 --> 00:31:24,856
不使用 ATS

839
00:31:25,856 --> 00:31:26,956
我们也有一些例外情况

840
00:31:26,956 --> 00:31:29,456
来支持任意的

841
00:31:29,456 --> 00:31:31,876
WebView 请求

842
00:31:32,036 --> 00:31:33,706
不使用 ATS

843
00:31:33,706 --> 00:31:34,546
或者让本地网络连接不使用 ATS

844
00:31:35,406 --> 00:31:36,546
这里所说的

845
00:31:36,546 --> 00:31:37,936
本地网络连接

846
00:31:37,936 --> 00:31:39,986
只是一个到原始 IP 地址的连接

847
00:31:39,986 --> 00:31:41,286
或者到一个拥有不受限域名的服务器的连接

848
00:31:42,516 --> 00:31:44,986
我还想做一点说明

849
00:31:44,986 --> 00:31:46,396
尽管说

850
00:31:46,396 --> 00:31:47,426
不使用 ATS

851
00:31:47,426 --> 00:31:50,096
对于你数据的安全性和隐私性来说不是必须的

852
00:31:50,096 --> 00:31:51,426
因为

853
00:31:51,426 --> 00:31:52,676
你还会在传输你的数据前进行加密

854
00:31:52,676 --> 00:31:53,046
但是

855
00:31:53,476 --> 00:31:54,696
我们仍然觉得

856
00:31:54,696 --> 00:31:56,896
使用 TLS 来保护你的数据传输

857
00:31:56,896 --> 00:31:58,316
是最为正确

858
00:31:58,316 --> 00:31:58,766
和合适的

859
00:31:58,936 --> 00:32:00,936
就像

860
00:32:01,046 --> 00:32:02,166
Bailey 之前提到的一样

861
00:32:02,706 --> 00:32:04,366
你需要在你的能力范围内

862
00:32:04,406 --> 00:32:06,236
尽可能地

863
00:32:06,236 --> 00:32:08,026
减小甚至消除

864
00:32:08,026 --> 00:32:09,496
所有的例外情况

865
00:32:10,266 --> 00:32:12,016
我还想介绍一下

866
00:32:12,016 --> 00:32:13,546
我们最近

867
00:32:13,546 --> 00:32:14,406
为了支持证书透明度

868
00:32:14,406 --> 00:32:15,136
所添加的密钥

869
00:32:16,306 --> 00:32:18,126
如果

870
00:32:18,126 --> 00:32:20,756
你想要让一个特定的服务器

871
00:32:20,756 --> 00:32:22,256
加入证书透明度

872
00:32:22,256 --> 00:32:24,236
来帮助你保护你的 App

873
00:32:24,236 --> 00:32:27,956
和用户的 App

874
00:32:27,956 --> 00:32:29,396
免受证书攻击

875
00:32:29,396 --> 00:32:31,446
你可以指定一个特定的域

876
00:32:31,736 --> 00:32:32,696
不管你是否想要该服务器

877
00:32:32,696 --> 00:32:35,766
加入证书透明度

878
00:32:36,156 --> 00:32:38,776
当下  我们仍然致力于 ATS

879
00:32:39,706 --> 00:32:41,146
在过去几年

880
00:32:41,146 --> 00:32:43,086
我们不断升级

881
00:32:43,366 --> 00:32:44,436
我们可以为开发者所提供的服务

882
00:32:44,436 --> 00:32:45,606
以此保证

883
00:32:45,606 --> 00:32:46,666
这些服务都支持 ATS

884
00:32:47,506 --> 00:32:48,866
所有你现在在这里看到的服务

885
00:32:49,056 --> 00:32:50,966
都是支持 ATS 的

886
00:32:50,966 --> 00:32:51,936
这意味着

887
00:32:51,936 --> 00:32:53,696
你的 App

888
00:32:53,696 --> 00:32:54,366
不会遇到例外情况

889
00:32:55,266 --> 00:32:56,606
我们的最终目标是

890
00:32:56,606 --> 00:32:58,576
你得到最佳的

891
00:32:58,576 --> 00:32:59,436
网络安全

892
00:33:00,866 --> 00:33:01,996
在过去的几年中

893
00:33:01,996 --> 00:33:04,686
我们一直监测

894
00:33:04,736 --> 00:33:06,926
App Store

895
00:33:07,556 --> 00:33:08,386
来追踪 ATS 使用的进展

896
00:33:08,546 --> 00:33:10,696
我们看到

897
00:33:11,616 --> 00:33:13,186
越来越多的人

898
00:33:13,186 --> 00:33:14,476
使用 ATS

899
00:33:14,916 --> 00:33:15,796
我们也看到有更多的例外情况出现

900
00:33:15,796 --> 00:33:16,746
这也意味着我们要做的工作还有很多

901
00:33:17,536 --> 00:33:18,836
如果你是一个 App 开发人员

902
00:33:19,256 --> 00:33:21,036
请继续保持警觉

903
00:33:21,036 --> 00:33:23,306
并且尽可能减小

904
00:33:23,306 --> 00:33:24,026
甚至消除你对于例外情况的依赖

905
00:33:24,566 --> 00:33:26,246
如果你是一个服务器运行人员

906
00:33:26,246 --> 00:33:29,146
或者服务器的拥有者

907
00:33:29,146 --> 00:33:30,366
请继续更新你的服务器配置

908
00:33:30,366 --> 00:33:32,726
以支持 1.2 版本

909
00:33:32,726 --> 00:33:35,216
甚至更新版本的 TLS

910
00:33:35,436 --> 00:33:39,486
既然提及 TLS

911
00:33:39,486 --> 00:33:40,996
我想向你们进行一个简短的

912
00:33:40,996 --> 00:33:42,226
有关这种安全协议未来发展方向的

913
00:33:42,256 --> 00:33:43,156
介绍

914
00:33:44,236 --> 00:33:45,306
TLS 如今

915
00:33:45,626 --> 00:33:47,256
已经成为了

916
00:33:47,256 --> 00:33:48,106
互联网的重要组成部分

917
00:33:48,576 --> 00:33:49,996
当下

918
00:33:50,036 --> 00:33:52,616
越来越多的数据传输

919
00:33:52,616 --> 00:33:53,226
因为 TLS 而受到了保护

920
00:33:54,866 --> 00:33:57,226
然而

921
00:33:57,226 --> 00:33:58,066
并不是所有的传输都受到了同等的保护

922
00:33:59,026 --> 00:34:00,186
这个协议

923
00:34:00,186 --> 00:34:01,926
已经存在了很多很多年

924
00:34:01,926 --> 00:34:02,576
并且

925
00:34:02,576 --> 00:34:03,726
对于服务器来说

926
00:34:03,726 --> 00:34:05,166
有很多不同的实现和配置

927
00:34:05,166 --> 00:34:06,746
支持很多不同的

928
00:34:06,746 --> 00:34:08,275
TLS 版本

929
00:34:09,636 --> 00:34:11,126
此协议

930
00:34:11,126 --> 00:34:12,616
也在不断地被修缮

931
00:34:12,616 --> 00:34:13,835
为了应对之前 Bailey 所提到的

932
00:34:13,835 --> 00:34:15,045
那些攻击

933
00:34:15,045 --> 00:34:17,166
或完善

934
00:34:17,166 --> 00:34:18,176
协议中的

935
00:34:18,176 --> 00:34:18,646
一些不足

936
00:34:19,775 --> 00:34:21,116
最近几年

937
00:34:21,116 --> 00:34:22,056
互联网协会认为

938
00:34:22,056 --> 00:34:22,996
有必要

939
00:34:22,996 --> 00:34:24,216
开始这个协议

940
00:34:24,216 --> 00:34:25,096
下一个版本的工作

941
00:34:25,565 --> 00:34:26,436
即 TLS 1.3

942
00:34:27,886 --> 00:34:30,815
本着为大家提供最优质服务的原则

943
00:34:30,815 --> 00:34:32,676
我们正在密切关注这项工作的开展

944
00:34:32,676 --> 00:34:33,976
以保证

945
00:34:33,976 --> 00:34:35,755
我们随时准备好采用这种新的版本

946
00:34:36,016 --> 00:34:37,916
并且在当它成为一个新的标准时

947
00:34:37,916 --> 00:34:40,275
可以及时帮助大家更新这种标准

948
00:34:40,396 --> 00:34:42,476
从设计方面来看

949
00:34:42,476 --> 00:34:43,126
TLS 1.3 是真正的最优选择

950
00:34:44,156 --> 00:34:45,485
遵从

951
00:34:45,485 --> 00:34:46,576
ATS 配置的

952
00:34:46,576 --> 00:34:47,876
大部分的功能

953
00:34:47,876 --> 00:34:49,936
都是核心标准的

954
00:34:49,936 --> 00:34:50,826
一部分

955
00:34:52,016 --> 00:34:54,136
这意味着

956
00:34:54,136 --> 00:34:55,755
旧密码  密码套件  哈希函数

957
00:34:55,755 --> 00:34:56,906
以及密钥交换算法

958
00:34:56,906 --> 00:34:58,316
都是不被允许的

959
00:34:58,606 --> 00:34:59,806
不是说你不能使用它们

960
00:35:00,016 --> 00:35:01,246
只是说

961
00:35:01,246 --> 00:35:01,426
他们在这里使用不合适

962
00:35:02,496 --> 00:35:03,846
这意味着

963
00:35:03,886 --> 00:35:04,996
规格更加的简单

964
00:35:05,786 --> 00:35:06,726
意味着更容易实现

965
00:35:06,726 --> 00:35:08,996
更容易理解

966
00:35:08,996 --> 00:35:10,856
并且

967
00:35:11,116 --> 00:35:11,956
更容易测试

968
00:35:12,126 --> 00:35:13,736
这也让我们更加相信

969
00:35:13,736 --> 00:35:15,036
这个版本的实现

970
00:35:15,036 --> 00:35:17,096
可以让 TLS 库

971
00:35:17,096 --> 00:35:19,926
更少的

972
00:35:19,926 --> 00:35:21,256
甚至免于之前的

973
00:35:21,996 --> 00:35:23,836
一些问题

974
00:35:23,986 --> 00:35:25,626
这种简单性

975
00:35:26,346 --> 00:35:27,596
还能带来的一大优势是

976
00:35:27,596 --> 00:35:28,246
它可以提高网络效率

977
00:35:29,096 --> 00:35:30,126
让我来向大家讲解

978
00:35:30,956 --> 00:35:31,786
这具体是什么意思

979
00:35:31,936 --> 00:35:32,836
让我们回顾一下

980
00:35:32,836 --> 00:35:35,976
通过 TLS 1.2 和 TLS 1.3握手

981
00:35:35,976 --> 00:35:37,116
来跟服务器

982
00:35:37,116 --> 00:35:37,526
建立连接

983
00:35:38,136 --> 00:35:41,796
我们从 TCP 连接开始

984
00:35:42,216 --> 00:35:43,406
TCP 连接

985
00:35:43,406 --> 00:35:44,176
需要客户端与服务器之间

986
00:35:44,176 --> 00:35:44,506
完成一个往返过程

987
00:35:45,876 --> 00:35:47,026
下一步

988
00:35:47,026 --> 00:35:48,906
你建立你的 TLS 握手

989
00:35:48,906 --> 00:35:50,106
客户端和服务器

990
00:35:50,106 --> 00:35:51,666
可以借此交换问好信息

991
00:35:51,666 --> 00:35:54,476
或者之后连接所需要的

992
00:35:54,476 --> 00:35:55,546
初步配置信息

993
00:35:56,246 --> 00:35:58,806
在 TLS 1.3 中

994
00:35:58,806 --> 00:36:00,756
除了之前所说之外

995
00:36:00,896 --> 00:36:03,256
它还会处理这一阶段中

996
00:36:03,256 --> 00:36:05,476
用于之后加密的材料

997
00:36:05,996 --> 00:36:07,066
这意味着

998
00:36:07,066 --> 00:36:08,586
在下一次传输时

999
00:36:08,586 --> 00:36:09,726
客户端可以传输应用数据

1000
00:36:10,916 --> 00:36:13,536
而在 1.2 中

1001
00:36:13,536 --> 00:36:14,466
客户端和服务器

1002
00:36:14,466 --> 00:36:16,316
是在第二次传输中处理加密材料的

1003
00:36:16,316 --> 00:36:18,896
这意味着

1004
00:36:18,896 --> 00:36:20,566
1.2 比 1.3 多需要一些时间

1005
00:36:20,566 --> 00:36:21,166
来开始数据传输

1006
00:36:22,456 --> 00:36:23,476
也许这听起来没什么

1007
00:36:23,476 --> 00:36:24,806
但是

1008
00:36:24,806 --> 00:36:25,596
让我从你的视角来看待一下这个问题

1009
00:36:26,546 --> 00:36:27,786
我们从各种各样的设备和网络中

1010
00:36:27,786 --> 00:36:30,356
搜集数据

1011
00:36:30,356 --> 00:36:32,976
如运营商，蜂窝网络

1012
00:36:33,126 --> 00:36:34,416
和无线网络

1013
00:36:34,466 --> 00:36:36,866
我们的数据表明

1014
00:36:36,866 --> 00:36:38,426
至少百分之十的蜂窝网络连接

1015
00:36:38,426 --> 00:36:41,566
或者说

1016
00:36:41,566 --> 00:36:42,846
至少蜂窝网络中

1017
00:36:42,846 --> 00:36:44,236
百分之十的 TLS 连接

1018
00:36:44,236 --> 00:36:45,636
都至少需要 800 毫秒

1019
00:36:45,636 --> 00:36:46,236
来建立

1020
00:36:46,806 --> 00:36:49,206
无线网络中

1021
00:36:49,206 --> 00:36:50,966
百分之十的 TLS 连接

1022
00:36:50,966 --> 00:36:51,946
需要 500 毫秒来建立

1023
00:36:53,026 --> 00:36:55,566
TLS 1.3

1024
00:36:55,566 --> 00:36:57,676
将会缩减三分之一的时间

1025
00:36:57,676 --> 00:37:00,906
这意味着移动领域的一个巨大的成功

1026
00:37:01,516 --> 00:37:05,036
现在

1027
00:37:05,036 --> 00:37:05,966
TLS 1.3 还只是一个正在发展中的项目

1028
00:37:06,026 --> 00:37:08,156
这也是为什么 ATS

1029
00:37:08,156 --> 00:37:10,036
主要致力于让你们使用 1.2

1030
00:37:10,036 --> 00:37:12,046
以确保

1031
00:37:12,046 --> 00:37:13,956
你们使用最合适的

1032
00:37:13,956 --> 00:37:14,536
最新的协议标准

1033
00:37:15,556 --> 00:37:17,806
但是

1034
00:37:17,806 --> 00:37:19,656
如果你想要对于 TLS 1.3

1035
00:37:19,656 --> 00:37:20,636
进行测试

1036
00:37:20,636 --> 00:37:22,396
并使你自己对这个协议有所准备

1037
00:37:22,446 --> 00:37:24,706
那么我很高兴地告诉大家

1038
00:37:24,706 --> 00:37:25,376
我们允许大家进行这种操作

1039
00:37:26,336 --> 00:37:27,926
这在我们任何系统中

1040
00:37:27,926 --> 00:37:28,656
都不是默认设置

1041
00:37:29,296 --> 00:37:31,036
但是

1042
00:37:31,036 --> 00:37:33,576
如果你想要进行这种尝试

1043
00:37:33,576 --> 00:37:35,176
你可以在 iOS 上安装协议子集

1044
00:37:35,176 --> 00:37:39,596
或者

1045
00:37:39,596 --> 00:37:41,226
用简单地写入默认设置

1046
00:37:41,226 --> 00:37:42,866
来使 TLS 1.3

1047
00:37:43,566 --> 00:37:43,666
在 macOS 系统中可用

1048
00:37:44,286 --> 00:37:46,736
当明年

1049
00:37:46,736 --> 00:37:47,916
这个协议趋于标准化的时候

1050
00:37:47,916 --> 00:37:49,716
你可以通过这些方法

1051
00:37:49,716 --> 00:37:51,056
来让你的 App

1052
00:37:51,056 --> 00:37:51,586
和网络提前做好准备

1053
00:37:52,116 --> 00:37:54,396
与此同时

1054
00:37:54,396 --> 00:37:56,516
我们花费了大量的时间和精力

1055
00:37:56,516 --> 00:37:58,056
跟第三方

1056
00:37:58,056 --> 00:37:59,286
和我们的企业伙伴一起工作

1057
00:37:59,286 --> 00:38:01,916
致力于

1058
00:38:01,916 --> 00:38:02,876
确保他们的 App

1059
00:38:02,876 --> 00:38:04,746
和网络

1060
00:38:05,736 --> 00:38:05,856
都为这个协议做好准备

1061
00:38:07,296 --> 00:38:08,416
现在

1062
00:38:08,416 --> 00:38:09,716
我想整体总结一下

1063
00:38:09,716 --> 00:38:11,326
今天我和 Bailey

1064
00:38:11,826 --> 00:38:13,356
一起讲到的内容

1065
00:38:13,546 --> 00:38:15,556
我们最基本的目标之一是

1066
00:38:15,556 --> 00:38:17,296
帮助你来保证你用户的数据

1067
00:38:17,296 --> 00:38:18,446
都是安全隐秘的

1068
00:38:19,376 --> 00:38:20,696
我们通过给你最好的

1069
00:38:20,696 --> 00:38:21,676
实践工具和技术

1070
00:38:21,676 --> 00:38:23,116
来帮助你

1071
00:38:23,226 --> 00:38:23,716
实现这一目标

1072
00:38:24,986 --> 00:38:26,326
然而

1073
00:38:26,326 --> 00:38:27,016
你仍需自己完成一些工作

1074
00:38:27,646 --> 00:38:29,256
这意味着

1075
00:38:29,256 --> 00:38:30,816
要尽可能地

1076
00:38:30,816 --> 00:38:31,496
避免过时的算法

1077
00:38:31,696 --> 00:38:33,666
这同时也意味着

1078
00:38:33,666 --> 00:38:34,686
要不断更新

1079
00:38:34,686 --> 00:38:35,546
TLS 的配置

1080
00:38:36,866 --> 00:38:37,726
如果

1081
00:38:37,726 --> 00:38:39,916
你是一个服务器拥有者

1082
00:38:39,916 --> 00:38:42,096
或者服务器运行人员

1083
00:38:42,096 --> 00:38:44,406
意味着你要将版本升级到 1.2

1084
00:38:44,406 --> 00:38:45,016
来确保ATS下的每一个 App 都是可用的

1085
00:38:46,226 --> 00:38:47,356
如果你是一个 App 开发人员

1086
00:38:47,356 --> 00:38:49,526
这意味着

1087
00:38:49,526 --> 00:38:51,066
要尽可能少的使用例外情况

1088
00:38:52,666 --> 00:38:53,566
如果

1089
00:38:53,566 --> 00:38:55,366
你敢于尝试新鲜事物

1090
00:38:55,366 --> 00:38:57,976
不防尝试一下 TLS 1.3

1091
00:38:57,976 --> 00:38:59,956
来使你的 App 和网络

1092
00:38:59,956 --> 00:39:00,996
对下一个版本的协议

1093
00:39:00,996 --> 00:39:01,536
做好准备

1094
00:39:02,116 --> 00:39:05,736
如果

1095
00:39:05,736 --> 00:39:07,886
针对我和 Bailey 所讨论到的问题

1096
00:39:07,886 --> 00:39:09,306
你想获得更多的信息

1097
00:39:09,306 --> 00:39:10,326
你可以访问上面的链接

1098
00:39:11,866 --> 00:39:13,646
之后

1099
00:39:13,646 --> 00:39:15,026
我们将会有一个

1100
00:39:15,026 --> 00:39:16,286
关于

1101
00:39:16,286 --> 00:39:17,546
隐私与 App 的讲解

1102
00:39:17,546 --> 00:39:18,466
非常推荐大家听一下

1103
00:39:19,236 --> 00:39:20,586
明天

1104
00:39:20,586 --> 00:39:22,216
我们也会有一些

1105
00:39:22,216 --> 00:39:23,386
有关计算机网络发展的介绍

1106
00:39:23,656 --> 00:39:25,396
对于

1107
00:39:25,396 --> 00:39:27,416
对 TLS 有兴趣的人来说

1108
00:39:27,416 --> 00:39:28,176
会非常有趣

1109
00:39:28,176 --> 00:39:29,906
这就是我今天要讲的全部了

1110
00:39:30,486 --> 00:39:31,266
谢谢大家的时间

1111
00:39:31,266 --> 00:39:32,896
和出席

1112
00:39:32,896 --> 00:39:33,536
也希望大家能喜欢之后的会议内容

