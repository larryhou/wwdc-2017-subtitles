1
00:00:21,388 --> 00:00:26,226
大家下午好 欢迎参加
为Swift Playground本地化内容演讲

2
00:00:26,326 --> 00:00:27,361
我是艾利克斯·库恩

3
00:00:27,494 --> 00:00:31,031
是内容团队中的一名工程师
为Swift Playground开发内容

4
00:00:31,098 --> 00:00:34,535
稍后国际化团队中的
埃尔顿·阿哈默德会加入本场演讲

5
00:00:35,469 --> 00:00:40,007
现在世界是如此之大
充斥着许多不同的人

6
00:00:40,073 --> 00:00:44,211
他们可能会喜欢你在
Swift Playground中所创建的内容

7
00:00:44,311 --> 00:00:48,682
然而Swift Playground
目前有大约一百多万用户

8
00:00:48,782 --> 00:00:51,485
有将近三分之二不是美国人

9
00:00:51,585 --> 00:00:53,954
为了能让他们使用你的内容

10
00:00:54,021 --> 00:00:58,759
你要对内容进行本地化 以满足
全世界的需求 我们会谈一下这个

11
00:00:59,927 --> 00:01:02,362
Swift Playground
的一点儿历史

12
00:01:02,429 --> 00:01:05,666
这是一款iPad应用
可以让你写Swift代码

13
00:01:05,732 --> 00:01:07,801
并实时查看所执行的结果

14
00:01:08,268 --> 00:01:11,538
与Swift Playground
同期发布的还有一个课程

15
00:01:11,605 --> 00:01:14,274
教初学者一些基础代码

16
00:01:14,541 --> 00:01:17,511
同时还有一个与众不同的编码挑战

17
00:01:17,644 --> 00:01:20,280
比如为Battleship写逻辑

18
00:01:21,849 --> 00:01:24,685
现在它最初发布时是英文的

19
00:01:25,352 --> 00:01:28,989
但我们后来将它翻译成了
另外五种语言：

20
00:01:29,423 --> 00:01:34,761
西班牙语、法语、德语、
简体中文和日语

21
00:01:34,928 --> 00:01:36,597
并且还即将翻译为更多语种

22
00:01:37,197 --> 00:01:42,202
对于内容本地化
我们遇到了许多挑战和问题

23
00:01:42,269 --> 00:01:47,307
我们必须得克服
给我们的用户提供一种出色的体验

24
00:01:47,608 --> 00:01:51,678
这就是我们要讲的内容 一些经验教训

25
00:01:51,745 --> 00:01:53,347
当你制作内容时

26
00:01:53,714 --> 00:01:57,551
今天我们给出一个概览 关于什么是
内容、什么是Swift Playground

27
00:01:57,618 --> 00:01:59,152
以及所面临的挑战

28
00:01:59,953 --> 00:02:02,556
我们要谈本地化注意事项

29
00:02:02,623 --> 00:02:05,459
当你制作你的内容和对其进行本地化时

30
00:02:06,527 --> 00:02:10,430
最后我们要了解本地化了的
Playground Book结构

31
00:02:10,564 --> 00:02:13,300
所以你今天就可以
把你的书变得可本地化了

32
00:02:15,369 --> 00:02:18,038
在我们开始讲本地化之前

33
00:02:18,539 --> 00:02:22,242
定义你的内容目标是非常关键的

34
00:02:22,843 --> 00:02:26,213
这很重要 因为当你创建内容时

35
00:02:26,380 --> 00:02:31,051
关于本地化 你需要告诉别人
你的目标是什么

36
00:02:31,118 --> 00:02:35,122
你想要让用户在每种语种中
获得怎样的体验

37
00:02:35,189 --> 00:02:38,792
因为很显然你不能完成全部的翻译

38
00:02:39,393 --> 00:02:44,698
那么提供一个我们所遇到过
和所学习到的一个内容目标的示例：

39
00:02:47,367 --> 00:02:49,169
举个例子 它要有教育性

40
00:02:49,469 --> 00:02:52,606
我们教初学者在Swift中
进行基础编码

41
00:02:52,673 --> 00:02:54,374
假设他们没有任何相关知识

42
00:02:55,475 --> 00:02:58,145
然而我们还希望有意思和有参与性

43
00:02:58,212 --> 00:03:02,449
它不应该像是一本枯燥的教科书
而是学习者希望去读的书

44
00:03:02,516 --> 00:03:05,018
并且很喜欢编码 想要学习更多知识

45
00:03:06,420 --> 00:03:08,689
我们选择的目标人群是12岁及以上

46
00:03:09,156 --> 00:03:11,925
那么无论你是12岁还是112岁

47
00:03:12,192 --> 00:03:15,262
我们都会给你们提供
使用我们内容的出色体验

48
00:03:16,630 --> 00:03:20,267
要了解它被翻译成了哪些语种
并了解代码

49
00:03:20,434 --> 00:03:24,872
这是关于学习调试
和发现并修复故障的一个页面

50
00:03:25,372 --> 00:03:28,108
我相信你们都非常熟悉

51
00:03:28,375 --> 00:03:31,979
对于初学者来说
他们首次接触到这个概念

52
00:03:32,846 --> 00:03:35,182
现在右边有一个实时视图

53
00:03:35,415 --> 00:03:38,485
在本例中是一个3D动画的益智世界

54
00:03:38,585 --> 00:03:42,089
你尝试写代码来解决难题并收集宝石

55
00:03:43,123 --> 00:03:44,758
还有一个叙述区

56
00:03:44,825 --> 00:03:47,928
在一个页面上提供了教学性内容
及其目标

57
00:03:47,995 --> 00:03:49,997
以及初学者所要执行的任务

58
00:03:51,565 --> 00:03:55,903
还有编码区 用户写并编辑
Swift代码以解决难题

59
00:03:56,537 --> 00:04:00,574
那么返回到这些目标
我们其中一个目标是有教育性

60
00:04:01,108 --> 00:04:04,978
那么我们要定义“故障”
和“调试”的意思 对于初学者

61
00:04:05,045 --> 00:04:07,147
他们从来没有过这种经验

62
00:04:07,247 --> 00:04:11,385
必须得提醒一下 关于本地化
我稍后再谈

63
00:04:11,818 --> 00:04:16,723
在整个课程中都有类似的定义
是逐步给出的

64
00:04:17,357 --> 00:04:21,661
并且有完整的术语解释
初学者在整个课程中会逐渐了解

65
00:04:21,795 --> 00:04:24,665
逐步建立完整的概念

66
00:04:24,798 --> 00:04:27,501
当你在本地化时要考虑到这一点

67
00:04:28,802 --> 00:04:33,841
现在系统的另一个功能是
当初学者运行代码时

68
00:04:33,907 --> 00:04:36,877
系统会分析初学者做了什么

69
00:04:36,944 --> 00:04:39,246
并尝试提供纠正反馈

70
00:04:39,313 --> 00:04:42,382
尝试提供说明以改进或修复他写的代码

71
00:04:42,916 --> 00:04:46,153
有一个动画角色百特
他没有收集到宝石

72
00:04:47,020 --> 00:04:50,457
用户轻触暗示
说“你注意到那个故障了吗？

73
00:04:50,524 --> 00:04:52,626
百特尝试收集宝石 但那并没有宝石”

74
00:04:52,793 --> 00:04:57,464
在这里我们采用了对话式语气
尝试变得更有趣、更有参与性

75
00:04:57,898 --> 00:05:00,501
稍后给他们提供教学反馈

76
00:05:00,601 --> 00:05:05,339
告诉他们 他们需要使用收集宝石功能
当他们遇到宝石时

77
00:05:08,008 --> 00:05:10,878
当页面变成中文时 你会注意到

78
00:05:10,944 --> 00:05:14,014
代码是英文的 而其它都被本地化了

79
00:05:14,081 --> 00:05:16,316
我们仍然教同样的概念

80
00:05:16,650 --> 00:05:19,386
但以一种对于该语种来说
比较合适的方式

81
00:05:19,453 --> 00:05:22,756
他们仍然学习与故障和调试相关的内容
但他们

82
00:05:22,823 --> 00:05:25,592
会与他们在页面上看到的代码相关联

83
00:05:26,360 --> 00:05:28,662
类似地 这些暗示…

84
00:05:29,029 --> 00:05:32,232
我们想保持相似的样式 但你会注意到

85
00:05:32,332 --> 00:05:35,869
我们提到收集宝石命令时用的是英语

86
00:05:35,936 --> 00:05:39,239
这是关于本地化的挑战之一

87
00:05:39,373 --> 00:05:42,109
关于处理这些不同的技术术语

88
00:05:42,209 --> 00:05:45,279
并用英文编码 我们稍后再详细讲一下

89
00:05:47,381 --> 00:05:51,752
Swift Playground的
另一个功能是使用动画的画面剪辑

90
00:05:51,818 --> 00:05:56,089
在初学者着手编码之前
深入介绍一个概念

91
00:05:56,490 --> 00:06:01,061
那么初学者会学习什么是“if从句”
在他们着手使用它之前

92
00:06:01,862 --> 00:06:06,867
并且当本地化之后
本地化内容必须考虑到

93
00:06:06,967 --> 00:06:09,603
如何帮助初学者执行任务

94
00:06:09,670 --> 00:06:13,740
我们提到if从句时 仍然用了英语

95
00:06:14,174 --> 00:06:16,577
即使其它内容全部是汉语的

96
00:06:16,844 --> 00:06:20,514
因为这就是他们如何解决难题的方式
当他们写Swift代码时

97
00:06:21,849 --> 00:06:24,585
那么这是一个关于内容的简单概览

98
00:06:24,685 --> 00:06:28,789
我要返回去谈谈创建本地化内容的过程

99
00:06:29,723 --> 00:06:34,828
许多人可能会采用的一个常用方法
就是定义一种语言的目标

100
00:06:34,895 --> 00:06:38,632
并创建内容 再进行测试和迭代

101
00:06:38,932 --> 00:06:41,835
通过用户进行测试
确保拥有出色的体验

102
00:06:41,935 --> 00:06:43,737
然后你就想对其进行本地化

103
00:06:43,971 --> 00:06:47,140
所以你就把它发给你的翻译进行本地化

104
00:06:47,207 --> 00:06:49,076
然后你得到翻译并发布它

105
00:06:49,176 --> 00:06:50,244
这就完成了 是吗？

106
00:06:51,478 --> 00:06:53,580
很遗憾 这其中存在许多问题

107
00:06:54,014 --> 00:06:58,252
当你翻译内容时
某些内容可能不能进行本地化

108
00:06:58,452 --> 00:07:01,955
或者翻译中存在许多不同的问题

109
00:07:02,022 --> 00:07:04,525
它并不能实现你所寻求的目标

110
00:07:04,591 --> 00:07:08,028
相对于你以第一种语种
开发时的目标而言

111
00:07:09,096 --> 00:07:10,831
那么有什么好方法吗？

112
00:07:11,198 --> 00:07:16,136
嗯 比如说本地化是设计过程的一部分

113
00:07:16,904 --> 00:07:20,707
你应该在设计内容目标时考虑本地化

114
00:07:20,774 --> 00:07:22,576
以及产品的初始设计

115
00:07:22,676 --> 00:07:28,582
以避免稍后要付出昂贵代价的错误
阻碍你对内容进行本地化

116
00:07:29,116 --> 00:07:32,152
这与你处理易用性并没有什么不同

117
00:07:32,252 --> 00:07:36,123
在设计过程中考虑到这一点
而不是在设计完成后再考虑

118
00:07:36,190 --> 00:07:39,159
这会让你开发一种非常非常棒的产品

119
00:07:40,227 --> 00:07:43,530
那么好方法是考虑这个图表 是…

120
00:07:43,664 --> 00:07:46,266
过程是设计你的目标

121
00:07:46,533 --> 00:07:49,670
和设计内容 考虑到本地化

122
00:07:50,070 --> 00:07:53,173
然后当你把它发出去进行本地化时

123
00:07:53,240 --> 00:07:56,677
确保你的翻译真的明白了你的目标

124
00:07:56,743 --> 00:07:58,612
以及你的内容

125
00:07:58,712 --> 00:08:01,982
从而把它适当地翻译成各语种

126
00:08:02,082 --> 00:08:03,884
始终如一地实现这些目标

127
00:08:04,518 --> 00:08:07,621
当你翻译内容时 可能需要几轮迭代

128
00:08:07,754 --> 00:08:11,592
那么在这段时间内 通过真实的用户
进行测试是非常重要的

129
00:08:11,758 --> 00:08:15,896
因为你正在尝试为他们服务
并且它们会告诉你如果你做得对

130
00:08:15,963 --> 00:08:18,398
或如果它满足他们的需要
并且他们能理解你的内容

131
00:08:18,999 --> 00:08:22,236
当然了 在这个过程中你可能会发现

132
00:08:22,302 --> 00:08:26,039
你需要改编原始内容
根据你所发现的问题

133
00:08:26,106 --> 00:08:28,208
那些阻碍本地化的问题

134
00:08:28,342 --> 00:08:33,080
如果你在开始就考虑到这些问题
那么需要进行的修改应该会相对较少

135
00:08:33,847 --> 00:08:38,184
这是一种比较好的方式
考虑到创建本地化内容

136
00:08:38,919 --> 00:08:42,556
我要把舞台交给埃尔顿
让他谈谈本地化注意事项

137
00:08:43,256 --> 00:08:44,091
谢谢艾利克斯

138
00:08:44,658 --> 00:08:49,530
那么今天我要谈谈整个过程

139
00:08:49,630 --> 00:08:51,532
当本地化Swift Playground时

140
00:08:51,698 --> 00:08:54,601
以及一些你应该考虑到的关键点

141
00:08:54,668 --> 00:08:56,737
当你本地化Swift Playground时

142
00:08:58,505 --> 00:09:01,575
让我们返回去看艾利克斯
给大家展示过的图表

143
00:09:01,775 --> 00:09:08,215
让我们首先谈谈适应我们的内容
和目标的过程

144
00:09:08,482 --> 00:09:11,051
当一开始考虑到本地化时

145
00:09:11,118 --> 00:09:14,121
在我们开始翻译过程之前

146
00:09:15,155 --> 00:09:16,823
重要的是记住

147
00:09:16,890 --> 00:09:21,361
你的内容选择会影响
Playground的本地化

148
00:09:21,762 --> 00:09:25,699
那么比如
如果你的叙述中有一个故事大纲

149
00:09:25,799 --> 00:09:29,803
或包含文字游戏
或双关语的独特的写作风格

150
00:09:30,304 --> 00:09:32,639
与翻译Playground的人

151
00:09:32,706 --> 00:09:35,676
进行沟通非常重要

152
00:09:35,742 --> 00:09:38,345
以在他们的语言中保持同样的感觉

153
00:09:39,079 --> 00:09:41,114
此外 可能…

154
00:09:41,181 --> 00:09:45,285
你尝试介绍的概念
可能适用于某一种语种

155
00:09:45,953 --> 00:09:51,358
那么你就需要考虑到改编以进行本地化

156
00:09:52,292 --> 00:09:56,597
我们可以Cipher为例
这是一个我们开发的Playground

157
00:09:56,663 --> 00:10:01,502
我们尝试教初学者编码信息和加密

158
00:10:02,135 --> 00:10:04,371
通过一个非常故事化的设定

159
00:10:04,438 --> 00:10:08,342
他们将成为侦探 按照线索解开秘密

160
00:10:08,475 --> 00:10:11,879
那么在这里 写作风格其实非常独特

161
00:10:11,945 --> 00:10:15,449
我们把读者设定成了故事情节中的一员

162
00:10:15,516 --> 00:10:17,985
那么我们说“图书馆温暖又安静

163
00:10:18,085 --> 00:10:20,921
让你摆脱了外面的暴风雪”

164
00:10:21,188 --> 00:10:23,991
这是你想与翻译人员沟通的事

165
00:10:24,057 --> 00:10:26,426
以便他们可以保持同一种叙事感觉

166
00:10:26,493 --> 00:10:31,064
否则可能会丢失那种很友好、
很幽默的感觉

167
00:10:33,166 --> 00:10:35,402
关于Cipher的另一部分就是线索

168
00:10:35,936 --> 00:10:41,275
那么我们会在你写出一条
编码信息后给出一条线索

169
00:10:41,375 --> 00:10:45,512
初学者会被告知注意N
以寻找下一个挑战的答案

170
00:10:46,346 --> 00:10:48,315
我们在叙事区也采用了这种方式

171
00:10:48,382 --> 00:10:51,952
我们说“信息显示注意‘N’
那么谁是或什么是‘N’呢？”

172
00:10:52,886 --> 00:10:57,457
在这里你可以看到有一个有趣的挑战
就是N这个字母自身

173
00:10:57,591 --> 00:11:00,194
不同的语种有不同的字母

174
00:11:00,794 --> 00:11:03,897
有些语种的字母表中并没有N这个字母

175
00:11:04,064 --> 00:11:05,799
你要考虑到这一点

176
00:11:06,166 --> 00:11:10,971
如果字母N对于你的挑战或找到线索

177
00:11:11,038 --> 00:11:13,540
或在谜题中进行调查来说至关重要

178
00:11:13,974 --> 00:11:17,010
那么这可能稍后会成为
本地化的一个问题

179
00:11:17,110 --> 00:11:20,781
你想让翻译人员自由处理这个字母N

180
00:11:20,881 --> 00:11:25,152
并把它改编成他们自己的语言中
最适合、最自然的词

181
00:11:28,722 --> 00:11:33,193
那么在Cipher中
我们其实是在尝试教初学者加密

182
00:11:33,260 --> 00:11:36,697
我们通过一个简单的代替密码实现

183
00:11:36,864 --> 00:11:39,366
在代替密码中 你要获取字母表

184
00:11:39,533 --> 00:11:43,704
并提供指定字母以创建新地图

185
00:11:43,904 --> 00:11:44,905
通过使用那个地图

186
00:11:44,972 --> 00:11:48,976
你可以获取一个纯文本单词
比如Cipher 并对其进行加密

187
00:11:49,076 --> 00:11:51,912
那么如果没有正确的钥匙是不能破译的

188
00:11:53,013 --> 00:11:54,848
这在英语中很棒

189
00:11:55,148 --> 00:11:59,453
当你翻译你的Playground
并把它提交给西班牙语翻译时

190
00:11:59,720 --> 00:12:04,892
很可能他们会键入字母“Ñ”
这并不是你的原始字母

191
00:12:05,459 --> 00:12:08,929
如果你之前没有考虑到这一点
你所处的情况就是

192
00:12:08,996 --> 00:12:13,867
初学者不能解决下一步谜题
或不能加密信息

193
00:12:13,934 --> 00:12:15,969
因为这对于他们的语言来说不管用

194
00:12:16,470 --> 00:12:20,807
当你在规划内容和谜题时
需要考虑到这些东西

195
00:12:23,243 --> 00:12:26,914
当你在规划内容时
你可以采取的另一个策略是

196
00:12:27,014 --> 00:12:30,217
一开始就让内容可以不限语种

197
00:12:30,584 --> 00:12:35,022
那么如果你把内容规划为
不只限于任何一种语种或文化

198
00:12:35,088 --> 00:12:39,993
你就可以避免一开始遇到的那个问题

199
00:12:40,093 --> 00:12:43,630
这也正是我们
在Learn to Code中所实现的

200
00:12:43,897 --> 00:12:46,300
它是一个虚构的角色
它是一个虚构的世界

201
00:12:46,366 --> 00:12:49,837
不局限于任何一种文化或语言

202
00:12:50,070 --> 00:12:53,774
所以翻译和本地化过程就相对简单

203
00:12:53,841 --> 00:12:57,578
因为这个难题就是个游戏
无论翻译成哪种语言

204
00:12:57,678 --> 00:12:59,847
收集宝石就是收集宝石

205
00:13:00,314 --> 00:13:02,382
无论它是英语还是西班牙语

206
00:13:03,684 --> 00:13:06,086
那么这是你可以采用的另一种策略

207
00:13:08,689 --> 00:13:12,392
一旦你规划好了目标和内容

208
00:13:12,459 --> 00:13:17,598
你就已经很好地准备好了本地化
并且你也准备好进行翻译了

209
00:13:18,332 --> 00:13:22,169
这期间有几个关键点你需要时刻谨记

210
00:13:22,269 --> 00:13:25,038
让我们谈谈翻译过程

211
00:13:26,573 --> 00:13:29,910
你要考虑的第一个重要的事
就是你的观众

212
00:13:30,143 --> 00:13:34,047
那么不同的语种有不同的礼节

213
00:13:34,147 --> 00:13:38,318
在英语中 你就是你 无论情境是什么

214
00:13:38,385 --> 00:13:43,123
关于称呼某人为“你”并没有任何区别

215
00:13:43,323 --> 00:13:47,594
除英语外的绝大部分语言
都会有一个明显的差别

216
00:13:47,661 --> 00:13:49,329
比如德语和法语

217
00:13:49,596 --> 00:13:53,467
在德语中 如果是非正式情境
你可以称呼某人为“du”

218
00:13:53,700 --> 00:13:57,104
但在正式情境中
你得称呼某人为“Sie”

219
00:13:57,437 --> 00:13:58,639
同样也适用于法语

220
00:13:59,773 --> 00:14:02,476
关于这些语言的一个重要的事就是

221
00:14:02,543 --> 00:14:08,081
针对孩子们的内容
其实是以非正式口吻写的

222
00:14:08,148 --> 00:14:09,116
这对于

223
00:14:09,183 --> 00:14:13,220
为孩子们创建这种非正式的、
舒适的感觉很有帮助

224
00:14:13,554 --> 00:14:19,526
如果你Swift Playground的受众是
和我们一样较年轻的学习者

225
00:14:20,194 --> 00:14:24,932
采用这种非正式口吻非常关键
会让他们感到很舒服

226
00:14:25,165 --> 00:14:28,802
就像他们在学校里所读到的内容一样

227
00:14:30,170 --> 00:14:34,074
正式和非正式口吻之间
要有一个重要的区别

228
00:14:34,141 --> 00:14:39,446
因为在iOS中 对于警告或其它信息
我们实际上采用的是正式口吻

229
00:14:40,113 --> 00:14:42,516
这是因为它更合适

230
00:14:42,583 --> 00:14:47,654
当你的手机或电脑正在
以实事求是的方式向你提交信息时

231
00:14:47,821 --> 00:14:49,923
需要一种正式口吻

232
00:14:50,190 --> 00:14:52,726
这与Swift Playground形成了对比

233
00:14:53,460 --> 00:14:58,131
那么这是需要考虑的一个重要因素
根据你受众的年龄

234
00:14:58,632 --> 00:15:01,969
关于受众 你要考虑的另一点是
他们年龄有多大

235
00:15:02,035 --> 00:15:05,506
日语提供了一个很好的例子

236
00:15:05,572 --> 00:15:09,443
帮助我们了解年龄较大
和较小的读者之间的区别

237
00:15:09,743 --> 00:15:12,479
那么日语使用三种不同的书写体系

238
00:15:12,546 --> 00:15:15,449
其中一种书写体系叫作日本汉字

239
00:15:15,716 --> 00:15:19,686
日本汉字是一种象形字母
有成千上万个字

240
00:15:20,821 --> 00:15:25,659
这里的重点是孩子们会随着年龄增长
逐渐学习这些字

241
00:15:25,726 --> 00:15:31,265
而较年轻的人可能不如
较年长的人了解日本汉字

242
00:15:31,431 --> 00:15:35,369
他们可能会熟悉较为简单的日本汉字
而不熟悉较复杂的日本汉字

243
00:15:36,003 --> 00:15:39,173
那么如何把这个因素
考虑到Playground中呢？

244
00:15:39,673 --> 00:15:42,109
让我们以术语“代码区”为例

245
00:15:42,176 --> 00:15:45,979
这个术语是指代码编辑器
就是你在Swift中进行输入的地方

246
00:15:47,047 --> 00:15:51,118
如果你把这个发给翻译人员去翻译
而没有提前解释

247
00:15:51,185 --> 00:15:53,921
或没有提前指出受众的年龄

248
00:15:53,987 --> 00:15:57,024
他们可能会选择标准的日语翻译

249
00:15:57,090 --> 00:16:00,594
就是大致比如代码范围
或代码领域之类的翻译

250
00:16:01,562 --> 00:16:05,132
然而当你告知他们你的目标

251
00:16:05,199 --> 00:16:07,000
以及你所针对的为受众年轻人时

252
00:16:07,167 --> 00:16:10,637
他们会提供一个更好的翻译
即一个写代码的地方

253
00:16:10,904 --> 00:16:14,942
这就是我在两种翻译之间
想要突出的重点

254
00:16:15,042 --> 00:16:19,413
第一个采用了“地方”
而第二个采用了“范围”或“领域”

255
00:16:19,580 --> 00:16:21,515
地方是一个很常用的日本汉字

256
00:16:23,116 --> 00:16:29,256
所以较年轻的读者很可能会熟悉这些字

257
00:16:29,756 --> 00:16:33,093
我们还选择包含动词“写”

258
00:16:33,160 --> 00:16:37,631
很明显地指明了这个区域
或地方的目的是什么

259
00:16:38,665 --> 00:16:42,169
这对于使Playground
易于理解起到了很大作用

260
00:16:44,037 --> 00:16:47,341
技术术语是另一个需要重点关注的区域

261
00:16:47,441 --> 00:16:50,410
当写和翻译Swift Playground时

262
00:16:50,811 --> 00:16:54,047
那么这些包括计算机科学术语、
数学术语

263
00:16:54,147 --> 00:17:00,153
以及当然了 还有Swift语言关键字、
枚举、函数

264
00:17:00,220 --> 00:17:03,290
以及你要在叙述中所包含的其它代码

265
00:17:04,124 --> 00:17:06,193
为了帮助理解 请看

266
00:17:06,260 --> 00:17:10,196
艾利克斯之前提到的那个示例
关于介绍调试

267
00:17:10,597 --> 00:17:15,169
为了介绍调试 我们要介绍调试的概念

268
00:17:16,236 --> 00:17:19,239
在英语中 我们有一个简单的短句

269
00:17:19,306 --> 00:17:22,876
“使你的程序
不正常运行的错误叫作故障”

270
00:17:23,644 --> 00:17:25,512
重点是在术语故障上

271
00:17:25,579 --> 00:17:29,583
因为我们要把它翻译成不同的语言

272
00:17:30,784 --> 00:17:37,224
那么在法语中
我们发现用法语学习编程时

273
00:17:37,624 --> 00:17:40,160
故障这个词其实是不翻译的

274
00:17:40,227 --> 00:17:44,898
这是学习如何编程的标准

275
00:17:45,265 --> 00:17:50,270
这是 你知道的 对于说法语的人来说
感觉最自然和最舒适的方式

276
00:17:50,337 --> 00:17:52,506
也很适合情境

277
00:17:52,606 --> 00:17:55,409
在本例中 其实不翻译那个词

278
00:17:55,475 --> 00:17:59,046
让它保留为英语就是最适当的选择

279
00:17:59,780 --> 00:18:04,151
然而对于像西班牙语这样的语种
使用一个本地术语“错误”

280
00:18:04,818 --> 00:18:09,523
经过调查和了解 是更合适的选择

281
00:18:10,057 --> 00:18:13,060
关于这个翻译的一个事实是在括号里

282
00:18:13,126 --> 00:18:18,232
我们会注上英语
“错误”这个词叫作“bug”

283
00:18:18,432 --> 00:18:20,033
这就让学习者

284
00:18:20,133 --> 00:18:24,838
也许在Swift Playground之外
看到故障这个术语时

285
00:18:25,105 --> 00:18:29,510
他们会将其与在Swift Playground中
所学习的这个词联系起来

286
00:18:31,945 --> 00:18:35,249
这就是你可以自由翻译的术语

287
00:18:35,315 --> 00:18:37,951
那么关于你不能翻译的术语呢
比如代码？

288
00:18:38,385 --> 00:18:41,421
在这里我们有个例子
是函数moveForward

289
00:18:41,488 --> 00:18:44,124
看看它在日语版的
Swift Playground中是什么

290
00:18:44,258 --> 00:18:47,528
我们需要在叙述中提到这个函数

291
00:18:47,628 --> 00:18:49,796
比如解释它的概念

292
00:18:50,063 --> 00:18:53,901
日语是一种很有意思的语言 因为它

293
00:18:53,967 --> 00:18:56,670
对所引入的英文词的容忍率很低

294
00:18:57,171 --> 00:19:03,577
那么我们给出这个函数的简单解释
就很重要了

295
00:19:03,644 --> 00:19:07,214
moveForward
或日语susumo或移动

296
00:19:07,281 --> 00:19:10,884
在括号中注明函数名的发生

297
00:19:10,951 --> 00:19:13,954
这对于学习者很有帮助 帮助他们比较

298
00:19:14,021 --> 00:19:16,523
英语和日语术语

299
00:19:16,623 --> 00:19:19,493
那么他们可以 比如说内在化它的含义

300
00:19:20,194 --> 00:19:22,396
关于日语还有一点很有意思

301
00:19:22,496 --> 00:19:27,668
因为熟悉或不熟悉英语

302
00:19:27,734 --> 00:19:34,241
我们在括号中注明
函数名和其它变量的解释

303
00:19:34,875 --> 00:19:40,180
在整个叙述中都会这样做
而不是在介绍那个术语时才提到

304
00:19:40,247 --> 00:19:41,748
并作出解释

305
00:19:42,115 --> 00:19:44,751
这个策略根据不同的语言也会不一样

306
00:19:44,818 --> 00:19:48,622
因为不同的语言
对英语的熟悉度也不一样

307
00:19:49,323 --> 00:19:51,358
这是需要考虑的一个重点

308
00:19:53,360 --> 00:19:55,729
翻译人员有很高的编辑自由度

309
00:19:55,796 --> 00:19:57,764
当翻译Swift Playground时

310
00:19:57,931 --> 00:20:04,304
那么在这里
我们正在介绍和学习编码象限的概念

311
00:20:04,404 --> 00:20:07,508
学习者可以在这个空间中

312
00:20:07,574 --> 00:20:09,776
不同的坐标处放置不同的对象

313
00:20:10,277 --> 00:20:13,213
为此 我们需要谈谈术语象限

314
00:20:14,047 --> 00:20:18,485
那么在英语里 我们介绍术语象限
通过把它与四分之一联系起来

315
00:20:18,652 --> 00:20:20,654
这里有一个漂亮的押韵

316
00:20:20,754 --> 00:20:25,559
可以使得术语的介绍变得稍微简单点

317
00:20:26,059 --> 00:20:31,398
然而在日语中我们并不能利用这种押韵

318
00:20:31,498 --> 00:20:34,468
那么翻译人员在这里
采用了一种不同的策略

319
00:20:35,002 --> 00:20:39,873
使用了区域这个词在括号外

320
00:20:40,174 --> 00:20:45,979
在括号内使用了技术性的复杂术语
来表达象限

321
00:20:46,713 --> 00:20:50,918
也有英文翻译供你参考 在下边

322
00:20:51,552 --> 00:20:53,854
那么这里需要注意的一个重要的事就是

323
00:20:53,921 --> 00:20:57,691
翻译人员不逐字翻译英语

324
00:20:57,858 --> 00:21:01,128
但如果你不给他们说明的话
他们很可能会逐字翻译

325
00:21:01,195 --> 00:21:04,431
他们可能会尝试非常贴近英文文本

326
00:21:04,898 --> 00:21:08,235
让他们了解他们可以自由选择
他们语言中最适当、

327
00:21:08,302 --> 00:21:12,673
最合适的说法非常重要

328
00:21:13,740 --> 00:21:19,112
此外 因为Swift Playground的叙述
是Markdown的一种变体

329
00:21:19,213 --> 00:21:24,184
他们实际上可以自由添加
额外的格式 粗体或斜体

330
00:21:24,251 --> 00:21:27,721
或甚至是与他们的语言
相连接的额外术语

331
00:21:27,788 --> 00:21:30,023
如果他们认为合适的话

332
00:21:32,893 --> 00:21:34,394
关于技术性术语

333
00:21:34,461 --> 00:21:38,465
请一定记住不熟悉的术语会有迷惑性

334
00:21:38,565 --> 00:21:41,768
当你使用它们时一定要注意

335
00:21:42,703 --> 00:21:45,806
不同的语言对英文的舒适度不一样

336
00:21:45,873 --> 00:21:49,576
那么对一种语言起作用的方法
可能对另一种语言不起作用

337
00:21:50,644 --> 00:21:53,780
最后 一致性是非常非常重要的

338
00:21:54,047 --> 00:21:57,351
因为我们要处理来自其它语种的术语

339
00:21:57,417 --> 00:21:59,119
或者说是高度技术性的术语

340
00:21:59,186 --> 00:22:03,957
在整个叙述中
保持这些术语使用的一致性非常重要

341
00:22:04,024 --> 00:22:06,527
以便人们可以更熟悉这些术语

342
00:22:09,329 --> 00:22:15,469
那么我们看了许多
不同的本地化策略的例子

343
00:22:15,536 --> 00:22:17,838
本地化误区以及Swift Playground

344
00:22:17,905 --> 00:22:20,440
有一些我希望你能采用的东西

345
00:22:21,575 --> 00:22:24,111
首先你的内容目标和受众

346
00:22:24,178 --> 00:22:26,580
会影响你的本地化

347
00:22:26,647 --> 00:22:30,350
也许甚至比标准的iOS应用影响更大

348
00:22:30,417 --> 00:22:34,988
所以提前在脑子中
规划本地化非常重要

349
00:22:36,356 --> 00:22:38,959
不同的语言有不同的特色

350
00:22:39,026 --> 00:22:42,896
你的翻译人员要有自由度

351
00:22:42,963 --> 00:22:46,967
可以采用对于他们语言来说
最适当的说法

352
00:22:48,769 --> 00:22:53,173
提供风格指南或某种说明文档
在翻译过程中

353
00:22:53,240 --> 00:22:55,409
会对你非常有帮助

354
00:22:55,676 --> 00:23:02,282
这两个东西 你知道的 会向翻译人员
解释你的内容目标是什么、

355
00:23:02,349 --> 00:23:05,185
所提供翻译的风格和感觉、

356
00:23:05,252 --> 00:23:07,955
他们可能遇到的语言问题

357
00:23:08,021 --> 00:23:10,290
以及他们可能采取的策略

358
00:23:10,657 --> 00:23:14,061
以保持整个翻译的一致性

359
00:23:15,996 --> 00:23:18,765
用户测试真的很有帮助

360
00:23:19,099 --> 00:23:22,035
它是加强型资源 很难找到

361
00:23:22,102 --> 00:23:23,737
Playground的受众

362
00:23:23,804 --> 00:23:26,406
但你付出真的一定就会有回报

363
00:23:26,507 --> 00:23:29,576
因为你所针对的用户是受众

364
00:23:29,643 --> 00:23:31,612
他们可以告诉你

365
00:23:31,678 --> 00:23:35,782
你的Playground在教他们
这些概念方面是如何有效

366
00:23:37,751 --> 00:23:44,057
那么最后
我想把你们带回本地化的这个图这里

367
00:23:44,157 --> 00:23:46,026
这里所表达的整个概念就是

368
00:23:46,093 --> 00:23:49,897
你的原始目标和本地化内容

369
00:23:49,963 --> 00:23:53,300
并不是独立实体 而是相互反馈

370
00:23:53,367 --> 00:23:55,869
对相互的开发影响很大

371
00:23:56,270 --> 00:24:01,408
当你把Playground从英语
或从原始语种翻译为其它语种时

372
00:24:01,475 --> 00:24:08,015
一定要记住这一点 这很重要

373
00:24:08,215 --> 00:24:11,084
因为本地化经常会被忽视

374
00:24:11,285 --> 00:24:13,020
但它是软件开发的一部分

375
00:24:13,887 --> 00:24:16,924
你不知道用户会多么感激

376
00:24:16,990 --> 00:24:19,893
一个很好地本地化
和经过了深思熟虑的产品

377
00:24:20,060 --> 00:24:23,130
我相信如果你们按照这些指南

378
00:24:23,197 --> 00:24:25,132
并坚持执行我们刚才所谈到的策略

379
00:24:25,365 --> 00:24:29,102
你一定会给用户提供一个很棒的体验
以他们的本地语言

380
00:24:29,469 --> 00:24:32,306
那么我要把舞台交还给艾利克斯

381
00:24:32,773 --> 00:24:37,477
他会跟大家一起看看
本地化Playground书的具体过程

382
00:24:37,578 --> 00:24:38,412
谢谢

383
00:24:44,918 --> 00:24:45,752
谢谢埃尔顿

384
00:24:46,353 --> 00:24:50,457
现在我们要深入技术细节
让你的书可本地化

385
00:24:50,791 --> 00:24:53,861
随着本场演讲 还有一些示例代码

386
00:24:53,927 --> 00:24:57,431
你可以在示例代码中探索
我们今天所讲的内容

387
00:24:58,932 --> 00:25:03,337
现在这是“Learn to Code”中的一页
我们对它进行了扩展用于展示

388
00:25:03,403 --> 00:25:05,739
当你本土化时你所担心的问题

389
00:25:06,440 --> 00:25:10,844
右边是实时视图
但你可以给用户展示字符串

390
00:25:10,911 --> 00:25:12,946
在本例中是音频控件

391
00:25:14,548 --> 00:25:17,117
还有叙述 提供了教育性文本

392
00:25:19,786 --> 00:25:22,022
可编辑的代码区是文本

393
00:25:22,089 --> 00:25:26,360
在用户开始写代码之前向用户显示
提供的是一个提示

394
00:25:27,828 --> 00:25:29,229
每页都可以有一个标题

395
00:25:30,764 --> 00:25:33,534
然后不同的术语表还有定义

396
00:25:33,634 --> 00:25:36,270
以便用户学习 如果他们忘记的话

397
00:25:37,871 --> 00:25:41,675
一个页面可以有一个或多个暗示
如果你希望帮助用户的话

398
00:25:42,042 --> 00:25:44,111
当他们学习概念时

399
00:25:46,847 --> 00:25:49,483
这些是我们将要谈到的不同的部分

400
00:25:49,550 --> 00:25:52,719
显示如何自定义以及需要如何处理

401
00:25:53,153 --> 00:25:57,224
并且这些还伴随着Playground的几种
不同的文件类型

402
00:25:57,291 --> 00:26:01,295
你可能会在stringsdict文件中
以及xml plist文件中使用字符串

403
00:26:01,862 --> 00:26:04,898
而过场动画是用HTML写的

404
00:26:05,232 --> 00:26:07,434
你可能还有本地化资产

405
00:26:07,534 --> 00:26:10,904
比如修改图片以适应每种语言

406
00:26:12,739 --> 00:26:15,409
现在当我们开始深入细节之前
还有另一个细节

407
00:26:15,475 --> 00:26:19,112
就是理解Playground书的整体结构

408
00:26:19,379 --> 00:26:22,549
那么作为一个基础 你有一个源目录

409
00:26:22,616 --> 00:26:24,518
和一个私有资源目录

410
00:26:24,852 --> 00:26:28,121
需要注意的是在私有资源目录中

411
00:26:28,188 --> 00:26:31,091
你所支持的每种语言
都有一个lproj

412
00:26:31,225 --> 00:26:36,129
在这里我们有英语和西班牙语
西班牙语为我们的开发语言

413
00:26:37,164 --> 00:26:41,368
然后每本书有一章或多章

414
00:26:42,736 --> 00:26:44,805
每章有一页或多页

415
00:26:44,872 --> 00:26:47,975
这是书中其中一页 我们用作例子

416
00:26:48,108 --> 00:26:49,776
这里需要注意的是

417
00:26:49,843 --> 00:26:53,247
那些针对你所支持的每种语言

418
00:26:53,313 --> 00:26:54,948
拥有同样Iproj的私有资产目录

419
00:26:55,649 --> 00:26:58,252
对于每种语言看起来是怎么样呢？

420
00:26:58,318 --> 00:27:01,255
实时视图中的字符串

421
00:27:01,421 --> 00:27:06,460
任何时候你使用
要展示给用户的字符串时

422
00:27:06,527 --> 00:27:08,295
都应该在本地化字符串中使用

423
00:27:08,729 --> 00:27:13,934
这里要注意的一点是并不只是
指出现在实时视图中的东西

424
00:27:14,001 --> 00:27:16,370
对于易用性也很重要

425
00:27:16,503 --> 00:27:19,873
你的全部易用性标签
都应该使用NSLocalizedString

426
00:27:20,207 --> 00:27:24,211
因此当某人以另一种语言
使用易用性功能时

427
00:27:24,278 --> 00:27:26,880
他们会获得用他们的语言
所做的适当解说

428
00:27:26,947 --> 00:27:28,949
并享受一种出色的体验

429
00:27:31,318 --> 00:27:33,587
一旦你使用NSLocalizedString

430
00:27:33,654 --> 00:27:37,925
你会把它提取到字符串文件
通过我们的一个叫作genstrings的工具

431
00:27:38,625 --> 00:27:42,596
在开发者网站上有相关信息
关于如何使用和提取这个工具

432
00:27:44,965 --> 00:27:49,203
本周早些时候还有一场演讲
讲的是用Xcode 9进行本地化

433
00:27:49,303 --> 00:27:53,006
讲了在Xcode中进行
本地化的一般性最佳实践

434
00:27:54,708 --> 00:27:58,011
其中有一点很重要 也是你可能
会在Playground中采用的

435
00:27:58,078 --> 00:28:00,514
即使用带有文本的图片

436
00:28:00,747 --> 00:28:05,018
不要把文本硬编码到图片中
这一点非常关键

437
00:28:05,118 --> 00:28:07,287
因为那样对于本地化来说非常困难

438
00:28:07,354 --> 00:28:10,457
你必须给每种语言重新制作图片

439
00:28:10,757 --> 00:28:13,393
相反 你可以在图片上层放文本

440
00:28:13,694 --> 00:28:17,030
使翻译人员翻译字符串即可

441
00:28:17,164 --> 00:28:19,700
并可以利用iOS的布局功能

442
00:28:19,766 --> 00:28:22,069
为用户打造一种出色的体验

443
00:28:24,271 --> 00:28:27,975
现在一旦你有这些字符串
字符串文件将会被提取

444
00:28:28,075 --> 00:28:31,812
到项目中最基础的私有资源中

445
00:28:32,446 --> 00:28:36,750
根据情况 如果使用stringsdict文件
来动态地引用一个数字

446
00:28:36,850 --> 00:28:39,119
比如学习者写了多少行代码

447
00:28:39,186 --> 00:28:42,589
你可以为那个stringsdict
在同一个目录中也创建一个文件

448
00:28:43,457 --> 00:28:47,394
那么接下来讲叙述

449
00:28:48,061 --> 00:28:51,865
这是在Markup中
渲染为Markdown的格式

450
00:28:52,533 --> 00:28:54,501
这会启用页面层级的格式化

451
00:28:54,568 --> 00:28:58,605
你可以加粗体、斜体
可以创建术语

452
00:28:58,939 --> 00:29:00,407
或链接到书中的另外一页

453
00:29:01,074 --> 00:29:04,378
为此 你需要这种不同的Markup格式

454
00:29:04,478 --> 00:29:07,581
翻译人员需要注意并利用这一点

455
00:29:07,781 --> 00:29:12,853
那么正如埃尔顿所说 你要告诉
所有翻译人员 他们有一定的编辑自由

456
00:29:13,020 --> 00:29:16,623
来根据语言进行调整 比如粗体或风格

457
00:29:16,757 --> 00:29:20,561
那么他们需要了解格式以便更好地发挥

458
00:29:21,195 --> 00:29:25,899
还有一点很重要
就是他们应该注意哪些术语不能翻译

459
00:29:25,966 --> 00:29:30,704
因为那些是格式的一部分
从而不会导致代码出错

460
00:29:30,771 --> 00:29:32,272
当本地化时

461
00:29:33,173 --> 00:29:36,476
现在如何对叙述进行本地化？

462
00:29:36,877 --> 00:29:41,014
嗯 你可以从这个小的公开评论
开启叙述部分

463
00:29:41,915 --> 00:29:43,584
并添加本地化键

464
00:29:43,650 --> 00:29:46,854
我们把它叫作firstproseblock
作为这个键的一个名称

465
00:29:46,920 --> 00:29:48,956
这将使它变得可本地化

466
00:29:50,057 --> 00:29:53,760
然后在你的Iproj中
你要创建一个prose.strings文件

467
00:29:53,861 --> 00:29:58,365
并在那里放一个同样的键
然后设一个值 表明无论什么Markup

468
00:29:58,465 --> 00:30:00,934
都应该在那种语言中进行替换

469
00:30:03,770 --> 00:30:07,541
而contents.swift位于
每页的基础目录下

470
00:30:08,041 --> 00:30:11,845
但prose.strings文件将位于

471
00:30:11,945 --> 00:30:13,814
你所支持的每种语言的私有资源中

472
00:30:18,852 --> 00:30:21,655
接下来是可编辑的文本字段占位符

473
00:30:21,955 --> 00:30:24,758
那么这些是另一种字符串文件

474
00:30:24,825 --> 00:30:26,894
那么你可以看到“轻触输入代码”

475
00:30:27,461 --> 00:30:31,565
那么它在初始语言中的定义方式
是在代码评论中

476
00:30:31,665 --> 00:30:34,835
你可以看到contents.swift
轻触输入代码

477
00:30:36,537 --> 00:30:40,874
要对这个进行本地化 你要创建
一个可编辑的field.strings文件

478
00:30:40,941 --> 00:30:45,913
使用键作为你在文件中所创建的初相

479
00:30:46,013 --> 00:30:50,117
轻触输入代码
但你要放入适当的翻译

480
00:30:50,184 --> 00:30:52,052
为你所支持的每种语言

481
00:30:54,154 --> 00:30:57,691
这是通过Playground书的
基础目录实现的

482
00:30:57,758 --> 00:31:00,827
在相关联语言的私有资源中

483
00:31:03,363 --> 00:31:06,066
接下来是页面和章节标题

484
00:31:06,800 --> 00:31:10,237
那么在这里有一个明显的
plist.strings文件

485
00:31:10,304 --> 00:31:13,040
你需要为每个页面或章节
创建plist.strings文件

486
00:31:13,240 --> 00:31:16,677
在plist.strings文件中
应用会查找键名称

487
00:31:16,777 --> 00:31:21,148
以替换本地化后的新标题名称

488
00:31:24,117 --> 00:31:29,423
这将会放入
那个页面的私有资源中

489
00:31:29,489 --> 00:31:31,124
针对每一个语言项目

490
00:31:33,460 --> 00:31:35,229
那么接下来是术语表

491
00:31:35,529 --> 00:31:38,265
这会改变格式 因为它用的是XML

492
00:31:38,398 --> 00:31:41,702
你需要针对你所支持的每种语言
单独制作术语表

493
00:31:41,902 --> 00:31:44,905
但这是英文术语表的一个示例

494
00:31:45,506 --> 00:31:49,443
我们可以看到英文的命令定义

495
00:31:50,010 --> 00:31:51,979
那么这里需要注意一点

496
00:31:52,079 --> 00:31:57,117
就是最高级的键命令
在每种语言中必须相同

497
00:31:57,651 --> 00:32:01,955
这是应用如何查询术语表
定义的方式 无法改变

498
00:32:02,756 --> 00:32:07,895
类似地 页面引用应该是通过文件引用

499
00:32:08,061 --> 00:32:12,266
而不是页面引用标题
这将会在本地化中被打断

500
00:32:12,366 --> 00:32:13,867
如果你修改标题的话

501
00:32:16,170 --> 00:32:18,071
有不同的字符串

502
00:32:18,138 --> 00:32:21,708
你需要发给翻译人员进行本地化
你可以在这里看到

503
00:32:22,576 --> 00:32:24,545
那么如果被翻译成西班牙语

504
00:32:25,112 --> 00:32:27,614
你可以看到整体上来说都是一样的

505
00:32:27,681 --> 00:32:30,484
除了这三个字符串被本地化了

506
00:32:30,784 --> 00:32:35,522
它们将以合适的方式显示
当用户以西班牙语运行应用时

507
00:32:37,291 --> 00:32:42,095
这个术语表存储在
项目中私有资源的底层

508
00:32:42,329 --> 00:32:44,865
所以你的英文Iproj中应该有一个

509
00:32:45,265 --> 00:32:49,236
然后还要翻译一个副本
用于西班牙项目

510
00:32:51,605 --> 00:32:54,942
暗示与术语表的格式类似

511
00:32:55,209 --> 00:32:57,244
它们也使用XML

512
00:32:57,311 --> 00:32:59,246
但它们是以页面为单位的

513
00:33:01,048 --> 00:33:03,984
每页可以有一个或多个暗示
如果需要的话

514
00:33:04,384 --> 00:33:07,321
这是一个暗示文件的例子

515
00:33:07,721 --> 00:33:11,859
在暗示文件中有许多不同的字符串
需要你的翻译人员进行翻译

516
00:33:12,559 --> 00:33:15,162
那么你需要复制这个文件

517
00:33:15,596 --> 00:33:19,499
让翻译人员对这些字符串进行本地化
然后你再输出它

518
00:33:20,567 --> 00:33:22,436
那么这个新的hintplist

519
00:33:22,536 --> 00:33:25,539
将会出现在该页面的私有资源目录中

520
00:33:25,639 --> 00:33:27,774
因为它们只应用于那个页面

521
00:33:27,941 --> 00:33:31,712
那样你就拥有了英文版和西班牙语版

522
00:33:34,281 --> 00:33:38,919
那么最后一个是过场动画
它们是HTML文件

523
00:33:39,286 --> 00:33:43,023
这些 你的翻译人员需要给每种语言
都制作一个副本

524
00:33:43,090 --> 00:33:45,259
并适当地本地化字符串

525
00:33:45,325 --> 00:33:48,795
以及修改任意概念或图片

526
00:33:48,862 --> 00:33:51,198
根据语言需要

527
00:33:53,100 --> 00:33:55,302
当他们这样做时 你需要把它

528
00:33:55,369 --> 00:33:58,505
放在过场动画页面私有资源目录中

529
00:33:58,839 --> 00:34:03,177
那么在这里我们看到英文版的
叫作conditionalCode.html

530
00:34:03,377 --> 00:34:06,647
其它语种的初始HTML文件

531
00:34:06,914 --> 00:34:09,116
需要遵循完全相同的名称

532
00:34:09,283 --> 00:34:12,518
对于西班牙语
即便它会有全部本地化的术语

533
00:34:12,585 --> 00:34:15,355
文件名称也应该
叫作conditionalCode.html

534
00:34:18,125 --> 00:34:21,795
那么总结一下 我们今天讲了
很多与本地化有关的内容

535
00:34:21,862 --> 00:34:26,132
其中有一点很关键 就是定义你的受众

536
00:34:26,466 --> 00:34:30,103
并理解他们
当你针对每种语言进行本地化

537
00:34:30,170 --> 00:34:32,039
并尝试适应内容时

538
00:34:33,005 --> 00:34:35,576
本地化非常细致入微和复杂

539
00:34:35,943 --> 00:34:39,478
它需要让实际用户进行许多调研和测试

540
00:34:39,612 --> 00:34:43,617
并理解你想要融入的每个国家

541
00:34:43,684 --> 00:34:44,985
或语言或种族的标准

542
00:34:46,553 --> 00:34:48,989
除了这些意外还有一点要记住

543
00:34:49,188 --> 00:34:52,793
就是本地化其实是设计过程的一部分

544
00:34:53,226 --> 00:34:56,129
那么你应该提前考虑到本地化

545
00:34:56,330 --> 00:34:59,066
从而为用户打造出色的体验

546
00:34:59,166 --> 00:35:02,669
并且我鼓励你们都要这么做
创建令人惊艳的内容

547
00:35:02,870 --> 00:35:05,005
让全世界的每一个人都能体验到

548
00:35:06,974 --> 00:35:08,909
你可以在开发者网站上查看更多信息

549
00:35:08,976 --> 00:35:11,345
还有与之相随的示例代码

550
00:35:12,746 --> 00:35:14,882
还有一些了不起的相关演讲

551
00:35:14,948 --> 00:35:19,086
是与本地化以及Swift Playground
的使用和教学有关的

552
00:35:20,187 --> 00:35:21,088
谢谢大家

