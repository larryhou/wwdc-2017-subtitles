1
00:00:25,292 --> 00:00:26,159
大家好

2
00:00:29,096 --> 00:00:33,267
大家好 感谢参加今晚的最后一场演讲

3
00:00:34,168 --> 00:00:38,205
我们会介绍
Wallet和Apple Pay的新特性

4
00:00:38,805 --> 00:00:41,175
我们会谈及三方面内容

5
00:00:41,241 --> 00:00:43,744
今天的演讲会分为三部分

6
00:00:44,711 --> 00:00:48,048
首先是关于Apple Pay
体验的部分内容

7
00:00:48,348 --> 00:00:50,384
在座有些可能了解Apple Pay

8
00:00:50,450 --> 00:00:52,753
不过今年我们也非常忙碌

9
00:00:52,986 --> 00:00:55,556
所以也会介绍我们的部分新成果

10
00:00:56,223 --> 00:00:59,726
接下来是iOS 11和
macOS High Sierra的相关内容

11
00:00:59,793 --> 00:01:01,929
还会涉及Apple Pay中的新特性

12
00:01:03,263 --> 00:01:07,835
最后是Wallet中的部分新API

13
00:01:09,336 --> 00:01:12,472
还有些内容在本次演讲中不会涉及

14
00:01:13,707 --> 00:01:17,344
我们不会介绍
Apple Pay API的起步内容

15
00:01:17,411 --> 00:01:20,547
以及如何将Apple Pay
与付款处理器相整合

16
00:01:20,781 --> 00:01:24,418
相关内容有很好的资源
大家可以看看去年的

17
00:01:24,618 --> 00:01:27,554
WWDC演讲“网页中的Apple Pay”

18
00:01:27,821 --> 00:01:31,625
和2016年的“Wallet和
Apple Pay中的新特性”了解更多详情

19
00:01:33,093 --> 00:01:37,297
现在直入正题
来介绍Apple Pay的体验

20
00:01:38,532 --> 00:01:42,703
希望在座的有许多都用过
Apple Pay或是在商店

21
00:01:42,769 --> 00:01:46,139
或是在应用中或是在网上

22
00:01:46,206 --> 00:01:51,578
这样就会了解到Apple Pay
非常方便安全 是私密的付款方式

23
00:01:53,947 --> 00:01:56,817
当我们在iOS 8中
首次启用Apple Pay

24
00:01:56,884 --> 00:01:59,920
我们支持在应用内付款

25
00:02:02,489 --> 00:02:03,724
这里有个很好的实例

26
00:02:03,957 --> 00:02:08,461
但随后 我们将Apple Pay
扩展到更多地方

27
00:02:09,363 --> 00:02:11,632
我们将之扩展到Safari

28
00:02:12,799 --> 00:02:16,570
现在大家可以
在mac和iOS的Safari中付款

29
00:02:17,070 --> 00:02:19,173
我们还扩展到了Siri

30
00:02:19,873 --> 00:02:22,943
大家可以在SiriKit中付款

31
00:02:24,111 --> 00:02:27,814
更有甚者 我们为Apple Pay
增加了Messages功能

32
00:02:27,881 --> 00:02:30,851
大家可以利用Apple Pay
编写信息应用

33
00:02:30,918 --> 00:02:32,886
直接在信息应用中即可实现

34
00:02:32,953 --> 00:02:34,655
大家还可以购买电影票

35
00:02:34,922 --> 00:02:38,058
再发送给朋友
这些无需离开信息应用就能实现

36
00:02:39,426 --> 00:02:42,029
最后 我们增加了
对watchOS的支持

37
00:02:43,931 --> 00:02:47,000
可以在WatchKit的
watchOS中支付

38
00:02:48,769 --> 00:02:53,473
去年我们在最新Mac Book Pro
的触控条中增添了支持

39
00:02:53,841 --> 00:02:55,876
现在可以在Mac中直接付款

40
00:02:55,943 --> 00:02:58,212
而无需转到iOS设备上进行

41
00:03:00,013 --> 00:03:02,382
希望大家也能有机会看到

42
00:03:02,449 --> 00:03:04,218
在WatchKit上搭建的部分应用

43
00:03:04,484 --> 00:03:06,153
Apple Store就是极好的实例

44
00:03:06,386 --> 00:03:09,623
可以直接在手腕上购买配件

45
00:03:10,557 --> 00:03:13,694
只需选择配件 选定卡片 即可搞定

46
00:03:15,295 --> 00:03:18,365
我们最初启用Apple Pay时
它只能在美国使用

47
00:03:18,432 --> 00:03:20,300
不过随后 我们就忙得不可开交

48
00:03:20,601 --> 00:03:24,571
仅在去年 我们在十几个国家中
推出这一功能

49
00:03:24,738 --> 00:03:27,841
这里是我们目前提供支持的所有国家

50
00:03:28,742 --> 00:03:32,513
有个国家的情况特别令我激动
这就是日本

51
00:03:32,679 --> 00:03:34,848
在日本
大家可以使用Apple Pay

52
00:03:34,915 --> 00:03:38,018
通过企鹅卡 直接乘坐东京捷运系统

53
00:03:38,085 --> 00:03:39,586
效果非常好

54
00:03:41,154 --> 00:03:46,426
去年的WWDC大会之后 我们还
推出了针对非盈利机构的Apple Pay

55
00:03:46,960 --> 00:03:50,764
如果你在非盈利机构并想使用
Apple Pay 会非常有趣

56
00:03:50,931 --> 00:03:54,601
可以是在你的应用中
或是在你的网站中使用

57
00:03:54,868 --> 00:03:57,638
这是来自英国OXFAM的实例

58
00:03:57,704 --> 00:04:00,841
他们属于英国最大的非盈利机构

59
00:04:01,909 --> 00:04:04,144
使用Apple Pay后

60
00:04:04,211 --> 00:04:09,783
捐赠时间从2分钟降至10秒钟

61
00:04:09,850 --> 00:04:11,451
这一降幅相当可观

62
00:04:11,785 --> 00:04:15,622
因此 他们实现了更好的
用户体验和性能表现

63
00:04:17,089 --> 00:04:20,928
如果作为非营利机构
现在有兴趣使用Apple Pay

64
00:04:21,161 --> 00:04:22,362
可以很轻松地实现

65
00:04:22,963 --> 00:04:25,666
可以在你们的应用和网站上使用

66
00:04:26,099 --> 00:04:30,671
为方便对此的支持 我们在Apple Pay
的按键设计方面 新增了捐赠功能

67
00:04:31,305 --> 00:04:33,373
有着非常简便的注册步骤

68
00:04:33,674 --> 00:04:35,809
大家可以在开发者网站上

69
00:04:35,876 --> 00:04:38,445
了解相关支持和如何开始等详细内容

70
00:04:40,914 --> 00:04:42,516
若你还未使用Apple Pay

71
00:04:42,683 --> 00:04:46,753
可能会觉得为什么要
在应用或网站上使用这一功能

72
00:04:48,755 --> 00:04:51,992
Apple Pay是最佳的
用户支付途径之一

73
00:04:52,159 --> 00:04:56,630
在所有钱包中 它获得
最高的客户满意度评分

74
00:04:56,930 --> 00:04:59,800
但它也是商家收款的最佳途径

75
00:05:00,334 --> 00:05:04,838
根据典型的产品流程
来为大家做出形象的说明

76
00:05:06,173 --> 00:05:09,776
通常在结账环节 我们购买产品

77
00:05:09,843 --> 00:05:11,578
我们前往网站 获取应用

78
00:05:11,745 --> 00:05:14,882
看到相关产品 加入购物车

79
00:05:15,282 --> 00:05:16,517
然后去结账

80
00:05:17,084 --> 00:05:18,952
通常首先需要

81
00:05:19,319 --> 00:05:21,722
创建账户或是登录

82
00:05:22,422 --> 00:05:25,926
如果没有账户 也许我就得新建一个

83
00:05:26,260 --> 00:05:28,495
然后前往邮箱去验证

84
00:05:28,862 --> 00:05:30,364
所以 我需要离开网站

85
00:05:30,597 --> 00:05:33,534
然后再返回 还要填写发货地址

86
00:05:34,368 --> 00:05:36,203
填好发货地址后

87
00:05:36,537 --> 00:05:39,339
就要安排发货

88
00:05:39,406 --> 00:05:43,076
信用卡会用我的家庭住址作为账单地址
那么还要添加账单地址

89
00:05:43,710 --> 00:05:46,013
还要输入信用卡的信息

90
00:05:46,513 --> 00:05:49,149
我还得把信用卡拿过来

91
00:05:49,216 --> 00:05:52,886
把卡片背面的CVV号码输入

92
00:05:53,554 --> 00:05:55,989
接着要检查整个交易过程

93
00:05:56,757 --> 00:05:59,059
最后才能确认付款

94
00:05:59,826 --> 00:06:03,363
如果你做过任何电子商务工作
不足为奇

95
00:06:03,597 --> 00:06:06,767
转化率是要面对的一大问题

96
00:06:07,000 --> 00:06:09,803
用户在购买期间会不断流失

97
00:06:10,571 --> 00:06:13,307
可是使用Apple Pay
则会简单许多

98
00:06:13,907 --> 00:06:18,178
只需点击Apple Pay的购买键
即可搞定

99
00:06:18,245 --> 00:06:22,616
所有这些步骤都合并为单一用户体验

100
00:06:23,016 --> 00:06:27,654
这可以大幅提高性能表现

101
00:06:28,989 --> 00:06:31,758
在过去三年间 我们一直在问商家

102
00:06:31,925 --> 00:06:33,560
对Apple Pay的意见如何

103
00:06:33,927 --> 00:06:35,696
据他们讲 使用Apple Pay

104
00:06:35,762 --> 00:06:39,166
可将转换率提升2至5倍

105
00:06:39,766 --> 00:06:42,002
购买频率则出现上升

106
00:06:42,469 --> 00:06:45,339
结账速度大幅提高

107
00:06:45,806 --> 00:06:47,407
上述三方面因素使得

108
00:06:48,008 --> 00:06:51,411
客户获取和满意度均得以提升

109
00:06:52,045 --> 00:06:54,147
用户更容易成为客户

110
00:06:54,248 --> 00:06:56,116
也更容易获得满足

111
00:06:57,251 --> 00:06:59,253
我来举几个例子

112
00:06:59,753 --> 00:07:02,923
如果是自由职业者或承包商
可能会知道Intuit

113
00:07:02,990 --> 00:07:06,193
他们有一款应用和服务
可帮助生成发票

114
00:07:06,360 --> 00:07:10,097
他们就使用了Apple Pay
可以直接为发票付款

115
00:07:10,264 --> 00:07:13,834
结果使用Apple Pay
发票的支付速度提高了30%

116
00:07:14,134 --> 00:07:16,336
其中半数在收到发票当天

117
00:07:16,403 --> 00:07:17,838
即刻完成付款

118
00:07:18,138 --> 00:07:21,508
我以前做过自由职业 这种事情
在我做自由职业时 完全没听说过

119
00:07:23,210 --> 00:07:26,513
还有一款应用也大获成功
就是Indiegogo

120
00:07:27,114 --> 00:07:31,585
他们使用了Apple Pay
可以通过它在其中申请项目

121
00:07:31,652 --> 00:07:35,322
结果转换率提升了250%

122
00:07:36,456 --> 00:07:40,127
除了转化率之外 还有其他的优势

123
00:07:41,028 --> 00:07:44,998
许多商家发现退款的情况减少了

124
00:07:45,632 --> 00:07:48,468
这很重要 如果大家接触过
这个问题 就知道这可能会造价不菲

125
00:07:48,535 --> 00:07:50,003
还耗时耗力

126
00:07:50,838 --> 00:07:52,873
也许 使用Apple Pay

127
00:07:53,207 --> 00:07:56,977
最重要的是不必再去处理
或保存信用卡号码

128
00:07:58,245 --> 00:08:01,682
这很了不起啊 你不必再去处理
常规的信用卡号码

129
00:08:01,748 --> 00:08:04,585
只需处理具体设备的代码即可

130
00:08:05,552 --> 00:08:07,721
还可获得可靠的用户体验

131
00:08:07,988 --> 00:08:09,923
不必前往五个不同站点

132
00:08:09,990 --> 00:08:12,259
完成五种截然不同的结账方式

133
00:08:12,459 --> 00:08:17,197
你有着可信赖使用的单独UI
不过是直接构建在Safari或iOS中

134
00:08:20,033 --> 00:08:23,871
那么希望诸位
若尚未使用Apple Pay

135
00:08:24,171 --> 00:08:27,541
那么在演讲后可以立即
将它放在自己的网站上

136
00:08:28,075 --> 00:08:30,177
我为大家提些建议

137
00:08:30,410 --> 00:08:33,113
关于如何完善Apple Pay体验

138
00:08:33,847 --> 00:08:36,015
当考虑Apple Pay的设计时

139
00:08:36,082 --> 00:08:39,253
主要要看三个基本原则

140
00:08:39,820 --> 00:08:42,089
怎样使得购买更便捷？

141
00:08:42,823 --> 00:08:45,459
怎样加快购买速度？

142
00:08:45,993 --> 00:08:48,629
怎样让购买过程更清晰？

143
00:08:49,496 --> 00:08:51,265
当结合所有这些因素后

144
00:08:51,498 --> 00:08:55,002
就会实现出色的设计和卓越的用户体验

145
00:08:55,169 --> 00:08:57,471
如果你来我们的网站 就会看到

146
00:08:57,638 --> 00:09:01,508
关于如何完善这些方面的三个术语

147
00:09:01,575 --> 00:09:03,644
其中包括我们称之为的溯及上游

148
00:09:04,378 --> 00:09:07,714
在界面指南的技术中 还包括默认

149
00:09:08,448 --> 00:09:12,052
我们的界面指南中
还有第三种技术即流线化

150
00:09:12,586 --> 00:09:16,757
我会依次介绍 希望对大家有所帮助

151
00:09:18,325 --> 00:09:21,261
溯及上游是关于加速

152
00:09:21,328 --> 00:09:25,098
单项产品购买的过程
直接在产品页面使用Apple Pay

153
00:09:25,599 --> 00:09:29,203
我们通过快速结账
加快多项产品的购买过程

154
00:09:29,736 --> 00:09:31,572
举个例子

155
00:09:32,172 --> 00:09:35,142
我住在旧金山 显然需要

156
00:09:35,209 --> 00:09:38,212
屯一些连帽衣来穿

157
00:09:38,879 --> 00:09:42,316
于是来到Lululemon的网站 购买连帽衣

158
00:09:42,516 --> 00:09:47,120
在产品页面上 直接有
Apple Pay按钮可以购买

159
00:09:47,988 --> 00:09:50,524
直接把Apple Pay按钮
放在你的产品页面上

160
00:09:50,591 --> 00:09:54,895
这样可以极大提高转化率 数量级很高

161
00:09:54,962 --> 00:09:58,031
这样便于立即购买

162
00:10:00,033 --> 00:10:04,505
同样 如果允许不创建账户
直接购买 就像这样

163
00:10:04,738 --> 00:10:06,573
那效果会更好

164
00:10:08,475 --> 00:10:13,447
有时 客户结账并不可行

165
00:10:14,848 --> 00:10:18,418
但是有些方法可以帮你缓解这种情况

166
00:10:18,986 --> 00:10:23,657
首先 可以将账户创建无缝写入
iOS和macOS中

167
00:10:24,091 --> 00:10:27,661
一种方法是通过共享网站证书

168
00:10:28,295 --> 00:10:30,564
这在几年前介绍过 在iOS 11中

169
00:10:30,631 --> 00:10:33,634
共享网站证书已有诸多不错的改进

170
00:10:33,867 --> 00:10:37,304
一定要看看Safari的演讲
了解更多详情

171
00:10:37,871 --> 00:10:43,377
还可以使用iOS 11中的新特性
原生应用自动填充功能

172
00:10:43,944 --> 00:10:48,048
iOS 11现在可以在应用内
自动填充密码

173
00:10:48,115 --> 00:10:52,586
充分利用这一点 只需要
示意UI文本域的位置即可

174
00:10:52,753 --> 00:10:57,624
提供正确的UI文本内容类型：
密码 电邮等等

175
00:10:59,092 --> 00:11:01,728
还可以在付款后 生成账户

176
00:11:01,795 --> 00:11:06,233
使用从Apple Pay
搜集到的数据即可 例如用户电邮

177
00:11:06,300 --> 00:11:09,536
可以在购买发生时 即刻创建账户

178
00:11:11,171 --> 00:11:14,441
我提到的第二种技术是默认功能

179
00:11:15,075 --> 00:11:19,179
如果可能 这是将Apple Pay
作为默认的付款选项

180
00:11:20,414 --> 00:11:22,816
大家还可以使用我们新增的特性

181
00:11:22,883 --> 00:11:25,752
我稍后会介绍 即内联设置

182
00:11:25,819 --> 00:11:28,388
这样就可以
即刻完成Apple Pay支付

183
00:11:28,589 --> 00:11:32,426
即便用户在iOS设备中无卡也无妨

184
00:11:35,329 --> 00:11:38,131
我刚提到的最后一种技术是流线化

185
00:11:38,966 --> 00:11:43,237
这可以实现快捷简便地
使用Apple Pay付款

186
00:11:44,304 --> 00:11:47,641
在结账前 就将必要信息搜集到位

187
00:11:47,708 --> 00:11:51,678
如果需要特定的尺寸和颜色
一定在结账前确认才好

188
00:11:52,112 --> 00:11:55,682
同样可以从Apple Pay
获取客户信息

189
00:11:55,949 --> 00:11:58,752
不必亲自向用户索取电邮地址

190
00:11:58,819 --> 00:12:01,755
在发货信息中

191
00:12:01,822 --> 00:12:05,492
账单信息等 就有相应内容
可直接从Apple Pay表单中找到

192
00:12:07,094 --> 00:12:10,931
说到Apple Pay表单
想必大家很熟悉

193
00:12:11,164 --> 00:12:13,166
在Apple Store中是这样的

194
00:12:13,467 --> 00:12:17,271
在大家考虑使用Apple Pay时
我有些一般性的建议

195
00:12:17,337 --> 00:12:19,640
以及充分利用这张详单的方法

196
00:12:20,974 --> 00:12:25,112
其一是只显示并要求关键信息

197
00:12:26,046 --> 00:12:28,348
不要索取你不会使用的信息

198
00:12:28,415 --> 00:12:31,752
如果你不需要用户的电话号码
就不要提出要求

199
00:12:32,886 --> 00:12:36,690
还要记住一点 屏幕空间相当有限

200
00:12:36,757 --> 00:12:37,925
并没有多大空间

201
00:12:37,991 --> 00:12:40,527
所以条目文字要简洁有效

202
00:12:41,195 --> 00:12:43,997
表单并非是要做成完整版的收据

203
00:12:44,164 --> 00:12:46,366
Apple Pay表单
只起到汇总的作用

204
00:12:46,700 --> 00:12:51,872
所以使用条目文字
来说明额外收费 折扣 税费等内容

205
00:12:52,139 --> 00:12:54,441
再回到Apple Store

206
00:12:54,508 --> 00:12:55,576
给大家展示我所讲的意思

207
00:12:56,076 --> 00:13:00,047
这里大家会看到我买了iPad
在详单的这个位置

208
00:13:00,113 --> 00:13:06,920
我看到小计 发货情况 税费 总计
都是最简要的内容

209
00:13:08,789 --> 00:13:12,826
有时 你不知道该收多少钱

210
00:13:14,461 --> 00:13:17,531
也许你是一家共享单车公司
只有在骑行结束后才会收费

211
00:13:17,598 --> 00:13:20,634
或者也许你希望添加

212
00:13:20,701 --> 00:13:24,972
可选的赠品项
在交易结束后 用户可以选取

213
00:13:25,839 --> 00:13:28,876
可以使用未确定项来实现这一目的

214
00:13:29,176 --> 00:13:33,747
很重要的一点是需要清楚告知
这些未确定项需要另行付费

215
00:13:34,715 --> 00:13:38,619
举个例子 我们把类型标为未处理

216
00:13:39,553 --> 00:13:42,723
这样会在Apple Pay
表单上不显示金额

217
00:13:44,491 --> 00:13:47,427
现在 总金额必须为非负值

218
00:13:47,594 --> 00:13:50,697
如果付款金额出现负值 着实是说不通

219
00:13:51,098 --> 00:13:52,466
但是可以是未确定的状态

220
00:13:53,066 --> 00:13:55,402
这样 总金额在交易发生时

221
00:13:55,636 --> 00:13:57,971
还尚不明确

222
00:13:59,239 --> 00:14:02,442
很重要的一点是
在总金额一栏要使用公司名称

223
00:14:02,509 --> 00:14:05,679
这在卡账中会有显示
这一点很重要有两方面原因

224
00:14:06,113 --> 00:14:09,283
首先 用户希望可以识别

225
00:14:09,349 --> 00:14:13,053
Wallet应用中和
自己银行对账单中的付款项目

226
00:14:13,554 --> 00:14:16,857
同样 我们也支持Mac Book Pro
的最新触控条功能

227
00:14:16,924 --> 00:14:20,494
我们实际上可以在触控条中
显示商家的名称

228
00:14:21,128 --> 00:14:24,565
同样 确保这要符合用户预期
这很重要

229
00:14:26,934 --> 00:14:29,503
使用Apple Pay订阅的情况

230
00:14:29,570 --> 00:14:34,007
自去年起就开始提升 举例来说

231
00:14:34,074 --> 00:14:38,011
新闻网站想用Apple Pay
完成订阅

232
00:14:38,579 --> 00:14:41,582
当然可以这样做 但是我有几个建议

233
00:14:42,115 --> 00:14:45,786
很重要的一点是
要在付款前明确订阅详情

234
00:14:46,420 --> 00:14:50,657
要在条目栏重申账单的频率
这也很重要

235
00:14:51,458 --> 00:14:54,962
对于可变的订阅内容
要使用未确定项

236
00:14:55,128 --> 00:14:58,599
再举个例子 我有份小兼职

237
00:14:58,765 --> 00:15:04,004
我在编写一个小应用
向天真的千禧一代销售牛油果吐司

238
00:15:05,005 --> 00:15:07,307
就是这个 当然是需要预订

239
00:15:07,374 --> 00:15:10,177
因为就是这样来解决
所有资金问题的 人家是这样告诉我的

240
00:15:10,544 --> 00:15:12,145
这是我的Apple Pay表单

241
00:15:12,779 --> 00:15:16,250
大家可以看到 这是每周的服务
这样在条目栏

242
00:15:16,316 --> 00:15:20,220
我明确说明预订的时长

243
00:15:20,687 --> 00:15:23,490
我还标注了折扣情况
你也可在表单上这么做

244
00:15:23,557 --> 00:15:25,559
可以标明介绍性折扣

245
00:15:25,859 --> 00:15:28,762
然后是当前要收取的费用

246
00:15:29,296 --> 00:15:32,132
接下来可以使用相同的信息
相同的付款数据

247
00:15:32,199 --> 00:15:35,169
这些可以从Apple Pay获取
进行后续收费

248
00:15:36,570 --> 00:15:41,375
有时 有些预订类型费用会不一样

249
00:15:41,909 --> 00:15:44,912
也许你是从事订餐服务 用户订餐数量

250
00:15:44,978 --> 00:15:48,215
每周每月都不同

251
00:15:49,082 --> 00:15:51,718
针对不同预订情况 使用未确定金额

252
00:15:51,985 --> 00:15:55,389
还要记住 如果预订是可变的

253
00:15:55,455 --> 00:15:57,958
例如用户改了主意

254
00:15:58,025 --> 00:15:59,993
如果改变会导致额外费用

255
00:16:00,394 --> 00:16:03,063
只需出示付款单即可

256
00:16:03,764 --> 00:16:07,701
如果用户降低了费用 则必须要授权

257
00:16:09,169 --> 00:16:10,571
这就是付款单部分

258
00:16:11,805 --> 00:16:14,741
我想说说按钮部分

259
00:16:15,475 --> 00:16:18,478
具体而言 我想说说
Apple Pay的按钮

260
00:16:19,446 --> 00:16:24,284
请使用内置式Apple Pay按钮
不要自创

261
00:16:24,351 --> 00:16:26,520
这是有两方面原因

262
00:16:26,687 --> 00:16:29,256
首先 Apple Pay经过本地化

263
00:16:29,423 --> 00:16:31,959
用户可以选用任何语言

264
00:16:32,259 --> 00:16:34,995
而且还是矢量图
因此可以完全放大缩小

265
00:16:35,062 --> 00:16:37,497
这样你完全不必担心它们的样貌

266
00:16:38,165 --> 00:16:40,133
还有诸多样式可供选择

267
00:16:40,534 --> 00:16:44,071
我们先推出了iOS 8.3中的
原生按钮

268
00:16:44,271 --> 00:16:46,673
所以可以锁定8.3及以上的版本

269
00:16:46,874 --> 00:16:49,877
在商店中几乎都有

270
00:16:51,178 --> 00:16:57,818
在macOS 10.12.1和iOS 10.1中
我们使之更易于在网络使用

271
00:16:58,585 --> 00:17:01,421
我们用了简化的CSS样式

272
00:17:01,889 --> 00:17:04,590
我们来看几个例子 代码实例

273
00:17:05,759 --> 00:17:08,262
这里是Swift中的代码不太好

274
00:17:08,829 --> 00:17:13,133
PKPaymentButton是UI按钮子类
你只需提供类型和样式

275
00:17:13,467 --> 00:17:17,804
我们的按钮有白色 黑色
和白色加边框等

276
00:17:18,638 --> 00:17:21,074
我们来看在HTML中的相同按钮

277
00:17:22,175 --> 00:17:25,979
这是最新的CSS样式
在iOS 10.1中推出

278
00:17:26,946 --> 00:17:32,152
这里是WebKit外观样式
Apple Pay按钮和类型购买

279
00:17:33,120 --> 00:17:36,356
现在 我们有四种按钮样式
我来给大家看看

280
00:17:37,291 --> 00:17:42,462
左边是Swift符号
右边是CSS名称

281
00:17:42,729 --> 00:17:44,331
我们有无背景色按钮

282
00:17:45,666 --> 00:17:48,068
还有通过Apple Pay购买按钮

283
00:17:49,369 --> 00:17:54,241
还有设置Apple Pay按钮
稍后会介绍具体用法

284
00:17:55,008 --> 00:17:59,546
以及iOS 10.2
和macOS 10.12.3中的新特性

285
00:17:59,613 --> 00:18:02,249
如果你是非盈利机构
我们有使用Apple Pay捐赠的按钮

286
00:18:02,616 --> 00:18:05,452
显然作为非营利机构 在此之前

287
00:18:05,786 --> 00:18:08,055
你可能要锁定
所有版本的iOS或macOS

288
00:18:08,522 --> 00:18:11,892
这样就回到了常规的无背景色按钮

289
00:18:13,493 --> 00:18:16,463
这是对过去一年Apple Pay的
快速更新

290
00:18:16,530 --> 00:18:19,032
回顾了部分最佳实践

291
00:18:20,234 --> 00:18:22,836
我想告诉大家本次演讲最棒的部分

292
00:18:23,170 --> 00:18:25,739
即Apple Pay的最新特性

293
00:18:27,608 --> 00:18:31,211
当我们在思考 今年使用
Apple Pay可以做些什么时

294
00:18:31,278 --> 00:18:35,883
我们在想 怎样才能
实现同类产品中最佳的转化率

295
00:18:36,717 --> 00:18:40,521
以及怎样帮助用户解决
他们反映的常见问题

296
00:18:41,588 --> 00:18:45,559
最后是怎样才能快速便捷地
开始使用Apple Pay

297
00:18:45,626 --> 00:18:47,561
这样 更多的潜在客户

298
00:18:47,628 --> 00:18:49,763
会在其设备上绑定卡片

299
00:18:51,999 --> 00:18:54,535
在接下来的几张幻灯片中就会谈到

300
00:18:54,601 --> 00:18:56,303
我们实现这些目的的部分做法

301
00:18:56,670 --> 00:18:59,072
首先是通过设置Apple Pay

302
00:19:00,340 --> 00:19:03,076
现场从这个版本的iOS开始

303
00:19:03,143 --> 00:19:05,379
我们强烈推荐在硬件方面

304
00:19:05,445 --> 00:19:08,582
适用Apple Pay的所有设备上
都显示Apple Pay按钮

305
00:19:09,049 --> 00:19:13,253
可以选择适合
自己需求的设置或购买按钮

306
00:19:13,520 --> 00:19:16,557
如果API告知用户并无任何卡片

307
00:19:16,623 --> 00:19:19,726
如果设计中更适合始终连到购买功能中

308
00:19:19,793 --> 00:19:21,562
你也可显示设置功能

309
00:19:22,930 --> 00:19:24,831
但我们介绍过的一些内容会很有帮助

310
00:19:24,898 --> 00:19:29,036
提出这个新建议是因为
我们现在支持内联设置

311
00:19:29,736 --> 00:19:32,539
Apple Pay设置可以自动提供

312
00:19:33,340 --> 00:19:37,611
如果想在之前版本的
iOS中显示Apple Pay详单

313
00:19:37,678 --> 00:19:40,647
如果用户并无任何卡片 这会导致错误

314
00:19:40,714 --> 00:19:43,584
实际上 你无法显示视图控制器

315
00:19:43,851 --> 00:19:47,354
现在你可以展示
或是展示Apple Pay设置功能

316
00:19:47,721 --> 00:19:50,224
更重要的是 用户可以在

317
00:19:50,724 --> 00:19:53,327
设置完成后 即刻返回购买环节

318
00:19:53,594 --> 00:19:56,597
也就是说要比手动结账快很多

319
00:19:56,663 --> 00:19:59,066
无论是添加Apple Pay卡片
还是完成购买均是如此

320
00:19:59,132 --> 00:20:01,635
我给大家展示一下具体情况

321
00:20:02,035 --> 00:20:03,637
来看会有多快

322
00:20:04,037 --> 00:20:06,373
这里是Apple Store

323
00:20:06,673 --> 00:20:08,642
这次是在网站里 不是在应用中

324
00:20:09,076 --> 00:20:12,346
在我们轻击购买按钮而没有卡时
看看会发生什么

325
00:20:12,412 --> 00:20:14,982
速度很快

326
00:20:17,518 --> 00:20:19,820
这样有个小对话 告知我们添加卡片

327
00:20:20,053 --> 00:20:21,355
我们来添加卡片

328
00:20:24,858 --> 00:20:28,629
这是我在另一部电话中用的卡
所以已经有卡了

329
00:20:28,962 --> 00:20:30,531
我只要输入安全码即可

330
00:20:32,699 --> 00:20:35,802
现在来添加卡片 通读条款规定

331
00:20:39,806 --> 00:20:42,743
然后添加到Wallet 激活卡片

332
00:20:44,444 --> 00:20:45,445
好的 搞定

333
00:20:45,812 --> 00:20:46,813
接下来会发生什么？

334
00:20:46,880 --> 00:20:49,149
我们立即前往Apple Pay表单

335
00:20:49,216 --> 00:20:50,851
就可以继续付款

336
00:20:51,084 --> 00:20:51,952
非常棒

337
00:20:52,019 --> 00:20:54,988
其实用不了30秒钟 的确要比

338
00:20:55,055 --> 00:20:57,624
手动输入卡号快了很多

339
00:20:57,691 --> 00:20:59,526
所有这些信息都在常规的
Apple Store结账单中

340
00:21:00,460 --> 00:21:02,429
而且 这些都是完全自动进行

341
00:21:02,496 --> 00:21:05,832
你不必修改任何代码 没有新添API

342
00:21:06,133 --> 00:21:09,736
如果用户没有卡片
你只需要显示Apple Pay即可

343
00:21:10,037 --> 00:21:12,673
所以我建议大家使用这个功能

344
00:21:14,575 --> 00:21:16,176
如果你在Keynote平台

345
00:21:16,243 --> 00:21:19,580
或是在线观看
有个内容可能会让你开心

346
00:21:19,847 --> 00:21:21,248
即Apple Pay Cash

347
00:21:22,449 --> 00:21:27,855
Apple Pay Cash可以实现向
iMessage的好友用户发送现金的功能

348
00:21:28,121 --> 00:21:31,725
你收到的钱会保存在
Apple Pay Cash中

349
00:21:32,359 --> 00:21:36,196
Apple Pay Cash现可在
商店 实体店中使用

350
00:21:36,496 --> 00:21:40,467
但是也可以在应用当中
在网上使用 和其他卡片一样

351
00:21:40,734 --> 00:21:45,973
实际上 可以用信用卡的地方
就可以用Apple Pay Cash

352
00:21:46,206 --> 00:21:49,142
我们稍后会在开发人员网站上

353
00:21:49,209 --> 00:21:51,278
详细介绍大家需要做的内容

354
00:21:51,512 --> 00:21:53,680
不过请放心 如果带着信用卡

355
00:21:53,747 --> 00:21:56,517
使用Apple Pay Cash
基本不费什么事

356
00:21:57,251 --> 00:22:00,521
如果作为软件内付费或网站开发人员
关于Apple Pay Cash

357
00:22:00,587 --> 00:22:02,656
有些内容还是需要了解

358
00:22:04,324 --> 00:22:08,061
Apple Pay Cash
是储值卡 其中要有余额

359
00:22:09,196 --> 00:22:11,131
来看个例子

360
00:22:11,398 --> 00:22:13,734
我的预订商务模式效果不好

361
00:22:13,800 --> 00:22:17,237
所以我转换到按需模式

362
00:22:17,304 --> 00:22:20,707
这样可以把牛油果吐司直接送到你手上

363
00:22:21,408 --> 00:22:22,409
这样的话

364
00:22:22,476 --> 00:22:24,811
我的零钱快用完了

365
00:22:25,312 --> 00:22:28,081
不过 我想用
Apple Pay Cash卡来付费

366
00:22:28,148 --> 00:22:30,017
可惜 我的好友不多

367
00:22:30,083 --> 00:22:31,818
他们没给我发来钱

368
00:22:31,885 --> 00:22:35,789
你就会看到这个UI 表示余额不足

369
00:22:36,256 --> 00:22:40,160
要注意的是 我们在用提供的总金额

370
00:22:40,227 --> 00:22:43,263
来确定付款是否会

371
00:22:43,497 --> 00:22:44,631
通过Apple Pay Cash发生

372
00:22:44,898 --> 00:22:46,834
这表明 你的总金额要体现出收费情况

373
00:22:46,900 --> 00:22:50,103
这一点很重要

374
00:22:50,470 --> 00:22:52,840
只有在余额超过所需总金额时

375
00:22:53,106 --> 00:22:56,844
Apple Pay Cash才会有效

376
00:22:58,245 --> 00:23:01,882
如果不确定总金额
可以使用未确定金额

377
00:23:02,382 --> 00:23:04,785
使用未确定金额绕过这个环节

378
00:23:04,852 --> 00:23:07,020
无论怎样 我们都会让付款完成

379
00:23:07,087 --> 00:23:08,689
当然要注意 和所有储值卡一样

380
00:23:08,755 --> 00:23:12,693
如果用户卡中没有余额 就会遭拒

381
00:23:14,661 --> 00:23:17,631
我们来简单介绍一下新的API功能

382
00:23:18,565 --> 00:23:21,502
人们常会问我们
一种使用情况 特别是在欧洲

383
00:23:21,568 --> 00:23:24,972
是关于在部分国家
限制使用Apple Pay的功能

384
00:23:25,172 --> 00:23:28,342
有时 这需要满足法规合规性要求

385
00:23:28,742 --> 00:23:29,743
现在可以了

386
00:23:30,210 --> 00:23:34,014
只需要这个新的属性
supportedCountries

387
00:23:34,648 --> 00:23:36,617
即可设置希望限制使用的国家

388
00:23:37,017 --> 00:23:40,187
注意 我们其他的现有API一样

389
00:23:40,254 --> 00:23:43,257
你可以限制对信用卡或借记卡的使用

390
00:23:43,657 --> 00:23:45,826
这在任何一种单一卡片中都不会有

391
00:23:45,893 --> 00:23:47,294
所以要牢记

392
00:23:47,361 --> 00:23:50,731
欲知更多详情 去看去年的演讲内容

393
00:23:53,400 --> 00:23:54,568
现在来说说

394
00:23:54,635 --> 00:23:56,837
我们对Apple Pay
所做的最大改变

395
00:23:57,037 --> 00:23:59,573
这与错误处理相关

396
00:24:01,675 --> 00:24:06,914
很遗憾 有时候
Apple Pay也会出故障

397
00:24:07,581 --> 00:24:11,084
这就导致与用户沟通会出现问题

398
00:24:11,451 --> 00:24:14,821
我们从开发人员
从用户那里都会得到反馈

399
00:24:15,289 --> 00:24:17,357
有什么具体例子呢？

400
00:24:18,525 --> 00:24:20,661
无法处理付款工具

401
00:24:21,595 --> 00:24:24,965
账单地址与卡片的银行地址不符

402
00:24:25,365 --> 00:24:27,201
电邮地址无效

403
00:24:27,801 --> 00:24:31,038
邮寄地址的邮编不正确

404
00:24:31,672 --> 00:24:34,541
电话的地区代码缺失

405
00:24:35,242 --> 00:24:37,811
我们把问题分为两大类

406
00:24:38,312 --> 00:24:43,951
我们将之分为致命错误和非致命错误

407
00:24:45,219 --> 00:24:46,386
致命错误是指

408
00:24:46,453 --> 00:24:49,156
用户当时无法解决的错误

409
00:24:49,223 --> 00:24:51,692
需要在Apple Pay以外进行处理

410
00:24:51,758 --> 00:24:53,861
但是也并无法避免

411
00:24:54,328 --> 00:24:55,762
有什么具体例子么？

412
00:24:56,263 --> 00:24:58,232
用户超出了信用限度

413
00:24:58,966 --> 00:25:01,301
这就无法在Apple Pay内解决

414
00:25:01,368 --> 00:25:03,971
你需要去银行搞定

415
00:25:04,037 --> 00:25:07,641
但是许多问题并非致命
用户可以自行解决

416
00:25:08,242 --> 00:25:10,811
问题可以在Apple Pay内部解决

417
00:25:11,178 --> 00:25:13,614
有时 问题可以预见 可以防患未然

418
00:25:15,282 --> 00:25:17,317
但是在更早版本的iOS中

419
00:25:17,551 --> 00:25:20,554
有关具体问题的交流 有些难度

420
00:25:21,255 --> 00:25:24,258
每当在原生API中完成付款

421
00:25:24,324 --> 00:25:28,061
就需要返回
PKPaymentAuthorizationStatus Enum

422
00:25:28,529 --> 00:25:33,066
在网络API中 需要具备类似的Enum
这其中并无特殊性

423
00:25:33,467 --> 00:25:37,538
比如是无效的发货地址
无效账单 无效联系方式等

424
00:25:38,605 --> 00:25:40,674
因此 用户不清楚问题是什么

425
00:25:40,741 --> 00:25:42,943
不过即便用户知道问题出在哪里

426
00:25:43,010 --> 00:25:45,846
他们也无法编辑现有值

427
00:25:46,713 --> 00:25:50,150
他们只能选用新地址 或是输入其中

428
00:25:50,751 --> 00:25:53,587
这种体验可不怎么样 我们做出了调整

429
00:25:53,654 --> 00:25:55,422
我们从三方面进行了调整

430
00:25:55,889 --> 00:25:59,826
首先 我们引入新的指南
可以更好处理用户数据

431
00:26:00,661 --> 00:26:04,464
我们还推出全新UI
这样用户可以输入和编辑数据

432
00:26:04,531 --> 00:26:07,467
如果大家用过iOS Veetle
也许会见过这个

433
00:26:07,835 --> 00:26:10,270
最后 也许是最令人激动的是

434
00:26:10,337 --> 00:26:12,072
我们推出新的API

435
00:26:12,339 --> 00:26:15,642
可以告知具体错误 指出问题所在

436
00:26:16,710 --> 00:26:18,779
我们来具体说说

437
00:26:19,947 --> 00:26:21,715
先来看处理用户数据

438
00:26:22,716 --> 00:26:23,617
这很有趣

439
00:26:24,284 --> 00:26:28,622
iOS和macOS中的联系信息
可以来自不同的渠道

440
00:26:29,022 --> 00:26:32,759
可以是来自iCloud
也可以是手动输入

441
00:26:33,260 --> 00:26:38,031
但也可来自LinkedIn、Facebook
VIDO、Tencent

442
00:26:38,098 --> 00:26:39,433
可以来自任何地方

443
00:26:40,167 --> 00:26:44,037
别指望这些信息会符合你的业务逻辑

444
00:26:45,305 --> 00:26:46,406
为什么这么讲？

445
00:26:46,974 --> 00:26:49,576
就以邮编地址为例

446
00:26:49,843 --> 00:26:52,679
这是波士顿的一家Apple商店地址
这是家很棒的Apple商店

447
00:26:52,746 --> 00:26:55,148
你应该去看看 打个招呼
告诉他们是我让你去的

448
00:26:56,450 --> 00:27:00,053
目前 地址看似没问题

449
00:27:00,120 --> 00:27:02,589
如果写在信封上 丢进邮箱

450
00:27:02,656 --> 00:27:03,657
信件也能寄到

451
00:27:04,124 --> 00:27:06,760
但实际上还是存在几个问题

452
00:27:06,994 --> 00:27:08,595
会让不知情的开发人员遇到

453
00:27:10,130 --> 00:27:12,499
有些看似不是什么大问题

454
00:27:12,566 --> 00:27:13,834
街道是缩写形式

455
00:27:14,334 --> 00:27:16,937
看似大部分系统可以应付

456
00:27:17,337 --> 00:27:20,007
有些问题有些麻烦

457
00:27:20,874 --> 00:27:23,577
如果你很认真 也许会注意到

458
00:27:23,644 --> 00:27:26,313
马萨诸塞州拼错了 有两个字母T

459
00:27:26,713 --> 00:27:29,550
我在这里住了四年 还是总拼错

460
00:27:29,850 --> 00:27:33,153
如果是根据州名
进行准确字符串匹配

461
00:27:33,854 --> 00:27:35,355
这可能就会引发问题

462
00:27:35,422 --> 00:27:38,192
还有一点比较奇怪 就是邮编

463
00:27:38,559 --> 00:27:41,361
是邮编再加四位数

464
00:27:41,895 --> 00:27:45,465
是在常规邮编基础上外加四位数码
进行细化

465
00:27:46,233 --> 00:27:49,469
如果后端系统只处理五位数字

466
00:27:49,536 --> 00:27:52,773
如果数据库只能接受五个数字

467
00:27:52,840 --> 00:27:54,975
这方面就会出现问题

468
00:27:56,143 --> 00:27:59,479
国家可能也会引发问题

469
00:28:01,515 --> 00:28:05,452
这是个本地化的国家名称
其实另有一栏

470
00:28:05,519 --> 00:28:07,754
用户看不见 这就是国家代码

471
00:28:07,821 --> 00:28:08,889
你应该用到这个信息

472
00:28:08,956 --> 00:28:12,092
因为国家代码一般都是正确的

473
00:28:12,826 --> 00:28:14,494
在用户的语言中有体现

474
00:28:14,561 --> 00:28:17,464
你可能会这样
“好 我会进行字串匹配

475
00:28:17,531 --> 00:28:19,833
美国 USA 所有变体等”

476
00:28:19,900 --> 00:28:22,035
结果没想到 用户是法国人

477
00:28:22,469 --> 00:28:26,373
这里实际是les Etats-Unis
你不知该怎么办了

478
00:28:26,440 --> 00:28:27,875
所以不要使用国家

479
00:28:27,941 --> 00:28:29,076
使用国家代码

480
00:28:29,776 --> 00:28:32,179
电话号码也会经常出问题

481
00:28:32,679 --> 00:28:33,580
其中会有斜杠

482
00:28:33,647 --> 00:28:35,115
如果系统只设置成

483
00:28:35,182 --> 00:28:37,718
接受数字 就会产生问题

484
00:28:37,918 --> 00:28:42,289
还有国家代码 也容易出错

485
00:28:43,190 --> 00:28:44,958
所以要准备应对模糊输入

486
00:28:45,292 --> 00:28:49,396
不要强迫用户遵照你的业务逻辑

487
00:28:49,663 --> 00:28:52,833
有许多办法可以用来解决地址问题

488
00:28:53,100 --> 00:28:56,336
例如 不要直接使用州栏

489
00:28:56,403 --> 00:28:58,372
可以从邮编中推导出来

490
00:28:58,705 --> 00:28:59,606
这是个例子

491
00:28:59,773 --> 00:29:02,709
有许多工具可以帮助处理电话号码

492
00:29:02,776 --> 00:29:06,146
两种工具在iOS中都有
还有第三方工具

493
00:29:06,780 --> 00:29:09,683
你也许奇怪“为什么
Apple Pay不能替我做好呢？”

494
00:29:09,750 --> 00:29:11,351
你的业务逻辑

495
00:29:11,552 --> 00:29:14,488
也许和另一个商家的业务逻辑完全不同

496
00:29:14,555 --> 00:29:17,624
一个商家也许只接受
带有国家代码的电话号码

497
00:29:17,925 --> 00:29:20,661
另一个商家也许只接受
不带国家代码的电话号码

498
00:29:21,061 --> 00:29:23,297
你不会希望用户不得已要

499
00:29:23,363 --> 00:29:25,866
创建两套地址 两套电话号码

500
00:29:25,966 --> 00:29:28,969
所以不要强迫用户遵照你的业务逻辑

501
00:29:29,937 --> 00:29:31,138
现在我们来帮帮你

502
00:29:31,205 --> 00:29:32,573
这是新的API

503
00:29:32,639 --> 00:29:35,609
位于上下文框架之中
可以支持世界各地的地址

504
00:29:35,776 --> 00:29:37,711
我提供的例子中 你是来自美国

505
00:29:37,778 --> 00:29:40,447
但是这些问题实际上
会在世界各地都有发生

506
00:29:40,514 --> 00:29:42,282
联系信息中还有新的栏

507
00:29:42,349 --> 00:29:45,319
用于补充性子街道

508
00:29:45,552 --> 00:29:47,187
这特别适合中国的情况

509
00:29:47,721 --> 00:29:49,456
在日本 使用Apple Pay

510
00:29:49,523 --> 00:29:52,459
除了常规名之外
你还可以要求提供拼音名

511
00:29:52,893 --> 00:29:54,928
这是另一个重要补充

512
00:29:55,662 --> 00:29:58,799
不过尽管所有这些
尽管已经做了最好的努力

513
00:29:59,666 --> 00:30:01,068
还是会出现问题

514
00:30:02,035 --> 00:30:05,405
美国邮政管理局可以把这寄给圣诞老人
但我可不行

515
00:30:05,572 --> 00:30:07,140
我不知道他住在哪儿

516
00:30:08,108 --> 00:30:10,410
那么是什么会出现问题呢？

517
00:30:10,577 --> 00:30:13,313
电话号码可能会缺失数字

518
00:30:13,714 --> 00:30:16,450
邮编可能 会对不上号

519
00:30:16,850 --> 00:30:18,719
电邮拼写会有误

520
00:30:19,253 --> 00:30:21,688
邮寄地址可能不能用

521
00:30:22,689 --> 00:30:26,293
我们会引入新的API来帮你解决问题

522
00:30:26,527 --> 00:30:28,629
我们称之为自定义错误

523
00:30:30,197 --> 00:30:34,468
自定义错误可以帮你优雅地处理
Apple Pay中的无效或有误数据

524
00:30:34,868 --> 00:30:37,871
你也可以显示自定义错误信息

525
00:30:37,938 --> 00:30:40,774
你自己的错误信息
直接会体现在Apple Pay表单中

526
00:30:41,341 --> 00:30:45,779
可以引导用户到需要改正的具体栏目

527
00:30:46,680 --> 00:30:49,550
再来看我那讨喜的牛油果吐司应用

528
00:30:50,017 --> 00:30:53,320
交付无法实现 我返回预订部分

529
00:30:53,587 --> 00:30:55,389
我们准备进行A轮融资了

530
00:30:55,989 --> 00:30:58,458
在这里可以看到 发货地址有问题

531
00:30:58,525 --> 00:31:00,327
发货地址错误

532
00:31:02,095 --> 00:31:04,598
不是很清晰 不过如果是用户输入的

533
00:31:04,932 --> 00:31:06,200
你会看到 我们遇到

534
00:31:06,266 --> 00:31:09,269
应用提供的自定义错误

535
00:31:09,469 --> 00:31:11,438
邮编和城市不匹配

536
00:31:12,206 --> 00:31:14,474
如果进一步来看 我们其实标出

537
00:31:14,541 --> 00:31:17,778
需要用户更正的具体栏目

538
00:31:17,845 --> 00:31:21,014
稍后在Jon的演示中 大家会看到

539
00:31:22,850 --> 00:31:25,085
这就有了不幸的副作用

540
00:31:25,152 --> 00:31:27,754
API部分功能不宜使用

541
00:31:28,021 --> 00:31:29,723
以往Apple Pay所采用的
所有的完成处理器

542
00:31:30,390 --> 00:31:33,527
我刚说过 是Enum

543
00:31:34,161 --> 00:31:35,462
我们不想为每种错误类型都

544
00:31:35,529 --> 00:31:37,998
对应出数百种不同的Enum

545
00:31:38,599 --> 00:31:41,235
相反 我们用对象来替代

546
00:31:42,002 --> 00:31:42,870
在本例中

547
00:31:42,936 --> 00:31:45,973
当付款得以授权 会有回调

548
00:31:46,039 --> 00:31:48,742
且会返回
PKPaymentAuthorizationResult

549
00:31:49,977 --> 00:31:51,812
我们只需稍稍改名

550
00:31:53,146 --> 00:31:57,651
结果对象包括状态 包括一组错误

551
00:31:58,151 --> 00:32:00,420
目前的状态就是你习惯的状态

552
00:32:00,487 --> 00:32:02,122
付款是否成功

553
00:32:02,556 --> 00:32:04,791
举例而言 你成功收到付款

554
00:32:04,858 --> 00:32:08,829
只需返回无误的结果和单一的状态组

555
00:32:09,663 --> 00:32:13,534
不过错误本身是标准的NS错误
说明是什么问题

556
00:32:14,368 --> 00:32:17,271
每个错误代表一个付款问题

557
00:32:17,671 --> 00:32:19,273
可以把错误串在一起

558
00:32:19,339 --> 00:32:22,109
这样就不止一个 如果用户的电邮错误

559
00:32:22,176 --> 00:32:25,445
电话错误 发货地址错误
可以一次处理

560
00:32:26,413 --> 00:32:29,583
可以使用NSError代码
说明这个问题

561
00:32:30,083 --> 00:32:35,088
NSError的用户信息键
会提供具体解决步骤和相关信息

562
00:32:36,123 --> 00:32:39,426
创建NSError会有些费事

563
00:32:39,493 --> 00:32:43,397
部分工厂辅助帮手可以帮忙

564
00:32:43,630 --> 00:32:45,265
这里是Swift的例子

565
00:32:45,566 --> 00:32:48,335
我在创建一个付款发货地址
其中有无效错误

566
00:32:48,635 --> 00:32:52,372
你会看到 会用到两个属性 两个参数

567
00:32:52,639 --> 00:32:57,344
用到CN联系代码
表明这个栏目有问题

568
00:32:57,544 --> 00:32:58,946
在本例中 问题是

569
00:32:59,012 --> 00:33:02,149
用户填写的国家信息有误
我们只能发送到美国

570
00:33:02,216 --> 00:33:06,587
来看CN邮寄地址的国家代码
再看本地化说明

571
00:33:06,753 --> 00:33:10,524
这属于本地化错误 在表单中有显示

572
00:33:10,757 --> 00:33:14,461
在ES6和JavaScript中
显然不存在NSError

573
00:33:14,795 --> 00:33:18,498
我们有了新的类型
Apple Pay Error

574
00:33:19,566 --> 00:33:21,268
可以查看是否存在这一类型

575
00:33:21,335 --> 00:33:24,571
以便确认是否Safari
会支持这款新的API

576
00:33:25,038 --> 00:33:29,276
你会提供错误类型 发货联系方式无效

577
00:33:30,110 --> 00:33:33,514
相关的栏目 国家和本地化说明

578
00:33:34,581 --> 00:33:37,918
大部分的代理回调都经过调整

579
00:33:38,418 --> 00:33:41,154
这还有个例子
didSelectShippingContract

580
00:33:41,221 --> 00:33:45,359
会用到对象 PKPaymentRequest
ShippingContactUpdate

581
00:33:46,994 --> 00:33:50,130
正如Safari 11中
已有的API那样

582
00:33:50,664 --> 00:33:54,368
Safari 11只存在于iOS 11
和macOS High Sierra中

583
00:33:54,434 --> 00:33:57,404
并不支持在Safari 11
更早的操作系统

584
00:33:57,704 --> 00:33:58,939
版本中运行

585
00:33:59,773 --> 00:34:02,042
因为JavaScript宽容度更高

586
00:34:02,109 --> 00:34:04,077
涉及到API时

587
00:34:04,144 --> 00:34:06,613
我们还尚未发现功能受影响的情况

588
00:34:06,680 --> 00:34:09,716
现有的完成函数主要是出现过载问题

589
00:34:09,783 --> 00:34:14,188
这是早先的API
我们在单独项中进行解析

590
00:34:14,454 --> 00:34:16,723
总金额 条目 状态

591
00:34:16,924 --> 00:34:20,159
在新的API中 我们只需传递对象

592
00:34:20,393 --> 00:34:22,329
如果是在网上编写Apple Pay

593
00:34:22,396 --> 00:34:24,764
这里是很直接的改动

594
00:34:24,831 --> 00:34:27,201
若是在应用中编写Apple Pay

595
00:34:27,734 --> 00:34:31,804
我想要展示 实施这个
新的API并不需要太多工作

596
00:34:32,239 --> 00:34:34,541
为此 有请Jon上台

597
00:34:34,775 --> 00:34:37,945
他会简单介绍如何迁移
Apple Pay应用

598
00:34:38,212 --> 00:34:39,112
Jon

599
00:34:43,150 --> 00:34:43,984
大家好

600
00:34:44,051 --> 00:34:46,386
我是Jon 我来给大家演示

601
00:34:46,719 --> 00:34:51,091
在Swift中升级现有Apple Pay项目
针对新的API其实很简单

602
00:34:51,658 --> 00:34:54,393
今天我会主要介绍四方面内容

603
00:34:54,962 --> 00:34:57,965
首先 来看现有项目代码

604
00:34:58,265 --> 00:35:00,033
来看目前的执行情况

605
00:35:00,334 --> 00:35:02,302
如果以前用过Apple Pay

606
00:35:02,369 --> 00:35:04,838
大部分内容 你都会很熟悉

607
00:35:05,205 --> 00:35:07,407
其次 我会在模拟器中部署应用

608
00:35:07,674 --> 00:35:11,745
与Apple Pay表单互动
就仿佛自己是你的应用客户一般

609
00:35:12,112 --> 00:35:14,781
会将一个物品发送给朋友

610
00:35:15,482 --> 00:35:20,354
接下来 我会升级新API中的代码

611
00:35:20,587 --> 00:35:23,991
展示三个错误 这是我们今年引入的

612
00:35:24,458 --> 00:35:27,361
最后 我会再次在模拟器中部署应用

613
00:35:27,594 --> 00:35:29,663
并展示做法方面有何不同

614
00:35:29,863 --> 00:35:32,599
比较旧版的Apple Pay
表单和新版的Apple Pay表单

615
00:35:33,267 --> 00:35:35,169
来看我们现在有什么

616
00:35:36,436 --> 00:35:38,672
如你所见 这个应用相当简单

617
00:35:38,739 --> 00:35:41,708
有个物品的图像 我们想买下来

618
00:35:42,342 --> 00:35:44,344
以及Apple Pay购买按钮

619
00:35:44,811 --> 00:35:46,246
来看代码部分

620
00:35:47,114 --> 00:35:49,149
第一个函数是viewDidLoad

621
00:35:49,550 --> 00:35:52,186
这里 我们创建了
PKPayment按钮

622
00:35:52,586 --> 00:35:57,357
设置购买类型 以及样式为黑色
并将之加在视图中

623
00:35:57,791 --> 00:36:02,763
在添加视图函数中
我们加入不同的约束项

624
00:36:03,030 --> 00:36:04,665
并设置目标

625
00:36:05,065 --> 00:36:08,001
点击时 会有下一个
函数startPayment

626
00:36:08,502 --> 00:36:10,003
我们来看一下

627
00:36:11,505 --> 00:36:13,073
这里 首先要做的是

628
00:36:13,440 --> 00:36:18,512
创建若干PKPayment汇总项
以及PKShipping方法

629
00:36:19,079 --> 00:36:22,716
最后要创建的是一系列对象

630
00:36:23,016 --> 00:36:25,619
稍后会传递到PKPayment要求中

631
00:36:26,653 --> 00:36:28,856
再来看付款要求

632
00:36:29,756 --> 00:36:32,359
非常简单 我们启动后

633
00:36:32,726 --> 00:36:36,463
在之前创建的项目中 设置付款汇总项

634
00:36:36,830 --> 00:36:38,565
以及各种属性

635
00:36:38,999 --> 00:36:43,270
例如商家识别器 性能等等

636
00:36:44,638 --> 00:36:47,674
最后 最后一行可能是最重要的

637
00:36:47,741 --> 00:36:49,910
要求发货联系栏

638
00:36:50,611 --> 00:36:53,313
这是PKPayment要求的新属性

639
00:36:53,981 --> 00:36:56,917
这里是一组PK内容栏

640
00:36:57,251 --> 00:36:58,218
在本例中

641
00:36:58,285 --> 00:37:01,822
开发人员要求用户提供电邮地址

642
00:37:02,155 --> 00:37:03,624
以及邮寄地址

643
00:37:04,424 --> 00:37:06,360
在这个函数中 最后一项是

644
00:37:06,426 --> 00:37:09,363
创建PKPayment授权控制器

645
00:37:09,830 --> 00:37:11,899
使用我们刚创建的付款要求

646
00:37:12,332 --> 00:37:14,935
为自己设置委托并呈现

647
00:37:15,636 --> 00:37:16,870
相当简单

648
00:37:17,638 --> 00:37:19,640
来看一下协议部分

649
00:37:20,574 --> 00:37:21,909
第一个函数是

650
00:37:22,176 --> 00:37:24,244
didSelectShippingContact

651
00:37:24,745 --> 00:37:28,048
一旦出现Apple Pay表单
就会调用这个函数

652
00:37:28,549 --> 00:37:32,019
一旦用户编辑其地址内容

653
00:37:32,252 --> 00:37:33,620
或选用新地址时也是如此

654
00:37:34,354 --> 00:37:36,323
可以看到这是一款较早版本的API

655
00:37:36,390 --> 00:37:40,694
因为这个完成块采用了
PKPaymentAuthorizationStatus Enum

656
00:37:41,428 --> 00:37:44,264
还要注意的是这个联系信息

657
00:37:44,464 --> 00:37:45,732
其实经过了修订

658
00:37:46,099 --> 00:37:50,504
你不会获得电邮地址 电话号码

659
00:37:50,838 --> 00:37:54,074
或街道信息等
除非得到用户的支付授权

660
00:37:55,976 --> 00:37:57,578
来看我们这里

661
00:37:58,245 --> 00:38:01,148
我们要进行基本的验证 在本例中

662
00:38:01,315 --> 00:38:03,317
我们要检查状态是否有效

663
00:38:03,750 --> 00:38:04,751
如果无效

664
00:38:04,818 --> 00:38:07,654
我们将状态设为
invalidShippingPostalAddress

665
00:38:08,155 --> 00:38:10,624
否则 我们将付款状态设为成功

666
00:38:11,358 --> 00:38:13,794
最后要处理的是完成块

667
00:38:13,861 --> 00:38:17,364
通过paymentStatus
相同的发货方式

668
00:38:17,564 --> 00:38:19,233
以及相同的支付汇总项

669
00:38:19,766 --> 00:38:21,935
当然可以更新发货方式

670
00:38:22,002 --> 00:38:23,971
以及汇总项 如果有必要的话

671
00:38:24,471 --> 00:38:27,007
但是在本例中 我们都用相同内容

672
00:38:28,342 --> 00:38:31,745
下一个函数是
didAuthorizePaymentMethod

673
00:38:32,112 --> 00:38:33,680
在用户授权付款后可以调用

674
00:38:33,747 --> 00:38:37,551
可使用Touch ID或密码来授权

675
00:38:38,018 --> 00:38:41,321
还要注意的一点是
PKPayment对象

676
00:38:41,722 --> 00:38:46,860
其中包含属性发货联系信息
内有完整联系信息

677
00:38:47,227 --> 00:38:50,364
这样就获得了电邮地址
电话和街道信息

678
00:38:50,597 --> 00:38:52,332
这些是之前未曾提供的

679
00:38:52,633 --> 00:38:54,301
我们希望你可以在这种方法中

680
00:38:54,368 --> 00:38:56,937
验证完整的联系信息

681
00:38:58,305 --> 00:39:01,275
为简单起见 我们只需检查电邮

682
00:39:01,475 --> 00:39:02,910
但是当然你可以做更多检查

683
00:39:03,076 --> 00:39:05,179
如果邮件检查失败

684
00:39:05,512 --> 00:39:10,284
我们将支付状态设为
Enum invalidShippingContact

685
00:39:11,318 --> 00:39:14,655
如果成功 我们将付款状态设为成功

686
00:39:15,122 --> 00:39:18,192
最后要做的是 调用该状态的完成块

687
00:39:18,258 --> 00:39:19,793
我们来看具体怎么操作

688
00:39:19,860 --> 00:39:23,463
先要部署 并在模拟器中
与Apple Pay表单互动

689
00:39:25,832 --> 00:39:26,934
再来看应用

690
00:39:27,401 --> 00:39:30,771
点击Apple Pay购买按钮
出现Apple Pay表单

691
00:39:30,838 --> 00:39:33,507
假设要发货给我的朋友莎拉

692
00:39:34,074 --> 00:39:37,911
我选择发货后 选择添加发货地址

693
00:39:38,312 --> 00:39:44,051
如你所见 最新UI添加了发货地址

694
00:39:44,551 --> 00:39:48,322
这样可以手动添加或选择一个联系方式

695
00:39:48,622 --> 00:39:53,927
或使用Apple Pay表单
提供的建议地址

696
00:39:54,394 --> 00:39:57,231
在本例中 我会选择朋友莎拉

697
00:39:57,631 --> 00:39:59,466
她住在夏威夷

698
00:39:59,533 --> 00:40:03,036
也许…这个地址会有问题

699
00:40:03,103 --> 00:40:03,937
不过我们来看

700
00:40:04,304 --> 00:40:07,741
当然有问题 可以看到

701
00:40:08,308 --> 00:40:10,110
文字是红色 这样用户可以知道

702
00:40:10,177 --> 00:40:12,279
地址存在问题

703
00:40:12,779 --> 00:40:15,148
不过尚不清楚

704
00:40:15,582 --> 00:40:16,950
问题是什么

705
00:40:17,351 --> 00:40:22,789
就我所看 地址没问题
夏威夷也是有效的州

706
00:40:22,956 --> 00:40:25,559
一切都很好 如果我再次选定

707
00:40:26,460 --> 00:40:29,930
并没有地址出错的更多信息

708
00:40:30,531 --> 00:40:34,801
我知道好友Daniel也喜欢这款

709
00:40:34,868 --> 00:40:38,238
他住在加州 我们看看能否给他发过去

710
00:40:39,206 --> 00:40:41,742
我们返回后 貌似没什么问题

711
00:40:42,109 --> 00:40:44,578
那么 一定是莎拉的地址有问题

712
00:40:44,978 --> 00:40:47,881
但我不清楚到底是什么问题

713
00:40:48,615 --> 00:40:52,152
使用密码按钮 点击支付
试着授权这次付款

714
00:40:53,253 --> 00:40:57,324
Apple Pay表单
显示联系方式有误

715
00:40:57,791 --> 00:40:59,826
文字再次标红

716
00:41:00,327 --> 00:41:01,528
如果我选择这个地址

717
00:41:02,062 --> 00:41:07,467
并无明确信息说明
联系信息有什么问题

718
00:41:07,734 --> 00:41:09,670
也许是百分号

719
00:41:10,137 --> 00:41:14,007
也许是我不喜欢
iCloud.com电邮地址

720
00:41:14,408 --> 00:41:17,578
我们选择Daniel的真实电邮地址
看看效果如何

721
00:41:18,545 --> 00:41:21,915
我们选择后 会点击用密码支付

722
00:41:22,349 --> 00:41:23,517
然后付款成功

723
00:41:23,817 --> 00:41:25,686
好的 不错

724
00:41:26,153 --> 00:41:28,555
可是作为用户 很难找出

725
00:41:28,622 --> 00:41:31,458
之前的地址有什么问题

726
00:41:31,792 --> 00:41:34,428
我们来试试最新的API

727
00:41:35,195 --> 00:41:39,867
第一个函数是
didSelectShippingContact方法

728
00:41:40,534 --> 00:41:45,339
这里采用了PKPaymentRequest
ShippingContactUpdate对象

729
00:41:45,973 --> 00:41:47,207
我们首先要做的是

730
00:41:48,275 --> 00:41:54,381
在启用前 具备更新的本地变量

731
00:41:55,349 --> 00:41:59,219
检查错误后 我们启用它

732
00:41:59,887 --> 00:42:02,689
接下来 是创建一组错误

733
00:42:02,756 --> 00:42:06,660
在验证地址时 会添加其中

734
00:42:07,628 --> 00:42:11,331
和之前类似 我们要检查状态是否有效

735
00:42:11,632 --> 00:42:13,100
如果无效

736
00:42:13,166 --> 00:42:16,970
我们不会设置无效发货地址的状态

737
00:42:17,037 --> 00:42:19,373
相反会添加错误 新的错误类型

738
00:42:19,606 --> 00:42:22,176
paymentShippingAddress
UnserviceableError

739
00:42:22,509 --> 00:42:25,712
在这里 其中有本地化说明

740
00:42:26,213 --> 00:42:30,017
在本例中 我们表示 无法向该州发货

741
00:42:31,585 --> 00:42:34,321
我们来看 将添加
之前未做的另外检查项

742
00:42:34,388 --> 00:42:36,523
即检查邮编是否有效

743
00:42:37,157 --> 00:42:39,293
这是另一种错误类型

744
00:42:39,359 --> 00:42:41,695
paymentShippingAddress
InvalidError

745
00:42:42,062 --> 00:42:46,466
这里要采用一个键值
CNPostalAddress键值

746
00:42:46,967 --> 00:42:50,537
在本例中 我们采用
CNPostalAddress邮编键值

747
00:42:50,604 --> 00:42:55,008
这可以告知PassKit
显示错误是什么

748
00:42:55,075 --> 00:42:57,878
同时用户会尝试编辑地址

749
00:42:59,379 --> 00:43:01,014
采用本地化…

750
00:43:01,748 --> 00:43:05,652
采用localizedDescription
邮编与城市不匹配

751
00:43:07,721 --> 00:43:09,857
好 我们继续 接下来要做的是

752
00:43:10,724 --> 00:43:12,926
检查错误数组是否为空

753
00:43:13,427 --> 00:43:14,261
如果是空

754
00:43:14,761 --> 00:43:19,366
我们会启动更新对象 使用
paymentSummaryItems 不会改变

755
00:43:19,833 --> 00:43:24,137
否则我们会启动更新对象

756
00:43:24,204 --> 00:43:28,475
使用错误 付款汇总项和发货方式

757
00:43:29,843 --> 00:43:31,445
我们要做的最后一个环节是

758
00:43:31,945 --> 00:43:34,615
调用这个新对象的完成块

759
00:43:36,216 --> 00:43:38,919
我们来调整
didAuthorizePayment函数

760
00:43:39,419 --> 00:43:43,056
这是之前的代码

761
00:43:43,123 --> 00:43:44,424
这样可以做注释

762
00:43:44,725 --> 00:43:48,195
首先做得事情和之前类似

763
00:43:48,262 --> 00:43:51,465
创建所附的错误数组

764
00:43:52,766 --> 00:43:54,568
在本例中 我们检查了一项内容

765
00:43:54,635 --> 00:43:57,971
即电邮地址是否有效

766
00:43:58,405 --> 00:43:59,439
如果无效

767
00:43:59,873 --> 00:44:04,845
我们会添加另一种错误类型
paymentContactInvalidError

768
00:44:05,179 --> 00:44:07,648
这次没有采用
CNPostalAddress键值

769
00:44:07,714 --> 00:44:10,484
而是用了PKContact域键值

770
00:44:11,351 --> 00:44:12,786
这次 我们采用了…

771
00:44:13,921 --> 00:44:18,225
提供了电邮地址
这样可以显示正确的位置

772
00:44:19,226 --> 00:44:21,595
好 再有另一个本地化说明

773
00:44:21,662 --> 00:44:23,664
这将在Apple Pay表单中体现

774
00:44:26,767 --> 00:44:30,037
与之前相似 我们要检查
错误数组是否为空

775
00:44:30,370 --> 00:44:32,973
如果是空 我们将状态设为成功

776
00:44:33,040 --> 00:44:35,676
否则 我们将状态设为失败

777
00:44:35,976 --> 00:44:38,779
要做的最后一件事 是调用完成块

778
00:44:38,846 --> 00:44:42,516
通过启用
PKPaymentAuthorizationResult

779
00:44:42,883 --> 00:44:45,886
使用同样的状态以及创建的错误

780
00:44:47,054 --> 00:44:48,088
来看部署后

781
00:44:48,488 --> 00:44:49,623
效果如何

782
00:44:51,558 --> 00:44:54,995
应用出现后 我们再次点击
Apple Pay购买按钮

783
00:44:55,696 --> 00:44:57,831
立刻显示有错误

784
00:44:58,265 --> 00:45:00,334
应用并未按照发货地址发货

785
00:45:00,400 --> 00:45:02,803
这是新的错误 我们在今年已经介绍过

786
00:45:03,604 --> 00:45:08,976
在联系信息下 有无法发货的文字

787
00:45:09,510 --> 00:45:10,711
我选中后

788
00:45:11,078 --> 00:45:15,082
联系信息下方的文字表明
无法向该州发货

789
00:45:15,516 --> 00:45:17,618
这样用户会很明确

790
00:45:18,318 --> 00:45:22,055
了解到该应用不支持向夏威夷发货

791
00:45:22,723 --> 00:45:26,159
那么试试把货物发给
好友John Appleseed

792
00:45:26,226 --> 00:45:29,930
他的发货地址是库比蒂诺

793
00:45:30,631 --> 00:45:31,999
我选中后

794
00:45:32,499 --> 00:45:36,570
出现错误提示 称邮编和城市不匹配

795
00:45:37,171 --> 00:45:39,206
如果我选择这个地址

796
00:45:39,873 --> 00:45:42,242
邮编就会标红

797
00:45:42,643 --> 00:45:45,445
因为我知道12345

798
00:45:45,512 --> 00:45:48,348
不是库比蒂诺的邮编

799
00:45:48,415 --> 00:45:53,754
我改成95014 点击完成保存

800
00:45:53,987 --> 00:45:54,888
返回

801
00:45:54,955 --> 00:45:59,593
我修改了所有的联系信息
或遇到的地址问题

802
00:46:00,394 --> 00:46:02,396
再次尝试用密码付款

803
00:46:03,397 --> 00:46:07,034
发现联系信息存在错误

804
00:46:07,668 --> 00:46:10,137
点击之后 我们发现

805
00:46:10,204 --> 00:46:14,174
电邮地址中存在无效字符 即百分号

806
00:46:14,608 --> 00:46:19,112
作为用户 我可以编辑电邮地址
删除百分号

807
00:46:19,179 --> 00:46:22,683
或是选择另外的邮件地址

808
00:46:23,183 --> 00:46:25,953
我选了John Appleseed的
电邮地址 是在mac.com开设的

809
00:46:27,054 --> 00:46:31,825
返回点击用密码付款 即授权支付

810
00:46:32,459 --> 00:46:35,062
这就介绍了新的API

811
00:46:35,128 --> 00:46:38,198
是在iOS 11中推出的

812
00:46:38,265 --> 00:46:40,434
你可以为用户提供更多反馈

813
00:46:40,501 --> 00:46:42,936
同时处理Apple Pay表单的地址问题

814
00:46:43,570 --> 00:46:46,640
我们希望这可以创建更好的用户体验

815
00:46:46,707 --> 00:46:49,176
在他们在你的应用中使用Apple Pay时

816
00:46:49,643 --> 00:46:50,477
谢谢

817
00:46:54,948 --> 00:46:55,816
谢谢 Jon

818
00:46:55,883 --> 00:46:59,419
希望大家可以花时间更新自己的应用

819
00:47:00,521 --> 00:47:03,156
我想简单说说Wallet的最新内容

820
00:47:03,657 --> 00:47:06,193
如果下载了iOS 11的测试版

821
00:47:06,260 --> 00:47:09,062
可能注意到Wallet中
一项新增内容

822
00:47:09,129 --> 00:47:10,364
看似有些不太一样

823
00:47:10,430 --> 00:47:11,865
更亮了些

824
00:47:12,232 --> 00:47:15,669
如果没注意到 还有就是
批量删除管理界面

825
00:47:15,736 --> 00:47:17,337
用于传递内容

826
00:47:18,539 --> 00:47:21,074
新的配色方案表明
这可能是不错的时机

827
00:47:21,141 --> 00:47:22,876
来重新访问之前的设计

828
00:47:23,076 --> 00:47:25,913
好好看看 确保其样貌不错

829
00:47:26,513 --> 00:47:30,918
如果从未更新
具备Watch资产或3x资产

830
00:47:31,151 --> 00:47:32,152
这也许是不错的时机

831
00:47:33,387 --> 00:47:36,490
我还想简要更新NFC传递的内容

832
00:47:36,557 --> 00:47:41,395
NFC传递是常规传递
可以帮助通过NFC传递客户信息

833
00:47:41,595 --> 00:47:44,431
从iOS 11开始 我们只支持

834
00:47:44,498 --> 00:47:48,602
更安全的NFC传递类型
我们称之为加密NFC传递

835
00:47:49,169 --> 00:47:51,939
如果想更多了解NFC传递 可以查看

836
00:47:52,005 --> 00:47:55,542
去年的演讲内容
也可前往开发人员网站

837
00:47:56,076 --> 00:47:59,246
了解更多详情 可以注册
充分利用这些内容

838
00:48:00,647 --> 00:48:04,051
关于传递 今年Wallet中
有个小的新特性

839
00:48:04,117 --> 00:48:05,619
就是分享

840
00:48:05,686 --> 00:48:07,788
作为常会用到的特性

841
00:48:07,855 --> 00:48:09,790
传递现在可以选择通过分享实现

842
00:48:10,791 --> 00:48:14,895
对于个人使用项目
例如票券会员卡 这会很有帮助

843
00:48:15,062 --> 00:48:16,930
使用起来也很方便

844
00:48:17,364 --> 00:48:20,834
是传递JSON的顶级 JSON键值

845
00:48:21,335 --> 00:48:25,772
这里是sharingProhibited
礼品卡 会员卡

846
00:48:25,839 --> 00:48:28,642
可以设为真 这样用户无法

847
00:48:28,709 --> 00:48:30,677
通过airdrop iMessage进行分享

848
00:48:31,011 --> 00:48:34,348
这是个便捷特性 不是安全性特性

849
00:48:34,414 --> 00:48:37,451
显然 用户还可以通过其他方式分享

850
00:48:37,518 --> 00:48:40,721
但是在较早版本的iOS中并不支持

851
00:48:41,288 --> 00:48:44,057
不过若不希望用户分享的话
这是个很好的理由

852
00:48:44,124 --> 00:48:46,927
纯粹处于体验需要

853
00:48:48,295 --> 00:48:49,296
这就是Apple Pay

854
00:48:50,097 --> 00:48:51,598
和Wallet的最新特性

855
00:48:52,099 --> 00:48:54,334
我们介绍了构建最佳

856
00:48:54,401 --> 00:48:56,770
Apple Pay体验的一些指南

857
00:48:56,970 --> 00:48:59,439
处理复杂错误的新API

858
00:48:59,506 --> 00:49:02,576
分享NFC互动传递的新方法

859
00:49:02,643 --> 00:49:04,611
以及这些内容的更多相关信息

860
00:49:04,678 --> 00:49:06,947
大家可以查看开发人员网站

861
00:49:07,714 --> 00:49:10,017
其中有些内容 你可能会觉得值得一看

862
00:49:10,083 --> 00:49:13,220
我估计 在座大部分会对此非常激动

863
00:49:13,520 --> 00:49:16,823
即Core NFC框架

864
00:49:17,157 --> 00:49:22,930
大家可以阅读NFC标签
了解支持硬件

865
00:49:23,497 --> 00:49:26,466
我们有着专门的演讲内容
只在线上进行

866
00:49:26,633 --> 00:49:28,035
现在就可以观看

867
00:49:28,635 --> 00:49:34,174
只需在WWDC网站上搜索
CoreNFC即可 去看看吧

868
00:49:34,608 --> 00:49:36,510
今年我们就是这些内容

869
00:49:36,577 --> 00:49:38,979
希望大家可以出来
参加非常棒的啤酒狂欢节

870
00:49:39,046 --> 00:49:42,649
希望明年有机会介绍
Apple Pay和Wallet的更多内容

871
00:49:42,850 --> 00:49:43,784
非常感谢

