1
00:00:19,576 --> 00:00:21,036
Montgomery and in this session

2
00:00:21,036 --> 00:00:22,486
we'll discuss how your app can

3
00:00:22,486 --> 00:00:24,806
use new APIs and iOS 11 to

4
00:00:24,806 --> 00:00:27,126
filter out unwanted SMS and MMS

5
00:00:27,126 --> 00:00:29,056
messages and help users avoid an

6
00:00:29,056 --> 00:00:30,026
increasing nuisance.

7
00:00:31,776 --> 00:00:33,316
Before we dive in, let's take a

8
00:00:33,316 --> 00:00:34,496
look at what happens when we

9
00:00:34,496 --> 00:00:36,476
receive an unwanted SMS message

10
00:00:36,476 --> 00:00:37,906
in iOS 10.3.

11
00:00:41,046 --> 00:00:42,066
Here we see what is pretty

12
00:00:42,066 --> 00:00:44,066
obviously an unwanted, spam SMS.

13
00:00:45,296 --> 00:00:46,666
Messages like this are annoying

14
00:00:46,666 --> 00:00:48,346
for users since they play a tone

15
00:00:48,346 --> 00:00:49,856
or vibrate just like a normal

16
00:00:49,856 --> 00:00:50,536
message and distract from

17
00:00:50,536 --> 00:00:50,976
whatever you're doing.

18
00:00:55,576 --> 00:00:57,116
And if I launch messages it's

19
00:00:57,116 --> 00:00:58,656
right there at the top, mixed in

20
00:00:58,656 --> 00:00:59,946
with my real messages and

21
00:00:59,946 --> 00:01:00,936
cluttering up the list.

22
00:01:01,966 --> 00:01:03,616
Unfortunately some iPhone users

23
00:01:03,616 --> 00:01:05,025
get a lot of these messages and

24
00:01:05,025 --> 00:01:06,086
they would love to have a way to

25
00:01:06,086 --> 00:01:06,726
filter them out.

26
00:01:07,786 --> 00:01:09,926
With iOS 11 we are introducing

27
00:01:09,926 --> 00:01:11,356
APIs to allow your app to

28
00:01:11,356 --> 00:01:13,196
analyze the sender and content

29
00:01:13,196 --> 00:01:15,336
of any SMS or MMS message from

30
00:01:15,336 --> 00:01:17,046
an unknown sender and attempt to

31
00:01:17,046 --> 00:01:18,156
filter out those which are

32
00:01:18,156 --> 00:01:18,776
unsolicited.

33
00:01:18,866 --> 00:01:19,936
Let me show you how it works.

34
00:01:23,046 --> 00:01:24,756
Here on my iPhone running iOS 11

35
00:01:25,356 --> 00:01:26,546
I'll launch the New Messages

36
00:01:26,546 --> 00:01:26,756
app.

37
00:01:27,806 --> 00:01:29,036
And since I've already installed

38
00:01:29,036 --> 00:01:30,556
a Message Filter app extension

39
00:01:30,746 --> 00:01:32,736
and enabled it in settings I now

40
00:01:32,736 --> 00:01:34,696
see a second tab called SMS

41
00:01:34,696 --> 00:01:34,976
Junk.

42
00:01:35,376 --> 00:01:36,966
And if I get a message which the

43
00:01:36,966 --> 00:01:38,726
app believes is junk it'll only

44
00:01:38,726 --> 00:01:39,716
appear under that tab.

45
00:01:41,476 --> 00:01:42,726
Ah, there's a new message now.

46
00:01:43,016 --> 00:01:43,806
Let's see what it is.

47
00:01:46,146 --> 00:01:47,316
This is the same message as

48
00:01:47,316 --> 00:01:49,156
before, but now it no longer

49
00:01:49,156 --> 00:01:50,466
appears in the regular list with

50
00:01:50,466 --> 00:01:52,056
my known contacts and doesn't

51
00:01:52,056 --> 00:01:53,406
distract me with a sound or

52
00:01:53,406 --> 00:01:54,056
notification.

53
00:01:56,046 --> 00:01:57,986
And if I tap to read it I can

54
00:01:57,986 --> 00:01:59,266
see from the label at the bottom

55
00:01:59,496 --> 00:02:00,576
that it was marked as junk by an

56
00:02:00,576 --> 00:02:00,966
app called Filter It.

57
00:02:05,226 --> 00:02:06,516
Now there are a few reasons why

58
00:02:06,516 --> 00:02:07,536
we decided to add this

59
00:02:07,536 --> 00:02:08,166
functionality.

60
00:02:09,726 --> 00:02:11,246
Unwanted messages, which include

61
00:02:11,246 --> 00:02:13,306
any unsolicited or spam messages

62
00:02:13,306 --> 00:02:15,036
a user receives, have been an

63
00:02:15,036 --> 00:02:16,536
increasing nuisance for users in

64
00:02:16,536 --> 00:02:17,226
the recent years.

65
00:02:18,396 --> 00:02:19,856
But beyond the annoyance, what's

66
00:02:19,856 --> 00:02:21,286
more concerning is that often

67
00:02:21,286 --> 00:02:22,506
these messages are phishing

68
00:02:22,506 --> 00:02:24,186
attempts and include links which

69
00:02:24,186 --> 00:02:25,076
may harm users.

70
00:02:25,756 --> 00:02:27,016
So of course we want to prevent

71
00:02:27,016 --> 00:02:28,036
these messages from being

72
00:02:28,036 --> 00:02:29,316
delivered whenever possible.

73
00:02:30,106 --> 00:02:31,506
Now there's an important

74
00:02:31,506 --> 00:02:32,866
difference worth noting between

75
00:02:32,976 --> 00:02:34,626
iMessage and SMS and MMS

76
00:02:34,626 --> 00:02:35,166
messages.

77
00:02:36,096 --> 00:02:38,016
For iMessage we offer the report

78
00:02:38,016 --> 00:02:39,976
as Junk Service on-device since

79
00:02:39,976 --> 00:02:41,586
those messages are encrypted end

80
00:02:41,586 --> 00:02:43,156
to end and delivered over the

81
00:02:43,156 --> 00:02:43,896
iMessage network.

82
00:02:43,896 --> 00:02:45,786
But we don't have the ability to

83
00:02:45,786 --> 00:02:47,696
do this for SMS or MMSs since

84
00:02:47,996 --> 00:02:49,476
they are delivered directly from

85
00:02:49,476 --> 00:02:50,936
a wireless carrier to a user's

86
00:02:50,936 --> 00:02:51,446
device.

87
00:02:52,076 --> 00:02:53,116
So the filtering of these

88
00:02:53,116 --> 00:02:54,586
messages must happen locally

89
00:02:54,586 --> 00:02:55,686
rather than on a centralized

90
00:02:55,686 --> 00:02:57,196
server, and that's where these

91
00:02:57,196 --> 00:02:58,096
new APIs come in.

92
00:02:59,486 --> 00:03:00,906
Finally, we've heard that many

93
00:03:00,906 --> 00:03:02,436
of you have developed expertise

94
00:03:02,436 --> 00:03:03,946
in analyzing messages and

95
00:03:03,946 --> 00:03:04,896
detecting which ones are

96
00:03:04,896 --> 00:03:06,566
unwanted and we're excited to

97
00:03:06,566 --> 00:03:07,816
invite apps to help with this

98
00:03:07,816 --> 00:03:07,976
task.

99
00:03:11,046 --> 00:03:11,926
So for the remainder of this

100
00:03:11,926 --> 00:03:13,516
session I'll cover a few areas

101
00:03:13,516 --> 00:03:13,936
in detail.

102
00:03:15,376 --> 00:03:16,636
First I'll walk through the

103
00:03:16,636 --> 00:03:18,176
details of what we call Message

104
00:03:18,176 --> 00:03:19,476
Filter Extensions and show how

105
00:03:19,476 --> 00:03:19,816
they work.

106
00:03:21,806 --> 00:03:23,086
Next I'll talk about some

107
00:03:23,086 --> 00:03:24,356
important considerations around

108
00:03:24,356 --> 00:03:26,106
privacy since these extensions

109
00:03:26,106 --> 00:03:27,416
come with some special rules.

110
00:03:28,806 --> 00:03:29,996
Then I'll talk about how an

111
00:03:29,996 --> 00:03:31,046
extension can check with a

112
00:03:31,046 --> 00:03:32,536
network-backed service, which

113
00:03:32,536 --> 00:03:35,356
some apps might find useful and

114
00:03:35,356 --> 00:03:36,486
I'll show a couple of demos

115
00:03:36,486 --> 00:03:38,076
along the way through creating

116
00:03:38,076 --> 00:03:39,006
one of these extensions in

117
00:03:39,006 --> 00:03:39,156
Xcode.

118
00:03:39,156 --> 00:03:39,976
So let's get started.

119
00:03:43,556 --> 00:03:44,606
The way this works is using

120
00:03:44,606 --> 00:03:46,196
something we call Message Filter

121
00:03:46,196 --> 00:03:46,806
Extensions.

122
00:03:47,196 --> 00:03:48,146
So let's talk about those

123
00:03:48,146 --> 00:03:48,596
in-depth.

124
00:03:50,266 --> 00:03:51,756
As the name implies, this is a

125
00:03:51,756 --> 00:03:53,276
new app extension type, which

126
00:03:53,276 --> 00:03:54,096
your app can include.

127
00:03:54,096 --> 00:03:57,206
The APIs for it are in a new

128
00:03:57,206 --> 00:03:58,976
framework in iOS-11 called

129
00:03:58,976 --> 00:03:59,816
Identity Look Up.

130
00:04:00,916 --> 00:04:02,436
Now once a user has installed an

131
00:04:02,436 --> 00:04:03,136
app with one of these

132
00:04:03,136 --> 00:04:05,086
extensions, to begin using it

133
00:04:05,126 --> 00:04:06,206
they must first enable the

134
00:04:06,206 --> 00:04:07,776
extension in Messages Settings.

135
00:04:09,226 --> 00:04:10,426
Only one extension can be

136
00:04:10,426 --> 00:04:12,226
enabled at a time, or if the

137
00:04:12,226 --> 00:04:13,336
user wants to disable the

138
00:04:13,336 --> 00:04:14,736
feature they can choose None.

139
00:04:15,636 --> 00:04:17,396
And once it's enabled that

140
00:04:17,396 --> 00:04:19,076
extension is invoked every time

141
00:04:19,076 --> 00:04:20,736
an SMS or MMS message is

142
00:04:20,736 --> 00:04:22,156
received from an unknown sender.

143
00:04:23,196 --> 00:04:24,436
And there is some other criteria

144
00:04:24,436 --> 00:04:25,836
used when deciding when to send

145
00:04:25,836 --> 00:04:26,936
a message to the extension,

146
00:04:27,116 --> 00:04:28,026
which I'll discuss in a few

147
00:04:28,026 --> 00:04:28,396
minutes.

148
00:04:28,616 --> 00:04:29,686
Let's walk through a diagram

149
00:04:29,686 --> 00:04:30,736
showing the overall flow.

150
00:04:31,976 --> 00:04:33,116
When a message is received by

151
00:04:33,116 --> 00:04:34,616
the phone it starts in the

152
00:04:34,616 --> 00:04:37,386
Messages app and if it is an SMS

153
00:04:37,386 --> 00:04:39,296
or MMS and it's from a sender

154
00:04:39,296 --> 00:04:40,436
which isn't in the recipient's

155
00:04:40,436 --> 00:04:42,546
contacts, then the extension,

156
00:04:42,546 --> 00:04:43,626
which the user selected in

157
00:04:43,626 --> 00:04:45,076
Settings will be launched and

158
00:04:45,076 --> 00:04:46,216
will be passed the messages

159
00:04:46,216 --> 00:04:48,146
sender and body via an object

160
00:04:48,146 --> 00:04:50,296
called IL Message Filter Query

161
00:04:50,296 --> 00:04:51,826
Request, which is part of the

162
00:04:51,826 --> 00:04:52,996
identity look-up framework.

163
00:04:54,546 --> 00:04:55,886
When the extension receives this

164
00:04:56,046 --> 00:04:57,506
it begins examining the message,

165
00:04:57,726 --> 00:04:58,876
looking at the sender or the

166
00:04:58,876 --> 00:05:00,346
body of the message, or both,

167
00:05:00,866 --> 00:05:02,036
and it might check against a

168
00:05:02,036 --> 00:05:03,986
known list of bad phone numbers

169
00:05:04,436 --> 00:05:05,446
or it could look for a

170
00:05:05,446 --> 00:05:06,826
suspicious looking web link in

171
00:05:06,826 --> 00:05:08,086
the body, whatever is

172
00:05:08,086 --> 00:05:08,536
appropriate.

173
00:05:09,256 --> 00:05:10,666
Ultimately the extension has to

174
00:05:10,666 --> 00:05:12,736
form a response using an object

175
00:05:12,736 --> 00:05:14,786
called IL Message Filter Query

176
00:05:14,786 --> 00:05:16,786
Response, describing whether to

177
00:05:16,786 --> 00:05:19,026
allow or filter the message, and

178
00:05:19,026 --> 00:05:19,966
it sends this back to the

179
00:05:19,966 --> 00:05:20,586
Messages app.

180
00:05:21,686 --> 00:05:23,166
And once it receives a response,

181
00:05:23,476 --> 00:05:24,656
Messages will either alert the

182
00:05:24,656 --> 00:05:26,346
user normally or suppress the

183
00:05:26,346 --> 00:05:27,586
notification and move the

184
00:05:27,586 --> 00:05:28,966
message thread to the Junk tab.

185
00:05:33,226 --> 00:05:34,346
So that's a basic overview of

186
00:05:34,346 --> 00:05:36,226
how it works and before we go on

187
00:05:36,256 --> 00:05:37,346
I'd like to touch on a very

188
00:05:37,346 --> 00:05:38,946
important topic, and that's user

189
00:05:38,946 --> 00:05:39,386
privacy.

190
00:05:40,886 --> 00:05:41,956
We thought a lot about how to

191
00:05:41,956 --> 00:05:43,236
maintain the strong level of

192
00:05:43,296 --> 00:05:45,026
privacy Apple customers expect,

193
00:05:45,546 --> 00:05:46,946
but also allow them to enable

194
00:05:46,946 --> 00:05:48,136
this if they want to confront

195
00:05:48,136 --> 00:05:49,446
this persistent problem of

196
00:05:49,446 --> 00:05:50,466
unwanted messages.

197
00:05:51,036 --> 00:05:52,476
So there are a few special rules

198
00:05:52,476 --> 00:05:53,906
that extensions must comply with

199
00:05:53,996 --> 00:05:54,876
when using this API.

200
00:05:57,046 --> 00:05:58,446
The first rule is that a message

201
00:05:58,446 --> 00:05:59,706
recipient's phone number is

202
00:05:59,706 --> 00:06:02,166
never sent to an extension, only

203
00:06:02,166 --> 00:06:03,406
the sender's phone number or

204
00:06:03,406 --> 00:06:04,996
email address is included, since

205
00:06:04,996 --> 00:06:05,706
that's all that should be

206
00:06:05,706 --> 00:06:07,006
required to make a decision

207
00:06:07,006 --> 00:06:07,986
about whether to filter a

208
00:06:07,986 --> 00:06:08,466
message.

209
00:06:09,506 --> 00:06:10,736
Another key rule is that a

210
00:06:10,736 --> 00:06:12,176
message filter extension can

211
00:06:12,176 --> 00:06:13,536
never export the contents of

212
00:06:13,536 --> 00:06:14,866
messages outside its container,

213
00:06:14,866 --> 00:06:16,836
and these extensions have some

214
00:06:16,836 --> 00:06:18,166
additional restrictions because

215
00:06:18,166 --> 00:06:18,546
of this.

216
00:06:19,666 --> 00:06:20,706
They cannot write to files

217
00:06:20,706 --> 00:06:21,926
shared with their containing app

218
00:06:22,706 --> 00:06:23,976
and they cannot perform network

219
00:06:23,976 --> 00:06:24,606
operations.

220
00:06:25,576 --> 00:06:26,706
The reason for this is that,

221
00:06:26,706 --> 00:06:27,956
although some messages may be

222
00:06:27,956 --> 00:06:29,926
unwanted junk, others may be

223
00:06:29,926 --> 00:06:31,046
legitimate and be sent from

224
00:06:31,046 --> 00:06:32,316
someone who's just not on the

225
00:06:32,316 --> 00:06:33,636
recipient's contacts yet.

226
00:06:34,156 --> 00:06:35,476
So then it's imperative that all

227
00:06:35,476 --> 00:06:36,926
the messages be kept private and

228
00:06:36,926 --> 00:06:38,756
never exported in any way that

229
00:06:38,756 --> 00:06:40,316
reveals more about the recipient

230
00:06:40,356 --> 00:06:41,266
than what is contained in the

231
00:06:41,266 --> 00:06:42,036
message itself.

232
00:06:43,976 --> 00:06:44,956
Although they can't perform

233
00:06:44,956 --> 00:06:46,696
networking themselves, it is

234
00:06:46,696 --> 00:06:48,096
possible for these extensions to

235
00:06:48,096 --> 00:06:49,666
defer a request to their server

236
00:06:49,666 --> 00:06:51,246
indirectly, and when an

237
00:06:51,246 --> 00:06:53,666
extension requests to defer iOS

238
00:06:53,666 --> 00:06:54,936
will make a web request on the

239
00:06:54,936 --> 00:06:56,546
extension's behalf in a secure

240
00:06:56,546 --> 00:06:56,836
way.

241
00:06:57,496 --> 00:06:58,476
We'll see an example of that

242
00:06:58,476 --> 00:06:58,776
later.

243
00:06:59,726 --> 00:07:01,146
The main thing to keep in mind

244
00:07:01,326 --> 00:07:02,576
is that your extension should

245
00:07:02,576 --> 00:07:04,396
never export messages outside of

246
00:07:04,396 --> 00:07:05,736
its container to maintain user

247
00:07:05,736 --> 00:07:05,976
privacy.

248
00:07:10,046 --> 00:07:11,046
Now there is some specific

249
00:07:11,046 --> 00:07:12,506
criteria that the Messages app

250
00:07:12,506 --> 00:07:14,136
uses to decide whether or not to

251
00:07:14,136 --> 00:07:15,526
send a given message to an

252
00:07:15,526 --> 00:07:16,066
extension.

253
00:07:17,086 --> 00:07:18,776
First, this feature is only used

254
00:07:18,776 --> 00:07:21,026
with SMS and MMS messages and

255
00:07:21,026 --> 00:07:22,056
never with iMessage.

256
00:07:22,856 --> 00:07:24,526
As I mentioned earlier, unwanted

257
00:07:24,626 --> 00:07:25,996
iMessages are handled using a

258
00:07:25,996 --> 00:07:27,386
different mechanism, so this

259
00:07:27,386 --> 00:07:28,916
only applies to SMS and MMS.

260
00:07:31,046 --> 00:07:32,206
As I've mentioned a few times,

261
00:07:32,396 --> 00:07:34,176
only unknown senders, or those

262
00:07:34,176 --> 00:07:35,246
which are not in the recipient's

263
00:07:35,246 --> 00:07:36,886
contacts are actually sent to

264
00:07:36,886 --> 00:07:38,216
the extension for analysis.

265
00:07:39,156 --> 00:07:41,496
If a sender is in Contacts we

266
00:07:41,496 --> 00:07:42,786
assume that that recipient knows

267
00:07:42,786 --> 00:07:44,866
the sender and wants to receive

268
00:07:44,866 --> 00:07:45,676
messages from them.

269
00:07:46,296 --> 00:07:47,356
That also means that if a

270
00:07:47,356 --> 00:07:48,956
message is ever miscategorized

271
00:07:48,956 --> 00:07:50,706
as junk then the user can add

272
00:07:50,706 --> 00:07:52,146
that sender to their contacts to

273
00:07:52,146 --> 00:07:53,406
ensure they aren't filtered out

274
00:07:53,406 --> 00:07:53,926
in the future.

275
00:07:55,446 --> 00:07:57,136
Also, if a user is exchanging

276
00:07:57,136 --> 00:07:58,436
messages with someone who is not

277
00:07:58,436 --> 00:08:00,346
in their Contacts and they reply

278
00:08:00,346 --> 00:08:01,906
to that thread multiple times,

279
00:08:02,446 --> 00:08:03,786
then we will stop sending any

280
00:08:03,786 --> 00:08:05,046
subsequent messages in that

281
00:08:05,046 --> 00:08:06,156
thread to the extension.

282
00:08:07,006 --> 00:08:09,036
Or, if the user replies multiple

283
00:08:09,036 --> 00:08:10,196
times to a thread, which is

284
00:08:10,196 --> 00:08:12,086
already marked as junk, that

285
00:08:12,086 --> 00:08:13,196
thread will be restored to the

286
00:08:13,196 --> 00:08:14,026
non-junk tab.

287
00:08:15,136 --> 00:08:16,496
Responding multiple times is

288
00:08:16,496 --> 00:08:17,886
interpreted as a signal from the

289
00:08:17,886 --> 00:08:19,276
recipient that they really do

290
00:08:19,276 --> 00:08:20,386
want to be communicating with

291
00:08:20,386 --> 00:08:20,806
the sender.

292
00:08:22,256 --> 00:08:23,716
So all of this criteria doesn't

293
00:08:23,716 --> 00:08:25,746
directly affect the API, but it

294
00:08:25,746 --> 00:08:27,336
is something you, as a developer

295
00:08:27,336 --> 00:08:28,386
of one of these extensions,

296
00:08:28,386 --> 00:08:29,876
should be aware of when testing

297
00:08:29,876 --> 00:08:30,916
or troubleshooting your app.

298
00:08:35,046 --> 00:08:36,176
So now I'd like to show a demo

299
00:08:36,176 --> 00:08:37,726
in Xcode of how you can create a

300
00:08:37,726 --> 00:08:38,926
message filter extension.

301
00:08:40,736 --> 00:08:42,006
Here we have an app I've made

302
00:08:42,035 --> 00:08:43,765
called Filter It and I'd like to

303
00:08:43,765 --> 00:08:45,206
add a message filter extension.

304
00:08:47,126 --> 00:08:48,496
The first thing I need to do is

305
00:08:48,496 --> 00:08:48,976
add a new target.

306
00:08:53,046 --> 00:08:53,776
And I'll choose the new message

307
00:08:53,776 --> 00:08:56,526
filter template for iOS and I'll

308
00:08:56,526 --> 00:08:56,976
give it a name.

309
00:09:03,046 --> 00:09:04,336
I've got a new file added to my

310
00:09:04,376 --> 00:09:05,576
project now called

311
00:09:05,876 --> 00:09:07,276
messagefiltereextension.swift.

312
00:09:07,276 --> 00:09:08,976
Now let's take a look at that.

313
00:09:20,106 --> 00:09:21,176
The first thing we see is a

314
00:09:21,176 --> 00:09:22,826
method called Handle Query

315
00:09:22,826 --> 00:09:24,916
Request with Context and this is

316
00:09:24,916 --> 00:09:26,376
called on our extension so that

317
00:09:26,376 --> 00:09:27,516
it can examine the incoming

318
00:09:27,516 --> 00:09:29,126
message and return a response

319
00:09:29,196 --> 00:09:30,356
using the completion handler.

320
00:09:33,286 --> 00:09:34,416
Now the template is structured

321
00:09:34,416 --> 00:09:36,056
to first attempt an offline

322
00:09:36,056 --> 00:09:37,926
check using this method, called

323
00:09:38,206 --> 00:09:40,106
Offline Action for Query Request

324
00:09:41,936 --> 00:09:43,326
and it returns an action which

325
00:09:43,326 --> 00:09:45,356
is either allow, filter, or

326
00:09:45,356 --> 00:09:45,686
none.

327
00:09:48,366 --> 00:09:49,756
So for this demo what we need to

328
00:09:49,756 --> 00:09:51,366
do is customize this offline

329
00:09:51,366 --> 00:09:52,366
action helper method.

330
00:09:52,966 --> 00:09:53,736
Let's look at what it does

331
00:09:53,736 --> 00:09:53,966
currently.

332
00:09:58,046 --> 00:09:59,236
Right now it always returns

333
00:09:59,236 --> 00:10:01,196
none, but I'll replace that with

334
00:10:01,196 --> 00:10:02,736
some simple logic to always

335
00:10:02,736 --> 00:10:04,176
filter if the message contains

336
00:10:04,216 --> 00:10:04,976
the word junk.

337
00:10:09,656 --> 00:10:10,896
In a real extension this could

338
00:10:10,896 --> 00:10:12,326
do something more sophisticated,

339
00:10:12,506 --> 00:10:14,716
but this works for now and

340
00:10:14,716 --> 00:10:15,746
that's all it takes to create a

341
00:10:15,746 --> 00:10:17,476
simple, offline only, message

342
00:10:17,476 --> 00:10:17,976
filter extension.

343
00:10:22,196 --> 00:10:23,366
Now although some apps may be

344
00:10:23,366 --> 00:10:24,826
able to do most or all of their

345
00:10:24,826 --> 00:10:27,046
checking offline, other apps may

346
00:10:27,046 --> 00:10:28,256
find it useful to check with a

347
00:10:28,256 --> 00:10:29,686
network server whether to filter

348
00:10:29,686 --> 00:10:30,466
messages or not.

349
00:10:30,866 --> 00:10:32,116
So next I'd like to talk about

350
00:10:32,116 --> 00:10:32,916
network deferral.

351
00:10:34,626 --> 00:10:36,286
The best way to show how network

352
00:10:36,286 --> 00:10:37,706
deferral works is with another

353
00:10:37,706 --> 00:10:38,196
diagram.

354
00:10:39,616 --> 00:10:41,236
As before, when a message is

355
00:10:41,236 --> 00:10:42,536
received it starts in the

356
00:10:42,536 --> 00:10:44,076
Messages app and is sent to the

357
00:10:44,076 --> 00:10:46,736
chosen extension, but this time

358
00:10:46,856 --> 00:10:48,226
the extension chooses to defer

359
00:10:48,226 --> 00:10:49,366
this request to its network

360
00:10:49,366 --> 00:10:51,356
server, whose URL is specified

361
00:10:51,356 --> 00:10:52,606
in its info.plist.

362
00:10:53,406 --> 00:10:54,976
So it tells Messages to defer

363
00:10:55,376 --> 00:10:57,136
and Messages then makes a JSON

364
00:10:57,136 --> 00:10:58,896
request to that server URL.

365
00:11:00,166 --> 00:11:01,436
The server then examines the

366
00:11:01,436 --> 00:11:02,866
Messages contents inside the

367
00:11:02,866 --> 00:11:04,876
JSON request and can respond in

368
00:11:04,876 --> 00:11:06,886
any format it wants and that

369
00:11:06,886 --> 00:11:08,446
response is handed right back to

370
00:11:08,446 --> 00:11:09,066
the extension.

371
00:11:10,026 --> 00:11:11,476
And from here, the extension

372
00:11:11,476 --> 00:11:12,476
reads the response from the

373
00:11:12,476 --> 00:11:14,836
server and finally returns an IL

374
00:11:14,836 --> 00:11:16,566
message filter query response

375
00:11:16,566 --> 00:11:16,976
back to Messages.

376
00:11:22,326 --> 00:11:23,466
There are a few restrictions to

377
00:11:23,466 --> 00:11:24,846
be aware of when using network

378
00:11:24,846 --> 00:11:25,266
deferral.

379
00:11:26,366 --> 00:11:27,976
First, the deferred network

380
00:11:27,976 --> 00:11:29,876
requests contain no personally

381
00:11:29,876 --> 00:11:31,556
identifiable information about

382
00:11:31,556 --> 00:11:32,926
the recipient of the message.

383
00:11:35,296 --> 00:11:36,926
The network URL is hardcoded

384
00:11:36,926 --> 00:11:38,426
statically into the extension's

385
00:11:38,456 --> 00:11:40,836
info.plist file under a key

386
00:11:40,836 --> 00:11:42,616
called IL Message Filter

387
00:11:42,616 --> 00:11:44,166
Extension Network URL.

388
00:11:44,766 --> 00:11:46,046
So it cannot vary between

389
00:11:46,046 --> 00:11:47,706
requests or for individual

390
00:11:47,706 --> 00:11:47,976
users.

391
00:11:53,066 --> 00:11:55,176
All URLs must be secure https

392
00:11:55,176 --> 00:11:56,726
and the server must be

393
00:11:56,726 --> 00:11:58,106
configured such that it doesn't

394
00:11:58,106 --> 00:11:59,666
require any app transport

395
00:11:59,666 --> 00:12:01,786
security, or ATS, overrides

396
00:12:02,116 --> 00:12:02,896
since there's no way to

397
00:12:02,896 --> 00:12:04,586
configure them.

398
00:12:05,686 --> 00:12:07,426
Also, this feature requires that

399
00:12:07,426 --> 00:12:09,276
both your app and server use the

400
00:12:09,276 --> 00:12:11,786
associated domains, or Apple App

401
00:12:11,786 --> 00:12:13,866
Site Association Feature, which

402
00:12:13,866 --> 00:12:14,986
is something you may be familiar

403
00:12:14,986 --> 00:12:16,796
with if you've adopted other iOS

404
00:12:16,796 --> 00:12:18,186
features like App Links or

405
00:12:18,186 --> 00:12:19,326
Shared Web Credentials.

406
00:12:20,906 --> 00:12:22,226
And for more information, see

407
00:12:22,226 --> 00:12:23,906
the session; Seamless Linking to

408
00:12:23,906 --> 00:12:26,496
Your App from WWDC2015.

409
00:12:26,986 --> 00:12:29,516
And the last restriction to be

410
00:12:29,516 --> 00:12:31,106
aware of is that any cookies

411
00:12:31,106 --> 00:12:32,346
that the webserver attempt to

412
00:12:32,346 --> 00:12:33,666
set will be ignored to maintain

413
00:12:33,666 --> 00:12:33,976
privacy.

414
00:12:38,216 --> 00:12:39,566
The request made to the network

415
00:12:39,566 --> 00:12:41,526
server is formatted using JSON

416
00:12:41,896 --> 00:12:43,166
and includes the same things

417
00:12:43,166 --> 00:12:44,606
which are in the IL Message

418
00:12:44,606 --> 00:12:46,176
Filter Query Request Object

419
00:12:46,456 --> 00:12:48,226
including the message sender,

420
00:12:48,496 --> 00:12:49,846
which is a phone number or email

421
00:12:49,846 --> 00:12:51,856
address, and the message body.

422
00:12:53,196 --> 00:12:54,856
The request also includes the

423
00:12:54,856 --> 00:12:56,296
version of your app, which is

424
00:12:56,296 --> 00:12:57,956
the CF Bundle Version Key from

425
00:12:57,956 --> 00:12:59,406
the app's info.plist.

426
00:13:00,356 --> 00:13:01,966
This may be useful in cases you

427
00:13:01,966 --> 00:13:02,926
have -- in case you have

428
00:13:02,926 --> 00:13:04,406
released several versions of

429
00:13:04,406 --> 00:13:05,186
your app with different

430
00:13:05,186 --> 00:13:06,746
capabilities and need to format

431
00:13:06,746 --> 00:13:08,176
the response to insure that

432
00:13:08,176 --> 00:13:09,436
particular version of the app

433
00:13:09,436 --> 00:13:11,066
can understand it.

434
00:13:11,706 --> 00:13:12,896
And we include the version of

435
00:13:12,896 --> 00:13:14,706
the JSON request format itself,

436
00:13:14,806 --> 00:13:15,726
which is currently one.

437
00:13:17,386 --> 00:13:18,826
Now, unlike the request format,

438
00:13:19,286 --> 00:13:20,916
the response format is entirely

439
00:13:20,916 --> 00:13:22,576
up to your app to define and

440
00:13:22,576 --> 00:13:23,876
doesn't necessarily have to be

441
00:13:23,876 --> 00:13:24,326
JSON.

442
00:13:25,156 --> 00:13:26,766
The response body is passed back

443
00:13:26,766 --> 00:13:28,196
to your extension to parse, so

444
00:13:28,196 --> 00:13:29,406
there are not requirements about

445
00:13:29,406 --> 00:13:29,856
its format.

446
00:13:33,046 --> 00:13:34,086
And here's a quick look at the

447
00:13:34,086 --> 00:13:35,726
JSON request format, and you can

448
00:13:35,726 --> 00:13:36,696
see it includes all of the info

449
00:13:36,696 --> 00:13:36,976
I mentioned.

450
00:13:44,066 --> 00:13:45,246
Now, let's go back to my Filter

451
00:13:45,246 --> 00:13:46,776
It app and add network deferral

452
00:13:46,776 --> 00:13:47,956
capability to the extension.

453
00:13:52,316 --> 00:13:53,536
If we take another look at the

454
00:13:53,536 --> 00:13:55,166
Handle Query Request method from

455
00:13:55,166 --> 00:13:57,266
earlier we can now see that,

456
00:13:57,306 --> 00:13:58,526
after the offline check is

457
00:13:58,526 --> 00:14:00,336
performed, if the action it

458
00:14:00,336 --> 00:14:02,376
returned was none and it falls

459
00:14:02,376 --> 00:14:03,656
into this case of the switch

460
00:14:03,656 --> 00:14:05,376
statement, we assume that this

461
00:14:05,376 --> 00:14:06,746
query request could not be

462
00:14:06,746 --> 00:14:08,446
handled using only an offline

463
00:14:08,446 --> 00:14:09,996
check and actually needs to

464
00:14:09,996 --> 00:14:11,436
consult our network server to

465
00:14:11,436 --> 00:14:11,976
get an answer.

466
00:14:19,046 --> 00:14:20,506
To do this our code calls the

467
00:14:20,506 --> 00:14:22,726
defer query requests to network

468
00:14:22,726 --> 00:14:24,706
method on our extension context

469
00:14:25,506 --> 00:14:26,766
and this causes a network

470
00:14:26,766 --> 00:14:27,906
request to be made on our

471
00:14:27,906 --> 00:14:29,606
extension's behalf, which will

472
00:14:29,606 --> 00:14:31,096
call this completion block

473
00:14:31,096 --> 00:14:32,006
asynchronously when it

474
00:14:32,006 --> 00:14:32,516
completes.

475
00:14:33,736 --> 00:14:35,456
Inside the completion block, if

476
00:14:35,456 --> 00:14:36,466
there was a response from the

477
00:14:36,466 --> 00:14:37,776
network and there wasn't an

478
00:14:37,776 --> 00:14:39,686
error, we use another helper

479
00:14:39,686 --> 00:14:41,686
method called Action for Network

480
00:14:41,686 --> 00:14:43,566
Response to translate it into an

481
00:14:43,566 --> 00:14:43,966
action.

482
00:14:44,566 --> 00:14:45,506
Let's jump to that method and

483
00:14:45,506 --> 00:14:45,976
see what it does.

484
00:14:51,046 --> 00:14:52,236
Just like with the offline check

485
00:14:52,236 --> 00:14:53,816
helper method this method

486
00:14:53,816 --> 00:14:55,726
defaults to returning none, but

487
00:14:55,726 --> 00:14:57,136
let's customize that to parse

488
00:14:57,136 --> 00:14:58,366
the response from our server.

489
00:14:59,766 --> 00:15:01,116
I'll assume the server returns

490
00:15:01,116 --> 00:15:02,586
JSON, although it doesn't have

491
00:15:02,646 --> 00:15:04,326
to, and I'll use the new

492
00:15:04,326 --> 00:15:06,066
Foundation Decoding APIs in

493
00:15:06,066 --> 00:15:07,976
Swift 4 to decode the response.

494
00:15:09,426 --> 00:15:10,526
I'll paste some code I've

495
00:15:10,586 --> 00:15:12,246
already written to do this, but

496
00:15:12,246 --> 00:15:12,976
let's briefly walk through it.

497
00:15:19,546 --> 00:15:21,406
I first define a struct, which

498
00:15:21,406 --> 00:15:22,966
describes the JSON format that

499
00:15:22,966 --> 00:15:26,446
my server returns, then I create

500
00:15:26,446 --> 00:15:29,556
a JSON decoder instance and I

501
00:15:29,556 --> 00:15:31,236
use it to decode the data from

502
00:15:31,236 --> 00:15:32,856
the network as an instance of

503
00:15:32,856 --> 00:15:33,346
the struct.

504
00:15:34,946 --> 00:15:37,006
Finally I return the action,

505
00:15:37,006 --> 00:15:38,456
which was decoded, and store it

506
00:15:38,456 --> 00:15:38,976
in the struct.

507
00:15:43,046 --> 00:15:44,076
And if there were any errors I

508
00:15:44,076 --> 00:15:44,876
handle them below.

509
00:15:48,046 --> 00:15:49,736
And return the default response

510
00:15:49,736 --> 00:15:49,966
of none.

511
00:15:54,096 --> 00:15:55,526
And just like that we've added

512
00:15:55,526 --> 00:15:57,066
network deferral support to our

513
00:15:57,066 --> 00:15:58,616
message filter app extension.

514
00:15:59,196 --> 00:16:00,986
So it now supports both offline

515
00:16:01,186 --> 00:16:02,726
and network checking of incoming

516
00:16:02,726 --> 00:16:02,966
messages.

517
00:16:07,266 --> 00:16:08,956
So that's how your app can help

518
00:16:08,956 --> 00:16:10,626
filter unwanted messages using

519
00:16:10,626 --> 00:16:11,656
the new message filter

520
00:16:11,656 --> 00:16:13,296
extensions and identity look up

521
00:16:13,296 --> 00:16:14,586
framework in iOS 11.

522
00:16:15,816 --> 00:16:17,166
We've tried to strike a balance

523
00:16:17,166 --> 00:16:19,136
between user privacy and solving

524
00:16:19,136 --> 00:16:20,636
a very pressing need our users

525
00:16:20,636 --> 00:16:20,916
have.

526
00:16:21,386 --> 00:16:22,926
And the result is a powerful new

527
00:16:22,926 --> 00:16:25,196
API your app can use, but it is

528
00:16:25,196 --> 00:16:26,616
subject to some special rules

529
00:16:26,616 --> 00:16:27,466
you need to be aware of.

530
00:16:28,666 --> 00:16:30,596
So please, download the new STK,

531
00:16:31,076 --> 00:16:32,366
check out the new identity look

532
00:16:32,366 --> 00:16:33,906
up framework, and try making a

533
00:16:33,906 --> 00:16:35,456
message filter extension filter

534
00:16:37,446 --> 00:16:37,566
today.

535
00:16:38,576 --> 00:16:40,086
For more information see this

536
00:16:40,086 --> 00:16:41,436
link for the Sessions page on

537
00:16:41,436 --> 00:16:43,066
the official WWDC site.

538
00:16:45,906 --> 00:16:46,906
We do have a few related

539
00:16:46,906 --> 00:16:47,806
sessions and this year's

540
00:16:47,806 --> 00:16:48,846
conference to mention.

541
00:16:49,196 --> 00:16:50,846
For more information about

542
00:16:50,846 --> 00:16:51,976
privacy practices on our

543
00:16:51,976 --> 00:16:54,166
platforms see the Privacy and

544
00:16:54,166 --> 00:16:55,706
Your Apps session happening in

545
00:16:55,706 --> 00:16:57,026
the Executive Ballroom on

546
00:16:57,026 --> 00:16:58,306
Tuesday at 11:20.

547
00:16:59,706 --> 00:17:01,026
And for more info about the new

548
00:17:01,026 --> 00:17:02,686
foundation and coding APIs I

549
00:17:02,686 --> 00:17:04,746
showed in my demo, see the new

550
00:17:04,886 --> 00:17:06,106
-- see the What's New in

551
00:17:06,106 --> 00:17:08,006
Foundation session in Hall Two

552
00:17:08,006 --> 00:17:09,086
on Wednesday at 11.

553
00:17:10,435 --> 00:17:13,486
Also, WWDC2015 had an excellent

554
00:17:13,486 --> 00:17:15,366
session called Seamless Linking

555
00:17:15,366 --> 00:17:16,816
to Your App, which walked

556
00:17:16,816 --> 00:17:18,185
through the associated domains

557
00:17:18,185 --> 00:17:19,415
feature which message filter

558
00:17:19,415 --> 00:17:20,846
extensions require when using

559
00:17:20,846 --> 00:17:21,586
network deferral.

560
00:17:22,195 --> 00:17:23,396
So check out that session in the

561
00:17:23,396 --> 00:17:24,906
archive for details about how to

562
00:17:24,906 --> 00:17:26,425
implement it in your app and on

563
00:17:26,425 --> 00:17:26,876
the server.

564
00:17:27,286 --> 00:17:27,976
Thanks so much for watching.

