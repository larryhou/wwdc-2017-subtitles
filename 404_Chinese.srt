1
00:00:20,654 --> 00:00:24,458
大家上午好
参加“Xcode 9调试功能”演讲

2
00:00:25,192 --> 00:00:27,728
我是Chris Miles
是一名Xcode工程师

3
00:00:27,794 --> 00:00:30,764
今天我们会讨论很多新调试功能

4
00:00:30,831 --> 00:00:32,665
让我们开始

5
00:00:34,034 --> 00:00:38,705
首先讨论不同设备上的开发和调试

6
00:00:39,339 --> 00:00:42,042
让我们看一个典型的开发配置

7
00:00:42,709 --> 00:00:44,278
一台运行Xcode的Mac计算机

8
00:00:44,444 --> 00:00:47,181
旁边是运行我们开发成果的设备

9
00:00:47,581 --> 00:00:51,018
用白色电缆连接

10
00:00:52,052 --> 00:00:56,223
这种配置已经沿用将近十年

11
00:00:56,490 --> 00:01:00,394
但是 现在越来越多的开发者
在使用他们的设备进行调试时

12
00:01:00,460 --> 00:01:02,763
需要具有更强的可移动性

13
00:01:03,297 --> 00:01:04,598
为了让工作变得更简单

14
00:01:04,665 --> 00:01:09,870
我自豪地宣布 随着Xcode 9的推出
将不再需要白色连接线

15
00:01:13,006 --> 00:01:15,742
（无线开发）

16
00:01:15,809 --> 00:01:19,947
现在 大家可以使用Wi-Fi
在设备上进行开发和调试

17
00:01:20,013 --> 00:01:22,115
我们称之为无线开发

18
00:01:24,785 --> 00:01:27,054
哪些人可以受益于无线开发？

19
00:01:27,321 --> 00:01:29,223
我们认为很多人都喜欢这项功能

20
00:01:29,289 --> 00:01:31,191
原因很明显

21
00:01:32,292 --> 00:01:35,262
随着本周ARKit的推出

22
00:01:35,329 --> 00:01:40,334
很多人迫不及待地
想要创建他们的增强现实应用

23
00:01:42,736 --> 00:01:44,004
在调试应用时

24
00:01:44,071 --> 00:01:45,839
你会拿着你的手机

25
00:01:45,906 --> 00:01:48,275
比以前更多地四处走动

26
00:01:48,342 --> 00:01:49,610
测试你的应用

27
00:01:49,943 --> 00:01:52,079
如果能够离开你的计算机
来完成这些工作

28
00:01:52,145 --> 00:01:55,182
将会让你感到更加轻松

29
00:01:56,750 --> 00:02:00,487
对于开发健身应用的人员来说

30
00:02:00,554 --> 00:02:03,624
测试和调试健身应用的最好方法

31
00:02:03,690 --> 00:02:05,158
是戴着设备亲自体验

32
00:02:06,093 --> 00:02:09,128
摆脱Mac计算机的束缚
会让这样工作变得更轻松

33
00:02:11,965 --> 00:02:14,201
对于开发穿戴设备应用的人员

34
00:02:14,868 --> 00:02:18,605
我很高兴告诉你们
只需将这些设备插到Lightning接口

35
00:02:18,672 --> 00:02:21,175
就可以在设备上进行调试了

36
00:02:25,145 --> 00:02:28,215
可穿戴式设备生产商
将会喜欢无线开发

37
00:02:29,283 --> 00:02:30,517
对于我们其他人来说

38
00:02:30,584 --> 00:02:34,588
无线开发会带来巨大的便利

39
00:02:34,755 --> 00:02:37,524
我们不需要随身带着数据线

40
00:02:37,591 --> 00:02:40,594
有时Lightning接口
会被用于其它目的

41
00:02:40,761 --> 00:02:45,132
但是现在可以连接到Wi-Fi网络

42
00:02:45,199 --> 00:02:48,335
在设备上进行开发和调试
将为我们带来极大的方便

43
00:02:49,903 --> 00:02:54,208
现在 不仅iOS开发者
可以享受这种便利

44
00:02:54,942 --> 00:02:58,345
我们还支持无线连接Apple TV

45
00:03:02,950 --> 00:03:08,255
因此Apple TV开发者也可通过
Wi-Fi在Apple TV上开发和调试

46
00:03:08,455 --> 00:03:12,693
对于Apple TV开发者来说
你们的起居室就是开发工作室

47
00:03:12,759 --> 00:03:14,828
你可以坐在大沙发上

48
00:03:14,895 --> 00:03:18,198
开发下一款
好玩的Apple TV游戏

49
00:03:19,299 --> 00:03:21,835
房间里不需要布线

50
00:03:21,902 --> 00:03:25,439
不会绊倒你的孩子
室友或小猫小狗

51
00:03:25,572 --> 00:03:28,876
Apple TV开发者
将会爱上无线开发

52
00:03:28,942 --> 00:03:32,546
我们希望看到你们
在自家的客厅

53
00:03:32,613 --> 00:03:34,381
悠闲地开发你的Apple TV游戏

54
00:03:40,420 --> 00:03:43,724
怎么才能够
享受无线开发的好处？

55
00:03:44,124 --> 00:03:45,459
你需要一台运行iOS11的iPhone

56
00:03:45,526 --> 00:03:48,161
iPad或iPod touch

57
00:03:48,929 --> 00:03:50,931
或运行tvOS 11的Apple TV

58
00:03:51,465 --> 00:03:55,669
在Mac计算机上 你只需要
macOS 10.12.4或更新版本

59
00:03:56,937 --> 00:03:58,272
工具支持方面的情况是怎样的？

60
00:03:59,206 --> 00:04:03,177
Xcode广泛支持
各种无线连接设备

61
00:04:03,243 --> 00:04:06,046
其实Xcode
对待无线连接设备的方式

62
00:04:06,113 --> 00:04:08,815
如同对待USB连接设备

63
00:04:08,882 --> 00:04:11,585
因此 所有设备操作都将会正常执行

64
00:04:11,652 --> 00:04:14,054
包括在设备上安装和运行应用

65
00:04:14,121 --> 00:04:15,789
调试你的应用

66
00:04:15,856 --> 00:04:18,591
可以使用所有高级调试功能

67
00:04:18,659 --> 00:04:20,494
例如V调试
Memory Graph调试

68
00:04:20,560 --> 00:04:22,296
和GP Frame调试

69
00:04:22,863 --> 00:04:25,432
设备配置工具可以正常工作

70
00:04:25,499 --> 00:04:28,569
其它一些工具也支持无线连接设备

71
00:04:28,635 --> 00:04:32,472
例如Accessibility Inspector、
Console和Configurator

72
00:04:35,609 --> 00:04:37,211
对于tvOS开发者

73
00:04:37,277 --> 00:04:41,582
Safari Web Inspector
支持无线连接的Apple TV

74
00:04:41,849 --> 00:04:44,551
因此 对于TVMLKit开发者来说
这是一个好消息

75
00:04:44,852 --> 00:04:49,089
另外QuickTime屏幕录像工具
也支持无线连接的Apple TV

76
00:04:51,458 --> 00:04:54,328
虽然我们将这些功能称为无线开发
但是严格来说

77
00:04:54,394 --> 00:04:57,464
这不限于通过Wi-Fi连接设备

78
00:04:58,265 --> 00:05:00,267
虽然Wi-Fi是现在流行的选择

79
00:05:00,834 --> 00:05:04,271
但是对于设备来说
以太网同样是理想的环境

80
00:05:04,671 --> 00:05:08,308
通过Wi-Fi和以太网

81
00:05:08,375 --> 00:05:12,846
混合式联网的设备和Mac计算机

82
00:05:12,913 --> 00:05:15,482
也能够完美地工作

83
00:05:18,652 --> 00:05:22,589
另外 还是像以前一样

84
00:05:22,656 --> 00:05:26,226
支持USB连接设备
你可以通过所有这些方式

85
00:05:26,293 --> 00:05:30,197
连接你的设备和开发工具

86
00:05:32,232 --> 00:05:35,369
这是关于无线设备的简要介绍

87
00:05:35,435 --> 00:05:38,005
接下来 我将邀请Breckin

88
00:05:38,071 --> 00:05:41,275
为大家详细介绍设备配对和工作流程

89
00:05:47,080 --> 00:05:48,015
谢谢Chris

90
00:05:49,883 --> 00:05:53,620
对于Xcode 9的无线开发
我们付出了很多的努力

91
00:05:53,687 --> 00:05:59,526
我迫不及待想与大家分享这方面的体会

92
00:06:00,360 --> 00:06:03,130
如何设置你的设备以进行无线开发？

93
00:06:03,630 --> 00:06:05,165
这很简单

94
00:06:06,366 --> 00:06:08,435
转到“设备与模拟器”窗口

95
00:06:09,269 --> 00:06:13,941
使用Lightning或USB数据线
连接设备到你的Mac计算机

96
00:06:14,608 --> 00:06:18,512
像以前一样 将会显示设备
但是你会注意到这里有一个新选项

97
00:06:22,316 --> 00:06:23,350
“通过网络连接”

98
00:06:24,284 --> 00:06:29,389
如果设备和Mac计算机通过网络连接
请启用此选项

99
00:06:30,023 --> 00:06:31,291
一会儿之后

100
00:06:31,358 --> 00:06:33,961
在设备右侧出现一个地球图标

101
00:06:37,264 --> 00:06:41,201
在这个图标出现之后
你就知道 可以拨掉你的数据线

102
00:06:41,268 --> 00:06:43,971
在无线网络上继续开发你的应用

103
00:06:44,171 --> 00:06:49,576
现在iPhone、iPad
iPod touch和Apple TV都支持无线开发

104
00:06:49,643 --> 00:06:53,514
但对于Apple TV
情况略有不同

105
00:06:54,147 --> 00:06:55,816
前面Chris说过

106
00:06:56,216 --> 00:06:59,453
很多Apple TV并不位于桌面上

107
00:06:59,520 --> 00:07:01,788
而是位于我们的娱乐中心

108
00:07:01,855 --> 00:07:04,892
你已经铺设有线线路

109
00:07:04,958 --> 00:07:06,760
你最不愿意做的事情是

110
00:07:06,827 --> 00:07:09,429
拨掉电缆 然后连接USB-C数据线

111
00:07:09,496 --> 00:07:12,866
幸运的是 对于Apple TV
你并不需要这样做

112
00:07:12,933 --> 00:07:17,938
我们支持Discovery无线配对
因此你只需要

113
00:07:18,005 --> 00:07:21,642
在Apple TV 上
转到“远程应用与设备”屏幕

114
00:07:23,076 --> 00:07:24,144
然后

115
00:07:24,211 --> 00:07:26,914
在Xcode中
进入“设备和模拟器”窗口

116
00:07:27,347 --> 00:07:31,385
Apple TV将作为被发现的设备
自动显示出来

117
00:07:31,818 --> 00:07:35,589
选择设备之后
Apple TV上显示一个PIN码

118
00:07:36,323 --> 00:07:39,993
输入PIN码
然后点击“连接”

119
00:07:41,361 --> 00:07:43,063
连接之后

120
00:07:43,130 --> 00:07:47,401
就与USB-C连接一样了

121
00:07:47,835 --> 00:07:50,671
这对于Apple TV开发来说
非常方便

122
00:07:52,973 --> 00:07:57,678
现在已经在配对
你们可能会想

123
00:07:57,744 --> 00:08:01,148
真的有这么方便吗？
对你们大多数人来说

124
00:08:01,648 --> 00:08:04,284
真的就是这么方便

125
00:08:06,653 --> 00:08:08,956
大多数家庭和小型公司网络

126
00:08:09,022 --> 00:08:12,025
并不需要进行配置
只需要确保你的Mac计算机

127
00:08:12,092 --> 00:08:15,128
和设备位于相同的网络上
其它的就不用担心了

128
00:08:15,429 --> 00:08:20,801
你们有一些人在更复杂的网络上工作
比如公司网络

129
00:08:20,868 --> 00:08:22,503
大型机构网络

130
00:08:22,903 --> 00:08:26,573
如果系统管理员设置了某些限制

131
00:08:27,174 --> 00:08:30,878
可能会有一点复杂
但是也不会太复杂

132
00:08:30,944 --> 00:08:34,780
因为我们支持通过IP地址
连接你的设备

133
00:08:35,782 --> 00:08:36,717
这也很简单

134
00:08:37,017 --> 00:08:40,721
你只需要

135
00:08:40,787 --> 00:08:43,991
在“设备和模拟器”窗口中
控制点击设备

136
00:08:45,459 --> 00:08:48,028
就会看到“通过IP地址连接”选项

137
00:08:50,564 --> 00:08:53,233
点击此选项
然后转到设备设置

138
00:08:53,300 --> 00:08:55,769
获取你的IP地址
输入此地址 然后就可以连接

139
00:08:56,036 --> 00:08:59,740
这稍微有一点复杂

140
00:09:00,407 --> 00:09:04,278
如果你在Mac计算机上ping设备
将会获得响应

141
00:09:04,344 --> 00:09:08,682
如果需要详细信息
比如端口等

142
00:09:08,749 --> 00:09:10,484
可以询问系统管理员

143
00:09:10,551 --> 00:09:12,886
请参阅无线开发文档

144
00:09:12,953 --> 00:09:14,288
里面提供所有的详细信息

145
00:09:14,388 --> 00:09:15,889
对于大多数来说

146
00:09:15,956 --> 00:09:18,659
大多数情况下

147
00:09:18,725 --> 00:09:20,294
都不需要进行任何设置

148
00:09:21,261 --> 00:09:24,264
现在我们已经完成连接和配对

149
00:09:24,331 --> 00:09:26,567
可以进行应用开发了

150
00:09:27,801 --> 00:09:33,140
其它方面没有任何变化

151
00:09:33,440 --> 00:09:35,442
只需要在设备列表中选择设备

152
00:09:35,509 --> 00:09:37,578
当设备连接时

153
00:09:37,644 --> 00:09:39,580
右边显示一个地球图标

154
00:09:39,646 --> 00:09:41,548
如同在“设备”窗口中看到的那样

155
00:09:41,615 --> 00:09:45,285
如果没有地球图标
说明还没有连接

156
00:09:45,352 --> 00:09:47,354
也许设备处于睡眠状态

157
00:09:48,021 --> 00:09:49,823
不用担心 当生成和运行时

158
00:09:49,890 --> 00:09:51,491
会自动进行连接

159
00:09:52,960 --> 00:09:54,561
这里介绍了

160
00:09:54,628 --> 00:09:56,563
如何开始无线开发

161
00:09:56,630 --> 00:09:59,700
下面我进行演示

162
00:10:19,586 --> 00:10:22,089
这里有一台Mac
而且我有一台iPhone

163
00:10:22,155 --> 00:10:24,791
我把它放到摄像机面前
你可以看到数据线

164
00:10:27,194 --> 00:10:32,432
我将启用这台iPhone
以进行无线开发

165
00:10:32,633 --> 00:10:37,471
我选择Xcode
转到“设备与模拟器”窗口

166
00:10:42,976 --> 00:10:44,678
这里有一个新选项

167
00:10:45,012 --> 00:10:50,317
选择之后 设备和Xcode
将会通信 建立连接

168
00:10:50,384 --> 00:10:55,189
处于同一网络上时
将会看到地球图标出现

169
00:10:55,322 --> 00:10:59,993
接下来就可以拨掉插头

170
00:11:05,199 --> 00:11:07,234
我们看到iPhone仍处于连接状态

171
00:11:07,301 --> 00:11:09,169
仍然显示地球图标

172
00:11:09,236 --> 00:11:11,839
你就可以进行开发了

173
00:11:11,905 --> 00:11:14,074
我打开一个应用

174
00:11:14,141 --> 00:11:16,243
我的同事和我正在开发这个应用

175
00:11:16,910 --> 00:11:18,345
它的名称是SolarSystem

176
00:11:18,412 --> 00:11:20,681
可以阅读README文件
了解这个应用

177
00:11:20,747 --> 00:11:23,250
现在我点击“Play”按钮

178
00:11:24,184 --> 00:11:25,953
将会生成应用

179
00:11:34,628 --> 00:11:36,430
运行并且安装

180
00:11:37,331 --> 00:11:39,666
将会启动应用和调试器

181
00:11:39,733 --> 00:11:42,202
全部是在无线状态下进行

182
00:11:44,872 --> 00:11:47,708
SolarSystem程序
以生动有趣的方式

183
00:11:47,774 --> 00:11:51,178
带领用户探索太阳系

184
00:11:51,945 --> 00:11:56,049
让我们来看一看

185
00:12:02,022 --> 00:12:04,591
这是环绕太阳运行的行星

186
00:12:05,058 --> 00:12:08,996
我正在开发一个有趣的功能
名称为Moon Jumper

187
00:12:09,563 --> 00:12:12,599
我点击底部的法码图标

188
00:12:13,967 --> 00:12:19,206
这非常有趣
孩子们可以拿着他们的iPhone

189
00:12:19,773 --> 00:12:23,277
跳上跳下
看他们可以在月球上跳多高

190
00:12:23,343 --> 00:12:26,280
这个功能非常好玩

191
00:12:26,413 --> 00:12:30,250
把我们的小航天员放到月球上

192
00:12:30,317 --> 00:12:35,422
我们看到提示信息
显示太容易跳到这个高度了

193
00:12:35,489 --> 00:12:38,025
我们把栏杆提高到180英尺

194
00:12:38,625 --> 00:12:39,793
这需要花点力气

195
00:12:39,860 --> 00:12:42,930
但是用户发现很容易做到

196
00:12:43,363 --> 00:12:45,532
让我来测试一下

197
00:12:45,599 --> 00:12:49,036
在无线开发环境下
应该如何进行测试？

198
00:12:49,303 --> 00:12:52,973
你需要实际体验

199
00:12:53,040 --> 00:12:55,008
你需要使用加速计

200
00:12:55,075 --> 00:12:57,177
亲自进行测试

201
00:12:57,244 --> 00:12:59,713
我说过 这是一个跳高程序

202
00:12:59,780 --> 00:13:02,916
如果我在这里设置一个断点

203
00:13:02,983 --> 00:13:05,919
我知道当我跳得足够高时

204
00:13:05,986 --> 00:13:07,788
应该停在这里

205
00:13:07,855 --> 00:13:09,456
我想知道实际感受如何

206
00:13:09,523 --> 00:13:11,225
因为有人告诉我
感觉并不正常

207
00:13:11,291 --> 00:13:12,659
因此我需要亲自跳跃

208
00:13:12,726 --> 00:13:15,162
我将会这样做

209
00:13:17,397 --> 00:13:18,498
好的

210
00:13:21,235 --> 00:13:22,436
我跳到这个高度

211
00:13:24,771 --> 00:13:27,641
由于你们看不到屏幕
让我来描述发生了什么事情

212
00:13:27,708 --> 00:13:29,142
我将会跳跃

213
00:13:29,810 --> 00:13:33,180
这个宇航员跳高了一点

214
00:13:33,247 --> 00:13:34,314
但是还不够高

215
00:13:34,381 --> 00:13:37,951
让我们来看
我是否能够跳到180英尺高

216
00:13:39,686 --> 00:13:41,688
我做到了吗？

217
00:13:44,658 --> 00:13:45,659
加油

218
00:13:47,294 --> 00:13:49,263
很好

219
00:13:56,136 --> 00:13:58,005
我们暂停应用

220
00:13:58,639 --> 00:14:01,375
我们转到重力参数值

221
00:14:01,441 --> 00:14:05,579
需要设置加速度值

222
00:14:05,646 --> 00:14:08,749
看起来问题在于

223
00:14:09,283 --> 00:14:11,552
这里的这个值

224
00:14:14,121 --> 00:14:16,890
需要变小一点
从而延长跳跃时间

225
00:14:16,957 --> 00:14:21,195
现在我没有时间演示或修复

226
00:14:21,261 --> 00:14:25,032
我清除断点 点击“继续”

227
00:14:33,874 --> 00:14:35,509
看起来连接中断了

228
00:14:35,576 --> 00:14:39,046
这没有问题 可以重新连接

229
00:14:45,185 --> 00:14:49,556
你会注意到在Xcode 9中
自动重新填写进程名称

230
00:14:49,623 --> 00:14:54,394
进行标记 就会填写条目
非常方便

231
00:15:00,100 --> 00:15:01,368
让我们回过头来

232
00:15:08,442 --> 00:15:11,478
还要注意另外一件事情

233
00:15:11,879 --> 00:15:16,016
我的同事指出
有一个性能方面的问题

234
00:15:16,517 --> 00:15:19,253
我们点击太阳系

235
00:15:19,319 --> 00:15:23,557
当点击木星时
会出现延迟

236
00:15:23,657 --> 00:15:27,794
会看到停顿

237
00:15:27,861 --> 00:15:31,999
这会影响电量使用时间

238
00:15:32,065 --> 00:15:33,767
我们需要弄清楚

239
00:15:33,834 --> 00:15:34,668
存在什么问题

240
00:15:38,071 --> 00:15:39,373
我转到电量影响计

241
00:15:39,439 --> 00:15:40,274
果然电量影响很高

242
00:15:40,340 --> 00:15:42,643
在Xcode 9中

243
00:15:42,709 --> 00:15:44,311
此功能经过重新设计

244
00:15:44,378 --> 00:15:47,681
让你知道应用的哪些部分消耗电量

245
00:15:47,748 --> 00:15:50,684
在本例中 我们看到CPU耗电量

246
00:15:50,751 --> 00:15:54,288
对于主要使用GPU的程序来说

247
00:15:54,354 --> 00:15:58,458
其CPU耗电量过高
每次触摸它时 耗电量都会升高

248
00:15:58,525 --> 00:16:02,696
如何深入了解性能问题？

249
00:16:02,763 --> 00:16:04,097
我们可以使用Instruments

250
00:16:04,164 --> 00:16:05,499
你们可能熟悉它

251
00:16:05,566 --> 00:16:07,501
这是Xcode中的
一个很有用的功能

252
00:16:07,801 --> 00:16:09,169
如果你需要…

253
00:16:10,237 --> 00:16:11,638
如果你需要调试漏洞

254
00:16:11,705 --> 00:16:15,609
有人告诉你 程序存在性能问题
你会进入Instruments

255
00:16:15,676 --> 00:16:17,678
重新启动它
你并不需要这样做

256
00:16:17,811 --> 00:16:20,948
我点击“Time Profile”按钮

257
00:16:21,014 --> 00:16:23,584
将调试会话传输到Instruments
同时保持应用运行

258
00:16:23,650 --> 00:16:25,853
这非常有用
因为应用处于运行状态

259
00:16:25,919 --> 00:16:28,388
你需要跳转到Instruments
分析问题所在

260
00:16:28,455 --> 00:16:29,990
我们已经启动Instruments

261
00:16:30,057 --> 00:16:33,160
我移动窗口
让我们看得更清楚

262
00:16:36,697 --> 00:16:40,367
我们看到
在Instruments默认策略中

263
00:16:40,434 --> 00:16:43,370
仅看到CPU占用率和生命周期

264
00:16:43,437 --> 00:16:46,440
但Xcode 9的新Instruments中
可以看到“全部”策略

265
00:16:46,507 --> 00:16:49,610
这是一个时序仪表
如果点击“全部”

266
00:16:49,676 --> 00:16:55,182
可以看到所有线程和内核
因此可以看到应用总体运行情况

267
00:16:55,249 --> 00:16:56,316
这非常有用

268
00:16:57,184 --> 00:16:59,353
让我们来看
是否可以重现问题

269
00:17:04,558 --> 00:17:05,492
我们开始

270
00:17:09,329 --> 00:17:12,031
我们清楚地看到问题所在

271
00:17:12,098 --> 00:17:13,367
这里出现耗电高峰

272
00:17:13,433 --> 00:17:17,069
有时候可能需要详细了解问题

273
00:17:17,137 --> 00:17:19,373
查看调用堆栈
但是有时候需要知道

274
00:17:19,439 --> 00:17:25,045
耗电高峰是
CPU的哪些线程处理造成的

275
00:17:25,112 --> 00:17:27,981
但是不确定应该如何做

276
00:17:28,048 --> 00:17:31,318
你可能会说
还有另外一个问题 我不太确定呢

277
00:17:31,385 --> 00:17:34,388
现在 利用Xcode 9 Instruments
一切变得更简单

278
00:17:34,888 --> 00:17:38,559
我将会锁定这个轨道

279
00:17:39,193 --> 00:17:42,296
在底部放置这个轨道的副本
将它固定在这里

280
00:17:42,362 --> 00:17:46,033
现在 我进行滚动

281
00:17:47,134 --> 00:17:51,271
可以看到哪些其它轨道
也在影响性能

282
00:17:51,371 --> 00:17:53,040
这个功能非常不错

283
00:17:54,074 --> 00:17:56,443
不仅可以看到耗电高峰

284
00:17:56,510 --> 00:17:59,580
而且知道程序运行情况

285
00:17:59,646 --> 00:18:02,716
可以看到它们之间的相互关系

286
00:18:02,783 --> 00:18:04,685
为你提供有价值的信息

287
00:18:08,322 --> 00:18:09,990
（无线开发演示）

288
00:18:10,057 --> 00:18:11,992
我们已经简单地

289
00:18:12,059 --> 00:18:18,599
了解Xcode 9中的无线开发

290
00:18:20,934 --> 00:18:21,869
这还只是

291
00:18:22,669 --> 00:18:25,405
冰山之一角

292
00:18:25,472 --> 00:18:29,443
前面Chris讲过
现在我们开发的应用

293
00:18:29,510 --> 00:18:34,281
不仅仅用于在空闲时打发时间

294
00:18:34,348 --> 00:18:37,017
比如在公交车上阅读新闻

295
00:18:37,084 --> 00:18:38,785
当然这样的应用仍然大量存在

296
00:18:38,852 --> 00:18:41,221
但是越来越多的应用
具有物理交互性质

297
00:18:41,288 --> 00:18:43,056
它们与现实世界互动

298
00:18:43,123 --> 00:18:47,227
有时候你会看到漏洞提示

299
00:18:47,294 --> 00:18:49,663
而且你只能在现实世界互动中
才能重现问题

300
00:18:49,863 --> 00:18:53,100
有时候会遇到性能问题
而需要使用Instruments

301
00:18:53,166 --> 00:18:57,604
来深入了解性能问题
且需要在现实世界互动中发现这些问题

302
00:18:57,671 --> 00:19:00,007
在无线开发中 你可以轻松做到这一点

303
00:19:00,073 --> 00:19:02,376
关于这方面的内容
我想重新邀请Chris上台为大家讲解

304
00:19:08,315 --> 00:19:10,384
谢谢Breckin 你的演示很生动

305
00:19:11,485 --> 00:19:14,121
现在我想谈谈增强功能

306
00:19:14,188 --> 00:19:16,924
Xcode支持使用断点

307
00:19:17,791 --> 00:19:22,629
你们有些人可能不知道
在Xcode中 断点有很强的灵活性

308
00:19:22,696 --> 00:19:25,966
一些选项允许你自定义其行为方式

309
00:19:26,333 --> 00:19:28,802
双击断点

310
00:19:28,869 --> 00:19:31,638
可以看到
断点编辑器弹出窗口

311
00:19:31,705 --> 00:19:35,442
在这里 可以设置选项
例如定义条件

312
00:19:35,509 --> 00:19:39,479
如果条件求值为真
将会触发断点

313
00:19:39,546 --> 00:19:43,183
你可以定义断点动作
例如记录变量

314
00:19:43,250 --> 00:19:46,286
执行调试命令
播放声音等

315
00:19:46,587 --> 00:19:49,556
这些选项现已加入到Xcode之中

316
00:19:49,623 --> 00:19:51,358
在过去几年里

317
00:19:51,425 --> 00:19:54,595
团队对UI进行增强
以提高其易用性

318
00:19:55,028 --> 00:19:56,363
首先

319
00:19:56,430 --> 00:20:00,467
我们为所有断点编辑器文本字段
增加代码输入功能

320
00:20:06,073 --> 00:20:10,978
现在 在断点编辑器中
在条件字段和断点操作字段中

321
00:20:11,044 --> 00:20:13,413
编辑表达式时

322
00:20:13,480 --> 00:20:16,216
将会自动输入代码

323
00:20:16,283 --> 00:20:19,419
如同源代码编辑器和
调试器控制台一样

324
00:20:20,521 --> 00:20:21,622
接下来我们要做的是

325
00:20:21,688 --> 00:20:25,959
找到已经设置选项的断点
这比以前更简单

326
00:20:26,026 --> 00:20:29,630
在Xcode 9中
对于任何已经设置选项的断点

327
00:20:29,696 --> 00:20:32,533
将会看到这个指示器
末端有一个三角形

328
00:20:37,304 --> 00:20:41,942
表示断点已经设置一个或多个选项

329
00:20:42,009 --> 00:20:44,578
这让我们更容易

330
00:20:44,645 --> 00:20:46,980
在断点导航器

331
00:20:47,047 --> 00:20:48,115
或源代码编辑器中

332
00:20:48,182 --> 00:20:50,817
找到已经设置选项的断点

333
00:20:51,718 --> 00:20:53,787
此外 将鼠标移到断点上

334
00:20:53,854 --> 00:20:56,089
就可以看到一个提示
显示断点上

335
00:20:56,156 --> 00:20:57,925
已经设置的选项概览

336
00:20:58,058 --> 00:21:01,395
让你更容易找到
你要查找的断点

337
00:21:01,695 --> 00:21:03,697
在断点查找方面

338
00:21:03,764 --> 00:21:07,000
我们还增强
断点导航器过滤字段

339
00:21:07,067 --> 00:21:08,402
添加深度过滤功能

340
00:21:08,735 --> 00:21:11,438
这意味着 可以在断点编辑器中

341
00:21:11,505 --> 00:21:14,541
搜索所有的文本字段

342
00:21:14,608 --> 00:21:16,109
匹配检索你设置的

343
00:21:16,176 --> 00:21:19,279
条件字段 动作字段
和表达式

344
00:21:20,113 --> 00:21:23,517
因而能够在断点导航器中

345
00:21:23,584 --> 00:21:25,586
更轻松地查找断点

346
00:21:26,453 --> 00:21:28,856
如果你还没有使用过断点选项
应该尝试一下

347
00:21:28,922 --> 00:21:31,425
它们还增加
许多的灵活设置和自定义功能

348
00:21:31,491 --> 00:21:34,294
到你的调试工作流程
极大地增强易用性

349
00:21:37,231 --> 00:21:40,067
接下来我想讨论
用户界面调试

350
00:21:40,133 --> 00:21:41,335
（视图控制器调试）

351
00:21:41,401 --> 00:21:45,372
在生成UI时
视图控制器

352
00:21:45,439 --> 00:21:49,176
在组织代码和情节提要方面
发挥非常重要的作用

353
00:21:49,977 --> 00:21:53,747
视图控制器管理和布局视图树
的各个部分

354
00:21:53,814 --> 00:21:56,917
负责处理屏幕之间的过渡

355
00:21:57,718 --> 00:21:58,952
因此当调试你的UI时

356
00:21:59,019 --> 00:22:01,788
只需查看视图控制器结构

357
00:22:01,855 --> 00:22:04,925
就能够导航视图层次结构

358
00:22:04,992 --> 00:22:07,160
而且能够找到

359
00:22:07,227 --> 00:22:09,530
负责视图树的各个部分的
视图控制器

360
00:22:10,163 --> 00:22:12,666
在Xcode 9中

361
00:22:12,733 --> 00:22:15,636
在调试时
视图控制器

362
00:22:15,702 --> 00:22:17,070
已成为视图层次结构的组成部分

363
00:22:21,808 --> 00:22:23,877
可以像以前一样检查视图层次结构

364
00:22:23,944 --> 00:22:27,981
但是现在可以在调试导航器中

365
00:22:28,048 --> 00:22:30,751
找到视图控制器
它们作为其管理的视图的父级被插入

366
00:22:31,485 --> 00:22:34,521
因此很容易导航视图层次结构

367
00:22:34,588 --> 00:22:38,125
只需要查看高层级视图控制器结构

368
00:22:38,192 --> 00:22:40,694
找到你要调试的视图树

369
00:22:40,761 --> 00:22:43,697
然后找到单个视图

370
00:22:44,531 --> 00:22:48,202
视图控制器也显示在画布之中

371
00:22:48,769 --> 00:22:52,973
Xcode在视图控制器管理的视图
的上方显示视图控制器的符号

372
00:22:53,407 --> 00:22:56,643
从而便于在视图树中

373
00:22:56,710 --> 00:22:58,846
显示视图控制器边界

374
00:22:58,912 --> 00:23:02,482
而且更容易找到
负责特定视图的视图控制器

375
00:23:03,584 --> 00:23:06,854
选择一个视图控制器
你将在检查器中看到其属性

376
00:23:06,920 --> 00:23:10,757
这将帮助你
调试视图控制器相关问题

377
00:23:11,358 --> 00:23:14,494
这包括视图控制器父子关系

378
00:23:14,561 --> 00:23:18,065
便于调试视图控制器包含问题

379
00:23:19,199 --> 00:23:22,069
现在 视图控制器
已经成为视图层次结构的组成部分

380
00:23:22,135 --> 00:23:26,240
在调试时 更容易导航到层次结构

381
00:23:26,306 --> 00:23:29,109
帮助解决视图控制器相关问题

382
00:23:30,777 --> 00:23:34,381
现在 并非所有用户界面都是使用
UIKit和AppKit创建的

383
00:23:35,415 --> 00:23:41,755
有些设计可能需要自定义UI
包含丰富的交互功能和自定义布局

384
00:23:42,155 --> 00:23:45,092
为此 可以使用SpriteKit

385
00:23:46,460 --> 00:23:48,128
SpriteKit是一个2D图形框架

386
00:23:48,195 --> 00:23:50,531
可以在所有Apple平台上使用

387
00:23:50,898 --> 00:23:52,766
十分适合开发游戏

388
00:23:52,833 --> 00:23:55,536
而且适合创建自定义UI

389
00:23:56,303 --> 00:23:58,872
因此我们想要为SpriteKit
开发者提供可视化调试工具

390
00:23:58,939 --> 00:24:03,443
就像为使用UIKit和AppKit
开发者提供调试工具一样

391
00:24:03,911 --> 00:24:06,813
我很高兴宣布
在Xcode 9中

392
00:24:06,880 --> 00:24:10,551
SpriteKit现在已经成为
视图调试器的组成部分

393
00:24:13,153 --> 00:24:17,791
当检查视图层次结构
且Xcode找到一个SpriteKit视图时

394
00:24:17,858 --> 00:24:20,194
将会自动快照视图中
的SpriteKit场景

395
00:24:20,260 --> 00:24:23,130
并放入调试器

396
00:24:23,463 --> 00:24:28,101
因此你可以看到Sprites现在
位于剖面3D展示之中

397
00:24:28,168 --> 00:24:30,504
与层次结构中的所有视图在一起

398
00:24:31,438 --> 00:24:34,508
这对于调试Sprite布局很有用

399
00:24:35,242 --> 00:24:38,378
而且对于调试Sprite
和视图混合布局来说很方便

400
00:24:38,445 --> 00:24:43,250
一些项目使用Sprites和
视图混合布局来自定义图形界面

401
00:24:46,119 --> 00:24:49,323
在调试导航器中你会看到
一个SpriteKit场景子条目

402
00:24:49,389 --> 00:24:53,360
作为父视图的子项目
在场景下方

403
00:24:53,427 --> 00:24:57,197
可以看到运行时
场景中的所有SpriteKit节点

404
00:24:57,564 --> 00:25:00,200
选择一个SpriteKit节点

405
00:25:00,267 --> 00:25:03,770
可以进行调试

406
00:25:04,872 --> 00:25:06,139
因此 现在SpriteKit开发者

407
00:25:06,206 --> 00:25:10,410
拥有一个可视化工具用于在运行时
调试他们的SpriteKit场景

408
00:25:16,817 --> 00:25:18,752
我们的讨论不仅限于Sprites

409
00:25:20,187 --> 00:25:22,856
SceneKit是一个3D图形框架

410
00:25:23,156 --> 00:25:27,594
适合构建丰富多彩的3D世界、
3D游戏和自定义3D UI

411
00:25:27,661 --> 00:25:31,532
我们也希望为SceneKit开发者
提供一个可视化工具

412
00:25:32,833 --> 00:25:34,001
我们确实这样做了

413
00:25:34,067 --> 00:25:37,538
SceneKit现在已经成为
视图调试流程的组成部分

414
00:25:37,971 --> 00:25:41,808
Xcode检查含有SceneKit
视图的视图层次结构时

415
00:25:41,875 --> 00:25:44,711
将快照该视图中SceneKit场景

416
00:25:44,778 --> 00:25:47,014
然后放入调试器之中

417
00:25:48,682 --> 00:25:50,083
在调试导航器中

418
00:25:50,717 --> 00:25:56,723
将看到一个SceneKit场景
作为父视图的子元素

419
00:25:57,691 --> 00:25:59,993
与SpriteKit例子相比
这里存在差别

420
00:26:00,060 --> 00:26:01,295
我已经展示

421
00:26:01,662 --> 00:26:04,731
SceneKit场景没有子元素

422
00:26:04,798 --> 00:26:07,501
所有SceneKit场景节点在哪？

423
00:26:07,801 --> 00:26:10,404
请注意 在画布中

424
00:26:10,470 --> 00:26:13,941
3D场景显示为扁平化的快照

425
00:26:16,543 --> 00:26:17,778
这是为什么呢？

426
00:26:18,078 --> 00:26:22,015
为了便于洞察
Sprites中的2D视图

427
00:26:22,082 --> 00:26:24,151
Xcode以3D剖解模式显示它们

428
00:26:24,651 --> 00:26:26,653
但是对于3D内容应该如何做呢？

429
00:26:27,621 --> 00:26:30,691
我们探索4D调试技术的最新进展

430
00:26:30,757 --> 00:26:32,092
但在实验中发生了一些意外

431
00:26:32,159 --> 00:26:34,995
因此我们认为必须采取更简单的方法

432
00:26:35,062 --> 00:26:39,032
我们已经在Xcode中
内置一个强大的3D编辑器

433
00:26:39,666 --> 00:26:43,070
因此我们将SceneKit编辑器
与视图调试流程进行整合

434
00:26:43,337 --> 00:26:46,373
现在 只需要在调试导航器中
选择一个SceneKit场景

435
00:26:46,440 --> 00:26:51,011
Xcode将会在运行时调试模式下
打开SceneKit编辑器

436
00:26:51,078 --> 00:26:54,314
此编辑器包含有运行时3D场景快照

437
00:26:55,449 --> 00:26:57,551
这非常方便

438
00:27:00,053 --> 00:27:02,956
现在你可以使用熟悉的工具

439
00:27:03,023 --> 00:27:07,528
创建和调试3D场景

440
00:27:08,862 --> 00:27:12,833
你可以移动摄像头
或选择其它摄像头

441
00:27:12,900 --> 00:27:14,902
可以拉远镜头
以获得整个场景的

442
00:27:14,968 --> 00:27:16,436
完整视图

443
00:27:16,870 --> 00:27:20,274
可以显示场景中正常状态下
不可见的对象

444
00:27:20,340 --> 00:27:26,213
比如摄像机 视锥体 灯光
灯光位置和方向

445
00:27:26,680 --> 00:27:30,417
可以在左侧的概览视图中
探索整个场景

446
00:27:31,251 --> 00:27:33,987
选择3D场景中的对象

447
00:27:34,288 --> 00:27:37,991
可以隐藏或移动它们
以获得其背后的对象

448
00:27:38,058 --> 00:27:42,229
事实上 你可以使用画布

449
00:27:42,296 --> 00:27:44,831
或检查器
对场景进行何修改

450
00:27:44,898 --> 00:27:47,534
而不会影响你的运行时

451
00:27:47,634 --> 00:27:50,070
你修改的是内存中的快照

452
00:27:50,671 --> 00:27:53,707
如果想要保存此快照
非常简单

453
00:27:53,774 --> 00:27:58,946
可以导出到SceneKit
或.dae文件 供以后访问

454
00:27:59,413 --> 00:28:02,583
现在 SceneKit开发者
拥有一个可视化调试工具

455
00:28:02,649 --> 00:28:05,552
用于在运行时
调试他们的SceneKit场景

456
00:28:12,626 --> 00:28:17,064
这就是我们对Xcode 9中的
视图调试所进行的增强

457
00:28:17,231 --> 00:28:21,034
我们增加视图控制器调试、
SpriteKit和SceneKit调试

458
00:28:21,902 --> 00:28:24,605
为了利用这些功能
你的项目需要运行

459
00:28:24,671 --> 00:28:27,741
以下OS版本之一：

460
00:28:27,808 --> 00:28:31,778
iOS 11、tvOS 11
或macOS High Sierra

461
00:28:35,382 --> 00:28:37,050
前面我说过
一些图形框架

462
00:28:37,117 --> 00:28:41,555
例如SpriteKit和SceneKit
非常适合创建自定义用户界面

463
00:28:41,655 --> 00:28:44,458
它们不仅适用于开发游戏

464
00:28:45,692 --> 00:28:47,127
举例来说 在Xcode Team上

465
00:28:47,194 --> 00:28:50,030
我们使用这些框架
来开发我们的可视化调试器

466
00:28:50,697 --> 00:28:52,099
这是我们去年推出的

467
00:28:52,165 --> 00:28:54,935
内存图形调试器

468
00:28:55,269 --> 00:28:58,772
它显示在iPhone上运行的
应用的内存图形

469
00:28:59,506 --> 00:29:04,144
这个可视化内存图形工具
是我们使用SpriteKit开发的

470
00:29:04,211 --> 00:29:07,581
很高兴告诉大家
我们可以使用新SpriteKit调试器

471
00:29:07,648 --> 00:29:09,516
来调试我们的内存图形调试器

472
00:29:09,917 --> 00:29:11,485
让我演示这是如何工作的

473
00:29:12,386 --> 00:29:15,956
让我们进入另外一个Xcode
来调试这个Xcode

474
00:29:17,558 --> 00:29:19,993
它获取视图层次结构的快照

475
00:29:20,060 --> 00:29:22,095
现在它包含所有的Sprites视图

476
00:29:22,162 --> 00:29:24,798
这些视图显示为
内存图形调试器的组成部分

477
00:29:24,865 --> 00:29:27,334
我们可以选择一个选项
以显示所有剪辑内容

478
00:29:27,401 --> 00:29:30,737
现在我们看到位于可视区域之外的
所有Sprites

479
00:29:30,804 --> 00:29:32,506
我们可以继续拉远镜头

480
00:29:32,573 --> 00:29:37,277
获得整个SpriteKit场景的
广角视野

481
00:29:39,046 --> 00:29:40,047
这是一个例子

482
00:29:40,113 --> 00:29:42,382
这是我们在Xcode Team上
所做的事情

483
00:29:42,516 --> 00:29:44,818
我们使用我们的调试器
调试其它调试器

484
00:29:48,255 --> 00:29:51,959
现在 为了在这个自定义3D界面中

485
00:29:52,025 --> 00:29:57,331
剖解式显示视图层次结构
我们使用SceneKit

486
00:29:57,731 --> 00:30:00,901
让人高兴的是我们可以使用
新SceneKit调试器

487
00:30:00,968 --> 00:30:03,837
来调试视图调试器
谁想看看吗？

488
00:30:05,038 --> 00:30:09,543
让我们进入另一个Xcode
来调试前一个Xcode

489
00:30:17,918 --> 00:30:19,453
我们已获取视图层次结构快照

490
00:30:19,520 --> 00:30:21,622
并在3D界面中剖解式显示

491
00:30:21,688 --> 00:30:24,825
由于这是Xcode 9
因此我们可访问SceneKit场景

492
00:30:24,892 --> 00:30:30,097
我们可以选择这个场景
然后在SceneKit编辑器中查看

493
00:30:30,163 --> 00:30:31,665
查看其3D展示

494
00:30:31,965 --> 00:30:34,201
我们可以切换摄像头 切换视角

495
00:30:34,268 --> 00:30:37,571
查找我们想要调试的
场景中的3D对象

496
00:30:40,140 --> 00:30:42,142
在Xcode中 这些工作充满乐趣

497
00:30:43,243 --> 00:30:44,645
这只是一个例子

498
00:30:44,711 --> 00:30:47,681
我展示的例子

499
00:30:48,115 --> 00:30:53,053
使用Xcode的新SceneKit调试器
调试Xcode视图调试器可视化

500
00:30:53,120 --> 00:30:56,623
它本身就是SpriteKit
调试内存图形调试器

501
00:30:56,690 --> 00:30:59,893
内存图形调试器是iPhone上的
内存图形调试程序

502
00:31:00,694 --> 00:31:01,762
如果你遵循这样的做法

503
00:31:01,828 --> 00:31:04,097
将可能会在Xcode Team
获得成功

504
00:31:10,971 --> 00:31:14,174
现在我邀请Sebastian上台

505
00:31:14,241 --> 00:31:16,410
为大家演示这些新视图调试增强功能

506
00:31:20,614 --> 00:31:21,515
谢谢Chris

507
00:31:22,249 --> 00:31:23,150
太棒了

508
00:31:23,617 --> 00:31:25,752
我很高兴为大家演示

509
00:31:25,819 --> 00:31:27,688
Xcode 9中的调试增强功能

510
00:31:27,754 --> 00:31:31,859
我使用的例子
比Chris的例子简单一些

511
00:31:36,129 --> 00:31:37,931
我将使用相同的iOS应用

512
00:31:37,998 --> 00:31:40,267
前面Breckin曾经

513
00:31:40,334 --> 00:31:41,535
将它用于他的演示

514
00:31:41,969 --> 00:31:44,371
这个应用展示太阳系

515
00:31:46,707 --> 00:31:48,408
启动程序时

516
00:31:48,475 --> 00:31:50,043
将显示一个3D界面

517
00:31:50,477 --> 00:31:52,713
点击右上角的按钮

518
00:31:52,779 --> 00:31:55,883
用户可以获得行星的详细信息

519
00:31:56,517 --> 00:31:59,453
我在开发一个非常不错的功能

520
00:31:59,753 --> 00:32:04,458
我的想法是让用户
体验不同行星上的重力

521
00:32:04,525 --> 00:32:07,060
因此我使用SpriteKit
开发一个重力模拟器

522
00:32:07,127 --> 00:32:08,896
让我来展示

523
00:32:09,630 --> 00:32:12,666
重力模拟器首先使用零重力

524
00:32:12,733 --> 00:32:15,135
太空中有三个物体

525
00:32:15,202 --> 00:32:18,005
当用户向下滑动设备显示屏时

526
00:32:18,071 --> 00:32:21,074
重力生效
物体开始下落

527
00:32:21,141 --> 00:32:24,011
落到屏幕底部并弹起

528
00:32:24,077 --> 00:32:27,181
不幸的是 这里有一个漏洞

529
00:32:27,247 --> 00:32:30,050
当我向下滑动时
让我们来看会发生什么

530
00:32:32,052 --> 00:32:35,589
现在我知道用户在抱怨什么了

531
00:32:35,789 --> 00:32:38,358
看起来重力已经正确生效

532
00:32:38,425 --> 00:32:41,061
但是物体并没有落到屏幕底部

533
00:32:41,128 --> 00:32:43,030
并弹起
而是消失在屏幕之外

534
00:32:43,530 --> 00:32:46,667
让我们来看是否可以使用视图调试器
更好地理解这里发生了什么

535
00:32:46,733 --> 00:32:48,268
并尝试解决问题

536
00:32:49,436 --> 00:32:52,406
我使用调试工具栏中的按钮
调出视图调试器

537
00:32:53,774 --> 00:32:56,343
现在Xcode取回整个视图层次结构

538
00:32:56,410 --> 00:32:58,579
包括所有SpriteKit场景中的内容

539
00:32:58,645 --> 00:33:00,414
它们是视图层次结构的组成部分

540
00:33:00,480 --> 00:33:02,716
左侧是层次结构的

541
00:33:02,783 --> 00:33:03,917
概览表示

542
00:33:03,984 --> 00:33:06,687
中间是可视化表示

543
00:33:07,321 --> 00:33:09,957
可以看到 视图调试器中的内容

544
00:33:10,023 --> 00:33:11,458
与设备屏幕上的内容完全相同

545
00:33:11,525 --> 00:33:14,828
你可能会想 这有什么用处

546
00:33:15,562 --> 00:33:19,766
现在我们回顾刚才发生的事情
三个物体消失在屏幕之外

547
00:33:19,833 --> 00:33:23,237
默认情况下 视图调试器
仅显示可见对象

548
00:33:23,537 --> 00:33:27,508
我们可以使用左下角的这个按钮

549
00:33:27,574 --> 00:33:30,043
显示当前被剪辑的内容

550
00:33:30,377 --> 00:33:32,546
我们可以看到
比设备屏幕上

551
00:33:32,613 --> 00:33:34,348
更多的内容

552
00:33:35,015 --> 00:33:38,051
让我们拉远镜头
可以更清楚地看到概览

553
00:33:38,852 --> 00:33:41,154
事实上 我们发现
物体落到了这里

554
00:33:41,321 --> 00:33:43,624
看起来

555
00:33:43,690 --> 00:33:47,127
对于设备显示屏来说
SpriteKit场景过长

556
00:33:47,194 --> 00:33:50,163
当物体落到场景底部时并弹起时

557
00:33:50,230 --> 00:33:51,565
已经超出屏幕之外

558
00:33:52,566 --> 00:33:54,668
让我们来看是否能够解决这个问题

559
00:33:54,835 --> 00:33:56,270
在左侧的调试导航器中

560
00:33:56,336 --> 00:33:58,305
我选择SpriteKit场景

561
00:33:58,372 --> 00:34:00,073
让我们看它的属性

562
00:34:00,140 --> 00:34:02,075
看我们是否能够采取一些办法

563
00:34:02,976 --> 00:34:04,578
我们可以获得

564
00:34:04,645 --> 00:34:09,815
关于SpriteKit场景大小、
锚点及scaleMode的详细信息

565
00:34:10,250 --> 00:34:12,485
scaleMode
当前设置为Aspect Fill

566
00:34:12,553 --> 00:34:14,353
看上去有一点奇怪

567
00:34:14,487 --> 00:34:18,559
我想该有更好的Aspect Fill
来实现我们的目标

568
00:34:19,359 --> 00:34:21,061
实现预期的场景行为模式

569
00:34:21,128 --> 00:34:24,164
我们想要重新调整大小
以适应设备显示屏

570
00:34:25,264 --> 00:34:27,501
因此我在宿主视图控制器中
设置整个SpriteKit场景

571
00:34:27,568 --> 00:34:30,370
由于视图控制器

572
00:34:30,437 --> 00:34:32,539
与视图层次结构显示在一起

573
00:34:32,606 --> 00:34:34,440
因此很容易获取它们

574
00:34:34,608 --> 00:34:37,610
只需要在左侧的调试导航器中

575
00:34:37,678 --> 00:34:40,214
选择重力模拟器视图控制器

576
00:34:40,280 --> 00:34:42,248
使用右侧的检查器

577
00:34:42,315 --> 00:34:44,650
很容易跳转到实现之中

578
00:34:46,119 --> 00:34:49,121
我可以使用类名称旁边的这个按钮

579
00:34:50,290 --> 00:34:52,592
现在我们已经进入类的实现

580
00:34:53,360 --> 00:34:55,963
我在viewDidLoad中
进行一些设置

581
00:34:56,029 --> 00:34:58,999
在viewDidLoad中
首先将planetName赋值为

582
00:34:59,066 --> 00:35:02,769
最上方的planetLabel
然后我设置scaleMode

583
00:35:03,470 --> 00:35:05,272
我将scaleMode更改为

584
00:35:05,339 --> 00:35:10,978
更合适的设置
以获得我们想要的效果

585
00:35:11,044 --> 00:35:12,646
我们想要调整场景大小

586
00:35:13,080 --> 00:35:15,482
因此resizeFill
是更好的选项

587
00:35:16,216 --> 00:35:19,753
现在我返回
看我们的问题是否已经解决

588
00:35:20,854 --> 00:35:25,058
我们看到
使用UIKit和SpriteKit

589
00:35:25,125 --> 00:35:29,196
很容易检查应用的用户界面

590
00:35:29,263 --> 00:35:32,633
可认清楚地知道
我们的三个物体落到哪里了

591
00:35:33,166 --> 00:35:34,635
可以选择场景

592
00:35:34,701 --> 00:35:36,770
找到需要更改的属性

593
00:35:36,837 --> 00:35:37,971
然后使用视图控制器

594
00:35:38,038 --> 00:35:41,775
跳转到实现之中
更改代码

595
00:35:42,309 --> 00:35:44,678
让我们检查问题是否已经解决

596
00:35:45,212 --> 00:35:49,316
我返回到行星详情视图
调出重力模拟器

597
00:35:50,117 --> 00:35:52,286
向下滑动以启用重力

598
00:35:53,320 --> 00:35:55,222
我们看到显示正常了

599
00:35:55,422 --> 00:35:57,591
三个物体落到底部
你清楚地知道

600
00:35:57,658 --> 00:35:59,927
这个行星的重力有多强

601
00:36:01,028 --> 00:36:05,032
另外还有一件事情
我不知道你们是否注意到没有

602
00:36:05,232 --> 00:36:08,235
有一个问题

603
00:36:08,302 --> 00:36:09,837
在太阳系初始启动画面

604
00:36:10,971 --> 00:36:12,606
缺失一个物体

605
00:36:14,174 --> 00:36:17,544
这里缺少一个行星
我说的不是木星

606
00:36:18,445 --> 00:36:20,113
而是土星

607
00:36:21,014 --> 00:36:24,351
我十分确定
我的模型是正确的

608
00:36:24,418 --> 00:36:25,786
该能够显示不同行星的所有详细面貌

609
00:36:25,853 --> 00:36:29,156
由于我使用SceneKit
来构建3D显示效果

610
00:36:29,223 --> 00:36:31,992
因此我的场景图设置可能存在错误

611
00:36:32,059 --> 00:36:33,694
让我们使用视图调试器

612
00:36:33,760 --> 00:36:36,697
弄清楚土星出了什么状况

613
00:36:37,931 --> 00:36:41,168
我使用底部的调试工具栏
调出视图调试器

614
00:36:41,502 --> 00:36:44,371
Xcode捕获视图层次结构
包括所有SceneKit场景的内容

615
00:36:44,438 --> 00:36:47,140
这些场景是视图层次结构的组成部分

616
00:36:47,641 --> 00:36:48,909
前面Chris提到

617
00:36:48,976 --> 00:36:51,945
它们位于左侧调试导航器中的

618
00:36:52,012 --> 00:36:54,348
宿主SCN视图的正下方

619
00:36:54,848 --> 00:36:58,719
选择它 在SceneKit编辑器中

620
00:36:58,785 --> 00:37:01,922
打开场景的运行时快照
SceneKit编辑器处于运行时调试模式

621
00:37:02,956 --> 00:37:06,226
可以看到
除了3D世界之外

622
00:37:06,293 --> 00:37:07,995
还显示其它信息

623
00:37:08,095 --> 00:37:10,697
在本例中 此球形的线框表示

624
00:37:10,764 --> 00:37:15,636
可视化显示用于照亮太阳系的光源

625
00:37:16,637 --> 00:37:19,273
由于我们这时并不调试光源

626
00:37:19,339 --> 00:37:22,476
我可以使用编辑器菜单关闭光源显示

627
00:37:22,543 --> 00:37:24,077
现在我们可以专注于3D世界

628
00:37:26,079 --> 00:37:28,749
让我增大这里的窗口

629
00:37:29,883 --> 00:37:31,618
在更大空间中进行处理

630
00:37:32,052 --> 00:37:34,388
在左侧 我调出

631
00:37:34,454 --> 00:37:36,356
整个场景图的概览表示

632
00:37:36,423 --> 00:37:39,560
当我展开这个图时
可以看到所有SceneKit节点

633
00:37:39,626 --> 00:37:41,995
这些节点用于构建3D显示内容

634
00:37:43,163 --> 00:37:46,767
在这里 我们可以看到
是显示内容的组成部分

635
00:37:46,834 --> 00:37:48,101
我选择它

636
00:37:48,168 --> 00:37:51,672
在左侧的检查器中可以看到详细信息

637
00:37:51,738 --> 00:37:54,374
在本例中 我们可以检查材质属性

638
00:37:54,441 --> 00:37:56,243
甚至可以在3D中查看

639
00:37:56,977 --> 00:38:00,314
现在可以看到
它确实是3D世界的一部分

640
00:38:00,581 --> 00:38:05,052
由于SceneKit编辑器
可视化显示摄像机的视锥体

641
00:38:05,118 --> 00:38:08,021
因此很容易理解
为什么无法在设备显示屏上看到土星

642
00:38:08,088 --> 00:38:11,859
它位于摄像机视野之外

643
00:38:12,926 --> 00:38:13,994
我们没有足够的时间

644
00:38:14,061 --> 00:38:16,964
来分析代码和解决问题

645
00:38:17,030 --> 00:38:20,634
我将会在演讲结束后
让Breckin 来查看这个问题

646
00:38:20,701 --> 00:38:24,371
现在 我可以做的是
使用右上角的“导出”按钮

647
00:38:24,438 --> 00:38:27,207
导出这个快照的当前状态

648
00:38:27,274 --> 00:38:30,344
将它保存到磁盘上
现在我可以分享快照

649
00:38:30,410 --> 00:38:34,114
其它人将能够打开它

650
00:38:34,181 --> 00:38:37,184
将它作为引用 进入代码解决问题

651
00:38:38,151 --> 00:38:41,288
我们可以看到

652
00:38:41,355 --> 00:38:44,925
可视化显示你使用
SceneKit创建的3D世界

653
00:38:44,992 --> 00:38:48,095
能够帮助你更好地理解
程序中的运行情况

654
00:38:48,595 --> 00:38:51,565
若你将SceneKit用于你的程序

655
00:38:51,632 --> 00:38:53,300
你会发现 它能够方便地

656
00:38:53,367 --> 00:38:55,536
可视化检查你创建的3D世界

657
00:38:58,472 --> 00:38:59,439
让我们返回

658
00:39:03,844 --> 00:39:05,479
切换到幻灯片

659
00:39:09,116 --> 00:39:11,118
我们回顾今天讲过的内容

660
00:39:17,424 --> 00:39:19,693
首先 我们推出无线开发功能

661
00:39:19,960 --> 00:39:22,462
这是一种全新的开发和调试体验

662
00:39:22,529 --> 00:39:25,499
完全不需要数据线
你们肯定会喜欢这个功能

663
00:39:25,566 --> 00:39:27,201
参加本次大会的人员

664
00:39:27,267 --> 00:39:30,103
可以使用WWDC实验室Wi-Fi
尝试这个功能

665
00:39:30,170 --> 00:39:32,706
Wi-Fi已设置过
让你能够进行无线开发

666
00:39:34,107 --> 00:39:36,476
接下来 我们讨论了断点增强

667
00:39:36,810 --> 00:39:38,712
现在 我们能够比以前更方便地

668
00:39:38,779 --> 00:39:40,480
使用断点进行调试

669
00:39:41,114 --> 00:39:44,484
最后一点也同样重要
我们改进可视化调试器

670
00:39:44,551 --> 00:39:48,188
你可以调试视图控制器
和视图层次结构

671
00:39:48,255 --> 00:39:51,191
可以检查SpriteKit内容
和SceneKit内容

672
00:39:51,625 --> 00:39:53,994
若你以前没使用过视图调试器
那么你应该试一试

673
00:39:54,061 --> 00:39:58,198
你会发现 这个工具
可以方便地可视化检查你的程序

674
00:39:59,800 --> 00:40:02,536
有关更多信息 请网上查阅

675
00:40:02,603 --> 00:40:05,339
这是真实URL
而不是404错误代码

676
00:40:06,473 --> 00:40:09,610
我们还建议观看以下相关演讲

677
00:40:13,514 --> 00:40:17,084
谢谢大家
请关注本周其它内容

