1
00:00:22,856 --> 00:00:24,306
Debugging with Xcode 9.

2
00:00:25,296 --> 00:00:26,826
I'm Chris Miles and I work on

3
00:00:26,906 --> 00:00:27,386
Xcode.

4
00:00:27,906 --> 00:00:29,056
We've got a lot of great new

5
00:00:29,056 --> 00:00:30,526
debugging features to talk about

6
00:00:30,526 --> 00:00:32,036
today, so let's dive straight

7
00:00:32,036 --> 00:00:33,026
into it.

8
00:00:33,666 --> 00:00:35,746
I'd like to start by talking

9
00:00:35,746 --> 00:00:37,646
about developing and debugging

10
00:00:37,646 --> 00:00:38,346
with devices.

11
00:00:39,146 --> 00:00:40,626
Let's take a look at our typical

12
00:00:40,626 --> 00:00:41,696
development configuration.

13
00:00:42,716 --> 00:00:44,046
We've got our Mac running Xcode

14
00:00:44,046 --> 00:00:45,966
and nearby we have the device

15
00:00:45,966 --> 00:00:46,956
that we're developing with.

16
00:00:47,656 --> 00:00:49,556
Connecting the two we have the

17
00:00:49,556 --> 00:00:50,826
familiar white cable.

18
00:00:50,826 --> 00:00:53,206
Now, this configuration has

19
00:00:53,206 --> 00:00:55,006
suited us very well for almost

20
00:00:55,006 --> 00:00:57,026
ten years now, but more and more

21
00:00:57,026 --> 00:00:58,776
developers are finding needs to

22
00:00:58,776 --> 00:01:01,236
be more mobile while debugging

23
00:01:01,356 --> 00:01:03,696
with their devices, and to make

24
00:01:03,736 --> 00:01:05,196
this easier, I'm proud to

25
00:01:05,196 --> 00:01:07,736
announce that with Xcode 9 that

26
00:01:07,736 --> 00:01:08,976
white cable is no longer needed.

27
00:01:09,516 --> 00:01:15,316
[ Applause ]

28
00:01:15,816 --> 00:01:17,366
It is now possible to develop

29
00:01:17,366 --> 00:01:18,896
and debug on your device over

30
00:01:18,896 --> 00:01:21,166
Wi-Fi, and we call this wireless

31
00:01:21,166 --> 00:01:21,746
development.

32
00:01:21,746 --> 00:01:25,736
So who can take advantage of

33
00:01:25,736 --> 00:01:26,696
wireless development?

34
00:01:27,346 --> 00:01:28,506
Well, we think many developers

35
00:01:28,506 --> 00:01:29,686
are going to love it, but here

36
00:01:29,686 --> 00:01:31,106
are some obvious examples.

37
00:01:31,786 --> 00:01:34,076
With the introduction of ARKit

38
00:01:34,426 --> 00:01:36,156
this week, I'm sure many of you

39
00:01:36,156 --> 00:01:38,316
are eager to sit down and build

40
00:01:38,316 --> 00:01:40,626
an augmented reality app.

41
00:01:42,416 --> 00:01:44,226
While debugging your app you're

42
00:01:44,226 --> 00:01:45,196
going to need to be moving

43
00:01:45,196 --> 00:01:46,366
around more than you might be

44
00:01:46,366 --> 00:01:47,976
used to, holding your phone,

45
00:01:48,336 --> 00:01:49,516
doing this kind of thing, and

46
00:01:49,886 --> 00:01:51,226
being able to get away from the

47
00:01:51,226 --> 00:01:52,436
computer to do this will make

48
00:01:52,436 --> 00:01:53,796
that much easier than it

49
00:01:53,796 --> 00:01:55,406
otherwise would have been.

50
00:01:56,416 --> 00:01:57,456
For those of you building

51
00:01:57,456 --> 00:01:59,406
fitness apps, you probably know

52
00:01:59,406 --> 00:02:01,156
that the best way to test and

53
00:02:01,156 --> 00:02:02,336
debug your fitness app is for

54
00:02:02,336 --> 00:02:03,616
the athlete to wear the device

55
00:02:03,676 --> 00:02:05,046
on them while they work out.

56
00:02:06,026 --> 00:02:07,156
Being untethered from the Mac

57
00:02:07,156 --> 00:02:08,556
will make this much easier as

58
00:02:08,556 --> 00:02:08,996
well.

59
00:02:09,596 --> 00:02:12,956
For those of you building apps

60
00:02:12,956 --> 00:02:15,276
for accessories, I'm happy to

61
00:02:15,276 --> 00:02:16,686
tell you that you are finally

62
00:02:16,736 --> 00:02:17,826
able to debug your app on the

63
00:02:17,826 --> 00:02:17,976
device

64
00:02:18,106 --> 00:02:20,016
while the accessory's plugged in

65
00:02:20,016 --> 00:02:21,776
to the Lightning port.

66
00:02:22,516 --> 00:02:24,636
[ Applause ]

67
00:02:25,136 --> 00:02:26,296
We think accessory makers are

68
00:02:26,296 --> 00:02:27,276
going to love wireless

69
00:02:27,276 --> 00:02:27,876
development.

70
00:02:29,226 --> 00:02:30,186
And for the rest of us

71
00:02:30,546 --> 00:02:31,976
convenience will be a big factor

72
00:02:32,326 --> 00:02:34,496
in choosing when to go wireless.

73
00:02:34,746 --> 00:02:35,986
We don't always remember to

74
00:02:35,986 --> 00:02:37,686
bring our cables with us or

75
00:02:37,686 --> 00:02:38,776
sometimes the Lightning port is

76
00:02:38,776 --> 00:02:40,236
in use for some other purpose.

77
00:02:40,756 --> 00:02:42,146
But now, just having the option

78
00:02:42,146 --> 00:02:44,096
to jump on a Wi-Fi network to

79
00:02:44,096 --> 00:02:45,396
continue developing and

80
00:02:45,396 --> 00:02:47,136
debugging on our device, will be

81
00:02:47,136 --> 00:02:48,246
a huge convenience.

82
00:02:48,776 --> 00:02:50,936
Now, it's not only iOS

83
00:02:50,976 --> 00:02:53,266
developers who can enjoy this

84
00:02:53,266 --> 00:02:53,906
convenience.

85
00:02:54,846 --> 00:02:56,266
Wirelessly connected Apple TVs

86
00:02:56,266 --> 00:02:56,976
are also supported.

87
00:02:57,516 --> 00:03:02,546
[ Applause ]

88
00:03:03,046 --> 00:03:04,566
So now Apple TV developers can

89
00:03:04,566 --> 00:03:05,916
develop and debug on their Apple

90
00:03:05,916 --> 00:03:08,166
TVs over Wi-Fi.

91
00:03:08,456 --> 00:03:10,256
Apple TV developers, your living

92
00:03:10,256 --> 00:03:11,836
room is now your development

93
00:03:11,836 --> 00:03:12,306
studio.

94
00:03:12,736 --> 00:03:14,676
Sit back and relax on your couch

95
00:03:14,906 --> 00:03:16,476
while you build the next great

96
00:03:16,476 --> 00:03:16,976
Apple TV game

97
00:03:17,016 --> 00:03:18,161
[ Applause ]

98
00:03:18,161 --> 00:03:19,306
.

99
00:03:19,306 --> 00:03:20,486
There's no need to stretch

100
00:03:20,486 --> 00:03:22,246
cables across the room, to trip

101
00:03:22,246 --> 00:03:24,506
over your kids or roommates or

102
00:03:24,506 --> 00:03:25,156
dogs or cats.

103
00:03:25,596 --> 00:03:26,916
We think Apple TV developers are

104
00:03:26,916 --> 00:03:28,046
going to love wireless

105
00:03:28,046 --> 00:03:29,536
development, and we can't wait

106
00:03:29,536 --> 00:03:31,486
to see the next great Apple TV

107
00:03:31,486 --> 00:03:32,306
game that you build while

108
00:03:32,306 --> 00:03:32,976
relaxing in your living room.

109
00:03:40,236 --> 00:03:41,486
So what do you need to be able

110
00:03:41,486 --> 00:03:42,796
to take advantage of wireless

111
00:03:42,796 --> 00:03:43,366
development?

112
00:03:44,156 --> 00:03:45,206
Well, you just need an iPhone,

113
00:03:45,206 --> 00:03:47,706
iPad or iPod touch, running iOS

114
00:03:47,706 --> 00:03:49,986
11 or an Apple TV running tvOS

115
00:03:49,986 --> 00:03:50,526
11.

116
00:03:50,526 --> 00:03:52,736
And on the Mac you just need to

117
00:03:52,736 --> 00:03:56,656
be running macOS 10.12.4 or

118
00:03:56,836 --> 00:03:56,976
later.

119
00:03:57,056 --> 00:03:58,016
What about tools support?

120
00:03:59,126 --> 00:04:00,656
Well, Xcode has extensive

121
00:04:00,656 --> 00:04:02,256
support for wirelessly connected

122
00:04:02,256 --> 00:04:02,816
devices.

123
00:04:03,206 --> 00:04:04,446
In fact, Xcode treats a

124
00:04:04,446 --> 00:04:06,246
wirelessly connected device in

125
00:04:06,246 --> 00:04:07,816
exactly the same way as a USB

126
00:04:07,816 --> 00:04:09,496
connected device, so all of the

127
00:04:09,496 --> 00:04:11,036
device actions will just work,

128
00:04:11,666 --> 00:04:13,036
installing and running your app

129
00:04:13,036 --> 00:04:14,256
on the device, of course, as

130
00:04:14,256 --> 00:04:15,666
well as debugging your app, and

131
00:04:15,856 --> 00:04:16,986
this includes all of the

132
00:04:16,986 --> 00:04:18,656
advanced debugging features,

133
00:04:18,656 --> 00:04:19,866
such as V debugging, Memory

134
00:04:19,866 --> 00:04:21,346
Graph debugging and GP Frame

135
00:04:21,346 --> 00:04:21,706
debugging.

136
00:04:22,836 --> 00:04:24,316
Profiling in instruments works

137
00:04:24,316 --> 00:04:26,126
great as well, and other tools

138
00:04:26,126 --> 00:04:27,596
that also support wirelessly

139
00:04:27,596 --> 00:04:29,036
connected devices, include

140
00:04:29,036 --> 00:04:31,206
Accessibility Inspector, Console

141
00:04:31,206 --> 00:04:32,356
and Configurator.

142
00:04:32,586 --> 00:04:38,046
For tvOS developers, Safari Web

143
00:04:38,046 --> 00:04:40,366
Inspector supports wirelessly

144
00:04:40,366 --> 00:04:41,476
connected Apple TVs.

145
00:04:41,826 --> 00:04:43,396
So this is great news for

146
00:04:43,396 --> 00:04:44,446
TVMLKit developers.

147
00:04:44,856 --> 00:04:46,096
And QuickTime screen recording

148
00:04:46,096 --> 00:04:48,256
also supports wirelessly

149
00:04:48,256 --> 00:04:51,246
connected Apple TVs.

150
00:04:51,436 --> 00:04:52,286
Now, while we're calling this

151
00:04:52,286 --> 00:04:53,696
wireless development, strictly

152
00:04:53,696 --> 00:04:55,506
speaking, you're not limited to

153
00:04:55,506 --> 00:04:56,666
only connecting your devices

154
00:04:56,666 --> 00:04:57,256
over Wi-Fi.

155
00:04:57,436 --> 00:04:59,436
While Wi-Fi will be a popular

156
00:04:59,436 --> 00:05:01,956
choice, for those of us that

157
00:05:01,956 --> 00:05:03,316
support it, Ethernet will work

158
00:05:03,316 --> 00:05:04,156
great as well.

159
00:05:04,666 --> 00:05:06,476
Really, any combination of Wi-Fi

160
00:05:06,476 --> 00:05:08,056
and Ethernet to connect your

161
00:05:08,056 --> 00:05:09,006
device and your Mac over the

162
00:05:09,006 --> 00:05:11,216
network works great, provided

163
00:05:11,216 --> 00:05:12,536
that your Mac and your device

164
00:05:12,536 --> 00:05:14,626
can connect to each other over

165
00:05:14,626 --> 00:05:15,806
that network.

166
00:05:18,656 --> 00:05:20,916
And just to be clear, the option

167
00:05:20,916 --> 00:05:22,366
to connect your devices over USB

168
00:05:22,676 --> 00:05:24,276
remains as it always has been.

169
00:05:24,496 --> 00:05:25,436
So these are now all your

170
00:05:25,436 --> 00:05:27,306
options for connecting your

171
00:05:27,306 --> 00:05:29,266
devices with your development

172
00:05:29,266 --> 00:05:29,626
tools.

173
00:05:30,176 --> 00:05:33,106
So that's just been a brief

174
00:05:33,156 --> 00:05:34,586
introduction to wireless

175
00:05:34,586 --> 00:05:35,136
development.

176
00:05:35,256 --> 00:05:36,816
And now, to give you details on

177
00:05:36,816 --> 00:05:38,246
how to pair your devices and to

178
00:05:38,246 --> 00:05:39,286
talk about the workflow, I'd

179
00:05:39,286 --> 00:05:39,916
like to invite up Breckin.

180
00:05:40,516 --> 00:05:46,606
[ Applause ]

181
00:05:47,106 --> 00:05:49,816
>> Thanks, Chris.

182
00:05:49,866 --> 00:05:50,336
All right.

183
00:05:50,386 --> 00:05:52,166
Well, we've been working really

184
00:05:52,166 --> 00:05:53,876
hard on wireless development for

185
00:05:53,876 --> 00:05:56,366
Xcode 9, and I can't wait to

186
00:05:56,366 --> 00:05:58,586
talk about it with you, so let's

187
00:05:58,586 --> 00:05:59,176
get started.

188
00:06:00,286 --> 00:06:01,676
How do you set up your device

189
00:06:01,806 --> 00:06:03,016
for wireless development?

190
00:06:03,626 --> 00:06:05,066
Well, it's really easy.

191
00:06:05,816 --> 00:06:07,436
Just go to the Devices and

192
00:06:07,436 --> 00:06:09,816
Simulators window and connect

193
00:06:09,816 --> 00:06:12,396
your device to your Mac with

194
00:06:12,396 --> 00:06:13,576
your Lightning or USB cable.

195
00:06:14,556 --> 00:06:15,626
The device will show up, as it

196
00:06:15,626 --> 00:06:16,386
always has, but you'll notice

197
00:06:16,386 --> 00:06:16,956
there's a new option.

198
00:06:22,046 --> 00:06:23,256
Connect via network.

199
00:06:24,246 --> 00:06:26,776
Just enable this option and if

200
00:06:26,776 --> 00:06:28,566
the device and the Mac are on

201
00:06:28,566 --> 00:06:30,486
the same network, after a few

202
00:06:30,486 --> 00:06:32,316
moments you'll see a globe icon

203
00:06:32,316 --> 00:06:32,826
appear to the right of the

204
00:06:32,826 --> 00:06:32,976
device.

205
00:06:37,226 --> 00:06:38,906
Once this globe icon appears,

206
00:06:38,996 --> 00:06:40,596
you know you can unplug your

207
00:06:40,596 --> 00:06:42,256
cable and continue developing

208
00:06:42,256 --> 00:06:43,666
your app completely wirelessly.

209
00:06:44,166 --> 00:06:46,346
Now, this works identically for

210
00:06:46,346 --> 00:06:48,366
iPhone, iPad, iPod touch and

211
00:06:48,366 --> 00:06:51,396
Apple TV, but for Apple TV

212
00:06:52,566 --> 00:06:53,426
there's something else.

213
00:06:54,166 --> 00:06:56,556
So as Chris mentioned, a lot of

214
00:06:56,556 --> 00:06:58,266
our Apple TVs, they're not

215
00:06:58,266 --> 00:06:59,766
sitting on our desks, they're in

216
00:06:59,766 --> 00:07:01,116
our entertainment center and,

217
00:07:01,206 --> 00:07:02,516
you know, you've got your cables

218
00:07:02,516 --> 00:07:03,496
set up just the way you want

219
00:07:03,496 --> 00:07:04,946
them, all of that.

220
00:07:04,946 --> 00:07:05,976
The last thing you want to do is

221
00:07:05,976 --> 00:07:07,146
reach back there and unplug

222
00:07:07,146 --> 00:07:08,866
everything and connect a USB-C

223
00:07:08,866 --> 00:07:11,846
cable, so luckily for Apple TV,

224
00:07:11,986 --> 00:07:12,806
you don't have to do that.

225
00:07:12,906 --> 00:07:14,386
We support wireless pairing in

226
00:07:14,386 --> 00:07:17,336
Discovery, so to do that all you

227
00:07:17,336 --> 00:07:18,966
have to do is go to the Remote

228
00:07:18,966 --> 00:07:21,146
App and Devices screen on your

229
00:07:21,146 --> 00:07:21,726
Apple TV.

230
00:07:23,006 --> 00:07:24,866
Once you go there, go back to

231
00:07:24,866 --> 00:07:25,976
the Devices and Simulators

232
00:07:25,976 --> 00:07:26,826
window in Xcode.

233
00:07:27,326 --> 00:07:29,276
That Apple TV will appear as a

234
00:07:29,276 --> 00:07:31,096
discovered device automatically.

235
00:07:31,706 --> 00:07:33,626
Once you select that device, a

236
00:07:33,626 --> 00:07:34,666
pin code will appear on your

237
00:07:34,666 --> 00:07:35,186
Apple TV.

238
00:07:35,706 --> 00:07:37,696
Just put that pin code in and

239
00:07:38,926 --> 00:07:39,906
click Connect.

240
00:07:41,096 --> 00:07:43,546
After you connect it will be the

241
00:07:43,546 --> 00:07:45,246
same as if you had paired with

242
00:07:45,246 --> 00:07:47,316
it via USB-C cable.

243
00:07:47,806 --> 00:07:49,206
We think this is great for Apple

244
00:07:49,276 --> 00:07:50,846
TV development.

245
00:07:52,636 --> 00:07:53,236
All right.

246
00:07:53,236 --> 00:07:56,476
So that's getting paired, but I

247
00:07:56,476 --> 00:07:57,536
know some of you are wondering,

248
00:07:57,716 --> 00:07:58,846
you know, is it really that easy

249
00:07:58,846 --> 00:08:01,746
to connect, and the answer for

250
00:08:01,746 --> 00:08:04,176
almost everyone is absolutely.

251
00:08:04,546 --> 00:08:07,936
So for most home and small

252
00:08:07,936 --> 00:08:09,306
business networks no

253
00:08:09,306 --> 00:08:10,566
configuration is necessary.

254
00:08:10,796 --> 00:08:12,176
Just make sure that your Mac and

255
00:08:12,176 --> 00:08:13,186
your devices are on the same

256
00:08:13,186 --> 00:08:14,226
network and everything just

257
00:08:14,226 --> 00:08:14,466
works.

258
00:08:15,396 --> 00:08:18,466
Now, we know some of you work on

259
00:08:18,466 --> 00:08:20,036
more complex networks, say

260
00:08:20,036 --> 00:08:21,736
corporate, large institutional

261
00:08:21,736 --> 00:08:23,626
networks, and if your system

262
00:08:23,626 --> 00:08:26,126
administrator has set up certain

263
00:08:26,296 --> 00:08:27,806
restrictions, it may be a little

264
00:08:27,806 --> 00:08:29,506
more difficult, but not by much

265
00:08:29,506 --> 00:08:30,726
because we now support

266
00:08:30,896 --> 00:08:32,226
connecting directly by IP

267
00:08:32,226 --> 00:08:34,666
address to your device.

268
00:08:35,696 --> 00:08:36,626
This is really easy.

269
00:08:37,035 --> 00:08:38,876
Not quite as easy as doing

270
00:08:38,876 --> 00:08:40,775
nothing, but all you have to do

271
00:08:40,775 --> 00:08:42,285
is Control click on the device

272
00:08:42,285 --> 00:08:43,346
in the Devices and Simulators

273
00:08:43,346 --> 00:08:46,686
window and you'll see a Connect

274
00:08:46,686 --> 00:08:47,636
via IP address option.

275
00:08:47,846 --> 00:08:51,716
Just click that and then go to

276
00:08:51,716 --> 00:08:52,956
your settings on your device,

277
00:08:53,296 --> 00:08:54,836
get your IP address, enter it in

278
00:08:54,836 --> 00:08:55,666
and you can connect.

279
00:08:55,946 --> 00:08:58,736
So adds a little bit of a

280
00:08:58,736 --> 00:08:59,626
technical aside.

281
00:09:00,306 --> 00:09:01,846
If you can ping the device from

282
00:09:01,846 --> 00:09:03,826
the Mac, you're probably good to

283
00:09:03,826 --> 00:09:04,106
go.

284
00:09:04,306 --> 00:09:06,836
Now, if you want any of the

285
00:09:06,836 --> 00:09:08,566
deeper details as far as ports,

286
00:09:08,756 --> 00:09:09,646
maybe to pass to your system

287
00:09:09,646 --> 00:09:11,226
administrator, please check out

288
00:09:11,226 --> 00:09:12,166
the wireless development

289
00:09:12,166 --> 00:09:12,936
documentation.

290
00:09:12,936 --> 00:09:14,176
It's got all of that detail.

291
00:09:14,406 --> 00:09:16,076
But, you know, to reiterate, for

292
00:09:16,076 --> 00:09:17,856
almost everyone almost all of

293
00:09:17,856 --> 00:09:19,416
the time you won't need to do

294
00:09:19,416 --> 00:09:20,916
any of this.

295
00:09:21,246 --> 00:09:22,606
Okay. So now that we have

296
00:09:22,606 --> 00:09:23,716
connectivity and pairing out of

297
00:09:23,716 --> 00:09:25,266
the way, it's time to actually

298
00:09:25,266 --> 00:09:27,566
work on your app.

299
00:09:27,786 --> 00:09:32,196
So to do that, well, nothing's

300
00:09:32,196 --> 00:09:32,826
really changed.

301
00:09:33,436 --> 00:09:34,826
Just select your device in the

302
00:09:34,826 --> 00:09:36,556
Devices list, only now, when

303
00:09:36,556 --> 00:09:38,016
it's connected, you'll see a

304
00:09:38,016 --> 00:09:39,526
globe to the right of the device

305
00:09:39,646 --> 00:09:40,756
just like you see in the Devices

306
00:09:40,756 --> 00:09:41,066
window.

307
00:09:41,536 --> 00:09:43,176
Now, if you don't see a globe,

308
00:09:43,416 --> 00:09:44,686
that means that it's not

309
00:09:44,686 --> 00:09:45,356
connected right now.

310
00:09:45,356 --> 00:09:46,646
Maybe it's asleep in your

311
00:09:46,646 --> 00:09:47,016
pocket.

312
00:09:47,746 --> 00:09:48,406
Don't worry.

313
00:09:48,516 --> 00:09:49,476
Build and run to it anyway.

314
00:09:49,906 --> 00:09:50,636
We'll connect to it

315
00:09:50,636 --> 00:09:51,856
automatically.

316
00:09:52,706 --> 00:09:53,256
All right.

317
00:09:53,256 --> 00:09:55,066
So that's a little bit about how

318
00:09:55,066 --> 00:09:56,076
to get started with wireless

319
00:09:56,076 --> 00:09:56,576
development.

320
00:09:56,576 --> 00:09:58,186
But enough talking about it.

321
00:09:58,236 --> 00:09:58,976
I'd love to show it to you.

322
00:10:19,476 --> 00:10:20,856
Okay. Here I am with my Mac.

323
00:10:21,226 --> 00:10:22,156
I've got a phone.

324
00:10:22,156 --> 00:10:23,626
We've put it on a camera here to

325
00:10:23,626 --> 00:10:24,426
show you the cable.

326
00:10:26,916 --> 00:10:28,686
And I would like to make this

327
00:10:29,536 --> 00:10:31,686
iPhone enabled for wireless

328
00:10:31,686 --> 00:10:32,236
development.

329
00:10:32,386 --> 00:10:33,696
I'm going to select Xcode, go to

330
00:10:33,736 --> 00:10:35,656
the Devices and Simulators

331
00:10:35,656 --> 00:10:35,966
window.

332
00:10:43,046 --> 00:10:43,756
And you'll see here's our new

333
00:10:43,756 --> 00:10:44,096
option.

334
00:10:44,976 --> 00:10:47,466
Once I check that the device and

335
00:10:47,466 --> 00:10:48,466
Xcode will communicate,

336
00:10:49,006 --> 00:10:50,056
establish a connection.

337
00:10:50,056 --> 00:10:51,806
As long as you're on the same

338
00:10:52,296 --> 00:10:54,246
network, you'll see the globe

339
00:10:54,246 --> 00:10:54,886
icon appear.

340
00:10:55,216 --> 00:10:57,866
So what's next after this?

341
00:10:57,866 --> 00:10:58,976
It's time to pull the plug.

342
00:11:05,166 --> 00:11:06,356
Okay. So we see the phone is

343
00:11:06,356 --> 00:11:07,736
still connected, it's still got

344
00:11:07,736 --> 00:11:09,816
the globe icon, and that lets

345
00:11:09,816 --> 00:11:10,906
you know that you're ready to do

346
00:11:10,906 --> 00:11:11,496
development.

347
00:11:11,896 --> 00:11:14,006
So I'm going to open an app that

348
00:11:14,116 --> 00:11:14,966
my colleagues and I have been

349
00:11:14,966 --> 00:11:15,376
working on.

350
00:11:15,696 --> 00:11:18,906
It's called SolarSystem, and you

351
00:11:18,906 --> 00:11:19,976
can read about it a little bit

352
00:11:19,976 --> 00:11:20,716
in the README.

353
00:11:20,716 --> 00:11:22,336
For now I'm going to click the

354
00:11:22,336 --> 00:11:22,906
Play button.

355
00:11:23,206 --> 00:11:24,976
This will build the app.

356
00:11:34,426 --> 00:11:36,476
It will run, it will install and

357
00:11:37,326 --> 00:11:38,866
will launch the app and attach

358
00:11:38,866 --> 00:11:40,446
the debugger, and it will do all

359
00:11:40,446 --> 00:11:42,116
of that completely wirelessly.

360
00:11:44,546 --> 00:11:46,976
So the SolarSystem app provides

361
00:11:46,976 --> 00:11:49,016
a way for users to explore the

362
00:11:49,016 --> 00:11:50,256
solar system in a fun and

363
00:11:50,256 --> 00:11:51,016
interactive way.

364
00:11:51,386 --> 00:11:54,256
So as soon as it comes up, we'll

365
00:11:54,256 --> 00:11:54,976
take a quick look at it.

366
00:12:02,046 --> 00:12:02,386
All right.

367
00:12:02,386 --> 00:12:03,656
So here are our planets orbiting

368
00:12:03,656 --> 00:12:04,016
around.

369
00:12:04,016 --> 00:12:06,796
And I've been working on a fun

370
00:12:06,796 --> 00:12:08,376
feature called Moon Jumper.

371
00:12:08,576 --> 00:12:10,636
I'm going to tap this little

372
00:12:10,816 --> 00:12:13,826
weight icon on the bottom.

373
00:12:13,956 --> 00:12:16,006
So this is really fun.

374
00:12:16,056 --> 00:12:18,786
It lets kids take their iPhone,

375
00:12:19,746 --> 00:12:21,506
jump up and down and see how

376
00:12:21,506 --> 00:12:22,576
high they would jump if they

377
00:12:22,576 --> 00:12:23,136
were on the moon.

378
00:12:23,326 --> 00:12:25,236
So really fun to watch people

379
00:12:25,236 --> 00:12:26,176
play around with it.

380
00:12:26,396 --> 00:12:27,546
So we've got our little

381
00:12:27,546 --> 00:12:29,886
astronaut and our astronaut's on

382
00:12:29,886 --> 00:12:31,936
the moon, and now, we've gotten

383
00:12:31,936 --> 00:12:33,486
some reports that it's a little

384
00:12:33,486 --> 00:12:35,386
too easy to jump.

385
00:12:35,496 --> 00:12:37,336
So we've set this bar to 180

386
00:12:37,336 --> 00:12:37,626
feet.

387
00:12:37,996 --> 00:12:39,456
That should take a little bit of

388
00:12:39,456 --> 00:12:41,476
effort, but people are finding

389
00:12:41,476 --> 00:12:42,376
that they can get there pretty

390
00:12:42,376 --> 00:12:42,646
easily.

391
00:12:42,896 --> 00:12:44,376
I'd like to test this out.

392
00:12:44,526 --> 00:12:45,966
So let's think about how would

393
00:12:45,966 --> 00:12:47,976
you test this out before

394
00:12:48,056 --> 00:12:48,926
wireless development.

395
00:12:49,276 --> 00:12:51,496
Right. Well, you got it plugged

396
00:12:51,496 --> 00:12:52,676
in, right, so you're going to

397
00:12:52,676 --> 00:12:53,776
pick it up and you're going to

398
00:12:53,776 --> 00:12:54,906
try and get the accelerometer to

399
00:12:54,906 --> 00:12:56,436
do what you want to do, and all

400
00:12:56,436 --> 00:12:57,226
of that kind of stuff.

401
00:12:57,226 --> 00:12:59,016
Well, you know, this is a

402
00:12:59,016 --> 00:13:01,696
jumping app and if I need to put

403
00:13:01,696 --> 00:13:03,216
a breakpoint right here, which I

404
00:13:03,216 --> 00:13:04,696
happen to know is the place that

405
00:13:04,696 --> 00:13:06,626
should stop when I've jumped

406
00:13:06,626 --> 00:13:08,556
high enough, if I want to see

407
00:13:08,556 --> 00:13:09,636
what that feels like, because

408
00:13:09,636 --> 00:13:10,586
I've had people tell me it

409
00:13:10,586 --> 00:13:11,716
doesn't feel right, I need to

410
00:13:11,716 --> 00:13:14,096
actually jump, so that's pretty

411
00:13:14,096 --> 00:13:17,176
much what I'm going to do.

412
00:13:17,406 --> 00:13:23,296
Okay. Someone put me up to this

413
00:13:23,296 --> 00:13:24,776
[laughter].

414
00:13:24,776 --> 00:13:25,046
All right.

415
00:13:25,106 --> 00:13:26,446
So you can't see the screen, so

416
00:13:26,446 --> 00:13:27,186
I'm going to describe what's

417
00:13:27,186 --> 00:13:27,546
going on.

418
00:13:27,546 --> 00:13:28,846
I'm going to jump a little bit.

419
00:13:29,776 --> 00:13:31,716
Okay. Now, the astronaut jumped

420
00:13:32,206 --> 00:13:33,966
quite a bit, but not high enough

421
00:13:33,966 --> 00:13:34,376
to reach.

422
00:13:34,376 --> 00:13:36,566
Let's see if I can actually jump

423
00:13:36,566 --> 00:13:38,566
to 180 feet.

424
00:13:39,666 --> 00:13:39,976
Let's see.

425
00:13:40,046 --> 00:13:41,596
Did I get it?

426
00:13:42,226 --> 00:13:44,226
[ Laughter ]

427
00:13:44,436 --> 00:13:47,086
Come on. Oh, there we go.

428
00:13:47,146 --> 00:13:47,956
All right.

429
00:13:48,516 --> 00:13:55,586
[ Applause ]

430
00:13:56,086 --> 00:13:56,366
All right.

431
00:13:56,366 --> 00:13:58,536
So we're paused in the app.

432
00:13:58,536 --> 00:14:00,406
Gravity is the value that you

433
00:14:00,406 --> 00:14:03,256
got to, required acceleration is

434
00:14:03,796 --> 00:14:05,846
the amount that is required, and

435
00:14:05,846 --> 00:14:07,666
it looks like what's probably

436
00:14:07,666 --> 00:14:10,676
happening is that this value

437
00:14:10,676 --> 00:14:15,466
here needs to be a little lower

438
00:14:15,466 --> 00:14:16,846
so that it takes longer to jump.

439
00:14:16,996 --> 00:14:18,546
So I don't have time at the

440
00:14:18,546 --> 00:14:20,586
moment to demonstrate that or to

441
00:14:20,586 --> 00:14:21,836
fix it, so I'm going to go ahead

442
00:14:21,836 --> 00:14:22,966
and clear this breakpoint, click

443
00:14:23,026 --> 00:14:23,326
Continue.

444
00:14:33,826 --> 00:14:34,246
All right.

445
00:14:34,436 --> 00:14:35,096
Looks like we lost the

446
00:14:35,096 --> 00:14:35,556
connection.

447
00:14:35,556 --> 00:14:36,196
That's no problem.

448
00:14:36,226 --> 00:14:37,616
Let's see, actually, if we can

449
00:14:37,616 --> 00:14:37,976
attach back to it.

450
00:14:45,196 --> 00:14:47,326
So you'll notice in Xcode 9 we

451
00:14:47,326 --> 00:14:49,266
now auto complete the process

452
00:14:49,266 --> 00:14:50,946
name, we tokenize it, and you

453
00:14:51,316 --> 00:14:53,466
get completion in this entry,

454
00:14:53,466 --> 00:14:53,976
which is really nice.

455
00:15:00,046 --> 00:15:00,446
All right.

456
00:15:00,446 --> 00:15:00,936
We're back.

457
00:15:01,516 --> 00:15:07,616
[ Applause ]

458
00:15:08,116 --> 00:15:08,676
All right.

459
00:15:08,676 --> 00:15:09,686
So there's one more thing that

460
00:15:09,686 --> 00:15:12,016
I'd like to take a look at, and

461
00:15:12,466 --> 00:15:13,696
that's a performance problem

462
00:15:13,996 --> 00:15:15,736
that my colleague was pointing

463
00:15:15,736 --> 00:15:15,866
out.

464
00:15:15,866 --> 00:15:17,476
We were tapping around with the

465
00:15:17,476 --> 00:15:18,706
SolarSystem and they noticed

466
00:15:19,306 --> 00:15:20,636
when they tapped on Jupiter,

467
00:15:21,896 --> 00:15:23,446
there's a bit of a lag.

468
00:15:23,616 --> 00:15:25,376
The camera doesn't show it

469
00:15:25,376 --> 00:15:26,846
really well, but you can kind of

470
00:15:26,846 --> 00:15:28,496
see a pause and, you know,

471
00:15:28,706 --> 00:15:31,976
that's impacting battery life

472
00:15:32,016 --> 00:15:32,626
and we just kind of want to take

473
00:15:32,656 --> 00:15:33,496
a look and see if we can figure

474
00:15:33,526 --> 00:15:33,976
out what's going on.

475
00:15:38,046 --> 00:15:38,806
So I'm going to go to the Energy

476
00:15:38,806 --> 00:15:39,406
Impact Gauge.

477
00:15:39,476 --> 00:15:40,286
Sure enough it's high.

478
00:15:40,286 --> 00:15:41,496
You'll notice that this has been

479
00:15:41,496 --> 00:15:42,896
redesigned in Xcode 9 to give

480
00:15:42,896 --> 00:15:44,466
you a much better look at

481
00:15:44,466 --> 00:15:46,576
exactly where your energy is

482
00:15:46,576 --> 00:15:47,746
being consumed by your app.

483
00:15:47,746 --> 00:15:50,176
So in this case we've got the

484
00:15:50,176 --> 00:15:51,826
CPU, which I think is probably

485
00:15:51,826 --> 00:15:53,066
taking a little bit more than it

486
00:15:53,066 --> 00:15:55,736
should for a GPU-oriented app,

487
00:15:55,926 --> 00:15:57,606
and it goes up every time I

488
00:15:57,606 --> 00:15:58,186
touch that.

489
00:15:58,506 --> 00:16:00,956
So what do we do when we need to

490
00:16:00,956 --> 00:16:02,116
dig deeper into performance

491
00:16:02,116 --> 00:16:02,546
problems?

492
00:16:02,756 --> 00:16:03,736
Well, we go into Instruments.

493
00:16:04,136 --> 00:16:05,386
Now, some of you may not know

494
00:16:05,386 --> 00:16:06,556
this, but there's a really cool

495
00:16:06,556 --> 00:16:07,416
feature in Xcode.

496
00:16:07,806 --> 00:16:08,906
If you've ever had to like --

497
00:16:10,236 --> 00:16:11,296
you know, you're debugging a bug

498
00:16:11,296 --> 00:16:12,236
and you're like, oh, man,

499
00:16:12,236 --> 00:16:13,276
there's a performance problem,

500
00:16:13,556 --> 00:16:15,136
all right, let me, you know, go

501
00:16:15,136 --> 00:16:16,126
to Instruments and start it

502
00:16:16,126 --> 00:16:17,386
again, you don't have to do

503
00:16:17,386 --> 00:16:17,646
that.

504
00:16:17,646 --> 00:16:18,706
I'm going to click the Time

505
00:16:18,706 --> 00:16:20,236
Profile button and this is going

506
00:16:20,236 --> 00:16:21,896
to transfer the debug session to

507
00:16:21,896 --> 00:16:22,986
Instruments and keep the app

508
00:16:23,026 --> 00:16:23,386
going.

509
00:16:23,676 --> 00:16:24,816
This is great if you've got an

510
00:16:24,816 --> 00:16:26,296
app in state and you need to

511
00:16:26,296 --> 00:16:27,466
jump over to Instruments and see

512
00:16:27,466 --> 00:16:28,236
what's going on.

513
00:16:28,446 --> 00:16:29,886
So we've started Instruments.

514
00:16:29,886 --> 00:16:30,796
I'm going to move the window

515
00:16:30,796 --> 00:16:31,656
over, give us a little bit of a

516
00:16:31,656 --> 00:16:31,976
better view.

517
00:16:36,376 --> 00:16:38,776
And we see that we are in the

518
00:16:38,806 --> 00:16:40,406
Instruments default strategy,

519
00:16:40,406 --> 00:16:41,676
which just says the CPU Usage

520
00:16:41,746 --> 00:16:43,966
and the Life Cycle, but new in

521
00:16:43,966 --> 00:16:45,476
Instruments for Xcode 9 is this

522
00:16:45,476 --> 00:16:46,236
All strategy.

523
00:16:46,486 --> 00:16:47,616
So this is the time profile

524
00:16:47,616 --> 00:16:49,466
instrument, but if I click All,

525
00:16:49,666 --> 00:16:52,206
I see all of the threads and the

526
00:16:52,206 --> 00:16:54,006
cores and I get the big picture

527
00:16:54,556 --> 00:16:55,006
of the app.

528
00:16:55,226 --> 00:16:55,976
Really, really useful.

529
00:16:55,976 --> 00:16:57,226
So let's see if we can reproduce

530
00:16:57,226 --> 00:16:57,976
the problem.

531
00:16:58,516 --> 00:17:03,726
[ Applause ]

532
00:17:04,226 --> 00:17:04,976
Here we go.

533
00:17:09,266 --> 00:17:09,556
All right.

534
00:17:09,556 --> 00:17:10,715
So we've clearly seen that

535
00:17:10,715 --> 00:17:11,326
there's an issue.

536
00:17:12,066 --> 00:17:13,156
We've got this spike here.

537
00:17:13,406 --> 00:17:15,876
Now, sometimes you want to just

538
00:17:15,876 --> 00:17:17,376
dig directly into that and look

539
00:17:17,376 --> 00:17:18,246
at the call stacks, but

540
00:17:18,246 --> 00:17:19,536
sometimes what you want to do is

541
00:17:19,536 --> 00:17:22,546
correlate that spike to what CPU

542
00:17:22,546 --> 00:17:26,296
it's on, other threads, and you

543
00:17:26,296 --> 00:17:27,195
know how to do that, right, you

544
00:17:27,195 --> 00:17:28,266
just scroll, back it up, and you

545
00:17:28,266 --> 00:17:29,386
look and you see, oh, is there

546
00:17:29,386 --> 00:17:31,016
another one, well, I'm not sure.

547
00:17:31,396 --> 00:17:33,216
Well, for Instruments in Xcode 9

548
00:17:33,246 --> 00:17:34,296
there is a much better way.

549
00:17:34,786 --> 00:17:36,036
I'm going to pin this track,

550
00:17:36,406 --> 00:17:38,136
right, and pinning the track

551
00:17:39,036 --> 00:17:40,486
actually puts a copy of that

552
00:17:40,486 --> 00:17:41,916
track at the bottom and it's

553
00:17:41,916 --> 00:17:42,276
fixed.

554
00:17:42,276 --> 00:17:44,126
So now I can scroll up and down

555
00:17:44,316 --> 00:17:46,876
and I can correlate what other

556
00:17:47,096 --> 00:17:48,246
tracks are sharing that

557
00:17:48,666 --> 00:17:49,976
performance characteristic

558
00:17:50,016 --> 00:17:50,691
[ Applause ]

559
00:17:50,691 --> 00:17:51,366
.

560
00:17:51,366 --> 00:17:52,666
Yeah, it's really, really cool.

561
00:17:54,066 --> 00:17:55,806
And not only can you just see

562
00:17:55,806 --> 00:17:57,476
the spikes, but I think it's

563
00:17:57,476 --> 00:17:58,896
also important to know what's

564
00:17:58,896 --> 00:17:59,546
not happening.

565
00:17:59,636 --> 00:18:01,236
So being able to see that all of

566
00:18:01,236 --> 00:18:02,376
these are not correlated

567
00:18:02,776 --> 00:18:03,746
obviously gives you information

568
00:18:03,746 --> 00:18:03,976
as well.

569
00:18:10,056 --> 00:18:11,816
Okay. So what we've just seen

570
00:18:12,046 --> 00:18:16,316
are a few things that you can do

571
00:18:16,606 --> 00:18:17,656
with wireless development in

572
00:18:17,656 --> 00:18:18,166
Xcode 9.

573
00:18:20,876 --> 00:18:22,666
Don't need that.

574
00:18:22,666 --> 00:18:25,086
So this just scratches the

575
00:18:25,086 --> 00:18:26,626
surface because, as Chris said,

576
00:18:26,626 --> 00:18:28,086
there's lots of times,

577
00:18:28,156 --> 00:18:30,186
especially today, when the apps

578
00:18:30,186 --> 00:18:32,526
we're developing, they are not

579
00:18:32,966 --> 00:18:35,136
you sitting down and consuming

580
00:18:35,136 --> 00:18:36,986
content while you're on the bus.

581
00:18:37,066 --> 00:18:38,146
Those apps still exist, of

582
00:18:38,146 --> 00:18:40,016
course, but more and more of our

583
00:18:40,016 --> 00:18:41,546
apps are physical, they're

584
00:18:41,546 --> 00:18:42,756
interacting in the real world,

585
00:18:43,116 --> 00:18:45,456
and sometimes you get reports

586
00:18:45,456 --> 00:18:46,346
and you want to reproduce

587
00:18:46,346 --> 00:18:47,806
problems that you can only

588
00:18:47,806 --> 00:18:49,566
reproduce in the real world.

589
00:18:49,876 --> 00:18:51,116
Sometimes you have performance

590
00:18:51,116 --> 00:18:52,366
problems where you need a tool

591
00:18:52,366 --> 00:18:53,826
like Instruments to really dig

592
00:18:53,826 --> 00:18:55,736
deep into your performance and

593
00:18:55,736 --> 00:18:57,096
you want to do that in the real

594
00:18:57,096 --> 00:18:57,486
world.

595
00:18:57,626 --> 00:18:59,116
And with wireless development

596
00:18:59,166 --> 00:18:59,436
you can.

597
00:18:59,436 --> 00:19:00,236
And with that, I'd like to hand

598
00:19:00,236 --> 00:19:00,956
it back to Chris.

599
00:19:01,516 --> 00:19:07,786
[ Applause ]

600
00:19:08,286 --> 00:19:08,846
>> Thanks, Breckin.

601
00:19:09,256 --> 00:19:10,086
What a fun demo.

602
00:19:10,436 --> 00:19:11,736
All right.

603
00:19:11,736 --> 00:19:13,016
I'd like to move on to talking

604
00:19:13,016 --> 00:19:15,016
about enhancements we've made in

605
00:19:15,016 --> 00:19:15,976
Xcode for working with

606
00:19:15,976 --> 00:19:16,676
breakpoints.

607
00:19:17,136 --> 00:19:19,696
Some of you may not know, but in

608
00:19:19,696 --> 00:19:21,266
Xcode breakpoints have a lot of

609
00:19:21,266 --> 00:19:22,056
flexibility.

610
00:19:22,706 --> 00:19:23,736
There are options that you can

611
00:19:23,736 --> 00:19:25,016
set to customize the way that

612
00:19:25,016 --> 00:19:25,586
they behave.

613
00:19:26,226 --> 00:19:28,096
To do this just double click on

614
00:19:28,096 --> 00:19:29,856
a breakpoint and you'll see the

615
00:19:29,856 --> 00:19:31,156
Breakpoint Editor popover.

616
00:19:31,716 --> 00:19:33,626
From here you can set options

617
00:19:33,626 --> 00:19:35,776
such as defining a condition so

618
00:19:36,286 --> 00:19:37,626
the breakpoint will only trigger

619
00:19:37,626 --> 00:19:38,836
if that condition evaluates

620
00:19:38,836 --> 00:19:40,456
true; and you can define

621
00:19:40,836 --> 00:19:42,396
breakpoint actions, such as

622
00:19:42,396 --> 00:19:43,756
logging variables, executing

623
00:19:43,756 --> 00:19:45,286
debugger commands for you and

624
00:19:45,346 --> 00:19:46,106
playing sounds.

625
00:19:46,566 --> 00:19:47,796
Now, these options have been in

626
00:19:47,796 --> 00:19:49,826
Xcode for some time, but over

627
00:19:49,826 --> 00:19:51,076
the past year the team have been

628
00:19:51,076 --> 00:19:52,206
making some enhancements to the

629
00:19:52,206 --> 00:19:53,916
UI to make them easier to work

630
00:19:53,916 --> 00:19:54,056
with.

631
00:19:55,016 --> 00:19:56,946
The first of these, we've added

632
00:19:56,946 --> 00:19:57,776
code completion to all the

633
00:19:57,846 --> 00:19:58,976
Breakpoint Editor text fields.

634
00:19:59,516 --> 00:20:05,586
[ Applause ]

635
00:20:06,086 --> 00:20:07,246
So now in the Breakpoint Editor,

636
00:20:07,576 --> 00:20:10,766
when editing expressions in the

637
00:20:10,766 --> 00:20:12,166
condition field and the

638
00:20:12,166 --> 00:20:13,616
breakpoint action fields, you

639
00:20:13,616 --> 00:20:14,986
get full code completion, the

640
00:20:14,986 --> 00:20:16,536
same as you'd expect from the

641
00:20:16,536 --> 00:20:18,476
Source Editor and the Debugger

642
00:20:18,476 --> 00:20:18,956
Console.

643
00:20:19,526 --> 00:20:21,656
The next thing we wanted to do

644
00:20:21,656 --> 00:20:23,366
was make finding breakpoints

645
00:20:23,366 --> 00:20:25,196
with options set on them much

646
00:20:25,196 --> 00:20:27,786
easier, so in Xcode 9, for any

647
00:20:27,786 --> 00:20:29,216
breakpoints that have options

648
00:20:29,216 --> 00:20:30,196
set on them, you'll see this

649
00:20:30,196 --> 00:20:31,236
alternate indicator with a

650
00:20:31,236 --> 00:20:31,976
triangle at the end.

651
00:20:32,516 --> 00:20:36,706
[ Applause ]

652
00:20:37,206 --> 00:20:38,936
So this indicates that that

653
00:20:38,936 --> 00:20:40,506
breakpoint has one or more

654
00:20:40,506 --> 00:20:41,986
options set on it.

655
00:20:41,986 --> 00:20:43,776
This makes it really easy to see

656
00:20:43,776 --> 00:20:45,186
at a glance, when looking at

657
00:20:45,406 --> 00:20:46,726
either the Breakpoint Navigator

658
00:20:47,036 --> 00:20:48,546
or the Source Editor, which of

659
00:20:48,546 --> 00:20:49,886
those breakpoints have options

660
00:20:49,886 --> 00:20:51,246
set on them.

661
00:20:51,686 --> 00:20:53,326
Furthermore, just mouse over the

662
00:20:53,326 --> 00:20:54,756
breakpoint and a tooltip will

663
00:20:54,756 --> 00:20:55,916
show you a summary of the

664
00:20:55,916 --> 00:20:56,996
options that have been set on

665
00:20:56,996 --> 00:20:57,536
the breakpoint.

666
00:20:58,046 --> 00:20:59,006
This should make finding the

667
00:20:59,006 --> 00:21:00,036
breakpoint you're looking for

668
00:21:00,236 --> 00:21:00,856
much easier.

669
00:21:01,586 --> 00:21:02,516
And speaking of finding

670
00:21:02,516 --> 00:21:04,656
breakpoints, we've also enhanced

671
00:21:04,836 --> 00:21:06,246
the Breakpoint Navigator filter

672
00:21:06,246 --> 00:21:08,296
field by adding deep filtering.

673
00:21:08,746 --> 00:21:10,426
This means that it now searches

674
00:21:10,716 --> 00:21:12,726
your query across all of the

675
00:21:12,726 --> 00:21:13,936
text fields in the Breakpoint

676
00:21:13,936 --> 00:21:14,206
Editor.

677
00:21:14,596 --> 00:21:15,676
So you can match on condition

678
00:21:15,676 --> 00:21:16,906
fields and any of the action

679
00:21:16,906 --> 00:21:18,266
fields and expressions that

680
00:21:18,266 --> 00:21:19,186
you've set in those.

681
00:21:20,136 --> 00:21:21,856
This makes finding breakpoints

682
00:21:22,056 --> 00:21:23,266
much more powerful and much

683
00:21:23,266 --> 00:21:24,586
easier in the Breakpoint

684
00:21:24,636 --> 00:21:25,076
Navigator.

685
00:21:26,446 --> 00:21:27,396
So if you haven't been using

686
00:21:27,396 --> 00:21:28,676
breakpoint options, give them a

687
00:21:28,676 --> 00:21:28,946
try.

688
00:21:28,946 --> 00:21:29,756
They can add a lot of

689
00:21:29,956 --> 00:21:31,576
flexibility and customization to

690
00:21:31,576 --> 00:21:32,526
your debugging workflow, and now

691
00:21:32,526 --> 00:21:32,976
they're easier to use.

692
00:21:37,216 --> 00:21:38,676
I'd like to move on to talking

693
00:21:38,676 --> 00:21:40,136
about user interface debugging.

694
00:21:41,426 --> 00:21:43,296
Now, when building UI, View

695
00:21:43,296 --> 00:21:44,136
Controller is playing an

696
00:21:44,136 --> 00:21:47,086
important role in how you

697
00:21:47,086 --> 00:21:48,246
structure your code and your

698
00:21:48,246 --> 00:21:49,046
storyboards.

699
00:21:49,886 --> 00:21:51,986
View controllers manage and lay

700
00:21:51,986 --> 00:21:53,236
out portions of the view tree

701
00:21:53,686 --> 00:21:55,486
and are responsible for handling

702
00:21:55,486 --> 00:21:56,816
transitions between screens.

703
00:21:57,706 --> 00:21:58,796
So when debugging your UI,

704
00:21:58,796 --> 00:22:00,046
wouldn't it be great to be able

705
00:22:00,046 --> 00:22:01,576
to navigate that view hierarchy

706
00:22:01,846 --> 00:22:03,646
by focusing on the View

707
00:22:03,646 --> 00:22:05,476
Controller structure and to also

708
00:22:05,476 --> 00:22:06,966
be able to find view controllers

709
00:22:07,146 --> 00:22:08,606
that are responsible for parts

710
00:22:08,606 --> 00:22:09,156
of the view tree.

711
00:22:10,156 --> 00:22:11,906
We thought so, too, so in Xcode

712
00:22:11,906 --> 00:22:13,516
9 view controllers are now

713
00:22:13,516 --> 00:22:15,286
included as part of the view

714
00:22:15,286 --> 00:22:15,976
hierarchy when debugging.

715
00:22:16,516 --> 00:22:21,306
[ Applause ]

716
00:22:21,806 --> 00:22:22,956
Inspect your view hierarchy like

717
00:22:22,996 --> 00:22:24,256
you always have been, but now

718
00:22:24,256 --> 00:22:25,736
you can expect to find View

719
00:22:25,736 --> 00:22:27,376
controllers in the Debug

720
00:22:27,376 --> 00:22:29,436
Navigator inserted as parents of

721
00:22:29,436 --> 00:22:30,656
the views that they manage.

722
00:22:31,386 --> 00:22:32,866
This makes it really easy to

723
00:22:32,866 --> 00:22:34,686
navigate the view hierarchy by

724
00:22:34,686 --> 00:22:36,466
first focusing on the high-level

725
00:22:36,626 --> 00:22:38,226
View Controller structure to

726
00:22:38,226 --> 00:22:39,426
find the area of the view tree

727
00:22:39,426 --> 00:22:40,866
that you're looking to debug and

728
00:22:40,866 --> 00:22:42,436
then focusing in on individual

729
00:22:42,436 --> 00:22:42,916
views.

730
00:22:43,406 --> 00:22:45,706
View controllers are represented

731
00:22:45,706 --> 00:22:47,866
visually in the Canvas as well.

732
00:22:48,776 --> 00:22:50,746
Xcode renders banners for View

733
00:22:50,746 --> 00:22:52,046
controllers above the views that

734
00:22:52,046 --> 00:22:52,586
they manage.

735
00:22:53,316 --> 00:22:55,296
This is great for visualizing

736
00:22:55,386 --> 00:22:56,656
the View Controller boundaries

737
00:22:56,656 --> 00:22:58,316
in that view tree and makes it

738
00:22:58,316 --> 00:22:59,836
much easier to find the view

739
00:22:59,836 --> 00:23:01,196
controllers responsible for a

740
00:23:01,196 --> 00:23:03,976
particular view.

741
00:23:04,236 --> 00:23:05,556
Select a View Controller and

742
00:23:05,556 --> 00:23:06,956
you'll see its properties in the

743
00:23:06,956 --> 00:23:08,266
Inspectors, and this helps you

744
00:23:08,266 --> 00:23:09,356
when you're debugging View

745
00:23:09,356 --> 00:23:10,666
Controller specific issues.

746
00:23:11,246 --> 00:23:12,806
It includes the View Controller

747
00:23:12,806 --> 00:23:14,126
parent and child relationships,

748
00:23:14,606 --> 00:23:16,076
which is great for debugging

749
00:23:16,076 --> 00:23:17,146
View Controller containment

750
00:23:17,146 --> 00:23:17,666
issues.

751
00:23:19,236 --> 00:23:20,276
So now that view controllers are

752
00:23:20,276 --> 00:23:21,676
included as part of the view

753
00:23:21,676 --> 00:23:23,096
hierarchy when debugging, it

754
00:23:23,096 --> 00:23:24,506
makes it much easier to navigate

755
00:23:24,506 --> 00:23:26,246
that hierarchy and to help you

756
00:23:26,246 --> 00:23:28,166
to solve View Controller-related

757
00:23:28,166 --> 00:23:28,666
issues.

758
00:23:29,206 --> 00:23:32,346
Now, not all user interfaces are

759
00:23:32,346 --> 00:23:34,296
built using UIKit and AppKit.

760
00:23:35,376 --> 00:23:37,336
Some designs may require custom

761
00:23:37,336 --> 00:23:40,786
UI with rich interactions and

762
00:23:40,786 --> 00:23:41,666
custom layouts.

763
00:23:42,166 --> 00:23:44,146
One option to do this is using

764
00:23:44,146 --> 00:23:44,716
SpriteKit.

765
00:23:46,336 --> 00:23:47,796
SpriteKit is a 2D graphics

766
00:23:47,796 --> 00:23:48,866
framework and it's available

767
00:23:48,866 --> 00:23:50,416
across all of Apple's platforms.

768
00:23:50,936 --> 00:23:52,276
It's great for building games,

769
00:23:52,276 --> 00:23:52,776
of course.

770
00:23:52,836 --> 00:23:53,876
It's also great for building

771
00:23:53,876 --> 00:23:54,936
this kind of custom UI.

772
00:23:54,936 --> 00:23:57,576
So we wanted to provide the same

773
00:23:57,576 --> 00:23:58,866
kind of visual debugging tool

774
00:23:58,866 --> 00:24:00,746
for SpriteKit developers that we

775
00:24:00,746 --> 00:24:02,166
provide for developers using

776
00:24:02,166 --> 00:24:03,026
UIKit and AppKit.

777
00:24:03,826 --> 00:24:04,756
So I'm pleased to announce that

778
00:24:04,756 --> 00:24:08,046
in Xcode 9 SpriteKit is now a

779
00:24:08,046 --> 00:24:10,216
first-class citizen in the View

780
00:24:10,216 --> 00:24:10,516
Debugger.

781
00:24:12,396 --> 00:24:14,286
When inspecting your view

782
00:24:14,286 --> 00:24:16,856
hierarchy and Xcode finds a

783
00:24:16,856 --> 00:24:18,346
SpriteKit view, it will

784
00:24:18,346 --> 00:24:19,446
automatically snapshot the

785
00:24:19,446 --> 00:24:20,966
SpriteKit scene hosted by that

786
00:24:20,966 --> 00:24:22,186
view and bring that into the

787
00:24:22,186 --> 00:24:22,486
debugger.

788
00:24:23,346 --> 00:24:25,196
So now you'll see Sprites

789
00:24:25,196 --> 00:24:26,996
rendered in the exploded 3D

790
00:24:26,996 --> 00:24:28,946
visualization, along with all

791
00:24:28,946 --> 00:24:30,046
the views in the hierarchy.

792
00:24:31,436 --> 00:24:33,316
This is great for debugging

793
00:24:33,506 --> 00:24:34,396
Sprite layout.

794
00:24:35,186 --> 00:24:36,676
Also really handy for debugging

795
00:24:36,676 --> 00:24:38,036
Sprite layout alongside View

796
00:24:38,036 --> 00:24:39,346
layout for those projects where

797
00:24:39,346 --> 00:24:40,456
you'd like to mix and match

798
00:24:40,456 --> 00:24:41,856
Sprites and views for custom UI.

799
00:24:46,116 --> 00:24:47,256
In the Debug Navigator you'll

800
00:24:47,256 --> 00:24:48,836
see an entry for the SpriteKit

801
00:24:48,836 --> 00:24:50,306
scene as a child of the view

802
00:24:50,306 --> 00:24:52,356
that hosts it, and below that

803
00:24:52,356 --> 00:24:53,886
scene you'll see all of the

804
00:24:53,886 --> 00:24:55,886
SpriteKit nodes that are in that

805
00:24:55,886 --> 00:24:56,716
scene at runtime.

806
00:24:57,476 --> 00:25:00,506
Select a SpriteKit node and you

807
00:25:00,506 --> 00:25:02,846
can debug that by looking at the

808
00:25:02,846 --> 00:25:03,476
Inspectors.

809
00:25:04,846 --> 00:25:06,366
So now SpriteKit developers have

810
00:25:06,366 --> 00:25:07,986
a visual tool for debugging

811
00:25:07,986 --> 00:25:08,796
their SpriteKit scenes at

812
00:25:08,796 --> 00:25:08,976
runtime.

813
00:25:09,516 --> 00:25:16,376
[ Applause ]

814
00:25:16,876 --> 00:25:17,976
But we didn't want to stop at

815
00:25:19,776 --> 00:25:21,936
Sprites. SceneKit is a 3D

816
00:25:21,936 --> 00:25:22,726
graphics framework.

817
00:25:23,156 --> 00:25:24,406
It's great for building rich 3D

818
00:25:24,406 --> 00:25:26,096
worlds and 3D games, as well as

819
00:25:26,096 --> 00:25:28,216
custom 3D UI, so we wanted to

820
00:25:28,216 --> 00:25:30,166
also provide a visual tool for

821
00:25:30,166 --> 00:25:33,136
SceneKit developers, and so we

822
00:25:33,136 --> 00:25:33,396
did.

823
00:25:33,996 --> 00:25:35,496
SceneKit is now included as part

824
00:25:35,496 --> 00:25:37,046
of the View Debugging Workflow.

825
00:25:37,966 --> 00:25:39,596
When Xcode is inspecting a View

826
00:25:39,596 --> 00:25:40,746
hierarchy that contains a

827
00:25:40,746 --> 00:25:42,656
SceneKit view, it will snapshot

828
00:25:42,656 --> 00:25:44,036
the SceneKit scene hosted by

829
00:25:44,036 --> 00:25:46,096
that view and bring that in to

830
00:25:46,096 --> 00:25:46,926
the debugger.

831
00:25:47,256 --> 00:25:50,866
In the Debug Navigator you'll

832
00:25:50,866 --> 00:25:53,366
see an entry for the SceneKit

833
00:25:53,366 --> 00:25:55,786
scene as a child of the view

834
00:25:55,786 --> 00:25:56,386
that hosts it.

835
00:25:57,126 --> 00:25:58,636
But you may notice a difference

836
00:25:58,636 --> 00:25:59,696
here, compared to the SpriteKit

837
00:25:59,696 --> 00:26:00,646
example I just showed.

838
00:26:01,666 --> 00:26:04,136
That SceneKit scene has no child

839
00:26:04,136 --> 00:26:04,626
elements.

840
00:26:04,826 --> 00:26:06,566
Where are all the SceneKit scene

841
00:26:06,566 --> 00:26:07,016
nodes.

842
00:26:07,776 --> 00:26:10,366
Also notice that in the Canvas

843
00:26:10,436 --> 00:26:11,956
the 3D scene is just being

844
00:26:11,956 --> 00:26:12,996
represented by a flattened

845
00:26:12,996 --> 00:26:13,516
snapshot.

846
00:26:16,196 --> 00:26:17,426
So why is this?

847
00:26:18,106 --> 00:26:20,746
Well, to make 2D views in

848
00:26:20,746 --> 00:26:22,526
Sprites explorable, Xcode

849
00:26:22,526 --> 00:26:24,066
explodes them out in 3D.

850
00:26:24,576 --> 00:26:25,716
But what should it do with 3D

851
00:26:25,716 --> 00:26:26,116
content?

852
00:26:27,526 --> 00:26:28,796
Well, we explored the latest

853
00:26:28,796 --> 00:26:30,096
advances in 4D debugging

854
00:26:30,096 --> 00:26:31,146
technology, but after some

855
00:26:31,146 --> 00:26:32,446
accidents in the lab we thought

856
00:26:32,446 --> 00:26:34,276
there must be an easier way, and

857
00:26:34,276 --> 00:26:34,606
there was.

858
00:26:35,026 --> 00:26:36,116
We already have a really

859
00:26:36,116 --> 00:26:37,866
powerful 3D editor built right

860
00:26:37,866 --> 00:26:40,466
into Xcode so we integrated the

861
00:26:40,466 --> 00:26:41,946
SceneKit Editor with the View

862
00:26:41,946 --> 00:26:42,736
Debugging Workflow.

863
00:26:43,316 --> 00:26:45,106
Now just select a SceneKit scene

864
00:26:45,106 --> 00:26:46,866
in the Debug Navigator and Xcode

865
00:26:46,866 --> 00:26:49,086
will open the SceneKit Editor in

866
00:26:49,386 --> 00:26:50,556
runtime debugging mode,

867
00:26:51,036 --> 00:26:53,016
containing a snapshot of your 3D

868
00:26:53,016 --> 00:26:54,216
scene from the runtime.

869
00:26:55,456 --> 00:26:56,426
Now -- [applause] it's pretty

870
00:26:56,606 --> 00:26:56,716
good.

871
00:26:57,516 --> 00:26:59,656
[ Applause ]

872
00:27:00,156 --> 00:27:01,576
So now you can use all the same

873
00:27:01,576 --> 00:27:02,586
tools you're already familiar

874
00:27:02,586 --> 00:27:05,646
with when creating a 3D scene to

875
00:27:05,646 --> 00:27:07,436
inspect and debug that 3D scene.

876
00:27:08,846 --> 00:27:11,026
You can move cameras around or

877
00:27:11,026 --> 00:27:12,656
select alternate cameras.

878
00:27:13,006 --> 00:27:14,246
You can zoom right out to get a

879
00:27:14,246 --> 00:27:15,706
big picture view of that entire

880
00:27:15,706 --> 00:27:17,866
scene, and you can visualize

881
00:27:18,226 --> 00:27:19,486
objects in the scene that aren't

882
00:27:19,486 --> 00:27:21,016
normally visible, like cameras

883
00:27:21,016 --> 00:27:24,066
and view frustums and lights and

884
00:27:24,066 --> 00:27:25,286
the light position and

885
00:27:25,286 --> 00:27:25,736
direction.

886
00:27:26,666 --> 00:27:28,356
You can explore the entire scene

887
00:27:28,356 --> 00:27:29,596
graph in the outline view on the

888
00:27:29,596 --> 00:27:32,486
left and you can select objects

889
00:27:32,546 --> 00:27:35,036
in that 3D scene so you can hide

890
00:27:35,036 --> 00:27:36,436
them or move them around to get

891
00:27:36,436 --> 00:27:37,506
at objects that may be behind

892
00:27:37,506 --> 00:27:37,636
them.

893
00:27:38,076 --> 00:27:39,136
In fact, you can make any

894
00:27:39,136 --> 00:27:40,956
modifications to that scene

895
00:27:41,186 --> 00:27:42,656
using either the Canvas or the

896
00:27:42,656 --> 00:27:43,776
Inspectors, which are all fully

897
00:27:43,776 --> 00:27:45,376
operational, safe in the

898
00:27:45,376 --> 00:27:46,196
knowledge that you won't be

899
00:27:46,196 --> 00:27:47,176
affecting your runtime.

900
00:27:47,626 --> 00:27:48,836
You'll just been modifying an

901
00:27:48,836 --> 00:27:49,766
in-memory snapshot.

902
00:27:50,676 --> 00:27:51,726
And if you'd like to save a copy

903
00:27:51,726 --> 00:27:53,376
of that snapshot, that's easy,

904
00:27:53,376 --> 00:27:53,666
too.

905
00:27:53,756 --> 00:27:55,176
You can just export that out to

906
00:27:55,176 --> 00:27:57,406
a SceneKit or a .dae file to

907
00:27:57,406 --> 00:27:58,476
access at a later time.

908
00:27:59,386 --> 00:28:01,206
So now SceneKit developers have

909
00:28:01,206 --> 00:28:02,736
a visual debugging tool for

910
00:28:02,736 --> 00:28:04,606
debugging their SceneKit scenes

911
00:28:04,606 --> 00:28:04,976
at runtime.

912
00:28:05,516 --> 00:28:12,096
[ Applause ]

913
00:28:12,596 --> 00:28:13,946
So these are the enhancements

914
00:28:13,946 --> 00:28:16,086
we've made for View debugging in

915
00:28:16,116 --> 00:28:16,776
Xcode 9.

916
00:28:17,236 --> 00:28:18,136
We've added View Controller

917
00:28:18,136 --> 00:28:20,026
debugging, SpriteKit and

918
00:28:20,096 --> 00:28:20,926
SceneKit debugging.

919
00:28:21,796 --> 00:28:22,706
To take advantage of these

920
00:28:22,706 --> 00:28:24,186
features your project just needs

921
00:28:24,186 --> 00:28:26,526
to be running on one of the OS

922
00:28:26,526 --> 00:28:28,456
releases from this week; iOS 11,

923
00:28:28,876 --> 00:28:30,976
tvOS 11 or macOS High Sierra.

924
00:28:35,376 --> 00:28:36,186
Now, I had mentioned that

925
00:28:36,396 --> 00:28:37,376
graphics frameworks like

926
00:28:37,566 --> 00:28:39,906
SpriteKit and SceneKit are great

927
00:28:39,946 --> 00:28:41,206
for building custom UI.

928
00:28:41,666 --> 00:28:42,806
They're not just for building

929
00:28:43,536 --> 00:28:44,106
games.

930
00:28:44,736 --> 00:28:47,166
As an example, on the Xcode Team

931
00:28:47,166 --> 00:28:48,906
we use these frameworks to build

932
00:28:48,906 --> 00:28:49,936
our visual debuggers.

933
00:28:50,686 --> 00:28:52,836
This is an example of the Memory

934
00:28:52,836 --> 00:28:53,626
Graph Debugger that we

935
00:28:53,626 --> 00:28:54,626
introduced last year.

936
00:28:55,266 --> 00:28:57,236
It's showing a memory graph for

937
00:28:57,236 --> 00:28:58,236
an app running on an iPhone.

938
00:28:59,516 --> 00:29:01,726
Now, that visual memory graph,

939
00:29:02,336 --> 00:29:03,756
we built that using SpriteKit.

940
00:29:04,166 --> 00:29:05,436
So now we're really excited that

941
00:29:05,436 --> 00:29:06,816
we can use our new SpriteKit

942
00:29:07,146 --> 00:29:08,576
Debugger to debug our Memory

943
00:29:08,576 --> 00:29:09,076
Graph Debugger.

944
00:29:09,896 --> 00:29:10,886
Let me show you how that would

945
00:29:11,766 --> 00:29:11,896
work.

946
00:29:12,396 --> 00:29:13,796
Let's bring in another Xcode to

947
00:29:13,796 --> 00:29:15,536
debug this first Xcode

948
00:29:15,556 --> 00:29:17,556
[laughter].

949
00:29:17,576 --> 00:29:19,046
It's taken a snapshot of that

950
00:29:19,046 --> 00:29:20,446
view hierarchy and it now

951
00:29:20,446 --> 00:29:22,286
includes all of the Sprites that

952
00:29:22,286 --> 00:29:23,856
were shown as part of the Memory

953
00:29:23,856 --> 00:29:24,336
Graph Debugger.

954
00:29:24,836 --> 00:29:26,286
We can select an option to show

955
00:29:26,286 --> 00:29:27,376
all the clip's content.

956
00:29:27,376 --> 00:29:28,336
So now we can see all the

957
00:29:28,336 --> 00:29:29,316
Sprites that are outside the

958
00:29:29,316 --> 00:29:30,306
visible region.

959
00:29:30,306 --> 00:29:32,576
And we can continue to zoom out

960
00:29:32,576 --> 00:29:34,276
to get a big picture view of

961
00:29:34,276 --> 00:29:36,296
that entire scene, a SpriteKit

962
00:29:36,356 --> 00:29:36,636
scene.

963
00:29:37,326 --> 00:29:40,086
So that's an example.

964
00:29:40,086 --> 00:29:41,456
And this is actually what we do

965
00:29:41,456 --> 00:29:42,276
on the Xcode Team.

966
00:29:42,536 --> 00:29:43,646
We use our debuggers to debug

967
00:29:43,646 --> 00:29:43,976
other debuggers.

968
00:29:44,516 --> 00:29:47,746
[ Laughter ]

969
00:29:48,246 --> 00:29:50,956
Now, to make these view

970
00:29:50,956 --> 00:29:52,286
hierarchies exploded out in this

971
00:29:52,286 --> 00:29:56,286
custom 3D visualization we used

972
00:29:56,386 --> 00:29:56,886
SceneKit.

973
00:29:57,406 --> 00:29:58,946
And so now we're doubly excited

974
00:29:58,946 --> 00:30:00,336
that we can use our new SceneKit

975
00:30:00,336 --> 00:30:01,886
Debugger to debug our View

976
00:30:01,886 --> 00:30:02,196
Debugger.

977
00:30:02,996 --> 00:30:03,946
Who wants to see that?

978
00:30:05,016 --> 00:30:06,926
Let's bring in another Xcode to

979
00:30:06,926 --> 00:30:07,696
debug the previous Xcode.

980
00:30:08,516 --> 00:30:10,516
[ Laughter ]

981
00:30:11,516 --> 00:30:17,466
[ Applause ]

982
00:30:17,966 --> 00:30:18,976
So it's taken a snapshot of the

983
00:30:18,976 --> 00:30:20,176
view hierarchy and exploded it

984
00:30:20,176 --> 00:30:22,476
out in 3D, but now, because it's

985
00:30:22,476 --> 00:30:23,946
Xcode 9, we have access to that

986
00:30:23,946 --> 00:30:24,826
SceneKit scene.

987
00:30:24,886 --> 00:30:26,916
So we can select that and we can

988
00:30:26,916 --> 00:30:29,256
view that 3D custom

989
00:30:29,426 --> 00:30:30,726
visualization in the SceneKit

990
00:30:30,726 --> 00:30:31,136
Editor.

991
00:30:31,906 --> 00:30:33,576
We can change cameras, change

992
00:30:33,576 --> 00:30:35,566
perspectives to find the 3D

993
00:30:35,566 --> 00:30:36,646
object in the scene that we're

994
00:30:36,646 --> 00:30:37,386
looking to debug.

995
00:30:37,386 --> 00:30:40,936
So that's the kind of fun we

996
00:30:40,936 --> 00:30:41,696
have in Xcode.

997
00:30:43,306 --> 00:30:44,936
So that's an example, what I've

998
00:30:44,936 --> 00:30:46,606
shown you is an example of using

999
00:30:46,606 --> 00:30:49,416
the new -- Xcode's new SceneKit

1000
00:30:49,536 --> 00:30:51,966
Debugger to debug the Xcode View

1001
00:30:51,966 --> 00:30:53,286
Debugger visualization, which

1002
00:30:53,286 --> 00:30:55,416
itself was SpriteKit debugging

1003
00:30:55,676 --> 00:30:56,866
the Memory Graph Debugger, which

1004
00:30:56,866 --> 00:30:58,566
itself was Memory Graph

1005
00:30:58,566 --> 00:30:59,796
debugging an app on the iPhone.

1006
00:31:00,336 --> 00:31:01,706
If you can follow along with all

1007
00:31:01,706 --> 00:31:02,426
that, then maybe you've got a

1008
00:31:02,426 --> 00:31:02,976
future on the Xcode Team

1009
00:31:03,016 --> 00:31:03,516
[ Laughter ]

1010
00:31:03,516 --> 00:31:04,016
.

1011
00:31:04,516 --> 00:31:10,456
[ Applause ]

1012
00:31:10,956 --> 00:31:12,546
Now, to give you a demonstration

1013
00:31:12,546 --> 00:31:13,586
of these new view debugging

1014
00:31:13,586 --> 00:31:14,916
enhancements, I'd like to invite

1015
00:31:14,916 --> 00:31:15,486
up Sebastian.

1016
00:31:15,486 --> 00:31:15,956
Thank you.

1017
00:31:16,516 --> 00:31:20,096
[ Applause ]

1018
00:31:20,596 --> 00:31:21,236
>> Thanks, Chris.

1019
00:31:22,226 --> 00:31:22,856
That's awesome.

1020
00:31:23,556 --> 00:31:24,786
I'm excited to show you some of

1021
00:31:24,846 --> 00:31:26,206
the new enhancements we made to

1022
00:31:26,206 --> 00:31:27,996
debugging in Xcode 9, but I'll

1023
00:31:27,996 --> 00:31:29,826
be using a slightly less complex

1024
00:31:29,826 --> 00:31:30,916
example than Chris just showed

1025
00:31:30,916 --> 00:31:30,983
you.

1026
00:31:36,116 --> 00:31:37,416
I'll actually be using the same

1027
00:31:37,596 --> 00:31:38,746
iOS app that Breckin used

1028
00:31:38,746 --> 00:31:40,416
earlier for his application, for

1029
00:31:40,416 --> 00:31:42,246
his demonstration, and it's

1030
00:31:42,246 --> 00:31:45,426
showing the solar system when

1031
00:31:46,696 --> 00:31:47,846
you launch the app, and it's

1032
00:31:47,846 --> 00:31:49,106
starting off with a 3D

1033
00:31:49,106 --> 00:31:49,946
visualization.

1034
00:31:50,466 --> 00:31:51,746
Now, using the button in the top

1035
00:31:51,746 --> 00:31:53,396
right corner the user can get

1036
00:31:53,396 --> 00:31:56,306
additional details about the

1037
00:31:56,526 --> 00:31:58,276
planets, and I've been working

1038
00:31:58,276 --> 00:31:59,356
on a very cool feature here.

1039
00:31:59,736 --> 00:32:00,976
My idea was to let the user

1040
00:32:00,976 --> 00:32:03,256
experience the gravity on the

1041
00:32:03,256 --> 00:32:04,996
different planets, so I built a

1042
00:32:04,996 --> 00:32:06,296
gravitySimulator using

1043
00:32:06,296 --> 00:32:06,906
SpriteKit.

1044
00:32:07,136 --> 00:32:08,216
Let me show you what that looks

1045
00:32:08,216 --> 00:32:08,446
like.

1046
00:32:09,596 --> 00:32:11,436
The gravitySimulator starts off

1047
00:32:11,436 --> 00:32:13,116
in zero gravity and the three

1048
00:32:13,116 --> 00:32:14,746
objects hover around in space.

1049
00:32:15,196 --> 00:32:16,456
Now, when the user swipes down

1050
00:32:16,456 --> 00:32:18,446
on the device's display, gravity

1051
00:32:18,446 --> 00:32:19,736
is activated and the three

1052
00:32:19,736 --> 00:32:21,226
objects begin to fall and

1053
00:32:21,226 --> 00:32:22,396
eventually hit the bottom of the

1054
00:32:22,396 --> 00:32:23,416
screen and bounce around.

1055
00:32:24,096 --> 00:32:25,176
Unfortunately, I got a bug

1056
00:32:25,176 --> 00:32:26,316
report that it's not behaving

1057
00:32:26,316 --> 00:32:26,766
quite right.

1058
00:32:27,266 --> 00:32:28,546
So let me swipe down and let's

1059
00:32:28,546 --> 00:32:32,076
observe what is going on.

1060
00:32:32,076 --> 00:32:34,346
Oh, now I understand what the

1061
00:32:34,346 --> 00:32:35,276
user was talking about.

1062
00:32:35,786 --> 00:32:36,946
So it looks like the gravity is

1063
00:32:36,946 --> 00:32:38,796
activated correctly, but the

1064
00:32:38,796 --> 00:32:39,946
objects don't actually hit the

1065
00:32:39,946 --> 00:32:41,466
bottom of the screen and bounce

1066
00:32:41,466 --> 00:32:42,916
around, they just go off screen.

1067
00:32:43,506 --> 00:32:44,476
Let's see if we can use the View

1068
00:32:44,476 --> 00:32:45,586
Debugger to better understand

1069
00:32:45,586 --> 00:32:47,146
what is going on here and try to

1070
00:32:47,146 --> 00:32:47,966
address the problem.

1071
00:32:49,396 --> 00:32:50,376
I'll invoke the View Debugger

1072
00:32:50,376 --> 00:32:51,856
using the button in the Debug

1073
00:32:51,856 --> 00:32:54,826
bar, and Xcode now fetches the

1074
00:32:54,826 --> 00:32:56,866
entire view hierarchy, including

1075
00:32:56,866 --> 00:32:58,316
the content of all SpriteKit

1076
00:32:58,316 --> 00:32:59,436
scenes that are part of the view

1077
00:32:59,436 --> 00:32:59,896
hierarchy.

1078
00:33:00,476 --> 00:33:01,826
On the left-hand side you get an

1079
00:33:01,826 --> 00:33:03,046
outline representation of that

1080
00:33:03,046 --> 00:33:04,416
hierarchy; whereas, in the

1081
00:33:04,416 --> 00:33:05,486
center you get a visual

1082
00:33:05,486 --> 00:33:06,396
representation.

1083
00:33:07,276 --> 00:33:08,466
Now, as you can see, the View

1084
00:33:08,466 --> 00:33:09,746
Debugger matches exactly what

1085
00:33:09,746 --> 00:33:11,086
you see on the device's display,

1086
00:33:11,516 --> 00:33:12,626
and you may be wondering how is

1087
00:33:12,676 --> 00:33:14,216
that particularly useful in this

1088
00:33:14,216 --> 00:33:14,576
case.

1089
00:33:15,566 --> 00:33:17,006
Now, if we recap what happened,

1090
00:33:17,196 --> 00:33:18,576
the three objects, they went off

1091
00:33:18,576 --> 00:33:20,726
screen, and by default the View

1092
00:33:20,726 --> 00:33:22,096
Debugger only shows you objects

1093
00:33:22,096 --> 00:33:22,776
that are visible.

1094
00:33:23,436 --> 00:33:25,076
Now, we can use this button here

1095
00:33:25,186 --> 00:33:27,666
in the bottom left corner to

1096
00:33:27,666 --> 00:33:28,856
also show content that is

1097
00:33:28,896 --> 00:33:29,726
currently being clipped.

1098
00:33:30,366 --> 00:33:31,176
So we can see that there's

1099
00:33:31,176 --> 00:33:32,406
actually a lot more going on

1100
00:33:32,406 --> 00:33:33,356
here than we can see on the

1101
00:33:33,356 --> 00:33:34,236
device's display.

1102
00:33:34,996 --> 00:33:36,066
Let me zoom out a little bit so

1103
00:33:36,066 --> 00:33:37,946
we can get a better overview.

1104
00:33:38,396 --> 00:33:39,816
And we actually found our three

1105
00:33:39,816 --> 00:33:40,656
objects down here.

1106
00:33:41,306 --> 00:33:42,976
So it looks like what's going on

1107
00:33:43,686 --> 00:33:45,046
is that the SpriteKit scene is

1108
00:33:45,046 --> 00:33:46,556
just too tall for the device's

1109
00:33:46,556 --> 00:33:48,386
display and by the time they hit

1110
00:33:48,386 --> 00:33:49,256
the bottom of the scene and

1111
00:33:49,256 --> 00:33:50,646
bounce around, they're already

1112
00:33:50,646 --> 00:33:51,236
off screen.

1113
00:33:52,536 --> 00:33:53,726
So let's see if we can address

1114
00:33:53,726 --> 00:33:54,336
this problem.

1115
00:33:54,966 --> 00:33:56,416
I'll select the SpriteKit scene

1116
00:33:56,416 --> 00:33:57,426
in the Debug Navigator on the

1117
00:33:57,426 --> 00:33:58,916
left-hand side and let's take a

1118
00:33:58,916 --> 00:34:00,426
look at its properties and see

1119
00:34:00,426 --> 00:34:01,546
if we can find one that we can

1120
00:34:01,546 --> 00:34:01,946
act on.

1121
00:34:02,306 --> 00:34:03,936
So you can see that we can get

1122
00:34:03,936 --> 00:34:05,936
additional details about the

1123
00:34:05,936 --> 00:34:07,466
SpriteKit scene's size, it's

1124
00:34:07,466 --> 00:34:09,706
anchor point and it's scaleMode.

1125
00:34:10,335 --> 00:34:11,656
Now, the scaleMode is currently

1126
00:34:11,656 --> 00:34:12,795
set to Aspect Fill and that

1127
00:34:12,795 --> 00:34:14,036
looks a little bit suspicious.

1128
00:34:14,476 --> 00:34:15,666
I think there is a better aspect

1129
00:34:15,666 --> 00:34:17,025
fill to achieve what we're

1130
00:34:17,196 --> 00:34:20,416
trying to -- what we want the

1131
00:34:20,416 --> 00:34:21,065
scene to behave.

1132
00:34:21,106 --> 00:34:22,596
We want it to resize to actually

1133
00:34:22,596 --> 00:34:23,746
fit the device's display.

1134
00:34:25,246 --> 00:34:26,735
Now, I'm setting up the entire

1135
00:34:26,735 --> 00:34:28,286
SpriteKit scene in the hosting

1136
00:34:28,286 --> 00:34:29,826
View Controller, and since the

1137
00:34:29,826 --> 00:34:30,706
view controllers are now

1138
00:34:30,706 --> 00:34:31,876
presented right along the view

1139
00:34:31,876 --> 00:34:33,496
hierarchy, it's very easy to get

1140
00:34:33,496 --> 00:34:33,846
to them.

1141
00:34:34,585 --> 00:34:36,106
I can simply select the

1142
00:34:36,196 --> 00:34:37,676
gravitySimulator View Controller

1143
00:34:37,676 --> 00:34:38,755
and the Debug Navigator on the

1144
00:34:38,755 --> 00:34:40,676
left-hand side, and using the

1145
00:34:40,676 --> 00:34:42,076
Inspector on the right-hand side

1146
00:34:42,335 --> 00:34:43,696
it's very easy to jump right to

1147
00:34:43,696 --> 00:34:44,545
the implementation.

1148
00:34:45,106 --> 00:34:47,576
I can use this button here that

1149
00:34:47,576 --> 00:34:48,976
is right next to the Class Name,

1150
00:34:49,815 --> 00:34:50,806
and we're here in the

1151
00:34:50,806 --> 00:34:52,126
implementation of this class.

1152
00:34:53,326 --> 00:34:54,366
And I'm setting up a couple of

1153
00:34:54,366 --> 00:34:56,286
things in viewDidLoad, so we're

1154
00:34:56,286 --> 00:34:57,056
here in viewDidLoad.

1155
00:34:57,056 --> 00:34:58,206
I'm first assigning the

1156
00:34:58,206 --> 00:35:00,066
planetName to the planetLabel at

1157
00:35:00,066 --> 00:35:01,846
the top, and here I'm setting up

1158
00:35:01,846 --> 00:35:02,556
the scaleMode.

1159
00:35:03,386 --> 00:35:04,806
Now, let me change the scaleMode

1160
00:35:05,316 --> 00:35:07,446
to something that will better

1161
00:35:08,426 --> 00:35:10,536
achieve what we're trying to do

1162
00:35:10,536 --> 00:35:10,736
here.

1163
00:35:11,016 --> 00:35:12,426
We want the scene to resize.

1164
00:35:12,896 --> 00:35:14,506
So resizeFill sounds like a much

1165
00:35:14,546 --> 00:35:15,236
better option here.

1166
00:35:16,196 --> 00:35:17,766
I'll now rerun and let's verify

1167
00:35:17,766 --> 00:35:18,806
if this actually addressed our

1168
00:35:18,806 --> 00:35:19,216
problem.

1169
00:35:20,506 --> 00:35:22,096
Now, we saw how easy it was to

1170
00:35:22,096 --> 00:35:25,076
visually inspect our application

1171
00:35:25,076 --> 00:35:27,106
that was using UIKit and

1172
00:35:27,106 --> 00:35:28,506
SpriteKit right along each

1173
00:35:28,506 --> 00:35:28,846
other.

1174
00:35:29,246 --> 00:35:30,136
We were able to get a good

1175
00:35:30,136 --> 00:35:31,706
understanding of where our three

1176
00:35:31,706 --> 00:35:32,426
objects went.

1177
00:35:33,106 --> 00:35:34,316
We were then able to select the

1178
00:35:34,316 --> 00:35:35,716
scene, find the property that we

1179
00:35:35,716 --> 00:35:37,146
wanted to act on, and use the

1180
00:35:37,146 --> 00:35:38,686
view controllers to jump right

1181
00:35:38,686 --> 00:35:40,556
to the implementation and make

1182
00:35:40,626 --> 00:35:41,686
that code change.

1183
00:35:42,306 --> 00:35:43,316
Let's verify we actually

1184
00:35:43,316 --> 00:35:44,236
addressed our problem here.

1185
00:35:45,176 --> 00:35:46,346
I'll go back to the planet

1186
00:35:46,346 --> 00:35:48,236
details and bring up the

1187
00:35:48,236 --> 00:35:50,616
gravitySimulator and now I'll

1188
00:35:50,616 --> 00:35:52,176
swipe down to activate gravity.

1189
00:35:53,286 --> 00:35:53,946
And here we go.

1190
00:35:54,126 --> 00:35:54,956
That looks a lot better.

1191
00:35:55,426 --> 00:35:56,666
The three objects bit the bottom

1192
00:35:56,666 --> 00:35:57,696
and you get a good understanding

1193
00:35:57,696 --> 00:35:58,996
of how strong the gravity really

1194
00:35:58,996 --> 00:35:59,716
is on this planet.

1195
00:36:01,036 --> 00:36:03,216
Now, there's one more thing.

1196
00:36:03,216 --> 00:36:04,096
I don't know if you already

1197
00:36:04,096 --> 00:36:04,696
noticed.

1198
00:36:05,216 --> 00:36:06,386
There's something going wrong in

1199
00:36:06,386 --> 00:36:07,786
the solar system in the front,

1200
00:36:08,226 --> 00:36:09,726
in the beginning of that.

1201
00:36:10,636 --> 00:36:12,116
There's something missing here.

1202
00:36:13,836 --> 00:36:15,596
There's a planet missing here,

1203
00:36:16,006 --> 00:36:17,446
and I'm not talking about Pluto.

1204
00:36:18,376 --> 00:36:21,456
I'm talking about Saturn, and

1205
00:36:21,456 --> 00:36:22,866
I'm very confident that my model

1206
00:36:22,866 --> 00:36:24,066
is set up correctly with all the

1207
00:36:24,066 --> 00:36:25,026
details about the different

1208
00:36:25,026 --> 00:36:26,506
planets, and since I'm using

1209
00:36:26,506 --> 00:36:28,066
SceneKit to build this 3D

1210
00:36:28,066 --> 00:36:29,806
visualization, something must be

1211
00:36:29,806 --> 00:36:31,206
incorrectly set up with my scene

1212
00:36:31,206 --> 00:36:31,626
graph.

1213
00:36:32,066 --> 00:36:33,376
So let's use the View Debugger

1214
00:36:33,766 --> 00:36:35,746
to take a look and find out what

1215
00:36:35,746 --> 00:36:36,496
happened to Saturn.

1216
00:36:37,866 --> 00:36:38,866
I'll again bring up the View

1217
00:36:38,866 --> 00:36:40,246
Debugger using the button in the

1218
00:36:40,246 --> 00:36:40,846
Debug bar.

1219
00:36:41,486 --> 00:36:42,896
And Xcode captures the view

1220
00:36:42,896 --> 00:36:44,446
hierarchy, including the content

1221
00:36:44,446 --> 00:36:46,056
of all SceneKit scenes that are

1222
00:36:46,056 --> 00:36:47,036
part of the view hierarchy.

1223
00:36:47,606 --> 00:36:48,776
And as Chris mentioned earlier,

1224
00:36:48,876 --> 00:36:50,346
they're now presented right

1225
00:36:50,386 --> 00:36:52,146
below the hosting SCN view in

1226
00:36:52,146 --> 00:36:53,406
the Debug Navigator on the

1227
00:36:53,406 --> 00:36:54,056
left-hand side.

1228
00:36:54,806 --> 00:36:56,676
And selecting it opens that

1229
00:36:56,676 --> 00:36:58,926
runtime snapshot of the scene in

1230
00:36:58,926 --> 00:37:00,456
the SceneKit Editor, which is in

1231
00:37:00,456 --> 00:37:01,546
runtime debugging mode.

1232
00:37:02,966 --> 00:37:04,996
Now, you can see that besides

1233
00:37:05,116 --> 00:37:06,876
the 3D world, it shows you

1234
00:37:06,876 --> 00:37:07,896
additional information.

1235
00:37:08,186 --> 00:37:09,416
In this case the wire frame

1236
00:37:09,416 --> 00:37:10,706
representation of this sphere

1237
00:37:10,706 --> 00:37:12,196
visualizes the light source that

1238
00:37:12,196 --> 00:37:14,696
I'm using to illuminate the

1239
00:37:14,696 --> 00:37:15,356
solar system.

1240
00:37:16,626 --> 00:37:17,376
Since we're currently not

1241
00:37:17,376 --> 00:37:19,466
debugging a lighting issue, I

1242
00:37:19,466 --> 00:37:20,916
can turn off the display of

1243
00:37:20,916 --> 00:37:22,666
lights using the Editor menu so

1244
00:37:22,666 --> 00:37:24,046
we can focus on the 3D world.

1245
00:37:24,046 --> 00:37:27,326
Now, let me increase the size of

1246
00:37:27,326 --> 00:37:29,866
the window here a little bit so

1247
00:37:29,936 --> 00:37:31,226
we have more space to work with.

1248
00:37:32,036 --> 00:37:33,156
On the left-hand side I can

1249
00:37:33,156 --> 00:37:33,946
bring up an outline

1250
00:37:33,946 --> 00:37:35,026
representation of the entire

1251
00:37:35,026 --> 00:37:37,106
scene graph, and when I expand

1252
00:37:37,106 --> 00:37:38,816
this graph, you can see all the

1253
00:37:38,816 --> 00:37:40,156
SceneKit nodes that I used to

1254
00:37:40,156 --> 00:37:41,056
build this screen in

1255
00:37:41,056 --> 00:37:41,676
visualization.

1256
00:37:43,076 --> 00:37:44,616
And looking down here we can see

1257
00:37:44,616 --> 00:37:45,936
that Saturn is actually part of

1258
00:37:45,936 --> 00:37:48,516
it, and selecting it gives us

1259
00:37:48,516 --> 00:37:49,926
additional details in the

1260
00:37:50,176 --> 00:37:51,156
Inspector on the right-hand

1261
00:37:51,156 --> 00:37:51,416
side.

1262
00:37:51,716 --> 00:37:52,976
In this case we can inspect the

1263
00:37:52,976 --> 00:37:54,896
material property and even take

1264
00:37:54,896 --> 00:37:55,826
a look at it in 3D.

1265
00:37:56,966 --> 00:37:58,556
Now, you can also see that it's

1266
00:37:58,556 --> 00:37:59,996
actually part of the 3D world.

1267
00:38:00,576 --> 00:38:02,116
And since the SceneKit Editor

1268
00:38:02,116 --> 00:38:03,486
visualizes the camera's view

1269
00:38:03,486 --> 00:38:05,836
frustum, it's very easy to

1270
00:38:05,836 --> 00:38:06,976
understand why we don't see it

1271
00:38:06,976 --> 00:38:08,086
on the device's display.

1272
00:38:08,086 --> 00:38:09,566
It's simply outside the area

1273
00:38:09,946 --> 00:38:11,496
that the camera can see.

1274
00:38:12,926 --> 00:38:14,006
Now, we don't have enough time

1275
00:38:14,006 --> 00:38:15,646
to go into the code and address

1276
00:38:15,646 --> 00:38:17,226
this problem right now, and I'd

1277
00:38:17,226 --> 00:38:18,816
actually like to have Breckin

1278
00:38:18,816 --> 00:38:19,896
look at the problem after this

1279
00:38:19,896 --> 00:38:20,256
session.

1280
00:38:20,676 --> 00:38:22,296
So what I can do now, I can

1281
00:38:22,596 --> 00:38:23,976
export the current state of this

1282
00:38:23,976 --> 00:38:25,496
snapshot using the Export button

1283
00:38:25,496 --> 00:38:27,576
in the top right corner and save

1284
00:38:27,576 --> 00:38:28,736
that to disk, and I can now

1285
00:38:28,736 --> 00:38:31,366
share that snapshot and other

1286
00:38:31,366 --> 00:38:32,766
people will be able to just open

1287
00:38:32,766 --> 00:38:34,376
that up and use it as a

1288
00:38:34,376 --> 00:38:35,546
reference to then go into the

1289
00:38:35,546 --> 00:38:36,826
code to address the problem.

1290
00:38:37,806 --> 00:38:40,496
So we were able to see how

1291
00:38:40,496 --> 00:38:42,436
useful it is to visually inspect

1292
00:38:42,436 --> 00:38:44,106
the 3D world that you build

1293
00:38:44,106 --> 00:38:45,406
using SceneKit to get a better

1294
00:38:45,406 --> 00:38:46,696
understanding of what is going

1295
00:38:46,696 --> 00:38:47,766
on in your application.

1296
00:38:48,126 --> 00:38:49,726
I think if you're using SceneKit

1297
00:38:49,986 --> 00:38:51,836
for your applications, you'll

1298
00:38:51,836 --> 00:38:53,416
really find it useful to

1299
00:38:53,416 --> 00:38:54,696
visually inspect the 3D world

1300
00:38:54,696 --> 00:38:54,976
you built.

1301
00:38:55,516 --> 00:39:03,336
[ Applause ]

1302
00:39:03,836 --> 00:39:04,976
Let me switch back to slides.

1303
00:39:09,066 --> 00:39:09,706
Now, let's recap what we went

1304
00:39:09,706 --> 00:39:09,976
over today.

1305
00:39:17,326 --> 00:39:18,686
First we introduced wireless

1306
00:39:18,746 --> 00:39:19,336
development.

1307
00:39:20,016 --> 00:39:21,466
It's a totally new development

1308
00:39:21,466 --> 00:39:22,496
in debugging experience

1309
00:39:22,496 --> 00:39:23,686
completely without a cable.

1310
00:39:23,686 --> 00:39:24,886
I think you will really love it.

1311
00:39:25,566 --> 00:39:26,346
And if you're here at the

1312
00:39:26,346 --> 00:39:28,856
conference, please use the WWDC

1313
00:39:28,856 --> 00:39:30,236
lab Wi-Fi when you try it out.

1314
00:39:30,236 --> 00:39:31,776
It's set up so you can use

1315
00:39:31,776 --> 00:39:32,596
wireless development.

1316
00:39:33,036 --> 00:39:35,556
Next up we went over breakpoint

1317
00:39:35,556 --> 00:39:36,366
enhancements.

1318
00:39:36,786 --> 00:39:37,976
It's easy and more convenient

1319
00:39:37,976 --> 00:39:39,076
than ever before to use

1320
00:39:39,076 --> 00:39:40,076
breakpoints for debugging.

1321
00:39:41,006 --> 00:39:42,156
And last but not least,

1322
00:39:42,156 --> 00:39:43,296
enhancements we made to the

1323
00:39:43,296 --> 00:39:44,066
visual debugger.

1324
00:39:44,596 --> 00:39:45,946
Namely, you can now debug view

1325
00:39:45,946 --> 00:39:47,026
controllers right along your

1326
00:39:47,026 --> 00:39:47,636
view hierarchy.

1327
00:39:48,246 --> 00:39:49,366
You can inspect SpriteKit

1328
00:39:49,366 --> 00:39:51,106
content and SceneKit content.

1329
00:39:51,656 --> 00:39:52,416
If you haven't used the View

1330
00:39:52,416 --> 00:39:53,666
Debugger before, please give it

1331
00:39:53,666 --> 00:39:54,066
a try.

1332
00:39:54,066 --> 00:39:54,906
I think you'll find it very

1333
00:39:54,906 --> 00:39:57,176
useful to visually inspect your

1334
00:39:57,176 --> 00:39:58,106
applications.

1335
00:39:59,486 --> 00:40:01,986
For more information, please go

1336
00:40:01,986 --> 00:40:02,436
online.

1337
00:40:02,596 --> 00:40:03,546
This is the actual URL.

1338
00:40:03,546 --> 00:40:05,446
It's in the [inaudible] for our

1339
00:40:06,096 --> 00:40:06,216
code.

1340
00:40:06,436 --> 00:40:08,466
We also recommend the following

1341
00:40:08,466 --> 00:40:08,976
related sessions.

1342
00:40:13,196 --> 00:40:14,516
Thank you very much for coming.

1343
00:40:14,516 --> 00:40:15,886
Have a fantastic rest of the

1344
00:40:15,886 --> 00:40:15,976
week.

1345
00:40:16,516 --> 00:40:26,600
[ Applause ]

