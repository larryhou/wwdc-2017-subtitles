[Script Info]
; Script generated by FFmpeg/Lavc57.89.100
ScriptType: v4.00+
PlayResX: 384
PlayResY: 288

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,16,&Hffffff,&Hffffff,&H0,&H0,0,0,0,0,100,100,0,0,1,1,0,2,10,10,10,0

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:24.06,0:00:24.61,Default,,0,0,0,,>> Good morning.
Dialogue: 0,0:00:26.58,0:00:28.38,Default,,0,0,0,,Welcome to the understanding
Dialogue: 0,0:00:28.38,0:00:30.94,Default,,0,0,0,,undefined behavior session.
Dialogue: 0,0:00:31.29,0:00:33.08,Default,,0,0,0,,I know all of you have already
Dialogue: 0,0:00:33.08,0:00:34.89,Default,,0,0,0,,spent countless hours debugging
Dialogue: 0,0:00:34.89,0:00:36.47,Default,,0,0,0,,bugs that would just disappear
Dialogue: 0,0:00:36.47,0:00:38.04,Default,,0,0,0,,when you switched from release
Dialogue: 0,0:00:38.04,0:00:38.76,Default,,0,0,0,,to debug mode.
Dialogue: 0,0:00:39.30,0:00:40.95,Default,,0,0,0,,You might even have lost users
Dialogue: 0,0:00:41.31,0:00:42.57,Default,,0,0,0,,because you couldn't reproduce
Dialogue: 0,0:00:42.57,0:00:43.92,Default,,0,0,0,,the bugs that happened only on
Dialogue: 0,0:00:43.92,0:00:44.62,Default,,0,0,0,,their device.
Dialogue: 0,0:00:45.37,0:00:46.79,Default,,0,0,0,,Those might be signs that you
Dialogue: 0,0:00:46.79,0:00:48.25,Default,,0,0,0,,have undefined behavior in your
Dialogue: 0,0:00:48.25,0:00:48.50,Default,,0,0,0,,code.
Dialogue: 0,0:00:49.96,0:00:51.68,Default,,0,0,0,,I'm Fred. I work on the client
Dialogue: 0,0:00:51.68,0:00:53.63,Default,,0,0,0,,compiler team and today I'll
Dialogue: 0,0:00:53.63,0:00:55.27,Default,,0,0,0,,start by explaining what
Dialogue: 0,0:00:55.27,0:00:57.18,Default,,0,0,0,,undefined behavior is and why it
Dialogue: 0,0:00:57.18,0:00:57.85,Default,,0,0,0,,exists.
Dialogue: 0,0:00:58.59,0:00:59.53,Default,,0,0,0,,Then we'll dive into the
Dialogue: 0,0:00:59.53,0:01:01.03,Default,,0,0,0,,compiler and see how its
Dialogue: 0,0:01:01.03,0:01:02.64,Default,,0,0,0,,interactions with undefined
Dialogue: 0,0:01:02.64,0:01:04.22,Default,,0,0,0,,behavior cause those subtle
Dialogue: 0,0:01:04.22,0:01:04.73,Default,,0,0,0,,bugs.
Dialogue: 0,0:01:05.60,0:01:08.50,Default,,0,0,0,,Those bugs might not only cost
Dialogue: 0,0:01:08.50,0:01:09.94,Default,,0,0,0,,you a lot of debugging time.
Dialogue: 0,0:01:10.45,0:01:11.46,Default,,0,0,0,,They might have security
Dialogue: 0,0:01:11.46,0:01:12.17,Default,,0,0,0,,implications.
Dialogue: 0,0:01:12.76,0:01:14.60,Default,,0,0,0,,Ryan, from our security team,
Dialogue: 0,0:01:14.90,0:01:16.16,Default,,0,0,0,,will tell you more about this
Dialogue: 0,0:01:16.35,0:01:18.66,Default,,0,0,0,,and how you can use our tools to
Dialogue: 0,0:01:18.66,0:01:19.67,Default,,0,0,0,,avoid those issues.
Dialogue: 0,0:01:20.90,0:01:22.51,Default,,0,0,0,,Finally, my colleague Anna will
Dialogue: 0,0:01:22.51,0:01:23.86,Default,,0,0,0,,come to the stage and tell you
Dialogue: 0,0:01:23.86,0:01:25.37,Default,,0,0,0,,how SWF tackles this problem
Dialogue: 0,0:01:25.37,0:01:25.81,Default,,0,0,0,,space.
Dialogue: 0,0:01:27.62,0:01:30.34,Default,,0,0,0,,So, what is undefined behavior?
Dialogue: 0,0:01:32.08,0:01:34.85,Default,,0,0,0,,Undefined behavior happens when
Dialogue: 0,0:01:34.85,0:01:36.86,Default,,0,0,0,,your code has correct syntax but
Dialogue: 0,0:01:36.86,0:01:39.38,Default,,0,0,0,,its behavior is not within the
Dialogue: 0,0:01:39.50,0:01:43.29,Default,,0,0,0,,bounds of what the language
Dialogue: 0,0:01:43.87,0:01:44.05,Default,,0,0,0,,allows.
Dialogue: 0,0:01:45.34,0:01:48.11,Default,,0,0,0,,The C and C++ standards have
Dialogue: 0,0:01:48.11,0:01:49.93,Default,,0,0,0,,really similar definitions of
Dialogue: 0,0:01:49.93,0:01:52.17,Default,,0,0,0,,undefined behavior in the
Dialogue: 0,0:01:52.17,0:01:52.62,Default,,0,0,0,,standard.
Dialogue: 0,0:01:53.11,0:01:54.01,Default,,0,0,0,,Let's have a look at what the
Dialogue: 0,0:01:54.01,0:01:55.22,Default,,0,0,0,,C++ standard says.
Dialogue: 0,0:01:57.40,0:02:00.13,Default,,0,0,0,,Undefined behavior: Behavior for
Dialogue: 0,0:02:00.13,0:02:01.50,Default,,0,0,0,,which this international
Dialogue: 0,0:02:01.50,0:02:03.22,Default,,0,0,0,,standard imposes no
Dialogue: 0,0:02:03.22,0:02:04.01,Default,,0,0,0,,requirements.
Dialogue: 0,0:02:04.93,0:02:06.56,Default,,0,0,0,,Well, that's helpful, right?
Dialogue: 0,0:02:07.29,0:02:11.44,Default,,0,0,0,,To be fair, it comes with a note
Dialogue: 0,0:02:11.55,0:02:12.85,Default,,0,0,0,,that gives more details but it's
Dialogue: 0,0:02:12.88,0:02:14.07,Default,,0,0,0,,too long to put up on the screen
Dialogue: 0,0:02:14.34,0:02:15.18,Default,,0,0,0,,so here's a summary.
Dialogue: 0,0:02:17.71,0:02:18.99,Default,,0,0,0,,So, what can the compiler do?
Dialogue: 0,0:02:19.27,0:02:20.61,Default,,0,0,0,,If you knew about undefined
Dialogue: 0,0:02:20.61,0:02:22.18,Default,,0,0,0,,behavior before coming to this
Dialogue: 0,0:02:22.18,0:02:24.00,Default,,0,0,0,,session, you might have heard
Dialogue: 0,0:02:24.00,0:02:25.15,Default,,0,0,0,,that if you have undefined
Dialogue: 0,0:02:25.15,0:02:26.99,Default,,0,0,0,,behavior, the compiler is
Dialogue: 0,0:02:26.99,0:02:28.28,Default,,0,0,0,,allowed to wipe your disc.
Dialogue: 0,0:02:29.07,0:02:30.68,Default,,0,0,0,,I guarantee this is not going to
Dialogue: 0,0:02:30.68,0:02:31.05,Default,,0,0,0,,happen.
Dialogue: 0,0:02:31.92,0:02:32.73,Default,,0,0,0,,So, what can I do?
Dialogue: 0,0:02:33.77,0:02:35.12,Default,,0,0,0,,The compiler can choose to
Dialogue: 0,0:02:35.12,0:02:37.29,Default,,0,0,0,,diagnose the issues using
Dialogue: 0,0:02:37.29,0:02:38.53,Default,,0,0,0,,warnings or errors.
Dialogue: 0,0:02:39.19,0:02:41.08,Default,,0,0,0,,This is by far our preferred
Dialogue: 0,0:02:41.08,0:02:42.52,Default,,0,0,0,,solution and it is very
Dialogue: 0,0:02:42.52,0:02:43.98,Default,,0,0,0,,actionable on your side and it
Dialogue: 0,0:02:43.98,0:02:44.83,Default,,0,0,0,,prevents the issue and the
Dialogue: 0,0:02:44.83,0:02:45.30,Default,,0,0,0,,source.
Dialogue: 0,0:02:45.61,0:02:48.87,Default,,0,0,0,,The compiler can also choose to
Dialogue: 0,0:02:48.87,0:02:50.42,Default,,0,0,0,,act in a documented manner.
Dialogue: 0,0:02:51.11,0:02:52.81,Default,,0,0,0,,Basically, choosing to define
Dialogue: 0,0:02:52.98,0:02:54.09,Default,,0,0,0,,what the standard left
Dialogue: 0,0:02:54.09,0:02:54.70,Default,,0,0,0,,undefined.
Dialogue: 0,0:02:55.42,0:02:57.47,Default,,0,0,0,,We do not do this a lot but
Dialogue: 0,0:02:57.47,0:02:58.38,Default,,0,0,0,,there are some kinds of
Dialogue: 0,0:02:58.38,0:02:59.94,Default,,0,0,0,,undefined behavior, which are
Dialogue: 0,0:02:59.94,0:03:01.50,Default,,0,0,0,,way to common not to support.
Dialogue: 0,0:03:04.29,0:03:05.92,Default,,0,0,0,,And finally, the compiler can
Dialogue: 0,0:03:05.92,0:03:07.85,Default,,0,0,0,,produce unpredictable results.
Dialogue: 0,0:03:08.34,0:03:09.83,Default,,0,0,0,,This is the part we are going to
Dialogue: 0,0:03:09.83,0:03:10.84,Default,,0,0,0,,focus on today.
Dialogue: 0,0:03:12.06,0:03:14.22,Default,,0,0,0,,Note that unpredictable includes
Dialogue: 0,0:03:14.22,0:03:16.61,Default,,0,0,0,,behaving as you intended, which
Dialogue: 0,0:03:16.61,0:03:18.53,Default,,0,0,0,,is why some of those bugs will
Dialogue: 0,0:03:18.53,0:03:19.49,Default,,0,0,0,,be really evasive.
Dialogue: 0,0:03:20.62,0:03:23.61,Default,,0,0,0,,There is a lot of undefined
Dialogue: 0,0:03:23.61,0:03:25.04,Default,,0,0,0,,behavior in the C family of
Dialogue: 0,0:03:25.04,0:03:25.55,Default,,0,0,0,,languages.
Dialogue: 0,0:03:26.23,0:03:27.60,Default,,0,0,0,,This is just a small sample.
Dialogue: 0,0:03:28.87,0:03:30.75,Default,,0,0,0,,The C standard has a list in
Dialogue: 0,0:03:30.80,0:03:33.00,Default,,0,0,0,,Annex J of all the known sources
Dialogue: 0,0:03:33.00,0:03:33.97,Default,,0,0,0,,of undefined behavior.
Dialogue: 0,0:03:33.97,0:03:37.51,Default,,0,0,0,,There are around 200 of them.
Dialogue: 0,0:03:37.76,0:03:39.02,Default,,0,0,0,,At this point, you might be
Dialogue: 0,0:03:39.02,0:03:41.49,Default,,0,0,0,,wondering why is undefined
Dialogue: 0,0:03:41.49,0:03:42.80,Default,,0,0,0,,behavior even a thing?
Dialogue: 0,0:03:42.97,0:03:44.32,Default,,0,0,0,,Why is it defined in the
Dialogue: 0,0:03:44.32,0:03:45.01,Default,,0,0,0,,standards?
Dialogue: 0,0:03:45.01,0:03:46.43,Default,,0,0,0,,Were people just lazy?
Dialogue: 0,0:03:46.43,0:03:47.55,Default,,0,0,0,,They didn't want to define
Dialogue: 0,0:03:47.55,0:03:48.01,Default,,0,0,0,,everything?
Dialogue: 0,0:03:49.07,0:03:49.85,Default,,0,0,0,,Of course, not.
Dialogue: 0,0:03:50.69,0:03:51.84,Default,,0,0,0,,This is about tradeoffs.
Dialogue: 0,0:03:52.66,0:03:55.37,Default,,0,0,0,,C has been designed to favor
Dialogue: 0,0:03:55.71,0:03:58.10,Default,,0,0,0,,performance, affordability, and
Dialogue: 0,0:03:58.10,0:03:59.51,Default,,0,0,0,,ease of implementation over
Dialogue: 0,0:03:59.51,0:04:00.02,Default,,0,0,0,,safety.
Dialogue: 0,0:04:01.67,0:04:03.32,Default,,0,0,0,,The C family of languages has
Dialogue: 0,0:04:03.32,0:04:04.81,Default,,0,0,0,,inherited those tradeoffs.
Dialogue: 0,0:04:06.14,0:04:08.03,Default,,0,0,0,,Those were deliberate choices
Dialogue: 0,0:04:08.25,0:04:09.32,Default,,0,0,0,,and they still make a lot of
Dialogue: 0,0:04:09.32,0:04:10.95,Default,,0,0,0,,sense in many circumstances
Dialogue: 0,0:04:10.95,0:04:11.29,Default,,0,0,0,,today.
Dialogue: 0,0:04:12.27,0:04:16.89,Default,,0,0,0,,Our OSs run fast thanks to them.
Dialogue: 0,0:04:16.89,0:04:18.75,Default,,0,0,0,,But as with every tradeoff,
Dialogue: 0,0:04:18.78,0:04:20.42,Default,,0,0,0,,there is a price to pay and in
Dialogue: 0,0:04:20.42,0:04:22.01,Default,,0,0,0,,this case it is you, the
Dialogue: 0,0:04:22.01,0:04:24.20,Default,,0,0,0,,developers, who are paying it.
Dialogue: 0,0:04:24.59,0:04:25.90,Default,,0,0,0,,This is why it is really
Dialogue: 0,0:04:25.90,0:04:27.47,Default,,0,0,0,,important that you know that it
Dialogue: 0,0:04:27.47,0:04:29.93,Default,,0,0,0,,exists and how to deal with it.
Dialogue: 0,0:04:30.50,0:04:33.59,Default,,0,0,0,,As I said, there are way too
Dialogue: 0,0:04:33.59,0:04:35.47,Default,,0,0,0,,many kinds of undefined behavior
Dialogue: 0,0:04:35.55,0:04:37.06,Default,,0,0,0,,to go through all of them but
Dialogue: 0,0:04:37.44,0:04:38.84,Default,,0,0,0,,let's just go through a few
Dialogue: 0,0:04:38.84,0:04:39.82,Default,,0,0,0,,examples to make sure
Dialogue: 0,0:04:39.82,0:04:43.14,Default,,0,0,0,,everybody's on the same page.
Dialogue: 0,0:04:43.34,0:04:45.43,Default,,0,0,0,,My first example is the use of
Dialogue: 0,0:04:45.43,0:04:46.94,Default,,0,0,0,,an uninitialized value.
Dialogue: 0,0:04:47.65,0:04:49.33,Default,,0,0,0,,In this function, we have a
Dialogue: 0,0:04:49.33,0:04:50.40,Default,,0,0,0,,local variable, value.
Dialogue: 0,0:04:51.02,0:04:52.39,Default,,0,0,0,,It is used in the return
Dialogue: 0,0:04:52.39,0:04:55.54,Default,,0,0,0,,statement but it is initialized
Dialogue: 0,0:04:55.54,0:04:57.60,Default,,0,0,0,,only if the condition to the if
Dialogue: 0,0:04:57.60,0:04:58.35,Default,,0,0,0,,block is true.
Dialogue: 0,0:04:59.32,0:05:01.35,Default,,0,0,0,,If you pass any positive number
Dialogue: 0,0:05:01.35,0:05:02.99,Default,,0,0,0,,to this function, it will invoke
Dialogue: 0,0:05:02.99,0:05:05.14,Default,,0,0,0,,undefined behavior as value will
Dialogue: 0,0:05:05.14,0:05:06.63,Default,,0,0,0,,be used and initialized.
Dialogue: 0,0:05:07.99,0:05:09.39,Default,,0,0,0,,In this simple case, the
Dialogue: 0,0:05:09.39,0:05:10.65,Default,,0,0,0,,compiler will catch the issue
Dialogue: 0,0:05:10.65,0:05:11.38,Default,,0,0,0,,and warn about it.
Dialogue: 0,0:05:12.82,0:05:14.42,Default,,0,0,0,,The static analyzer would give
Dialogue: 0,0:05:14.42,0:05:15.98,Default,,0,0,0,,you that information too and it
Dialogue: 0,0:05:15.98,0:05:18.16,Default,,0,0,0,,would catch more complex cases
Dialogue: 0,0:05:18.32,0:05:21.03,Default,,0,0,0,,of the same kind.
Dialogue: 0,0:05:22.43,0:05:23.79,Default,,0,0,0,,My second example is about
Dialogue: 0,0:05:23.79,0:05:24.91,Default,,0,0,0,,misaligned pointers.
Dialogue: 0,0:05:25.26,0:05:28.14,Default,,0,0,0,,In this function, we take a
Dialogue: 0,0:05:28.14,0:05:29.66,Default,,0,0,0,,character pointer as an argument
Dialogue: 0,0:05:30.80,0:05:32.84,Default,,0,0,0,,but inside the function, we use
Dialogue: 0,0:05:32.84,0:05:34.08,Default,,0,0,0,,it as an integer pointer.
Dialogue: 0,0:05:34.79,0:05:36.98,Default,,0,0,0,,The issue is that not every
Dialogue: 0,0:05:36.98,0:05:38.38,Default,,0,0,0,,character pointer is a valid
Dialogue: 0,0:05:38.38,0:05:39.24,Default,,0,0,0,,integer pointer.
Dialogue: 0,0:05:40.75,0:05:42.61,Default,,0,0,0,,Integers have to be correctly
Dialogue: 0,0:05:42.61,0:05:43.08,Default,,0,0,0,,aligned.
Dialogue: 0,0:05:43.42,0:05:44.89,Default,,0,0,0,,Usually this means their address
Dialogue: 0,0:05:44.89,0:05:46.17,Default,,0,0,0,,needs to be a multiple of four.
Dialogue: 0,0:05:47.41,0:05:48.84,Default,,0,0,0,,This kind of code will often
Dialogue: 0,0:05:48.84,0:05:50.61,Default,,0,0,0,,cause issues when porting code
Dialogue: 0,0:05:50.61,0:05:52.09,Default,,0,0,0,,between different architectures,
Dialogue: 0,0:05:52.21,0:05:53.90,Default,,0,0,0,,which have different alignment
Dialogue: 0,0:05:53.90,0:05:55.16,Default,,0,0,0,,constraints at the hardware
Dialogue: 0,0:05:55.53,0:05:56.05,Default,,0,0,0,,level.
Dialogue: 0,0:05:56.86,0:05:58.82,Default,,0,0,0,,This year, in Xcode 9 we
Dialogue: 0,0:05:58.82,0:06:00.25,Default,,0,0,0,,introduced the new Runtime tool,
Dialogue: 0,0:06:00.36,0:06:01.37,Default,,0,0,0,,the Undefined Behavior
Dialogue: 0,0:06:01.37,0:06:02.80,Default,,0,0,0,,Sanitizer, which would catch
Dialogue: 0,0:06:02.80,0:06:03.66,Default,,0,0,0,,this issue.
Dialogue: 0,0:06:07.65,0:06:09.91,Default,,0,0,0,,My last example is about
Dialogue: 0,0:06:09.91,0:06:10.52,Default,,0,0,0,,lifetimes.
Dialogue: 0,0:06:11.71,0:06:13.93,Default,,0,0,0,,Variables are defined only
Dialogue: 0,0:06:13.93,0:06:15.30,Default,,0,0,0,,within the scope -- our
Dialogue: 0,0:06:15.42,0:06:17.12,Default,,0,0,0,,variables are valued only within
Dialogue: 0,0:06:17.12,0:06:18.44,Default,,0,0,0,,the scope they are defined in.
Dialogue: 0,0:06:19.34,0:06:20.95,Default,,0,0,0,,Here, we take the address of the
Dialogue: 0,0:06:20.95,0:06:22.06,Default,,0,0,0,,default value variable.
Dialogue: 0,0:06:23.17,0:06:25.42,Default,,0,0,0,,Default is defined within the if
Dialogue: 0,0:06:25.42,0:06:27.56,Default,,0,0,0,,block and exists only there.
Dialogue: 0,0:06:28.04,0:06:29.95,Default,,0,0,0,,But by using this pointer
Dialogue: 0,0:06:30.34,0:06:32.12,Default,,0,0,0,,outside of the block, we invoke
Dialogue: 0,0:06:32.12,0:06:33.03,Default,,0,0,0,,undefined behavior.
Dialogue: 0,0:06:34.78,0:06:37.48,Default,,0,0,0,,Again, our tools will catch
Dialogue: 0,0:06:37.48,0:06:37.70,Default,,0,0,0,,that.
Dialogue: 0,0:06:38.61,0:06:42.24,Default,,0,0,0,,Now that we have a better idea
Dialogue: 0,0:06:42.24,0:06:44.37,Default,,0,0,0,,of the issues we are talking
Dialogue: 0,0:06:44.37,0:06:46.53,Default,,0,0,0,,about, let's take a look at how
Dialogue: 0,0:06:46.53,0:06:47.82,Default,,0,0,0,,they interact with the compiler
Dialogue: 0,0:06:49.51,0:06:50.88,Default,,0,0,0,,and how they can produce those
Dialogue: 0,0:06:50.88,0:06:51.68,Default,,0,0,0,,surprising bugs.
Dialogue: 0,0:06:52.58,0:06:55.55,Default,,0,0,0,,First, let's look at what the
Dialogue: 0,0:06:55.55,0:06:56.78,Default,,0,0,0,,compiler, what undefined
Dialogue: 0,0:06:56.78,0:06:58.38,Default,,0,0,0,,behavior means to the compiler.
Dialogue: 0,0:06:59.27,0:07:01.56,Default,,0,0,0,,It is not actively looking for
Dialogue: 0,0:07:01.56,0:07:03.98,Default,,0,0,0,,it to transform it in weird
Dialogue: 0,0:07:03.98,0:07:04.39,Default,,0,0,0,,ways.
Dialogue: 0,0:07:04.78,0:07:05.71,Default,,0,0,0,,This is not happening.
Dialogue: 0,0:07:06.31,0:07:07.62,Default,,0,0,0,,But the compiler makes the
Dialogue: 0,0:07:07.62,0:07:09.36,Default,,0,0,0,,assumption that there is no
Dialogue: 0,0:07:09.36,0:07:11.12,Default,,0,0,0,,undefined behavior in your code
Dialogue: 0,0:07:11.56,0:07:12.98,Default,,0,0,0,,because otherwise the semantics
Dialogue: 0,0:07:12.98,0:07:14.09,Default,,0,0,0,,of your code wouldn't be well
Dialogue: 0,0:07:14.09,0:07:14.56,Default,,0,0,0,,defined.
Dialogue: 0,0:07:15.66,0:07:17.70,Default,,0,0,0,,By making this assumption, the
Dialogue: 0,0:07:17.70,0:07:20.22,Default,,0,0,0,,compiler gathers information to
Dialogue: 0,0:07:20.46,0:07:21.62,Default,,0,0,0,,better optimize your code.
Dialogue: 0,0:07:21.72,0:07:24.76,Default,,0,0,0,,Here are a few examples.
Dialogue: 0,0:07:26.42,0:07:28.30,Default,,0,0,0,,As it is undefined to overflow
Dialogue: 0,0:07:28.30,0:07:30.35,Default,,0,0,0,,assigned integer, if X is
Dialogue: 0,0:07:30.35,0:07:31.99,Default,,0,0,0,,assigned integer, the compiler
Dialogue: 0,0:07:31.99,0:07:33.98,Default,,0,0,0,,can assume that X is lower than
Dialogue: 0,0:07:33.98,0:07:34.62,Default,,0,0,0,,X + 1.
Dialogue: 0,0:07:35.39,0:07:37.33,Default,,0,0,0,,This is a very simple but very
Dialogue: 0,0:07:37.33,0:07:38.70,Default,,0,0,0,,powerful assumption to make when
Dialogue: 0,0:07:38.70,0:07:40.23,Default,,0,0,0,,dealing, for example, with loop
Dialogue: 0,0:07:40.23,0:07:41.04,Default,,0,0,0,,optimizations.
Dialogue: 0,0:07:42.84,0:07:45.83,Default,,0,0,0,,As I said, pointers need to be
Dialogue: 0,0:07:45.83,0:07:46.30,Default,,0,0,0,,aligned.
Dialogue: 0,0:07:47.14,0:07:48.42,Default,,0,0,0,,And by making the assumption
Dialogue: 0,0:07:48.42,0:07:49.92,Default,,0,0,0,,that they are, the compiler can
Dialogue: 0,0:07:49.92,0:07:52.06,Default,,0,0,0,,use more powerful memory access
Dialogue: 0,0:07:52.06,0:07:53.40,Default,,0,0,0,,instructions like vector
Dialogue: 0,0:07:53.40,0:07:55.05,Default,,0,0,0,,instructions to make your code
Dialogue: 0,0:07:55.05,0:07:55.79,Default,,0,0,0,,way faster.
Dialogue: 0,0:07:56.36,0:08:00.74,Default,,0,0,0,,And last example, it is
Dialogue: 0,0:08:00.74,0:08:02.25,Default,,0,0,0,,undefined to dereference another
Dialogue: 0,0:08:02.25,0:08:03.99,Default,,0,0,0,,pointer, so the compiler can
Dialogue: 0,0:08:03.99,0:08:05.60,Default,,0,0,0,,assume that each pointer that is
Dialogue: 0,0:08:05.60,0:08:08.46,Default,,0,0,0,,dereferenced cannot be now and
Dialogue: 0,0:08:08.46,0:08:09.98,Default,,0,0,0,,use this information to further
Dialogue: 0,0:08:09.98,0:08:10.70,Default,,0,0,0,,optimize your code.
Dialogue: 0,0:08:12.95,0:08:14.53,Default,,0,0,0,,So, let's get a little bit more
Dialogue: 0,0:08:14.53,0:08:16.50,Default,,0,0,0,,concrete and look at how a
Dialogue: 0,0:08:16.50,0:08:17.42,Default,,0,0,0,,compiler works.
Dialogue: 0,0:08:18.35,0:08:19.86,Default,,0,0,0,,At a very high level, the
Dialogue: 0,0:08:19.86,0:08:21.34,Default,,0,0,0,,compiler takes your source code
Dialogue: 0,0:08:22.24,0:08:23.47,Default,,0,0,0,,and transforms it into an
Dialogue: 0,0:08:23.47,0:08:24.67,Default,,0,0,0,,intermediate representation.
Dialogue: 0,0:08:25.00,0:08:27.47,Default,,0,0,0,,It then applies a pipeline of
Dialogue: 0,0:08:27.47,0:08:29.02,Default,,0,0,0,,optimizations to generate
Dialogue: 0,0:08:29.02,0:08:30.32,Default,,0,0,0,,optimizations to generate the
Dialogue: 0,0:08:30.68,0:08:30.85,Default,,0,0,0,,binary.
Dialogue: 0,0:08:30.85,0:08:32.77,Default,,0,0,0,,Each of those optimizations has
Dialogue: 0,0:08:32.77,0:08:35.08,Default,,0,0,0,,one goal, generate a more
Dialogue: 0,0:08:35.08,0:08:37.27,Default,,0,0,0,,efficient representation of its
Dialogue: 0,0:08:37.27,0:08:39.11,Default,,0,0,0,,input while preserving the
Dialogue: 0,0:08:39.11,0:08:39.80,Default,,0,0,0,,semantics.
Dialogue: 0,0:08:40.33,0:08:44.27,Default,,0,0,0,,But I introduced the session by
Dialogue: 0,0:08:44.43,0:08:45.73,Default,,0,0,0,,talking about those bugs that
Dialogue: 0,0:08:45.80,0:08:47.38,Default,,0,0,0,,would reproduce in release mode
Dialogue: 0,0:08:47.42,0:08:48.39,Default,,0,0,0,,but not in debug mode.
Dialogue: 0,0:08:48.39,0:08:49.53,Default,,0,0,0,,So, how is that behavior
Dialogue: 0,0:08:49.53,0:08:50.23,Default,,0,0,0,,preserving?
Dialogue: 0,0:08:51.27,0:08:52.92,Default,,0,0,0,,Let's look at a simple example.
Dialogue: 0,0:08:54.06,0:08:55.72,Default,,0,0,0,,Here we have our compiler at the
Dialogue: 0,0:08:55.72,0:08:56.07,Default,,0,0,0,,top.
Dialogue: 0,0:08:57.51,0:08:58.95,Default,,0,0,0,,It has only one optimization -
Dialogue: 0,0:08:59.27,0:09:00.42,Default,,0,0,0,,dead code elimination.
Dialogue: 0,0:09:01.07,0:09:03.89,Default,,0,0,0,,Dead code elimination looks for
Dialogue: 0,0:09:03.89,0:09:06.67,Default,,0,0,0,,code that cannot be executed or
Dialogue: 0,0:09:06.67,0:09:08.16,Default,,0,0,0,,that doesn't affect the result
Dialogue: 0,0:09:08.16,0:09:10.19,Default,,0,0,0,,of your program in any way and
Dialogue: 0,0:09:10.19,0:09:11.53,Default,,0,0,0,,it removes this code, thus
Dialogue: 0,0:09:11.53,0:09:13.33,Default,,0,0,0,,making your apps smaller.
Dialogue: 0,0:09:14.79,0:09:16.17,Default,,0,0,0,,Let's apply this compiler to a
Dialogue: 0,0:09:16.17,0:09:17.24,Default,,0,0,0,,simple function.
Dialogue: 0,0:09:18.28,0:09:19.64,Default,,0,0,0,,The function has only two
Dialogue: 0,0:09:19.64,0:09:20.92,Default,,0,0,0,,statements, one variable
Dialogue: 0,0:09:20.92,0:09:22.58,Default,,0,0,0,,assignment and a return
Dialogue: 0,0:09:22.58,0:09:23.01,Default,,0,0,0,,statement.
Dialogue: 0,0:09:23.64,0:09:26.91,Default,,0,0,0,,We run dead code elimination.
Dialogue: 0,0:09:27.90,0:09:29.88,Default,,0,0,0,,The variable is not used so
Dialogue: 0,0:09:29.99,0:09:32.43,Default,,0,0,0,,let's get rid of it.
Dialogue: 0,0:09:32.69,0:09:34.62,Default,,0,0,0,,And here, look at what we got.
Dialogue: 0,0:09:35.55,0:09:37.22,Default,,0,0,0,,What happens if we pass another
Dialogue: 0,0:09:37.22,0:09:38.24,Default,,0,0,0,,pointer to this function?
Dialogue: 0,0:09:38.78,0:09:40.65,Default,,0,0,0,,The unoptimized version will
Dialogue: 0,0:09:40.65,0:09:42.94,Default,,0,0,0,,crash but the optimized version
Dialogue: 0,0:09:42.94,0:09:44.35,Default,,0,0,0,,will happily return 42.
Dialogue: 0,0:09:45.00,0:09:46.48,Default,,0,0,0,,So, we have a difference in
Dialogue: 0,0:09:46.48,0:09:46.96,Default,,0,0,0,,behavior.
Dialogue: 0,0:09:47.94,0:09:49.58,Default,,0,0,0,,But by passing null to this
Dialogue: 0,0:09:49.58,0:09:51.50,Default,,0,0,0,,function, you invoked undefined
Dialogue: 0,0:09:51.50,0:09:53.76,Default,,0,0,0,,behavior as it is undefined to
Dialogue: 0,0:09:53.76,0:09:54.97,Default,,0,0,0,,dereference another pointer.
Dialogue: 0,0:09:56.16,0:09:57.76,Default,,0,0,0,,I'll repeat that.
Dialogue: 0,0:09:57.76,0:09:59.57,Default,,0,0,0,,It is undefined to dereference
Dialogue: 0,0:09:59.57,0:10:00.23,Default,,0,0,0,,another pointer.
Dialogue: 0,0:10:00.28,0:10:02.06,Default,,0,0,0,,It is not defined to crash.
Dialogue: 0,0:10:03.22,0:10:05.12,Default,,0,0,0,,If dereferencing another pointer
Dialogue: 0,0:10:05.12,0:10:07.46,Default,,0,0,0,,was defined to crash or if for
Dialogue: 0,0:10:07.46,0:10:08.83,Default,,0,0,0,,some other reason the compiler
Dialogue: 0,0:10:08.83,0:10:10.17,Default,,0,0,0,,couldn't make the assumption
Dialogue: 0,0:10:10.55,0:10:12.24,Default,,0,0,0,,that dereferenced pointers were
Dialogue: 0,0:10:12.24,0:10:14.80,Default,,0,0,0,,valid, it would be really hard
Dialogue: 0,0:10:14.80,0:10:16.31,Default,,0,0,0,,to make any transformations on
Dialogue: 0,0:10:16.31,0:10:17.24,Default,,0,0,0,,the memory accesses.
Dialogue: 0,0:10:17.40,0:10:19.07,Default,,0,0,0,,Like, it couldn't reorder them.
Dialogue: 0,0:10:19.07,0:10:21.09,Default,,0,0,0,,It couldn't merge them or it
Dialogue: 0,0:10:21.09,0:10:22.21,Default,,0,0,0,,couldn't remove the useless
Dialogue: 0,0:10:22.21,0:10:23.30,Default,,0,0,0,,ones, like we just saw.
Dialogue: 0,0:10:26.17,0:10:27.70,Default,,0,0,0,,Dealing with memory access is a
Dialogue: 0,0:10:27.80,0:10:29.35,Default,,0,0,0,,huge part of the compiler job.
Dialogue: 0,0:10:30.59,0:10:31.90,Default,,0,0,0,,So, here you have an example of
Dialogue: 0,0:10:32.03,0:10:34.31,Default,,0,0,0,,how undefined behavior changes
Dialogue: 0,0:10:34.31,0:10:35.55,Default,,0,0,0,,the behavior of your program
Dialogue: 0,0:10:35.55,0:10:37.05,Default,,0,0,0,,between unoptimized and
Dialogue: 0,0:10:37.05,0:10:37.82,Default,,0,0,0,,optimized code.
Dialogue: 0,0:10:38.44,0:10:39.43,Default,,0,0,0,,But there's more I want to show
Dialogue: 0,0:10:39.43,0:10:39.62,Default,,0,0,0,,you.
Dialogue: 0,0:10:40.19,0:10:41.54,Default,,0,0,0,,Let's move to a slightly more
Dialogue: 0,0:10:41.54,0:10:42.53,Default,,0,0,0,,complicated example.
Dialogue: 0,0:10:44.14,0:10:45.96,Default,,0,0,0,,Here again we have our compiler
Dialogue: 0,0:10:45.96,0:10:47.86,Default,,0,0,0,,that's up and our source at the
Dialogue: 0,0:10:47.86,0:10:48.28,Default,,0,0,0,,bottom.
Dialogue: 0,0:10:49.21,0:10:51.25,Default,,0,0,0,,This example is actually derived
Dialogue: 0,0:10:51.51,0:10:53.11,Default,,0,0,0,,from a real issue that happened
Dialogue: 0,0:10:53.11,0:10:54.54,Default,,0,0,0,,in our big open source code days
Dialogue: 0,0:10:54.72,0:10:55.75,Default,,0,0,0,,a few years ago.
Dialogue: 0,0:10:55.98,0:10:57.59,Default,,0,0,0,,So, do not disregard it as
Dialogue: 0,0:10:57.59,0:10:58.93,Default,,0,0,0,,completely theoretical.
Dialogue: 0,0:11:00.79,0:11:02.43,Default,,0,0,0,,When you have a big function
Dialogue: 0,0:11:02.62,0:11:04.00,Default,,0,0,0,,that is modified by multiple
Dialogue: 0,0:11:04.08,0:11:05.57,Default,,0,0,0,,people over a long period of
Dialogue: 0,0:11:05.57,0:11:07.90,Default,,0,0,0,,time, it's easy to end up with
Dialogue: 0,0:11:07.90,0:11:09.43,Default,,0,0,0,,artifacts from the past, like
Dialogue: 0,0:11:09.43,0:11:10.79,Default,,0,0,0,,this unused variable at the top
Dialogue: 0,0:11:10.79,0:11:11.41,Default,,0,0,0,,of the function.
Dialogue: 0,0:11:12.61,0:11:14.79,Default,,0,0,0,,Now, let's compile this code.
Dialogue: 0,0:11:15.30,0:11:16.60,Default,,0,0,0,,Our new compiler has one more
Dialogue: 0,0:11:16.60,0:11:17.34,Default,,0,0,0,,optimization.
Dialogue: 0,0:11:17.99,0:11:19.23,Default,,0,0,0,,Redundant null check
Dialogue: 0,0:11:19.23,0:11:19.98,Default,,0,0,0,,elimination.
Dialogue: 0,0:11:20.92,0:11:22.19,Default,,0,0,0,,This optimization is a
Dialogue: 0,0:11:22.19,0:11:23.80,Default,,0,0,0,,specialized version of dead code
Dialogue: 0,0:11:23.80,0:11:24.53,Default,,0,0,0,,elimination.
Dialogue: 0,0:11:24.98,0:11:26.44,Default,,0,0,0,,It will look for pointers
Dialogue: 0,0:11:26.44,0:11:28.60,Default,,0,0,0,,compared against now and tries
Dialogue: 0,0:11:28.63,0:11:30.54,Default,,0,0,0,,to decide if statically at this
Dialogue: 0,0:11:30.58,0:11:33.34,Default,,0,0,0,,point of the program it can
Dialogue: 0,0:11:33.73,0:11:36.32,Default,,0,0,0,,prove that the pointer is either
Dialogue: 0,0:11:36.32,0:11:37.46,Default,,0,0,0,,null or nonnull.
Dialogue: 0,0:11:38.78,0:11:40.30,Default,,0,0,0,,And when it can do so, it just
Dialogue: 0,0:11:40.30,0:11:41.53,Default,,0,0,0,,removes the code that can never
Dialogue: 0,0:11:41.53,0:11:42.37,Default,,0,0,0,,be executed.
Dialogue: 0,0:11:43.32,0:11:46.63,Default,,0,0,0,,In this case, P is dereferenced
Dialogue: 0,0:11:46.63,0:11:47.85,Default,,0,0,0,,in the first line of the
Dialogue: 0,0:11:47.85,0:11:48.36,Default,,0,0,0,,function.
Dialogue: 0,0:11:48.43,0:11:49.86,Default,,0,0,0,,So, of course the pointer cannot
Dialogue: 0,0:11:49.86,0:11:50.21,Default,,0,0,0,,be null.
Dialogue: 0,0:11:50.81,0:11:51.78,Default,,0,0,0,,Let's remove the null check.
Dialogue: 0,0:11:52.40,0:11:56.38,Default,,0,0,0,,We then move on to our second
Dialogue: 0,0:11:56.38,0:11:57.07,Default,,0,0,0,,optimization.
Dialogue: 0,0:11:57.42,0:11:58.66,Default,,0,0,0,,We already know about dead code
Dialogue: 0,0:11:58.66,0:11:59.40,Default,,0,0,0,,elimination.
Dialogue: 0,0:12:00.12,0:12:01.07,Default,,0,0,0,,Unused is unused.
Dialogue: 0,0:12:01.62,0:12:02.30,Default,,0,0,0,,It goes away.
Dialogue: 0,0:12:03.85,0:12:05.80,Default,,0,0,0,,And here's the result of our
Dialogue: 0,0:12:05.80,0:12:06.40,Default,,0,0,0,,compilation.
Dialogue: 0,0:12:07.72,0:12:10.01,Default,,0,0,0,,Now, let's play the same game.
Dialogue: 0,0:12:10.01,0:12:11.60,Default,,0,0,0,,What happens if we pass null to
Dialogue: 0,0:12:11.60,0:12:12.17,Default,,0,0,0,,this function?
Dialogue: 0,0:12:12.88,0:12:14.96,Default,,0,0,0,,The unoptimized version will
Dialogue: 0,0:12:14.96,0:12:15.45,Default,,0,0,0,,crash.
Dialogue: 0,0:12:16.31,0:12:18.36,Default,,0,0,0,,The optimized version will crash
Dialogue: 0,0:12:18.36,0:12:18.58,Default,,0,0,0,,too.
Dialogue: 0,0:12:19.44,0:12:20.81,Default,,0,0,0,,But note that they don't crash
Dialogue: 0,0:12:20.81,0:12:21.48,Default,,0,0,0,,in the same spot.
Dialogue: 0,0:12:21.95,0:12:23.30,Default,,0,0,0,,The unoptimized version crashes
Dialogue: 0,0:12:23.30,0:12:24.09,Default,,0,0,0,,on the first line.
Dialogue: 0,0:12:24.51,0:12:26.12,Default,,0,0,0,,The optimized version crashes on
Dialogue: 0,0:12:26.12,0:12:26.92,Default,,0,0,0,,the last line.
Dialogue: 0,0:12:27.71,0:12:29.30,Default,,0,0,0,,Those could be hundreds of
Dialogue: 0,0:12:29.30,0:12:30.38,Default,,0,0,0,,thousands of lines away.
Dialogue: 0,0:12:31.23,0:12:33.00,Default,,0,0,0,,This is a very important lesson
Dialogue: 0,0:12:33.00,0:12:34.24,Default,,0,0,0,,to learn about undefined
Dialogue: 0,0:12:34.24,0:12:34.77,Default,,0,0,0,,behavior.
Dialogue: 0,0:12:35.36,0:12:37.79,Default,,0,0,0,,When it causes an issue, whether
Dialogue: 0,0:12:37.79,0:12:40.00,Default,,0,0,0,,it is another reference, an
Dialogue: 0,0:12:40.00,0:12:42.14,Default,,0,0,0,,integer overflow, memory
Dialogue: 0,0:12:42.14,0:12:44.13,Default,,0,0,0,,corruption due to an out of
Dialogue: 0,0:12:44.13,0:12:45.69,Default,,0,0,0,,bound access or any other kind
Dialogue: 0,0:12:45.69,0:12:47.34,Default,,0,0,0,,of undefined behavior, the
Dialogue: 0,0:12:47.34,0:12:49.11,Default,,0,0,0,,symptom you see will often be
Dialogue: 0,0:12:49.11,0:12:50.53,Default,,0,0,0,,very far away from the root
Dialogue: 0,0:12:50.53,0:12:51.34,Default,,0,0,0,,cause of the issue.
Dialogue: 0,0:12:53.57,0:12:54.81,Default,,0,0,0,,There is one more thing I want
Dialogue: 0,0:12:54.81,0:12:55.31,Default,,0,0,0,,to show you.
Dialogue: 0,0:12:56.10,0:12:58.61,Default,,0,0,0,,Let's restart the compilation
Dialogue: 0,0:12:58.61,0:12:59.61,Default,,0,0,0,,with a slightly different
Dialogue: 0,0:12:59.61,0:13:00.06,Default,,0,0,0,,compiler.
Dialogue: 0,0:13:01.14,0:13:02.50,Default,,0,0,0,,As you see, we just see swapped
Dialogue: 0,0:13:02.65,0:13:03.66,Default,,0,0,0,,the two optimizations.
Dialogue: 0,0:13:04.39,0:13:05.56,Default,,0,0,0,,Let's compile the same code
Dialogue: 0,0:13:05.56,0:13:05.91,Default,,0,0,0,,again.
Dialogue: 0,0:13:08.37,0:13:10.27,Default,,0,0,0,,Dead code elimination, unused is
Dialogue: 0,0:13:10.27,0:13:10.91,Default,,0,0,0,,still unused.
Dialogue: 0,0:13:10.91,0:13:12.06,Default,,0,0,0,,It goes away.
Dialogue: 0,0:13:13.70,0:13:15.74,Default,,0,0,0,,Now we try to apply redundant
Dialogue: 0,0:13:15.74,0:13:17.33,Default,,0,0,0,,null check elimination.
Dialogue: 0,0:13:18.19,0:13:19.85,Default,,0,0,0,,There is nothing to - there is
Dialogue: 0,0:13:19.85,0:13:21.27,Default,,0,0,0,,nothing to reason anymore about
Dialogue: 0,0:13:21.27,0:13:22.79,Default,,0,0,0,,the value of the P pointer so
Dialogue: 0,0:13:22.79,0:13:24.14,Default,,0,0,0,,the optimization just does
Dialogue: 0,0:13:24.14,0:13:24.66,Default,,0,0,0,,nothing.
Dialogue: 0,0:13:25.18,0:13:27.89,Default,,0,0,0,,And here's the result of our
Dialogue: 0,0:13:28.05,0:13:29.37,Default,,0,0,0,,second compilation of the same
Dialogue: 0,0:13:29.37,0:13:29.62,Default,,0,0,0,,code.
Dialogue: 0,0:13:30.45,0:13:33.04,Default,,0,0,0,,Note that in this case if you
Dialogue: 0,0:13:33.04,0:13:34.73,Default,,0,0,0,,pass a null pointer to the
Dialogue: 0,0:13:34.73,0:13:36.47,Default,,0,0,0,,optimized version, it will not
Dialogue: 0,0:13:36.89,0:13:37.00,Default,,0,0,0,,crash.
Dialogue: 0,0:13:39.04,0:13:41.82,Default,,0,0,0,,Now, imagine your app has the
Dialogue: 0,0:13:41.82,0:13:43.73,Default,,0,0,0,,code on the left and the
Dialogue: 0,0:13:43.73,0:13:44.95,Default,,0,0,0,,developer who added the null
Dialogue: 0,0:13:44.95,0:13:46.12,Default,,0,0,0,,check to this function at some
Dialogue: 0,0:13:46.12,0:13:48.84,Default,,0,0,0,,point added a few uses of the
Dialogue: 0,0:13:48.84,0:13:50.15,Default,,0,0,0,,function with another argument.
Dialogue: 0,0:13:51.19,0:13:52.59,Default,,0,0,0,,You might have never realized
Dialogue: 0,0:13:52.59,0:13:54.14,Default,,0,0,0,,that it is an issue because your
Dialogue: 0,0:13:54.14,0:13:55.57,Default,,0,0,0,,compiler is acting like compiler
Dialogue: 0,0:13:55.57,0:13:55.85,Default,,0,0,0,,2.
Dialogue: 0,0:13:56.83,0:13:58.65,Default,,0,0,0,,But there is no guarantee that
Dialogue: 0,0:13:58.65,0:14:00.40,Default,,0,0,0,,in the future it will not act
Dialogue: 0,0:14:00.40,0:14:02.21,Default,,0,0,0,,like compiler 1 and break your
Dialogue: 0,0:14:02.21,0:14:02.49,Default,,0,0,0,,code.
Dialogue: 0,0:14:03.73,0:14:05.36,Default,,0,0,0,,This is maybe the most important
Dialogue: 0,0:14:05.36,0:14:06.61,Default,,0,0,0,,thing to remember about
Dialogue: 0,0:14:06.61,0:14:07.48,Default,,0,0,0,,undefined behavior.
Dialogue: 0,0:14:07.72,0:14:09.47,Default,,0,0,0,,The fact that you don't have an
Dialogue: 0,0:14:09.47,0:14:11.23,Default,,0,0,0,,issue today doesn't mean that
Dialogue: 0,0:14:11.23,0:14:12.81,Default,,0,0,0,,that change in the compiler will
Dialogue: 0,0:14:12.81,0:14:13.87,Default,,0,0,0,,not cause it to break in the
Dialogue: 0,0:14:13.87,0:14:14.28,Default,,0,0,0,,future.
Dialogue: 0,0:14:15.79,0:14:17.27,Default,,0,0,0,,And your compiler might be
Dialogue: 0,0:14:17.27,0:14:18.69,Default,,0,0,0,,changing behavior more than you
Dialogue: 0,0:14:18.69,0:14:19.00,Default,,0,0,0,,think.
Dialogue: 0,0:14:20.97,0:14:22.80,Default,,0,0,0,,During a single day, each time
Dialogue: 0,0:14:22.80,0:14:24.05,Default,,0,0,0,,you switch between debug and
Dialogue: 0,0:14:24.05,0:14:25.80,Default,,0,0,0,,release mode or each time you
Dialogue: 0,0:14:25.80,0:14:26.78,Default,,0,0,0,,change the optimization
Dialogue: 0,0:14:26.78,0:14:29.03,Default,,0,0,0,,settings, you run a different
Dialogue: 0,0:14:29.03,0:14:30.40,Default,,0,0,0,,instance of the compiler with a
Dialogue: 0,0:14:30.40,0:14:31.48,Default,,0,0,0,,very different set of
Dialogue: 0,0:14:31.48,0:14:32.79,Default,,0,0,0,,transformations applied to your
Dialogue: 0,0:14:32.79,0:14:33.14,Default,,0,0,0,,code.
Dialogue: 0,0:14:35.02,0:14:37.00,Default,,0,0,0,,Maybe more surprisingly, each
Dialogue: 0,0:14:37.00,0:14:38.09,Default,,0,0,0,,time you switch from a real
Dialogue: 0,0:14:38.09,0:14:39.78,Default,,0,0,0,,device to a simulator or vice
Dialogue: 0,0:14:39.78,0:14:42.20,Default,,0,0,0,,versa, you are targeting a
Dialogue: 0,0:14:42.20,0:14:43.75,Default,,0,0,0,,different architecture, which
Dialogue: 0,0:14:43.75,0:14:45.57,Default,,0,0,0,,might react differently to
Dialogue: 0,0:14:45.57,0:14:46.50,Default,,0,0,0,,undefined behavior.
Dialogue: 0,0:14:47.08,0:14:50.75,Default,,0,0,0,,And, of course, each time you
Dialogue: 0,0:14:50.75,0:14:52.66,Default,,0,0,0,,upgrade Xcode to a new major
Dialogue: 0,0:14:52.66,0:14:54.66,Default,,0,0,0,,version, you get a brand new
Dialogue: 0,0:14:54.66,0:14:55.18,Default,,0,0,0,,compiler.
Dialogue: 0,0:14:55.18,0:14:58.18,Default,,0,0,0,,And we work hard all year long
Dialogue: 0,0:14:58.18,0:14:59.36,Default,,0,0,0,,to make the compiler better,
Dialogue: 0,0:14:59.48,0:15:01.14,Default,,0,0,0,,generate faster, smaller code.
Dialogue: 0,0:15:02.13,0:15:05.30,Default,,0,0,0,,Many of those improvements could
Dialogue: 0,0:15:05.30,0:15:06.66,Default,,0,0,0,,reveal undefined behavior in
Dialogue: 0,0:15:06.66,0:15:07.50,Default,,0,0,0,,your code.
Dialogue: 0,0:15:09.34,0:15:12.34,Default,,0,0,0,,So, before moving along, just,
Dialogue: 0,0:15:12.62,0:15:14.00,Default,,0,0,0,,let's just summarize what we
Dialogue: 0,0:15:14.00,0:15:14.89,Default,,0,0,0,,learned about undefined
Dialogue: 0,0:15:14.89,0:15:15.34,Default,,0,0,0,,behavior.
Dialogue: 0,0:15:17.49,0:15:19.84,Default,,0,0,0,,Undefined behavior will not
Dialogue: 0,0:15:19.84,0:15:21.18,Default,,0,0,0,,trigger bugs reliably.
Dialogue: 0,0:15:22.02,0:15:23.41,Default,,0,0,0,,One of your configurations could
Dialogue: 0,0:15:23.41,0:15:24.94,Default,,0,0,0,,be working while the other one
Dialogue: 0,0:15:24.94,0:15:25.42,Default,,0,0,0,,breaks.
Dialogue: 0,0:15:26.75,0:15:28.71,Default,,0,0,0,,When undefined behavior breaks,
Dialogue: 0,0:15:28.96,0:15:31.17,Default,,0,0,0,,when it breaks your code, the
Dialogue: 0,0:15:31.17,0:15:33.14,Default,,0,0,0,,symptom you are seeing might be
Dialogue: 0,0:15:33.30,0:15:35.11,Default,,0,0,0,,thousands of lines away or maybe
Dialogue: 0,0:15:35.11,0:15:37.32,Default,,0,0,0,,even hours of executions away
Dialogue: 0,0:15:37.95,0:15:39.36,Default,,0,0,0,,from the real root cause of the
Dialogue: 0,0:15:39.36,0:15:39.89,Default,,0,0,0,,issue.
Dialogue: 0,0:15:40.46,0:15:41.49,Default,,0,0,0,,This could be really hard to
Dialogue: 0,0:15:41.49,0:15:42.68,Default,,0,0,0,,debug if you are not prepared
Dialogue: 0,0:15:42.68,0:15:43.03,Default,,0,0,0,,for it.
Dialogue: 0,0:15:45.08,0:15:48.34,Default,,0,0,0,,And lastly, the fact that you
Dialogue: 0,0:15:48.34,0:15:50.59,Default,,0,0,0,,don't have any bugs today that
Dialogue: 0,0:15:50.59,0:15:52.50,Default,,0,0,0,,you know of doesn't mean that
Dialogue: 0,0:15:52.50,0:15:54.04,Default,,0,0,0,,you don't have any bugs due to
Dialogue: 0,0:15:54.04,0:15:54.89,Default,,0,0,0,,undefined behavior.
Dialogue: 0,0:15:55.27,0:15:56.56,Default,,0,0,0,,And if you have undefined
Dialogue: 0,0:15:56.56,0:15:58.80,Default,,0,0,0,,behavior, it will break at some
Dialogue: 0,0:15:58.80,0:15:59.65,Default,,0,0,0,,point in the future.
Dialogue: 0,0:16:01.02,0:16:03.11,Default,,0,0,0,,When it breaks, it could cost
Dialogue: 0,0:16:03.11,0:16:04.78,Default,,0,0,0,,you a lot of debugging time but
Dialogue: 0,0:16:04.78,0:16:06.25,Default,,0,0,0,,it could also put your users'
Dialogue: 0,0:16:06.25,0:16:07.04,Default,,0,0,0,,data at risk.
Dialogue: 0,0:16:08.08,0:16:09.52,Default,,0,0,0,,Here's Ryan to tell you more
Dialogue: 0,0:16:09.52,0:16:11.10,Default,,0,0,0,,about the security implications
Dialogue: 0,0:16:11.10,0:16:12.21,Default,,0,0,0,,of undefined behavior.
Dialogue: 0,0:16:14.52,0:16:18.90,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:16:19.40,0:16:19.82,Default,,0,0,0,,>> Thanks, Fred.
Dialogue: 0,0:16:21.62,0:16:23.28,Default,,0,0,0,,So, who here remembers the
Dialogue: 0,0:16:23.28,0:16:24.50,Default,,0,0,0,,heartbleed vulnerability from a
Dialogue: 0,0:16:24.50,0:16:25.13,Default,,0,0,0,,few years ago?
Dialogue: 0,0:16:26.10,0:16:26.92,Default,,0,0,0,,Well, if you're like me, you
Dialogue: 0,0:16:26.92,0:16:27.87,Default,,0,0,0,,probably had to go and change
Dialogue: 0,0:16:27.87,0:16:29.36,Default,,0,0,0,,your password on like 100
Dialogue: 0,0:16:29.36,0:16:31.25,Default,,0,0,0,,different websites or maybe
Dialogue: 0,0:16:31.49,0:16:33.03,Default,,0,0,0,,patch some of your own backend
Dialogue: 0,0:16:33.03,0:16:33.52,Default,,0,0,0,,servers.
Dialogue: 0,0:16:34.49,0:16:35.45,Default,,0,0,0,,Well, heartbleed was an
Dialogue: 0,0:16:35.45,0:16:37.22,Default,,0,0,0,,out-of-bounds read in a widely
Dialogue: 0,0:16:37.22,0:16:38.56,Default,,0,0,0,,used cryptographic library
Dialogue: 0,0:16:38.56,0:16:39.51,Default,,0,0,0,,called open SSL.
Dialogue: 0,0:16:40.20,0:16:41.91,Default,,0,0,0,,By sending just one packet to an
Dialogue: 0,0:16:41.91,0:16:43.69,Default,,0,0,0,,affected server, an attacker
Dialogue: 0,0:16:43.69,0:16:44.93,Default,,0,0,0,,would receive in reply a few
Dialogue: 0,0:16:44.93,0:16:46.06,Default,,0,0,0,,kilobytes of the server
Dialogue: 0,0:16:46.06,0:16:48.14,Default,,0,0,0,,process's heap memory, which
Dialogue: 0,0:16:48.14,0:16:51.80,Default,,0,0,0,,turned into a pretty significant
Dialogue: 0,0:16:52.06,0:16:53.59,Default,,0,0,0,,privacy and security exposure.
Dialogue: 0,0:16:55.70,0:16:58.83,Default,,0,0,0,,Now, that out-of-bounds read in
Dialogue: 0,0:16:58.83,0:17:00.24,Default,,0,0,0,,heartbleed is an example of
Dialogue: 0,0:17:00.24,0:17:01.96,Default,,0,0,0,,undefined behavior and it turns
Dialogue: 0,0:17:01.96,0:17:03.32,Default,,0,0,0,,out that undefined behavior is
Dialogue: 0,0:17:03.32,0:17:04.35,Default,,0,0,0,,at the core of many different
Dialogue: 0,0:17:04.35,0:17:05.03,Default,,0,0,0,,types of security
Dialogue: 0,0:17:05.03,0:17:05.63,Default,,0,0,0,,vulnerabilities.
Dialogue: 0,0:17:06.47,0:17:08.19,Default,,0,0,0,,To name just a few, you could
Dialogue: 0,0:17:08.19,0:17:11.56,Default,,0,0,0,,think of buffer overflows, uses
Dialogue: 0,0:17:11.56,0:17:14.02,Default,,0,0,0,,of uninitialized variables, heat
Dialogue: 0,0:17:14.02,0:17:16.77,Default,,0,0,0,,misuse bugs like use after free
Dialogue: 0,0:17:16.77,0:17:17.47,Default,,0,0,0,,and double free.
Dialogue: 0,0:17:18.09,0:17:19.53,Default,,0,0,0,,And also race conditions.
Dialogue: 0,0:17:22.30,0:17:24.22,Default,,0,0,0,,So, keep in mind that your users
Dialogue: 0,0:17:24.42,0:17:27.32,Default,,0,0,0,,trust your app and potentially
Dialogue: 0,0:17:27.53,0:17:29.03,Default,,0,0,0,,with their personal information
Dialogue: 0,0:17:29.03,0:17:30.93,Default,,0,0,0,,such as their photos or their
Dialogue: 0,0:17:30.93,0:17:31.77,Default,,0,0,0,,private messages.
Dialogue: 0,0:17:32.20,0:17:33.00,Default,,0,0,0,,And so you should do everything
Dialogue: 0,0:17:33.00,0:17:34.15,Default,,0,0,0,,you can to make sure that your
Dialogue: 0,0:17:34.15,0:17:35.75,Default,,0,0,0,,app is as safe and secure as
Dialogue: 0,0:17:35.75,0:17:36.23,Default,,0,0,0,,possible.
Dialogue: 0,0:17:37.38,0:17:38.29,Default,,0,0,0,,And if you're a framework
Dialogue: 0,0:17:38.29,0:17:39.69,Default,,0,0,0,,developer, remember that your
Dialogue: 0,0:17:39.69,0:17:41.24,Default,,0,0,0,,client apps inherit all of your
Dialogue: 0,0:17:41.24,0:17:42.29,Default,,0,0,0,,bugs, just like all those
Dialogue: 0,0:17:42.29,0:17:43.71,Default,,0,0,0,,websites inherited the
Dialogue: 0,0:17:43.71,0:17:44.68,Default,,0,0,0,,heartbleed vulnerability.
Dialogue: 0,0:17:45.26,0:17:48.52,Default,,0,0,0,,But the good news that there are
Dialogue: 0,0:17:48.52,0:17:49.51,Default,,0,0,0,,tools that could help you.
Dialogue: 0,0:17:50.30,0:17:52.40,Default,,0,0,0,,Now, too often we developers
Dialogue: 0,0:17:52.40,0:17:54.62,Default,,0,0,0,,reach for our tools only after a
Dialogue: 0,0:17:54.62,0:17:55.88,Default,,0,0,0,,bug has manifested some other
Dialogue: 0,0:17:55.88,0:17:56.17,Default,,0,0,0,,way.
Dialogue: 0,0:17:56.17,0:17:57.33,Default,,0,0,0,,Maybe it showed up in our users'
Dialogue: 0,0:17:57.33,0:17:58.07,Default,,0,0,0,,crash logs.
Dialogue: 0,0:17:58.84,0:18:00.57,Default,,0,0,0,,But by running tools early and
Dialogue: 0,0:18:00.57,0:18:02.64,Default,,0,0,0,,often throughout development, we
Dialogue: 0,0:18:02.64,0:18:03.96,Default,,0,0,0,,can catch these issues before
Dialogue: 0,0:18:03.96,0:18:05.48,Default,,0,0,0,,they ever become a problem that
Dialogue: 0,0:18:05.48,0:18:08.42,Default,,0,0,0,,affects our customers.
Dialogue: 0,0:18:08.42,0:18:11.33,Default,,0,0,0,,So, I wanted to relate a story
Dialogue: 0,0:18:11.33,0:18:12.83,Default,,0,0,0,,of how one of these tools,
Dialogue: 0,0:18:12.83,0:18:15.64,Default,,0,0,0,,Address Sanitizer, saved macOS
Dialogue: 0,0:18:15.64,0:18:16.10,Default,,0,0,0,,Yosemite.
Dialogue: 0,0:18:17.54,0:18:19.25,Default,,0,0,0,,So, about one month before the
Dialogue: 0,0:18:19.25,0:18:20.86,Default,,0,0,0,,macOS Yosemite public release,
Dialogue: 0,0:18:21.24,0:18:22.40,Default,,0,0,0,,many new crashes started
Dialogue: 0,0:18:22.40,0:18:23.92,Default,,0,0,0,,appearing throughout the system.
Dialogue: 0,0:18:24.45,0:18:26.17,Default,,0,0,0,,And we had a hunch that we had a
Dialogue: 0,0:18:26.17,0:18:28.77,Default,,0,0,0,,heap corruption bug that was in
Dialogue: 0,0:18:28.77,0:18:30.80,Default,,0,0,0,,one of the low-level system
Dialogue: 0,0:18:30.80,0:18:31.35,Default,,0,0,0,,frameworks.
Dialogue: 0,0:18:31.97,0:18:32.84,Default,,0,0,0,,Well, we were having a really
Dialogue: 0,0:18:32.84,0:18:34.23,Default,,0,0,0,,hard time reproducing the issue.
Dialogue: 0,0:18:34.85,0:18:35.68,Default,,0,0,0,,And without being able to
Dialogue: 0,0:18:35.68,0:18:36.78,Default,,0,0,0,,reproduce it, we didn't have a
Dialogue: 0,0:18:36.78,0:18:38.44,Default,,0,0,0,,smoking gun that was pointing to
Dialogue: 0,0:18:38.44,0:18:39.89,Default,,0,0,0,,a specific function that was
Dialogue: 0,0:18:39.89,0:18:40.88,Default,,0,0,0,,causing the heap corruption.
Dialogue: 0,0:18:41.97,0:18:43.65,Default,,0,0,0,,And so we turned to a tool that
Dialogue: 0,0:18:43.65,0:18:46.52,Default,,0,0,0,,at the time was very new, called
Dialogue: 0,0:18:46.52,0:18:48.10,Default,,0,0,0,,Address Sanitizer, and we
Dialogue: 0,0:18:48.10,0:18:49.26,Default,,0,0,0,,thought it would help us catch
Dialogue: 0,0:18:49.26,0:18:50.25,Default,,0,0,0,,this heap corruption bug.
Dialogue: 0,0:18:50.37,0:18:51.68,Default,,0,0,0,,So, we instrumented some of the
Dialogue: 0,0:18:51.68,0:18:53.26,Default,,0,0,0,,system frameworks and we loaded
Dialogue: 0,0:18:53.26,0:18:53.63,Default,,0,0,0,,it up.
Dialogue: 0,0:18:53.63,0:18:54.66,Default,,0,0,0,,And sure enough, Address
Dialogue: 0,0:18:54.66,0:18:55.73,Default,,0,0,0,,Sanitizer did its job
Dialogue: 0,0:18:55.73,0:18:57.52,Default,,0,0,0,,wonderfully and honed right in
Dialogue: 0,0:18:57.52,0:18:59.49,Default,,0,0,0,,on this piece of code.
Dialogue: 0,0:18:59.58,0:19:01.48,Default,,0,0,0,,So, to summarize it briefly, we
Dialogue: 0,0:19:03.20,0:19:04.89,Default,,0,0,0,,had a CF string and we were
Dialogue: 0,0:19:04.89,0:19:07.03,Default,,0,0,0,,constructing a path to a file
Dialogue: 0,0:19:07.03,0:19:09.15,Default,,0,0,0,,inside the user's library
Dialogue: 0,0:19:09.15,0:19:10.06,Default,,0,0,0,,cache's directory.
Dialogue: 0,0:19:11.06,0:19:12.11,Default,,0,0,0,,And then we needed to convert
Dialogue: 0,0:19:12.11,0:19:14.03,Default,,0,0,0,,this C string, sorry, convert
Dialogue: 0,0:19:14.03,0:19:15.68,Default,,0,0,0,,this CF string into a C string.
Dialogue: 0,0:19:16.19,0:19:17.41,Default,,0,0,0,,And so, I mean, that's a pretty
Dialogue: 0,0:19:17.41,0:19:18.18,Default,,0,0,0,,straightforward thing, right?
Dialogue: 0,0:19:18.18,0:19:19.53,Default,,0,0,0,,We have to measure the length of
Dialogue: 0,0:19:19.53,0:19:22.21,Default,,0,0,0,,the CF string, allocate buffer
Dialogue: 0,0:19:22.21,0:19:23.11,Default,,0,0,0,,on the heap of that many
Dialogue: 0,0:19:23.11,0:19:25.77,Default,,0,0,0,,characters and copy the bytes
Dialogue: 0,0:19:25.77,0:19:26.20,Default,,0,0,0,,into it.
Dialogue: 0,0:19:27.19,0:19:28.88,Default,,0,0,0,,And, oh yeah.
Dialogue: 0,0:19:28.88,0:19:30.38,Default,,0,0,0,,We forgot one thing which is
Dialogue: 0,0:19:30.38,0:19:31.71,Default,,0,0,0,,that C strings need to be null
Dialogue: 0,0:19:31.71,0:19:32.22,Default,,0,0,0,,terminated.
Dialogue: 0,0:19:32.97,0:19:35.82,Default,,0,0,0,,And so we have to add that too.
Dialogue: 0,0:19:36.05,0:19:38.24,Default,,0,0,0,,But we made a mistake, an off by
Dialogue: 0,0:19:38.24,0:19:38.80,Default,,0,0,0,,one error.
Dialogue: 0,0:19:38.86,0:19:40.03,Default,,0,0,0,,Because we didn't include that
Dialogue: 0,0:19:40.03,0:19:41.70,Default,,0,0,0,,null byte when we were computing
Dialogue: 0,0:19:41.70,0:19:43.04,Default,,0,0,0,,the size of the allocation that
Dialogue: 0,0:19:43.04,0:19:43.44,Default,,0,0,0,,we needed.
Dialogue: 0,0:19:44.71,0:19:46.50,Default,,0,0,0,,And so we actually overflowed
Dialogue: 0,0:19:46.50,0:19:46.97,Default,,0,0,0,,our buffer.
Dialogue: 0,0:19:47.57,0:19:50.61,Default,,0,0,0,,But most of the time this didn't
Dialogue: 0,0:19:50.61,0:19:52.01,Default,,0,0,0,,have any impact on the user.
Dialogue: 0,0:19:52.62,0:19:54.27,Default,,0,0,0,,And that's because the heap will
Dialogue: 0,0:19:54.27,0:19:55.76,Default,,0,0,0,,round up the size of the
Dialogue: 0,0:19:55.76,0:19:56.44,Default,,0,0,0,,allocation.
Dialogue: 0,0:19:56.44,0:19:57.87,Default,,0,0,0,,In this case, let's say we
Dialogue: 0,0:19:57.87,0:19:58.87,Default,,0,0,0,,rounded it up to the next
Dialogue: 0,0:19:58.87,0:20:00.23,Default,,0,0,0,,multiple of 16 bytes.
Dialogue: 0,0:20:01.07,0:20:02.18,Default,,0,0,0,,And so when we write our null
Dialogue: 0,0:20:02.18,0:20:04.30,Default,,0,0,0,,byte into that unused space at
Dialogue: 0,0:20:04.30,0:20:05.78,Default,,0,0,0,,the end, that there's no
Dialogue: 0,0:20:05.78,0:20:06.58,Default,,0,0,0,,consequence, right?
Dialogue: 0,0:20:08.44,0:20:11.15,Default,,0,0,0,,But let's see what happens when
Dialogue: 0,0:20:11.82,0:20:13.48,Default,,0,0,0,,one of the variables in that
Dialogue: 0,0:20:13.48,0:20:15.22,Default,,0,0,0,,buffer changes, and that's the
Dialogue: 0,0:20:15.22,0:20:15.81,Default,,0,0,0,,username.
Dialogue: 0,0:20:17.17,0:20:19.29,Default,,0,0,0,,Well, if the length of the
Dialogue: 0,0:20:19.29,0:20:20.93,Default,,0,0,0,,username changes, the amount of
Dialogue: 0,0:20:20.93,0:20:22.45,Default,,0,0,0,,unused space would also change.
Dialogue: 0,0:20:22.86,0:20:23.87,Default,,0,0,0,,And it turned out that if the
Dialogue: 0,0:20:23.87,0:20:27.25,Default,,0,0,0,,user's username was exactly 11
Dialogue: 0,0:20:27.25,0:20:28.99,Default,,0,0,0,,characters long, there wouldn't
Dialogue: 0,0:20:28.99,0:20:30.61,Default,,0,0,0,,be any unused space and we would
Dialogue: 0,0:20:30.61,0:20:32.29,Default,,0,0,0,,end up corrupting the adjacent
Dialogue: 0,0:20:32.29,0:20:33.55,Default,,0,0,0,,object on the heap and causing
Dialogue: 0,0:20:33.55,0:20:34.79,Default,,0,0,0,,some other part of the code to
Dialogue: 0,0:20:34.79,0:20:35.25,Default,,0,0,0,,crash.
Dialogue: 0,0:20:36.08,0:20:37.25,Default,,0,0,0,,And so this was the secret to
Dialogue: 0,0:20:37.25,0:20:39.26,Default,,0,0,0,,why it was so hard to catch
Dialogue: 0,0:20:39.58,0:20:41.89,Default,,0,0,0,,normally but Address Sanitizer
Dialogue: 0,0:20:41.89,0:20:43.02,Default,,0,0,0,,did a great job of finding it
Dialogue: 0,0:20:43.02,0:20:43.40,Default,,0,0,0,,right away.
Dialogue: 0,0:20:44.81,0:20:47.06,Default,,0,0,0,,Now, in this case, this off by
Dialogue: 0,0:20:47.06,0:20:48.80,Default,,0,0,0,,one probably didn't have many
Dialogue: 0,0:20:48.80,0:20:50.00,Default,,0,0,0,,security consequences.
Dialogue: 0,0:20:50.47,0:20:54.22,Default,,0,0,0,,But many other similar bugs can
Dialogue: 0,0:20:54.40,0:20:55.86,Default,,0,0,0,,result in exploitable
Dialogue: 0,0:20:55.86,0:20:56.57,Default,,0,0,0,,vulnerabilities.
Dialogue: 0,0:20:57.33,0:20:58.74,Default,,0,0,0,,And remember that security flaws
Dialogue: 0,0:20:59.07,0:21:00.95,Default,,0,0,0,,often don't manifest until
Dialogue: 0,0:21:01.03,0:21:02.20,Default,,0,0,0,,they've been exploited.
Dialogue: 0,0:21:03.15,0:21:04.58,Default,,0,0,0,,So, running tools like Address
Dialogue: 0,0:21:04.58,0:21:06.01,Default,,0,0,0,,Sanitizer early and throughout
Dialogue: 0,0:21:06.08,0:21:07.60,Default,,0,0,0,,the development process can help
Dialogue: 0,0:21:07.60,0:21:09.17,Default,,0,0,0,,you catch these before they ever
Dialogue: 0,0:21:09.17,0:21:10.69,Default,,0,0,0,,reach your customer devices.
Dialogue: 0,0:21:13.68,0:21:15.96,Default,,0,0,0,,So, let's talk about the tools
Dialogue: 0,0:21:16.26,0:21:17.55,Default,,0,0,0,,that you have at your disposal
Dialogue: 0,0:21:17.58,0:21:19.42,Default,,0,0,0,,to catch undefined behavior.
Dialogue: 0,0:21:20.15,0:21:22.62,Default,,0,0,0,,First we'll talk about the
Dialogue: 0,0:21:22.62,0:21:26.18,Default,,0,0,0,,compiler, the static analyzer in
Dialogue: 0,0:21:26.21,0:21:29.58,Default,,0,0,0,,Xcode, and the Sanitizers -
Dialogue: 0,0:21:29.78,0:21:31.60,Default,,0,0,0,,Address Sanitizer, Thread
Dialogue: 0,0:21:31.60,0:21:33.41,Default,,0,0,0,,Sanitizer and the Undefined
Dialogue: 0,0:21:33.41,0:21:34.30,Default,,0,0,0,,Behavior Sanitizer.
Dialogue: 0,0:21:35.24,0:21:36.03,Default,,0,0,0,,So, let's start with the
Dialogue: 0,0:21:36.03,0:21:36.42,Default,,0,0,0,,compiler.
Dialogue: 0,0:21:37.07,0:21:39.91,Default,,0,0,0,,So, the compiler alerts you to
Dialogue: 0,0:21:39.91,0:21:41.69,Default,,0,0,0,,parts of your code that might be
Dialogue: 0,0:21:41.69,0:21:43.14,Default,,0,0,0,,a little suspicious and it does
Dialogue: 0,0:21:43.14,0:21:44.23,Default,,0,0,0,,this in the form of compiler
Dialogue: 0,0:21:44.23,0:21:44.59,Default,,0,0,0,,warnings.
Dialogue: 0,0:21:45.30,0:21:46.29,Default,,0,0,0,,Believe it or not, they're not
Dialogue: 0,0:21:46.29,0:21:47.20,Default,,0,0,0,,just there to annoy you.
Dialogue: 0,0:21:48.76,0:21:50.45,Default,,0,0,0,,Now, every release of Xcode has
Dialogue: 0,0:21:50.54,0:21:51.94,Default,,0,0,0,,better warnings and great
Dialogue: 0,0:21:51.94,0:21:53.51,Default,,0,0,0,,features like fixits, so you can
Dialogue: 0,0:21:53.51,0:21:54.49,Default,,0,0,0,,resolve them with just one
Dialogue: 0,0:21:54.49,0:21:54.79,Default,,0,0,0,,click.
Dialogue: 0,0:21:55.87,0:21:57.37,Default,,0,0,0,,To learn what's new in the
Dialogue: 0,0:21:57.37,0:21:58.77,Default,,0,0,0,,compiler this year, check out
Dialogue: 0,0:21:58.77,0:22:00.34,Default,,0,0,0,,the What's New in LLDM talk
Dialogue: 0,0:22:00.73,0:22:01.84,Default,,0,0,0,,which is later this afternoon.
Dialogue: 0,0:22:02.41,0:22:05.79,Default,,0,0,0,,Now, you might be wondering, do
Dialogue: 0,0:22:05.79,0:22:07.29,Default,,0,0,0,,I have the recommended set of
Dialogue: 0,0:22:07.59,0:22:08.61,Default,,0,0,0,,warnings turned on for my
Dialogue: 0,0:22:08.61,0:22:09.09,Default,,0,0,0,,project?
Dialogue: 0,0:22:09.71,0:22:10.66,Default,,0,0,0,,Well, every time you upgrade
Dialogue: 0,0:22:10.66,0:22:12.24,Default,,0,0,0,,Xcode, you'll be presented with
Dialogue: 0,0:22:12.24,0:22:13.40,Default,,0,0,0,,the opportunity to modernize
Dialogue: 0,0:22:13.40,0:22:13.95,Default,,0,0,0,,your project.
Dialogue: 0,0:22:14.29,0:22:15.38,Default,,0,0,0,,And you can also do this at any
Dialogue: 0,0:22:15.38,0:22:17.36,Default,,0,0,0,,time using the validate settings
Dialogue: 0,0:22:17.43,0:22:19.19,Default,,0,0,0,,option and that'll help you get
Dialogue: 0,0:22:19.31,0:22:20.41,Default,,0,0,0,,into a good state again.
Dialogue: 0,0:22:21.76,0:22:22.56,Default,,0,0,0,,And there's one more build
Dialogue: 0,0:22:22.56,0:22:23.95,Default,,0,0,0,,setting that I think you should
Dialogue: 0,0:22:23.95,0:22:25.30,Default,,0,0,0,,know about which is treat
Dialogue: 0,0:22:25.30,0:22:26.65,Default,,0,0,0,,warnings as errors.
Dialogue: 0,0:22:27.81,0:22:29.09,Default,,0,0,0,,And it does what it says on the
Dialogue: 0,0:22:29.09,0:22:29.41,Default,,0,0,0,,tin.
Dialogue: 0,0:22:29.82,0:22:31.80,Default,,0,0,0,,If your project already compiles
Dialogue: 0,0:22:31.80,0:22:33.15,Default,,0,0,0,,with relatively few warnings,
Dialogue: 0,0:22:33.43,0:22:34.91,Default,,0,0,0,,consider turning that on and
Dialogue: 0,0:22:34.91,0:22:36.65,Default,,0,0,0,,enforcing the self-discipline to
Dialogue: 0,0:22:36.65,0:22:38.00,Default,,0,0,0,,keep that compiler count low.
Dialogue: 0,0:22:41.84,0:22:43.08,Default,,0,0,0,,Now, let's talk about the static
Dialogue: 0,0:22:43.08,0:22:43.53,Default,,0,0,0,,analyzer.
Dialogue: 0,0:22:44.23,0:22:45.33,Default,,0,0,0,,The static analyzer can be
Dialogue: 0,0:22:45.33,0:22:46.65,Default,,0,0,0,,thought of as a supercharged
Dialogue: 0,0:22:46.65,0:22:48.14,Default,,0,0,0,,version of compiler warnings.
Dialogue: 0,0:22:48.19,0:22:50.55,Default,,0,0,0,,It explores your code and finds
Dialogue: 0,0:22:50.62,0:22:52.56,Default,,0,0,0,,bugs that only happen in very
Dialogue: 0,0:22:52.56,0:22:54.61,Default,,0,0,0,,particular conditions, maybe
Dialogue: 0,0:22:54.61,0:22:55.97,Default,,0,0,0,,conditions that aren't being hit
Dialogue: 0,0:22:56.07,0:22:58.03,Default,,0,0,0,,when you normally test your app.
Dialogue: 0,0:22:58.78,0:23:01.07,Default,,0,0,0,,So, what we recommend doing is
Dialogue: 0,0:23:01.07,0:23:02.64,Default,,0,0,0,,analyzing during every build.
Dialogue: 0,0:23:03.42,0:23:04.39,Default,,0,0,0,,There's a build setting for this
Dialogue: 0,0:23:04.47,0:23:06.42,Default,,0,0,0,,and when you turn it on, Xcode
Dialogue: 0,0:23:06.42,0:23:08.28,Default,,0,0,0,,will run a fast analysis pass
Dialogue: 0,0:23:08.45,0:23:09.24,Default,,0,0,0,,every time you build your
Dialogue: 0,0:23:09.24,0:23:09.64,Default,,0,0,0,,project.
Dialogue: 0,0:23:10.72,0:23:13.12,Default,,0,0,0,,And that makes sure that you can
Dialogue: 0,0:23:13.26,0:23:14.57,Default,,0,0,0,,find bugs that you've just
Dialogue: 0,0:23:14.57,0:23:16.36,Default,,0,0,0,,introduced as quickly as
Dialogue: 0,0:23:16.36,0:23:16.79,Default,,0,0,0,,possible.
Dialogue: 0,0:23:17.94,0:23:19.14,Default,,0,0,0,,But there's also a deeper mode
Dialogue: 0,0:23:19.42,0:23:21.03,Default,,0,0,0,,that the analyzer can run in and
Dialogue: 0,0:23:21.03,0:23:23.01,Default,,0,0,0,,you can use that at any time,
Dialogue: 0,0:23:23.33,0:23:24.14,Default,,0,0,0,,and that's the mode that we
Dialogue: 0,0:23:24.14,0:23:25.60,Default,,0,0,0,,recommend using under your
Dialogue: 0,0:23:25.60,0:23:27.06,Default,,0,0,0,,continuous integration in order
Dialogue: 0,0:23:27.06,0:23:28.85,Default,,0,0,0,,to make the most of the static
Dialogue: 0,0:23:28.85,0:23:29.98,Default,,0,0,0,,analyzer's bug finding
Dialogue: 0,0:23:29.98,0:23:30.68,Default,,0,0,0,,capabilities.
Dialogue: 0,0:23:34.46,0:23:38.17,Default,,0,0,0,,So, next I'm going to talk about
Dialogue: 0,0:23:38.78,0:23:39.57,Default,,0,0,0,,the Sanitizers.
Dialogue: 0,0:23:40.66,0:23:43.98,Default,,0,0,0,,But first to note, the
Dialogue: 0,0:23:43.98,0:23:45.46,Default,,0,0,0,,Sanitizers are Runtime tools.
Dialogue: 0,0:23:45.46,0:23:47.35,Default,,0,0,0,,Unlike the compiler or the
Dialogue: 0,0:23:47.35,0:23:49.30,Default,,0,0,0,,static analyzer, to get the most
Dialogue: 0,0:23:49.30,0:23:51.14,Default,,0,0,0,,out of the Sanitizers, you need
Dialogue: 0,0:23:51.14,0:23:52.45,Default,,0,0,0,,to actually run an exerciser
Dialogue: 0,0:23:52.45,0:23:54.23,Default,,0,0,0,,code that can only find bugs in
Dialogue: 0,0:23:55.17,0:23:56.53,Default,,0,0,0,,code that's actually being
Dialogue: 0,0:23:56.53,0:23:57.14,Default,,0,0,0,,executed.
Dialogue: 0,0:23:57.47,0:23:58.20,Default,,0,0,0,,So, keep that in mind.
Dialogue: 0,0:23:59.32,0:24:03.17,Default,,0,0,0,,But they offer a high degree of
Dialogue: 0,0:24:03.22,0:24:04.77,Default,,0,0,0,,bug finding capabilities.
Dialogue: 0,0:24:05.08,0:24:08.00,Default,,0,0,0,,So, first as I mentioned before,
Dialogue: 0,0:24:08.00,0:24:09.12,Default,,0,0,0,,there's Address Sanitizer.
Dialogue: 0,0:24:09.77,0:24:11.38,Default,,0,0,0,,Now, Address Sanitizer catches
Dialogue: 0,0:24:11.38,0:24:12.94,Default,,0,0,0,,memory corruption bugs like
Dialogue: 0,0:24:13.01,0:24:14.29,Default,,0,0,0,,buffer overflows and
Dialogue: 0,0:24:14.29,0:24:15.16,Default,,0,0,0,,use-after-free bugs.
Dialogue: 0,0:24:15.64,0:24:16.53,Default,,0,0,0,,And these ones are highly
Dialogue: 0,0:24:16.53,0:24:17.40,Default,,0,0,0,,correlated with security
Dialogue: 0,0:24:17.40,0:24:18.00,Default,,0,0,0,,vulnerabilities.
Dialogue: 0,0:24:21.22,0:24:22.96,Default,,0,0,0,,Then there's Thread Sanitizer,
Dialogue: 0,0:24:23.46,0:24:24.80,Default,,0,0,0,,which catches data races.
Dialogue: 0,0:24:24.90,0:24:26.03,Default,,0,0,0,,So, in your multithreaded app,
Dialogue: 0,0:24:26.71,0:24:28.30,Default,,0,0,0,,if two threads tried to access
Dialogue: 0,0:24:28.36,0:24:30.23,Default,,0,0,0,,the same piece of memory without
Dialogue: 0,0:24:30.27,0:24:31.72,Default,,0,0,0,,proper synchronization, you have
Dialogue: 0,0:24:31.72,0:24:32.32,Default,,0,0,0,,a data race.
Dialogue: 0,0:24:33.23,0:24:34.17,Default,,0,0,0,,But a cool thing about Thread
Dialogue: 0,0:24:34.17,0:24:36.28,Default,,0,0,0,,Sanitizer is that it catches
Dialogue: 0,0:24:36.28,0:24:37.56,Default,,0,0,0,,even potential data races.
Dialogue: 0,0:24:38.24,0:24:40.06,Default,,0,0,0,,So, even if in your execution of
Dialogue: 0,0:24:40.06,0:24:41.49,Default,,0,0,0,,the app everything seems to be
Dialogue: 0,0:24:41.49,0:24:43.53,Default,,0,0,0,,working great, Thread Sanitizer
Dialogue: 0,0:24:43.53,0:24:45.41,Default,,0,0,0,,can tell you if two operations
Dialogue: 0,0:24:45.41,0:24:46.53,Default,,0,0,0,,could potentially happen in a
Dialogue: 0,0:24:46.53,0:24:48.11,Default,,0,0,0,,different order and cause your
Dialogue: 0,0:24:48.11,0:24:49.00,Default,,0,0,0,,app to misbehave.
Dialogue: 0,0:24:52.07,0:24:54.21,Default,,0,0,0,,And new in Xcode 9 is the
Dialogue: 0,0:24:54.21,0:24:55.73,Default,,0,0,0,,Undefined Behavior Sanitizer.
Dialogue: 0,0:24:56.69,0:24:58.73,Default,,0,0,0,,It catches over 15 different
Dialogue: 0,0:24:58.73,0:25:01.20,Default,,0,0,0,,types of undefined behavior and
Dialogue: 0,0:25:01.20,0:25:02.57,Default,,0,0,0,,it extends either Address
Dialogue: 0,0:25:02.57,0:25:04.78,Default,,0,0,0,,Sanitizer or Thread Sanitizer so
Dialogue: 0,0:25:04.78,0:25:06.21,Default,,0,0,0,,you get even more bug-finding
Dialogue: 0,0:25:06.21,0:25:06.52,Default,,0,0,0,,power.
Dialogue: 0,0:25:07.24,0:25:08.52,Default,,0,0,0,,So, some of these types of
Dialogue: 0,0:25:08.52,0:25:09.74,Default,,0,0,0,,undefined behavior that it
Dialogue: 0,0:25:09.74,0:25:11.58,Default,,0,0,0,,catches include assigned integer
Dialogue: 0,0:25:11.58,0:25:13.37,Default,,0,0,0,,overflows and tightness match
Dialogue: 0,0:25:13.43,0:25:15.08,Default,,0,0,0,,bugs, which are also somewhat
Dialogue: 0,0:25:15.08,0:25:16.43,Default,,0,0,0,,related to security
Dialogue: 0,0:25:16.43,0:25:17.50,Default,,0,0,0,,vulnerabilities in some
Dialogue: 0,0:25:17.50,0:25:17.98,Default,,0,0,0,,contexts.
Dialogue: 0,0:25:17.98,0:25:21.85,Default,,0,0,0,,All of the sanitizers provide
Dialogue: 0,0:25:21.85,0:25:23.14,Default,,0,0,0,,you with really rich and
Dialogue: 0,0:25:23.14,0:25:25.09,Default,,0,0,0,,informative diagnostics that
Dialogue: 0,0:25:25.09,0:25:26.94,Default,,0,0,0,,help you hone in on the root
Dialogue: 0,0:25:26.94,0:25:27.65,Default,,0,0,0,,cause of a bug.
Dialogue: 0,0:25:28.31,0:25:29.78,Default,,0,0,0,,You can find a lot of really
Dialogue: 0,0:25:29.78,0:25:30.89,Default,,0,0,0,,helpful information in the
Dialogue: 0,0:25:30.89,0:25:32.96,Default,,0,0,0,,Runtime Issue Navigator such as
Dialogue: 0,0:25:32.96,0:25:36.03,Default,,0,0,0,,stack backtraces at important
Dialogue: 0,0:25:36.03,0:25:39.76,Default,,0,0,0,,parts during the bug's
Dialogue: 0,0:25:39.93,0:25:40.27,Default,,0,0,0,,execution.
Dialogue: 0,0:25:40.44,0:25:41.74,Default,,0,0,0,,So, we recommend turning on the
Dialogue: 0,0:25:41.74,0:25:43.74,Default,,0,0,0,,sanitizers during development.
Dialogue: 0,0:25:44.07,0:25:45.04,Default,,0,0,0,,You can do this in the scheme
Dialogue: 0,0:25:45.04,0:25:46.24,Default,,0,0,0,,editor under the diagnostics
Dialogue: 0,0:25:46.24,0:25:46.49,Default,,0,0,0,,tab.
Dialogue: 0,0:25:47.64,0:25:48.58,Default,,0,0,0,,And this is where you can also
Dialogue: 0,0:25:48.58,0:25:50.82,Default,,0,0,0,,turn it on for running your unit
Dialogue: 0,0:25:50.82,0:25:51.22,Default,,0,0,0,,tests.
Dialogue: 0,0:25:51.51,0:25:53.36,Default,,0,0,0,,And remember that the sanitizers
Dialogue: 0,0:25:53.64,0:25:55.39,Default,,0,0,0,,need good code coverage in order
Dialogue: 0,0:25:55.44,0:25:56.93,Default,,0,0,0,,to find bugs throughout your
Dialogue: 0,0:25:56.93,0:25:58.13,Default,,0,0,0,,program, and that's something
Dialogue: 0,0:25:58.13,0:25:59.37,Default,,0,0,0,,that your unit test can provide.
Dialogue: 0,0:25:59.96,0:26:02.84,Default,,0,0,0,,You can learn more about the
Dialogue: 0,0:26:02.84,0:26:04.55,Default,,0,0,0,,sanitizers and other Runtime
Dialogue: 0,0:26:04.55,0:26:05.63,Default,,0,0,0,,tools that are new this year in
Dialogue: 0,0:26:05.63,0:26:07.69,Default,,0,0,0,,Xcode at the Finding Bugs Using
Dialogue: 0,0:26:07.69,0:26:09.97,Default,,0,0,0,,Xcode Runtime Tools talk.
Dialogue: 0,0:26:12.42,0:26:15.76,Default,,0,0,0,,So, those are five powerful
Dialogue: 0,0:26:15.76,0:26:16.94,Default,,0,0,0,,tools that you have at your
Dialogue: 0,0:26:16.94,0:26:19.06,Default,,0,0,0,,disposal to track down undefined
Dialogue: 0,0:26:19.06,0:26:21.12,Default,,0,0,0,,behavior and address some of the
Dialogue: 0,0:26:21.12,0:26:22.79,Default,,0,0,0,,security vulnerabilities that
Dialogue: 0,0:26:23.25,0:26:23.89,Default,,0,0,0,,they may create.
Dialogue: 0,0:26:24.89,0:26:26.03,Default,,0,0,0,,But before moving on, there's
Dialogue: 0,0:26:26.03,0:26:27.16,Default,,0,0,0,,one more thing that I wanted to
Dialogue: 0,0:26:27.21,0:26:28.79,Default,,0,0,0,,talk about, which is the
Dialogue: 0,0:26:28.79,0:26:29.54,Default,,0,0,0,,language itself.
Dialogue: 0,0:26:29.54,0:26:33.07,Default,,0,0,0,,So, you can think of your use of
Dialogue: 0,0:26:33.07,0:26:34.74,Default,,0,0,0,,the language as your first line
Dialogue: 0,0:26:34.74,0:26:36.43,Default,,0,0,0,,of defense in writing safe and
Dialogue: 0,0:26:36.43,0:26:37.03,Default,,0,0,0,,secure code.
Dialogue: 0,0:26:37.82,0:26:39.41,Default,,0,0,0,,And so with that in mind, you
Dialogue: 0,0:26:39.41,0:26:41.13,Default,,0,0,0,,should prefer the safe
Dialogue: 0,0:26:41.13,0:26:43.08,Default,,0,0,0,,constructs that your library and
Dialogue: 0,0:26:43.08,0:26:44.19,Default,,0,0,0,,your language provide to you.
Dialogue: 0,0:26:45.09,0:26:47.25,Default,,0,0,0,,For instance, automatic
Dialogue: 0,0:26:47.25,0:26:48.57,Default,,0,0,0,,reference counting in Objective
Dialogue: 0,0:26:48.57,0:26:49.00,Default,,0,0,0,,C.
Dialogue: 0,0:26:49.40,0:26:53.04,Default,,0,0,0,,Or smart pointers in C++ free
Dialogue: 0,0:26:53.04,0:26:54.21,Default,,0,0,0,,you from the burden of having to
Dialogue: 0,0:26:54.21,0:26:56.18,Default,,0,0,0,,do a lot of the manual memory
Dialogue: 0,0:26:56.18,0:26:57.75,Default,,0,0,0,,management that results in bugs.
Dialogue: 0,0:26:58.80,0:27:00.96,Default,,0,0,0,,And if your standard library
Dialogue: 0,0:27:00.96,0:27:02.12,Default,,0,0,0,,provides you with container
Dialogue: 0,0:27:02.12,0:27:03.91,Default,,0,0,0,,classes like NSarray from
Dialogue: 0,0:27:03.91,0:27:06.44,Default,,0,0,0,,foundation, which check their
Dialogue: 0,0:27:06.44,0:27:07.67,Default,,0,0,0,,bounds automatically, you don't
Dialogue: 0,0:27:07.67,0:27:08.75,Default,,0,0,0,,have to worry so much about
Dialogue: 0,0:27:08.75,0:27:09.53,Default,,0,0,0,,buffer overflows.
Dialogue: 0,0:27:10.09,0:27:13.45,Default,,0,0,0,,But it's just key to understand
Dialogue: 0,0:27:13.45,0:27:14.71,Default,,0,0,0,,the tradeoffs that your language
Dialogue: 0,0:27:14.71,0:27:16.84,Default,,0,0,0,,is making when it comes to
Dialogue: 0,0:27:16.84,0:27:17.97,Default,,0,0,0,,safety and security.
Dialogue: 0,0:27:18.60,0:27:20.32,Default,,0,0,0,,And when these are very
Dialogue: 0,0:27:20.32,0:27:21.88,Default,,0,0,0,,important factors in your code,
Dialogue: 0,0:27:22.51,0:27:24.94,Default,,0,0,0,,consider using SWF, a language
Dialogue: 0,0:27:24.94,0:27:25.96,Default,,0,0,0,,that was designed from the
Dialogue: 0,0:27:25.96,0:27:28.19,Default,,0,0,0,,ground up to eliminate entire
Dialogue: 0,0:27:28.19,0:27:30.13,Default,,0,0,0,,categories of undefined
Dialogue: 0,0:27:30.13,0:27:30.54,Default,,0,0,0,,behavior.
Dialogue: 0,0:27:31.50,0:27:32.68,Default,,0,0,0,,And to tell you more about that,
Dialogue: 0,0:27:33.26,0:27:34.09,Default,,0,0,0,,I'd like to invite up my
Dialogue: 0,0:27:34.09,0:27:35.79,Default,,0,0,0,,colleague, Anna.
Dialogue: 0,0:27:37.52,0:27:41.57,Default,,0,0,0,,[ Applause ]
Dialogue: 0,0:27:42.07,0:27:42.80,Default,,0,0,0,,>> Thank you, Ryan.
Dialogue: 0,0:27:44.07,0:27:46.82,Default,,0,0,0,,Now let's talk about undefined
Dialogue: 0,0:27:46.88,0:27:49.08,Default,,0,0,0,,behavior and SWF.
Dialogue: 0,0:27:49.30,0:27:50.45,Default,,0,0,0,,While you can write code
Dialogue: 0,0:27:50.45,0:27:52.99,Default,,0,0,0,,fine-tuned for performance in
Dialogue: 0,0:27:52.99,0:27:54.23,Default,,0,0,0,,SWF, this language makes
Dialogue: 0,0:27:54.23,0:27:55.76,Default,,0,0,0,,different tradeoffs and was
Dialogue: 0,0:27:55.76,0:27:57.32,Default,,0,0,0,,designed to be much safer by
Dialogue: 0,0:27:57.32,0:27:57.82,Default,,0,0,0,,default.
Dialogue: 0,0:27:57.98,0:28:00.06,Default,,0,0,0,,As you've seen from the previous
Dialogue: 0,0:28:00.06,0:28:02.43,Default,,0,0,0,,examples, undefined behavior can
Dialogue: 0,0:28:02.51,0:28:04.96,Default,,0,0,0,,introduce very subtle bugs that
Dialogue: 0,0:28:04.96,0:28:07.19,Default,,0,0,0,,in turn could lead to security
Dialogue: 0,0:28:07.19,0:28:07.79,Default,,0,0,0,,exploits.
Dialogue: 0,0:28:08.41,0:28:10.24,Default,,0,0,0,,And this is simply summarized in
Dialogue: 0,0:28:10.24,0:28:11.59,Default,,0,0,0,,this code from SWF.org.
Dialogue: 0,0:28:12.28,0:28:14.12,Default,,0,0,0,,Undefined behavior is the enemy
Dialogue: 0,0:28:14.12,0:28:14.78,Default,,0,0,0,,of safety.
Dialogue: 0,0:28:16.08,0:28:17.97,Default,,0,0,0,,Safety in SWF is important on
Dialogue: 0,0:28:17.97,0:28:18.67,Default,,0,0,0,,many levels.
Dialogue: 0,0:28:19.14,0:28:20.85,Default,,0,0,0,,Let's see how some of the major
Dialogue: 0,0:28:20.85,0:28:22.61,Default,,0,0,0,,sources of undefined behavior
Dialogue: 0,0:28:22.90,0:28:24.53,Default,,0,0,0,,that Ryan and Fred talked about
Dialogue: 0,0:28:24.76,0:28:26.25,Default,,0,0,0,,are addressed in SWF using
Dialogue: 0,0:28:26.25,0:28:27.16,Default,,0,0,0,,different techniques.
Dialogue: 0,0:28:27.61,0:28:29.37,Default,,0,0,0,,The stricter type system gives
Dialogue: 0,0:28:29.37,0:28:31.43,Default,,0,0,0,,us optional types, which
Dialogue: 0,0:28:31.52,0:28:33.55,Default,,0,0,0,,statically prevent null point of
Dialogue: 0,0:28:33.55,0:28:34.43,Default,,0,0,0,,dereferences.
Dialogue: 0,0:28:35.22,0:28:36.61,Default,,0,0,0,,Use of an initialized variables
Dialogue: 0,0:28:36.61,0:28:38.75,Default,,0,0,0,,is eliminated by guarantee of
Dialogue: 0,0:28:38.75,0:28:40.22,Default,,0,0,0,,definite initialization.
Dialogue: 0,0:28:40.82,0:28:42.47,Default,,0,0,0,,Buffer and integer overflows are
Dialogue: 0,0:28:42.47,0:28:44.78,Default,,0,0,0,,checked at runtime and just like
Dialogue: 0,0:28:44.78,0:28:46.59,Default,,0,0,0,,in Objective C, automatic
Dialogue: 0,0:28:46.59,0:28:48.34,Default,,0,0,0,,reference counting is the SWF
Dialogue: 0,0:28:48.34,0:28:51.17,Default,,0,0,0,,answer to use after freeze as it
Dialogue: 0,0:28:51.30,0:28:52.74,Default,,0,0,0,,allows the developer not to
Dialogue: 0,0:28:52.74,0:28:54.11,Default,,0,0,0,,focus on manual memory
Dialogue: 0,0:28:54.11,0:28:54.95,Default,,0,0,0,,management issues.
Dialogue: 0,0:28:55.82,0:28:57.34,Default,,0,0,0,,So, let's look into some of this
Dialogue: 0,0:28:57.34,0:28:58.03,Default,,0,0,0,,in more detail.
Dialogue: 0,0:28:59.55,0:29:01.88,Default,,0,0,0,,Optional types is SWF answer to
Dialogue: 0,0:29:01.88,0:29:03.19,Default,,0,0,0,,null point of dereferences.
Dialogue: 0,0:29:03.56,0:29:05.40,Default,,0,0,0,,SWF has two kinds of types.
Dialogue: 0,0:29:05.99,0:29:07.73,Default,,0,0,0,,Here we have a nonoptional cake
Dialogue: 0,0:29:08.38,0:29:09.81,Default,,0,0,0,,and an optional cake, which you
Dialogue: 0,0:29:09.81,0:29:11.64,Default,,0,0,0,,can think of as a box that may
Dialogue: 0,0:29:11.64,0:29:13.25,Default,,0,0,0,,have a cake in it or might be
Dialogue: 0,0:29:13.25,0:29:13.66,Default,,0,0,0,,empty.
Dialogue: 0,0:29:14.57,0:29:16.29,Default,,0,0,0,,Now, as SWF tools, I can assure
Dialogue: 0,0:29:16.29,0:29:18.18,Default,,0,0,0,,you a bug that may have a cake
Dialogue: 0,0:29:18.18,0:29:20.20,Default,,0,0,0,,in it is definitely not the same
Dialogue: 0,0:29:20.20,0:29:22.11,Default,,0,0,0,,thing as this delicious triple
Dialogue: 0,0:29:22.11,0:29:22.93,Default,,0,0,0,,chocolate delight.
Dialogue: 0,0:29:23.38,0:29:26.68,Default,,0,0,0,,So, before using a value of
Dialogue: 0,0:29:26.68,0:29:28.14,Default,,0,0,0,,optional type, you need to check
Dialogue: 0,0:29:28.14,0:29:28.40,Default,,0,0,0,,for it.
Dialogue: 0,0:29:29.11,0:29:30.35,Default,,0,0,0,,Suppose we have a function
Dialogue: 0,0:29:30.35,0:29:32.66,Default,,0,0,0,,called receive package that is
Dialogue: 0,0:29:32.66,0:29:34.36,Default,,0,0,0,,declared to return an optional
Dialogue: 0,0:29:34.36,0:29:34.97,Default,,0,0,0,,cake type.
Dialogue: 0,0:29:36.13,0:29:37.97,Default,,0,0,0,,Don't jump for joy unless you
Dialogue: 0,0:29:37.97,0:29:40.53,Default,,0,0,0,,check and know for sure that it
Dialogue: 0,0:29:40.53,0:29:41.64,Default,,0,0,0,,will not return nil.
Dialogue: 0,0:29:42.44,0:29:44.00,Default,,0,0,0,,It's possible the cake is a lie.
Dialogue: 0,0:29:47.54,0:29:49.64,Default,,0,0,0,,Note that SWF's syntax provides
Dialogue: 0,0:29:49.64,0:29:51.47,Default,,0,0,0,,affordances for easy checking of
Dialogue: 0,0:29:51.47,0:29:53.80,Default,,0,0,0,,optional types, specifically to
Dialogue: 0,0:29:53.80,0:29:55.36,Default,,0,0,0,,lessen the burden of using this
Dialogue: 0,0:29:55.36,0:29:56.51,Default,,0,0,0,,types on the developer.
Dialogue: 0,0:29:57.85,0:30:00.26,Default,,0,0,0,,Another important reminder is
Dialogue: 0,0:30:00.26,0:30:01.78,Default,,0,0,0,,that you should not abuse the
Dialogue: 0,0:30:01.78,0:30:04.25,Default,,0,0,0,,fourth unwrap operator, which
Dialogue: 0,0:30:04.25,0:30:05.38,Default,,0,0,0,,will stop execution of the
Dialogue: 0,0:30:05.38,0:30:06.73,Default,,0,0,0,,program if the value is nil.
Dialogue: 0,0:30:07.56,0:30:09.38,Default,,0,0,0,,If the API has been declared to
Dialogue: 0,0:30:09.38,0:30:11.31,Default,,0,0,0,,return an optional, it means
Dialogue: 0,0:30:11.59,0:30:12.97,Default,,0,0,0,,that it might return nil so
Dialogue: 0,0:30:12.97,0:30:14.66,Default,,0,0,0,,check for it.
Dialogue: 0,0:30:14.95,0:30:16.34,Default,,0,0,0,,Now, the fourth unwrap should
Dialogue: 0,0:30:16.34,0:30:18.72,Default,,0,0,0,,only be used in rare cases when
Dialogue: 0,0:30:18.72,0:30:20.77,Default,,0,0,0,,you, the developer, know for
Dialogue: 0,0:30:20.77,0:30:22.27,Default,,0,0,0,,sure and can guarantee that the
Dialogue: 0,0:30:22.27,0:30:23.62,Default,,0,0,0,,return value is never nil.
Dialogue: 0,0:30:23.91,0:30:25.42,Default,,0,0,0,,However, that cannot be encoded
Dialogue: 0,0:30:25.42,0:30:26.36,Default,,0,0,0,,in the type system.
Dialogue: 0,0:30:27.08,0:30:28.44,Default,,0,0,0,,One example of that is when
Dialogue: 0,0:30:28.44,0:30:29.89,Default,,0,0,0,,you're loading an image asset
Dialogue: 0,0:30:29.96,0:30:30.91,Default,,0,0,0,,from the app bundle.
Dialogue: 0,0:30:33.02,0:30:34.87,Default,,0,0,0,,SWF also has a notion of
Dialogue: 0,0:30:34.87,0:30:36.80,Default,,0,0,0,,implicitly unwrapped optional
Dialogue: 0,0:30:36.80,0:30:37.09,Default,,0,0,0,,type.
Dialogue: 0,0:30:37.84,0:30:39.58,Default,,0,0,0,,This type is similar to
Dialogue: 0,0:30:39.58,0:30:40.22,Default,,0,0,0,,optional.
Dialogue: 0,0:30:40.43,0:30:41.97,Default,,0,0,0,,However, here the compiler does
Dialogue: 0,0:30:41.97,0:30:46.00,Default,,0,0,0,,not enforce that the values are
Dialogue: 0,0:30:46.08,0:30:48.74,Default,,0,0,0,,used before, the values are
Dialogue: 0,0:30:48.74,0:30:50.07,Default,,0,0,0,,checked before use, making no
Dialogue: 0,0:30:50.07,0:30:51.23,Default,,0,0,0,,compile time guarantees.
Dialogue: 0,0:30:52.74,0:30:54.27,Default,,0,0,0,,However, note that this type is
Dialogue: 0,0:30:54.27,0:30:55.84,Default,,0,0,0,,still much safer than the C
Dialogue: 0,0:30:55.84,0:30:58.75,Default,,0,0,0,,pointer type because using it is
Dialogue: 0,0:30:58.75,0:30:59.78,Default,,0,0,0,,defined behavior.
Dialogue: 0,0:31:00.54,0:31:02.02,Default,,0,0,0,,If the value's nil, the program
Dialogue: 0,0:31:02.02,0:31:04.22,Default,,0,0,0,,is guaranteed to stop execution,
Dialogue: 0,0:31:04.77,0:31:07.31,Default,,0,0,0,,making this model much more
Dialogue: 0,0:31:07.31,0:31:07.93,Default,,0,0,0,,secure.
Dialogue: 0,0:31:08.50,0:31:11.22,Default,,0,0,0,,Now, this type should be used
Dialogue: 0,0:31:11.28,0:31:12.22,Default,,0,0,0,,for properties that are
Dialogue: 0,0:31:12.22,0:31:13.61,Default,,0,0,0,,guaranteed to have a value.
Dialogue: 0,0:31:13.98,0:31:15.10,Default,,0,0,0,,However, they cannot be
Dialogue: 0,0:31:15.10,0:31:16.54,Default,,0,0,0,,initialized in the constructor.
Dialogue: 0,0:31:17.27,0:31:18.80,Default,,0,0,0,,Some of you might be using it
Dialogue: 0,0:31:18.80,0:31:19.91,Default,,0,0,0,,for IB outlets.
Dialogue: 0,0:31:20.77,0:31:22.66,Default,,0,0,0,,However, another source of
Dialogue: 0,0:31:22.66,0:31:24.17,Default,,0,0,0,,implicitly unwrapped optionals
Dialogue: 0,0:31:24.44,0:31:26.31,Default,,0,0,0,,are pointered types coming from
Dialogue: 0,0:31:26.31,0:31:28.08,Default,,0,0,0,,Objective C and C APIs.
Dialogue: 0,0:31:29.06,0:31:31.10,Default,,0,0,0,,And this source subverts the
Dialogue: 0,0:31:31.10,0:31:32.79,Default,,0,0,0,,type safety of SWF optionals.
Dialogue: 0,0:31:33.14,0:31:34.21,Default,,0,0,0,,So, what can we do here?
Dialogue: 0,0:31:34.82,0:31:37.51,Default,,0,0,0,,At the time SWF was released,
Dialogue: 0,0:31:37.51,0:31:38.94,Default,,0,0,0,,we've also added nullability
Dialogue: 0,0:31:38.94,0:31:40.69,Default,,0,0,0,,annotations to the Apple LLDM
Dialogue: 0,0:31:40.69,0:31:41.25,Default,,0,0,0,,compiler.
Dialogue: 0,0:31:41.86,0:31:43.95,Default,,0,0,0,,This annotation in C languages
Dialogue: 0,0:31:44.25,0:31:46.54,Default,,0,0,0,,communicate the intent of the
Dialogue: 0,0:31:46.54,0:31:48.10,Default,,0,0,0,,APIs but are also used to
Dialogue: 0,0:31:48.10,0:31:49.81,Default,,0,0,0,,enhance their SWF interfaces.
Dialogue: 0,0:31:50.54,0:31:52.63,Default,,0,0,0,,They allow us to map the unsafe
Dialogue: 0,0:31:52.66,0:31:54.21,Default,,0,0,0,,C pointers onto the optional
Dialogue: 0,0:31:54.21,0:31:54.64,Default,,0,0,0,,types.
Dialogue: 0,0:31:55.41,0:31:56.72,Default,,0,0,0,,Let's look at this example.
Dialogue: 0,0:31:57.31,0:31:58.94,Default,,0,0,0,,Here we have ancestor shared
Dialogue: 0,0:31:58.97,0:32:00.38,Default,,0,0,0,,with view method on NSview.
Dialogue: 0,0:32:00.38,0:32:02.94,Default,,0,0,0,,As you can see here, it takes a
Dialogue: 0,0:32:02.94,0:32:04.84,Default,,0,0,0,,non-null argument because it
Dialogue: 0,0:32:04.84,0:32:06.77,Default,,0,0,0,,does not make sense to look for
Dialogue: 0,0:32:06.77,0:32:09.17,Default,,0,0,0,,an ancestor between a nil and a
Dialogue: 0,0:32:09.17,0:32:09.63,Default,,0,0,0,,value.
Dialogue: 0,0:32:10.42,0:32:11.96,Default,,0,0,0,,On the other hand, its return
Dialogue: 0,0:32:11.96,0:32:13.50,Default,,0,0,0,,value is nullable because it's
Dialogue: 0,0:32:13.50,0:32:15.42,Default,,0,0,0,,possible the two views do not
Dialogue: 0,0:32:15.42,0:32:16.65,Default,,0,0,0,,have the same ancestor.
Dialogue: 0,0:32:18.53,0:32:20.68,Default,,0,0,0,,Now, as you can see here,
Dialogue: 0,0:32:20.85,0:32:22.63,Default,,0,0,0,,nullability directly maps onto
Dialogue: 0,0:32:22.63,0:32:23.71,Default,,0,0,0,,the SWF interface.
Dialogue: 0,0:32:24.07,0:32:25.28,Default,,0,0,0,,Non-null maps into the
Dialogue: 0,0:32:25.28,0:32:27.33,Default,,0,0,0,,nonoptional value and nullable
Dialogue: 0,0:32:27.33,0:32:29.42,Default,,0,0,0,,is mapped to the optional value.
Dialogue: 0,0:32:29.94,0:32:32.30,Default,,0,0,0,,Good news is that most Apple
Dialogue: 0,0:32:32.30,0:32:34.61,Default,,0,0,0,,APIs have been audited and
Dialogue: 0,0:32:34.61,0:32:35.96,Default,,0,0,0,,annotated with nullability
Dialogue: 0,0:32:35.96,0:32:36.63,Default,,0,0,0,,annotations.
Dialogue: 0,0:32:37.67,0:32:40.08,Default,,0,0,0,,However, if you have APIs or
Dialogue: 0,0:32:40.08,0:32:42.05,Default,,0,0,0,,just C or Objective C code that
Dialogue: 0,0:32:42.05,0:32:44.20,Default,,0,0,0,,interoperates with SWF, you too
Dialogue: 0,0:32:44.20,0:32:45.22,Default,,0,0,0,,can benefit from these
Dialogue: 0,0:32:45.22,0:32:45.91,Default,,0,0,0,,annotations.
Dialogue: 0,0:32:46.85,0:32:48.72,Default,,0,0,0,,In addition, you can use tools
Dialogue: 0,0:32:48.97,0:32:50.03,Default,,0,0,0,,such as the [inaudible] Static
Dialogue: 0,0:32:50.03,0:32:52.00,Default,,0,0,0,,Analyzer, Warnings, and
Dialogue: 0,0:32:52.00,0:32:53.55,Default,,0,0,0,,Undefined Behavior Sanitizer to
Dialogue: 0,0:32:53.55,0:32:55.75,Default,,0,0,0,,find inconsistencies of how this
Dialogue: 0,0:32:55.75,0:32:57.23,Default,,0,0,0,,these annotations are applied on
Dialogue: 0,0:32:57.23,0:32:59.11,Default,,0,0,0,,your C code or Objective C code.
Dialogue: 0,0:32:59.77,0:33:01.71,Default,,0,0,0,,Now, I really, really like this
Dialogue: 0,0:33:01.71,0:33:03.63,Default,,0,0,0,,example because it highlights
Dialogue: 0,0:33:03.63,0:33:05.26,Default,,0,0,0,,how the improvements to the LLDM
Dialogue: 0,0:33:05.26,0:33:07.72,Default,,0,0,0,,compiler, the SWF compiler, and
Dialogue: 0,0:33:07.72,0:33:09.80,Default,,0,0,0,,the frameworks work all together
Dialogue: 0,0:33:09.80,0:33:12.00,Default,,0,0,0,,to benefit the whole ecosystem.
Dialogue: 0,0:33:15.13,0:33:17.11,Default,,0,0,0,,SWF definite initialization is a
Dialogue: 0,0:33:17.11,0:33:18.91,Default,,0,0,0,,diagnostic feature based on deep
Dialogue: 0,0:33:18.91,0:33:19.97,Default,,0,0,0,,code analysis.
Dialogue: 0,0:33:20.75,0:33:23.23,Default,,0,0,0,,The SWF compiler guarantees that
Dialogue: 0,0:33:23.23,0:33:26.28,Default,,0,0,0,,values are initialized before
Dialogue: 0,0:33:26.28,0:33:27.27,Default,,0,0,0,,they are being used.
Dialogue: 0,0:33:28.24,0:33:30.21,Default,,0,0,0,,And this checking is done along
Dialogue: 0,0:33:30.21,0:33:32.17,Default,,0,0,0,,all branches through your
Dialogue: 0,0:33:32.17,0:33:32.61,Default,,0,0,0,,program.
Dialogue: 0,0:33:33.10,0:33:34.41,Default,,0,0,0,,Let's look at this example.
Dialogue: 0,0:33:34.98,0:33:36.75,Default,,0,0,0,,Here, the compiler will check
Dialogue: 0,0:33:36.79,0:33:39.25,Default,,0,0,0,,that my instance is initialized
Dialogue: 0,0:33:39.59,0:33:42.28,Default,,0,0,0,,on both the if and the else
Dialogue: 0,0:33:42.74,0:33:44.45,Default,,0,0,0,,branch of this code snippet
Dialogue: 0,0:33:44.74,0:33:47.06,Default,,0,0,0,,before it allows you to go on
Dialogue: 0,0:33:47.06,0:33:49.65,Default,,0,0,0,,and use this value.
Dialogue: 0,0:33:49.65,0:33:51.25,Default,,0,0,0,,Now, let's talk about buffer and
Dialogue: 0,0:33:51.25,0:33:52.89,Default,,0,0,0,,integer overflows, which are the
Dialogue: 0,0:33:52.89,0:33:55.20,Default,,0,0,0,,biggest sources of security
Dialogue: 0,0:33:55.20,0:33:55.51,Default,,0,0,0,,issues.
Dialogue: 0,0:33:56.53,0:33:58.17,Default,,0,0,0,,Overflows only raise an integer
Dialogue: 0,0:33:58.29,0:34:00.60,Default,,0,0,0,,and SWF terminate the execution
Dialogue: 0,0:34:00.60,0:34:01.25,Default,,0,0,0,,of the program.
Dialogue: 0,0:34:02.83,0:34:04.13,Default,,0,0,0,,You might ask this question.
Dialogue: 0,0:34:04.35,0:34:05.87,Default,,0,0,0,,Why is Runtime checking good?
Dialogue: 0,0:34:05.95,0:34:07.93,Default,,0,0,0,,Well, while your program will
Dialogue: 0,0:34:07.93,0:34:10.77,Default,,0,0,0,,still stop if you have a bug and
Dialogue: 0,0:34:10.77,0:34:12.71,Default,,0,0,0,,your buffer overflows, this
Dialogue: 0,0:34:12.71,0:34:14.19,Default,,0,0,0,,behavior is much better than the
Dialogue: 0,0:34:14.19,0:34:14.82,Default,,0,0,0,,alternative.
Dialogue: 0,0:34:15.50,0:34:17.52,Default,,0,0,0,,The behavior in SWF is much more
Dialogue: 0,0:34:17.52,0:34:20.01,Default,,0,0,0,,consistent and debuggable than
Dialogue: 0,0:34:20.01,0:34:21.32,Default,,0,0,0,,what you get in C and most
Dialogue: 0,0:34:21.32,0:34:23.38,Default,,0,0,0,,importantly, it gives very high
Dialogue: 0,0:34:23.38,0:34:24.88,Default,,0,0,0,,security guarantees.
Dialogue: 0,0:34:25.48,0:34:26.95,Default,,0,0,0,,The buffer overflow is not
Dialogue: 0,0:34:26.95,0:34:27.75,Default,,0,0,0,,exploitable.
Dialogue: 0,0:34:28.54,0:34:30.10,Default,,0,0,0,,It will not lead to the attacker
Dialogue: 0,0:34:30.10,0:34:31.95,Default,,0,0,0,,getting execution control of
Dialogue: 0,0:34:31.95,0:34:33.26,Default,,0,0,0,,your program.
Dialogue: 0,0:34:34.78,0:34:36.24,Default,,0,0,0,,Note that if you need to use
Dialogue: 0,0:34:36.24,0:34:38.01,Default,,0,0,0,,integer-wrapping behavior, you
Dialogue: 0,0:34:38.01,0:34:41.07,Default,,0,0,0,,can still do it using overflow
Dialogue: 0,0:34:41.07,0:34:43.36,Default,,0,0,0,,operators, which are also safe
Dialogue: 0,0:34:43.36,0:34:44.81,Default,,0,0,0,,and just perform modular
Dialogue: 0,0:34:44.81,0:34:45.26,Default,,0,0,0,,arithmetic.
Dialogue: 0,0:34:45.70,0:34:49.93,Default,,0,0,0,,Now, a question a lot of you
Dialogue: 0,0:34:49.93,0:34:51.53,Default,,0,0,0,,might be thinking about now is
Dialogue: 0,0:34:51.53,0:34:53.59,Default,,0,0,0,,does undefined behavior exist in
Dialogue: 0,0:34:53.59,0:34:54.01,Default,,0,0,0,,SWF?
Dialogue: 0,0:34:55.28,0:34:57.09,Default,,0,0,0,,And the answer is yes, but this
Dialogue: 0,0:34:57.09,0:35:00.22,Default,,0,0,0,,case is much rarer and often we
Dialogue: 0,0:35:00.22,0:35:01.88,Default,,0,0,0,,know that we are opting into
Dialogue: 0,0:35:01.88,0:35:02.88,Default,,0,0,0,,unsafe behavior.
Dialogue: 0,0:35:03.40,0:35:06.68,Default,,0,0,0,,So, for example we needed C
Dialogue: 0,0:35:06.68,0:35:07.66,Default,,0,0,0,,interoperability.
Dialogue: 0,0:35:07.66,0:35:09.23,Default,,0,0,0,,So, we needed to traffic in
Dialogue: 0,0:35:09.23,0:35:09.91,Default,,0,0,0,,these types.
Dialogue: 0,0:35:10.31,0:35:12.28,Default,,0,0,0,,Unsafe pointer, unsafe mutable
Dialogue: 0,0:35:12.28,0:35:13.48,Default,,0,0,0,,raw buffer pointer.
Dialogue: 0,0:35:14.26,0:35:15.95,Default,,0,0,0,,Note that you can tell that
Dialogue: 0,0:35:15.95,0:35:17.73,Default,,0,0,0,,these types are unsafe by just
Dialogue: 0,0:35:17.73,0:35:18.79,Default,,0,0,0,,looking at their names.
Dialogue: 0,0:35:18.79,0:35:22.34,Default,,0,0,0,,So, if your applications use C
Dialogue: 0,0:35:22.55,0:35:24.75,Default,,0,0,0,,or Objective C or otherwise
Dialogue: 0,0:35:24.75,0:35:25.92,Default,,0,0,0,,they're using these types, I
Dialogue: 0,0:35:25.92,0:35:27.30,Default,,0,0,0,,highly recommend using Address
Dialogue: 0,0:35:27.30,0:35:28.34,Default,,0,0,0,,Sanitizer too.
Dialogue: 0,0:35:28.58,0:35:30.93,Default,,0,0,0,,It will find memory corruptions
Dialogue: 0,0:35:31.23,0:35:33.30,Default,,0,0,0,,that this unsafety could bring
Dialogue: 0,0:35:33.30,0:35:34.18,Default,,0,0,0,,to your code.
Dialogue: 0,0:35:34.44,0:35:38.27,Default,,0,0,0,,Now, another example of unsafety
Dialogue: 0,0:35:38.33,0:35:39.57,Default,,0,0,0,,in SWF are simultaneous
Dialogue: 0,0:35:39.61,0:35:40.37,Default,,0,0,0,,accesses.
Dialogue: 0,0:35:40.96,0:35:42.68,Default,,0,0,0,,And SWF is nailing the model
Dialogue: 0,0:35:42.68,0:35:44.01,Default,,0,0,0,,down in this release with
Dialogue: 0,0:35:44.01,0:35:45.67,Default,,0,0,0,,enforcement of exclusive memory
Dialogue: 0,0:35:45.67,0:35:46.14,Default,,0,0,0,,access.
Dialogue: 0,0:35:46.85,0:35:48.13,Default,,0,0,0,,Let's look at a very simple
Dialogue: 0,0:35:48.13,0:35:49.57,Default,,0,0,0,,example to understand what this
Dialogue: 0,0:35:49.57,0:35:50.28,Default,,0,0,0,,is all about.
Dialogue: 0,0:35:50.28,0:35:54.01,Default,,0,0,0,,So, here we have a function that
Dialogue: 0,0:35:54.01,0:35:55.73,Default,,0,0,0,,takes two in out arguments.
Dialogue: 0,0:35:56.31,0:35:57.68,Default,,0,0,0,,In out means that the function
Dialogue: 0,0:35:57.68,0:35:58.89,Default,,0,0,0,,may change the value of these
Dialogue: 0,0:35:58.89,0:35:59.45,Default,,0,0,0,,arguments.
Dialogue: 0,0:36:00.22,0:36:02.21,Default,,0,0,0,,Calling this function and
Dialogue: 0,0:36:02.21,0:36:04.07,Default,,0,0,0,,passing it two values that point
Dialogue: 0,0:36:04.07,0:36:06.44,Default,,0,0,0,,to the same memory could result
Dialogue: 0,0:36:06.44,0:36:07.83,Default,,0,0,0,,in unpredictable behavior.
Dialogue: 0,0:36:09.18,0:36:10.85,Default,,0,0,0,,For those of you who are
Dialogue: 0,0:36:10.85,0:36:12.40,Default,,0,0,0,,familiar with restrictive work
Dialogue: 0,0:36:12.40,0:36:14.27,Default,,0,0,0,,in C, this is very similar.
Dialogue: 0,0:36:14.45,0:36:16.67,Default,,0,0,0,,But in SWF, this behavior is on
Dialogue: 0,0:36:16.67,0:36:17.26,Default,,0,0,0,,by default.
Dialogue: 0,0:36:17.74,0:36:20.65,Default,,0,0,0,,Now, this one, this is a very
Dialogue: 0,0:36:20.65,0:36:23.12,Default,,0,0,0,,simple and abstract example of
Dialogue: 0,0:36:23.12,0:36:23.72,Default,,0,0,0,,this problem.
Dialogue: 0,0:36:23.72,0:36:25.05,Default,,0,0,0,,However, I highly encourage you
Dialogue: 0,0:36:25.05,0:36:26.72,Default,,0,0,0,,to watch Watch New in SWF talk
Dialogue: 0,0:36:26.72,0:36:28.60,Default,,0,0,0,,for more examples of how this
Dialogue: 0,0:36:28.60,0:36:30.71,Default,,0,0,0,,could be visible in your code
Dialogue: 0,0:36:30.71,0:36:32.77,Default,,0,0,0,,and how it relates to your code.
Dialogue: 0,0:36:33.72,0:36:36.21,Default,,0,0,0,,So, to address this problem, SWF
Dialogue: 0,0:36:36.40,0:36:38.34,Default,,0,0,0,,could have chose to declare this
Dialogue: 0,0:36:38.34,0:36:39.99,Default,,0,0,0,,to be undefined behavior.
Dialogue: 0,0:36:41.04,0:36:43.72,Default,,0,0,0,,However, instead it decided to
Dialogue: 0,0:36:43.72,0:36:44.77,Default,,0,0,0,,follow its mantra, that
Dialogue: 0,0:36:44.77,0:36:46.38,Default,,0,0,0,,undefined behavior is the enemy
Dialogue: 0,0:36:46.38,0:36:47.55,Default,,0,0,0,,of safety and implement
Dialogue: 0,0:36:47.55,0:36:49.25,Default,,0,0,0,,solutions in the language that
Dialogue: 0,0:36:49.28,0:36:50.98,Default,,0,0,0,,provide stronger guarantees.
Dialogue: 0,0:36:51.46,0:36:54.51,Default,,0,0,0,,Coming up with the right
Dialogue: 0,0:36:54.51,0:36:55.74,Default,,0,0,0,,solution here is a balancing
Dialogue: 0,0:36:55.74,0:36:55.99,Default,,0,0,0,,act.
Dialogue: 0,0:36:56.44,0:36:58.04,Default,,0,0,0,,It's best to diagnose everything
Dialogue: 0,0:36:58.04,0:37:00.16,Default,,0,0,0,,statically but often that's not
Dialogue: 0,0:37:00.16,0:37:01.61,Default,,0,0,0,,possible without making the type
Dialogue: 0,0:37:01.61,0:37:03.44,Default,,0,0,0,,system too difficult to use.
Dialogue: 0,0:37:04.13,0:37:05.51,Default,,0,0,0,,Another solution are Runtime
Dialogue: 0,0:37:05.51,0:37:05.98,Default,,0,0,0,,checks.
Dialogue: 0,0:37:05.98,0:37:07.99,Default,,0,0,0,,However, the language Runtime
Dialogue: 0,0:37:07.99,0:37:09.15,Default,,0,0,0,,has to be performant.
Dialogue: 0,0:37:09.72,0:37:10.84,Default,,0,0,0,,And efficient.
Dialogue: 0,0:37:10.98,0:37:12.58,Default,,0,0,0,,And the overhead of any extra
Dialogue: 0,0:37:12.58,0:37:13.91,Default,,0,0,0,,checking cannot be too high.
Dialogue: 0,0:37:14.45,0:37:17.37,Default,,0,0,0,,So, the solution that the SWF
Dialogue: 0,0:37:17.37,0:37:19.63,Default,,0,0,0,,Project came up with consists of
Dialogue: 0,0:37:19.76,0:37:20.99,Default,,0,0,0,,tightening the language to
Dialogue: 0,0:37:20.99,0:37:22.88,Default,,0,0,0,,follow a slightly stricter rule
Dialogue: 0,0:37:23.58,0:37:24.86,Default,,0,0,0,,and using a combination of
Dialogue: 0,0:37:24.86,0:37:27.18,Default,,0,0,0,,static and dynamic checks to
Dialogue: 0,0:37:27.18,0:37:29.88,Default,,0,0,0,,ensure that unintended sharing
Dialogue: 0,0:37:29.88,0:37:31.44,Default,,0,0,0,,does not happen within the same
Dialogue: 0,0:37:31.87,0:37:32.00,Default,,0,0,0,,thread.
Dialogue: 0,0:37:34.30,0:37:35.67,Default,,0,0,0,,Unfortunately, checking for
Dialogue: 0,0:37:35.67,0:37:37.61,Default,,0,0,0,,exclusivity of accesses across
Dialogue: 0,0:37:37.61,0:37:39.57,Default,,0,0,0,,threads is too expensive.
Dialogue: 0,0:37:40.15,0:37:41.28,Default,,0,0,0,,And the tradeoff that was made
Dialogue: 0,0:37:41.28,0:37:43.20,Default,,0,0,0,,here was to rely on tools,
Dialogue: 0,0:37:43.59,0:37:45.12,Default,,0,0,0,,specifically Thread Sanitizer,
Dialogue: 0,0:37:45.40,0:37:47.31,Default,,0,0,0,,to catch violations involving
Dialogue: 0,0:37:47.31,0:37:50.33,Default,,0,0,0,,accesses from multiple threads.
Dialogue: 0,0:37:50.50,0:37:51.74,Default,,0,0,0,,In general, using Thread
Dialogue: 0,0:37:51.74,0:37:53.37,Default,,0,0,0,,Sanitizer is very beneficial for
Dialogue: 0,0:37:53.37,0:37:55.35,Default,,0,0,0,,your SWF code because data races
Dialogue: 0,0:37:55.35,0:37:57.69,Default,,0,0,0,,and access races are undefined
Dialogue: 0,0:37:57.69,0:37:59.41,Default,,0,0,0,,behavior in SWF and they could
Dialogue: 0,0:37:59.41,0:38:00.60,Default,,0,0,0,,lead to memory corruptions.
Dialogue: 0,0:38:01.20,0:38:02.85,Default,,0,0,0,,For more information about this
Dialogue: 0,0:38:02.85,0:38:05.11,Default,,0,0,0,,tool, watch the Finding Bugs
Dialogue: 0,0:38:05.32,0:38:06.99,Default,,0,0,0,,Using Xcode Runtime Tools talk.
Dialogue: 0,0:38:07.39,0:38:10.63,Default,,0,0,0,,Now, safety is a design choice
Dialogue: 0,0:38:10.63,0:38:11.16,Default,,0,0,0,,in SWF.
Dialogue: 0,0:38:11.40,0:38:12.72,Default,,0,0,0,,The language provides many
Dialogue: 0,0:38:12.72,0:38:14.43,Default,,0,0,0,,solutions to avoid undefined
Dialogue: 0,0:38:14.43,0:38:16.47,Default,,0,0,0,,behavior and prevent developers
Dialogue: 0,0:38:16.47,0:38:18.84,Default,,0,0,0,,from introducing subtle and
Dialogue: 0,0:38:18.84,0:38:19.91,Default,,0,0,0,,exploitable bugs.
Dialogue: 0,0:38:20.60,0:38:24.27,Default,,0,0,0,,Today we talked about undefined
Dialogue: 0,0:38:24.27,0:38:25.91,Default,,0,0,0,,behavior and how different
Dialogue: 0,0:38:25.91,0:38:26.99,Default,,0,0,0,,languages approach it.
Dialogue: 0,0:38:27.54,0:38:29.87,Default,,0,0,0,,C languages use undefined
Dialogue: 0,0:38:30.04,0:38:31.92,Default,,0,0,0,,behavior for portability and
Dialogue: 0,0:38:31.92,0:38:32.81,Default,,0,0,0,,optimizations.
Dialogue: 0,0:38:33.44,0:38:34.74,Default,,0,0,0,,However, we've seen that that
Dialogue: 0,0:38:34.74,0:38:36.49,Default,,0,0,0,,could lead to very subtle and
Dialogue: 0,0:38:36.49,0:38:38.31,Default,,0,0,0,,hard to debug bugs and even
Dialogue: 0,0:38:38.31,0:38:39.81,Default,,0,0,0,,introduce security exploits.
Dialogue: 0,0:38:40.37,0:38:42.39,Default,,0,0,0,,SWF chose to follow a different
Dialogue: 0,0:38:42.61,0:38:44.12,Default,,0,0,0,,path and was designed to be
Dialogue: 0,0:38:44.12,0:38:45.18,Default,,0,0,0,,safer by default.
Dialogue: 0,0:38:46.60,0:38:48.04,Default,,0,0,0,,Finally, regardless of your
Dialogue: 0,0:38:48.04,0:38:49.65,Default,,0,0,0,,language of choice, use all the
Dialogue: 0,0:38:49.65,0:38:51.16,Default,,0,0,0,,tools at your disposal as part
Dialogue: 0,0:38:51.16,0:38:52.52,Default,,0,0,0,,of your app release and testing
Dialogue: 0,0:38:52.52,0:38:52.95,Default,,0,0,0,,process.
Dialogue: 0,0:38:53.42,0:38:55.08,Default,,0,0,0,,That will make your apps more
Dialogue: 0,0:38:55.08,0:38:57.00,Default,,0,0,0,,secure and robust.
Dialogue: 0,0:39:00.09,0:39:01.14,Default,,0,0,0,,Here are some of the related
Dialogue: 0,0:39:01.14,0:39:02.23,Default,,0,0,0,,sessions that we've mentioned
Dialogue: 0,0:39:02.23,0:39:02.64,Default,,0,0,0,,today.
Dialogue: 0,0:39:03.18,0:39:04.90,Default,,0,0,0,,Thank you very much and enjoy
Dialogue: 0,0:39:04.90,0:39:06.66,Default,,0,0,0,,the rest of your day.
Dialogue: 0,0:39:07.52,0:39:10.50,Default,,0,0,0,,[ Applause ]
