1
00:00:27,556 --> 00:00:28,596
>> 大家下午好

2
00:00:28,676 --> 00:00:30,416
欢迎参加 220 主题会议

3
00:00:30,416 --> 00:00:32,746
WKWebView 中的自定义加载

4
00:00:33,706 --> 00:00:34,806
我是 Brady Eidson

5
00:00:34,806 --> 00:00:36,376
Apple 团队的

6
00:00:36,376 --> 00:00:37,636
一名软件工程师

7
00:00:37,636 --> 00:00:38,986
稍后我的同事

8
00:00:38,986 --> 00:00:40,686
Alex Christensen 会和我一起

9
00:00:40,686 --> 00:00:41,216
向大家介绍

10
00:00:41,746 --> 00:00:43,546
现在我想问一个

11
00:00:43,546 --> 00:00:44,216
很简短的问题

12
00:00:44,376 --> 00:00:46,456
在座有多少人会

13
00:00:46,456 --> 00:00:47,966
把网页内容集成到自己的手机应用里

14
00:00:48,476 --> 00:00:50,566
今天大家可能都

15
00:00:50,566 --> 00:00:50,876
来对了

16
00:00:51,876 --> 00:00:52,986
接下来的问题是

17
00:00:52,986 --> 00:00:54,236
在座各位有多少人使用过

18
00:00:54,236 --> 00:00:56,236
WKWebView 来集成网页

19
00:00:56,236 --> 00:00:56,676
内容呢

20
00:00:57,386 --> 00:00:58,546
举手的人少了

21
00:00:58,546 --> 00:00:59,436
不过还是蛮多的

22
00:00:59,656 --> 00:01:02,046
我的内心非常激动 想和大家

23
00:01:02,046 --> 00:01:03,856
聊一聊 WKWebView 里一些

24
00:01:03,856 --> 00:01:05,786
精彩 全新的 API 所有正在使用

25
00:01:05,786 --> 00:01:07,036
WKWebView 的人  将会由此而完成一些

26
00:01:07,036 --> 00:01:09,106
炫酷新奇的事情  我们还希望能够

27
00:01:09,106 --> 00:01:11,566
帮助在座的其他人

28
00:01:11,566 --> 00:01:13,286
接受并使用

29
00:01:13,286 --> 00:01:13,986
WKWebView

30
00:01:16,806 --> 00:01:19,666
Apple 是网络技术的

31
00:01:19,666 --> 00:01:20,506
忠实信徒

32
00:01:20,986 --> 00:01:23,076
我们知道网络技术对我们的开发者

33
00:01:23,076 --> 00:01:25,396
我们的用户以及你们的用户而言

34
00:01:25,506 --> 00:01:26,656
有多么重要

35
00:01:27,196 --> 00:01:29,206
我们拥有许多不同的技术

36
00:01:29,206 --> 00:01:30,866
你可以通过它们

37
00:01:30,866 --> 00:01:32,206
把网页内容集成到你的

38
00:01:32,206 --> 00:01:32,746
App 里

39
00:01:33,886 --> 00:01:35,556
今天的主要介绍内容是

40
00:01:35,556 --> 00:01:38,006
WKWebView 但我想简单地

41
00:01:38,006 --> 00:01:39,946
谈谈另一个内容 那就是

42
00:01:39,946 --> 00:01:41,516
Safari View Controller

43
00:01:42,606 --> 00:01:45,036
如果你需要一种 App 内网页

44
00:01:45,036 --> 00:01:47,516
浏览体验 那么到目前为止

45
00:01:47,516 --> 00:01:48,936
Safari View Controller 是

46
00:01:48,936 --> 00:01:50,216
你的最佳选择

47
00:01:51,516 --> 00:01:53,216
你只需使用几行代码

48
00:01:53,506 --> 00:01:55,316
就可以把强大的

49
00:01:55,316 --> 00:01:57,356
安全网页浏览器集成到

50
00:01:57,536 --> 00:01:57,816
你的 App 当中

51
00:01:58,266 --> 00:01:59,346
你甚至无需担心

52
00:01:59,346 --> 00:02:00,266
增添用户界面的问题

53
00:02:00,896 --> 00:02:05,096
然而在用户界面之下 就是

54
00:02:05,096 --> 00:02:05,536
网页内容

55
00:02:06,236 --> 00:02:08,955
在座许多人会有更高层次的需求

56
00:02:08,955 --> 00:02:10,866
而不是通过平淡无奇的

57
00:02:10,866 --> 00:02:12,456
网页浏览体验

58
00:02:12,456 --> 00:02:12,946
就能满足

59
00:02:13,866 --> 00:02:16,596
你们需要自定义

60
00:02:16,596 --> 00:02:19,426
网页内容的加载行为

61
00:02:19,426 --> 00:02:22,146
它的渲染方式

62
00:02:22,406 --> 00:02:24,916
以及它如何与你的本地用户界面

63
00:02:24,916 --> 00:02:25,736
进行交互

64
00:02:26,436 --> 00:02:29,066
事实上 很多人可能是

65
00:02:29,116 --> 00:02:31,056
采用了某种方式

66
00:02:31,056 --> 00:02:32,536
把网页内容集成到你的本地用户界面里

67
00:02:32,536 --> 00:02:33,916
以致于你根本看不出

68
00:02:33,916 --> 00:02:35,646
是在使用网页内容

69
00:02:39,276 --> 00:02:43,036
如果你是这种人 那么

70
00:02:43,466 --> 00:02:46,636
目前为止 WKWebView 将是

71
00:02:46,636 --> 00:02:46,856
你的最佳选择

72
00:02:46,856 --> 00:02:50,246
现在我想要简单说说

73
00:02:50,246 --> 00:02:51,576
WKWebView 的架构

74
00:02:52,746 --> 00:02:54,666
当你使用 WKWebView

75
00:02:54,666 --> 00:02:56,096
把网页集成到 App 当中时

76
00:02:56,096 --> 00:02:59,556
实际上你是在向 App 里引入

77
00:02:59,556 --> 00:03:01,376
整个网页平台

78
00:03:01,376 --> 00:03:03,736
包括它的所有功能

79
00:03:03,736 --> 00:03:05,636
所有的灵活性  以及

80
00:03:05,866 --> 00:03:07,806
所有的复杂性

81
00:03:09,596 --> 00:03:12,076
所以说  WKWebView 用我们了解到的

82
00:03:12,076 --> 00:03:14,106
最好的办法  把你的 App 和这种复杂性

83
00:03:14,416 --> 00:03:15,716
隔离开来

84
00:03:16,296 --> 00:03:18,996
它用进程隔离来完成

85
00:03:18,996 --> 00:03:19,706
这项操作

86
00:03:20,406 --> 00:03:22,366
我们加载网页内容

87
00:03:22,366 --> 00:03:23,576
对它进行渲染  并执行

88
00:03:23,576 --> 00:03:25,176
JavaScript 这类东西

89
00:03:25,436 --> 00:03:27,396
它和你的 App 进程

90
00:03:27,396 --> 00:03:28,546
各自运行 互不重叠

91
00:03:29,866 --> 00:03:31,416
这给我们在安全性方面

92
00:03:31,516 --> 00:03:32,716
带来了一些极大的好处

93
00:03:33,286 --> 00:03:35,166
我们可以保护你的 App

94
00:03:35,446 --> 00:03:37,016
免受潜在恶意网页内容的

95
00:03:37,016 --> 00:03:37,496
损害

96
00:03:38,026 --> 00:03:40,426
事实上 网页内容的不同部分

97
00:03:40,426 --> 00:03:41,876
可以在各自的网页进程中

98
00:03:41,876 --> 00:03:43,286
独立运行

99
00:03:43,836 --> 00:03:45,596
因此 我们可以保护你的可信网页

100
00:03:45,596 --> 00:03:47,156
免遭其他潜在

101
00:03:47,156 --> 00:03:48,296
恶意网页的

102
00:03:48,296 --> 00:03:48,696
攻击

103
00:03:50,136 --> 00:03:51,836
这也带来了一些巨大的

104
00:03:51,956 --> 00:03:53,296
性能优势

105
00:03:53,536 --> 00:03:54,626
因为有安全保障

106
00:03:54,856 --> 00:03:55,766
网页内容就可以

107
00:03:55,766 --> 00:03:57,276
与你的 App 同时运行

108
00:03:57,276 --> 00:03:59,296
我们可以启用高级的

109
00:03:59,296 --> 00:04:00,716
JavaScript Just-In-Time

110
00:04:00,716 --> 00:04:01,266
编译器

111
00:04:01,806 --> 00:04:05,376
但是 由于所有这些都是

112
00:04:05,376 --> 00:04:06,856
在一个独立进程中展开

113
00:04:07,336 --> 00:04:08,876
因此 你在配置流程时

114
00:04:09,086 --> 00:04:11,626
采用的常规步骤

115
00:04:11,626 --> 00:04:13,166
并不适用于网页内容

116
00:04:13,796 --> 00:04:15,896
我们需要显式 API 与

117
00:04:15,896 --> 00:04:17,426
网页内容进行交互

118
00:04:18,766 --> 00:04:20,005
自从我们推出

119
00:04:20,005 --> 00:04:22,286
WKWebView 就一直在收集

120
00:04:22,286 --> 00:04:23,946
各式各样的开发者

121
00:04:23,946 --> 00:04:25,476
关于各种 App 开发的

122
00:04:25,476 --> 00:04:26,266
反馈信息

123
00:04:27,136 --> 00:04:29,596
我们已经整理出一份清单

124
00:04:29,596 --> 00:04:31,516
上面有我们今天将介绍的

125
00:04:31,516 --> 00:04:32,396
三项最重要内容

126
00:04:32,396 --> 00:04:34,336
我们认为这三个新机制

127
00:04:34,336 --> 00:04:36,996
将能充分发挥

128
00:04:36,996 --> 00:04:38,376
你们一直以来要求的

129
00:04:38,576 --> 00:04:39,676
极为强大的

130
00:04:39,676 --> 00:04:39,876
功能

131
00:04:43,046 --> 00:04:44,326
我们首先要介绍的是

132
00:04:44,326 --> 00:04:46,236
如何管理对于 WKWebView

133
00:04:46,346 --> 00:04:48,626
可见的 Cookie

134
00:04:48,626 --> 00:04:52,676
我们还将介绍一种

135
00:04:52,676 --> 00:04:53,876
非常棒的机制

136
00:04:53,876 --> 00:04:56,956
它可以从你的 WebView 里过滤

137
00:04:57,016 --> 00:04:57,706
不需要的内容

138
00:04:58,106 --> 00:05:02,466
最后 给大家介绍一种

139
00:05:02,466 --> 00:05:04,566
能为网页内容提供自定义资源的方法

140
00:05:04,566 --> 00:05:07,286
这样的话  无论你从哪里获得

141
00:05:07,286 --> 00:05:08,396
这些自定义资源的数据

142
00:05:08,396 --> 00:05:09,016
都能派上用场

143
00:05:09,016 --> 00:05:10,236
无论数据

144
00:05:10,236 --> 00:05:10,656
来自哪里

145
00:05:11,196 --> 00:05:15,516
那么 首先来说说 Cookie 管理

146
00:05:16,036 --> 00:05:18,536
事实上 我们知道有许多

147
00:05:18,836 --> 00:05:20,396
初次涉入 WKWebView

148
00:05:20,396 --> 00:05:22,256
这个领域的开发人员

149
00:05:22,436 --> 00:05:23,636
对网络平台

150
00:05:23,636 --> 00:05:24,116
很不熟悉

151
00:05:24,926 --> 00:05:25,976
所以我想简略介绍一下

152
00:05:26,146 --> 00:05:28,306
什么是 Cookie

153
00:05:28,816 --> 00:05:30,376
当某个网页在浏览器引擎中

154
00:05:30,376 --> 00:05:32,376
进行渲染时 会出现

155
00:05:32,376 --> 00:05:33,216
很多子资源

156
00:05:33,466 --> 00:05:36,236
如图片 JavaScript 文件

157
00:05:36,236 --> 00:05:38,086
样式表  诸如此类

158
00:05:38,496 --> 00:05:40,596
针对每一种子资源 我们都需要

159
00:05:40,596 --> 00:05:42,036
向服务器发出请求

160
00:05:42,226 --> 00:05:44,336
服务器需要响应

161
00:05:44,386 --> 00:05:46,546
资源本身的数据  以及

162
00:05:47,136 --> 00:05:48,366
与该资源有关的一些

163
00:05:48,366 --> 00:05:48,896
元数据

164
00:05:49,396 --> 00:05:51,576
这些请求和响应里

165
00:05:51,576 --> 00:05:53,216
都包含一小段数据

166
00:05:53,216 --> 00:05:54,226
称为 Cookie

167
00:05:55,416 --> 00:05:56,676
服务器将使用浏览器所记忆

168
00:05:56,676 --> 00:05:58,406
的 Cookie 进行响应

169
00:05:58,406 --> 00:06:00,386
并且能够在将来的请求中

170
00:06:00,386 --> 00:06:01,626
将其发送回

171
00:06:01,626 --> 00:06:02,326
服务器

172
00:06:03,206 --> 00:06:04,856
这有助于追踪用户

173
00:06:04,856 --> 00:06:06,286
在使用网络 App 时的

174
00:06:06,286 --> 00:06:06,976
会话

175
00:06:07,646 --> 00:06:09,726
这就像是他们登录时的

176
00:06:09,726 --> 00:06:10,316
凭据

177
00:06:10,316 --> 00:06:12,016
他们的登录状态

178
00:06:12,016 --> 00:06:12,516
一种登录令牌

179
00:06:13,056 --> 00:06:14,636
或者 如果是一个购物 App

180
00:06:14,636 --> 00:06:17,006
它可能会记录

181
00:06:17,006 --> 00:06:18,166
用户购物车的状态和

182
00:06:18,166 --> 00:06:20,466
其中的商品

183
00:06:20,966 --> 00:06:22,066
当你把网页内容集成

184
00:06:22,066 --> 00:06:23,226
到本地 App 时

185
00:06:23,226 --> 00:06:26,146
你经常需要操纵

186
00:06:26,146 --> 00:06:27,636
这些小片段数据

187
00:06:28,876 --> 00:06:31,096
你需要提前知道

188
00:06:31,096 --> 00:06:32,976
一些信息 这样有助于

189
00:06:32,976 --> 00:06:33,436
提示 WebView 做好准备

190
00:06:33,436 --> 00:06:35,736
让体验变得更为流畅

191
00:06:35,736 --> 00:06:38,576
你可能需要执行某项操作

192
00:06:38,576 --> 00:06:40,316
例如添加“注销”按钮

193
00:06:40,316 --> 00:06:41,496
这样你可以直接删除

194
00:06:41,496 --> 00:06:43,186
会话的 Cookie  或者是

195
00:06:43,186 --> 00:06:45,036
代表用户登录会话

196
00:06:45,036 --> 00:06:46,056
的 Cookie

197
00:06:47,616 --> 00:06:49,796
为什么你可能会需要

198
00:06:49,866 --> 00:06:51,686
管理 Cookie

199
00:06:51,686 --> 00:06:53,456
这个问题  还有另一方面的原因

200
00:06:53,456 --> 00:06:54,976
它与辅助会话进程

201
00:06:54,976 --> 00:06:55,746
正好相反

202
00:06:56,046 --> 00:06:57,516
你也许需要对用户进行保护

203
00:06:57,576 --> 00:06:59,376
不让他们的会话

204
00:06:59,376 --> 00:07:02,426
被某些类型的 App 或者是某些用户

205
00:07:02,426 --> 00:07:03,876
进行追踪

206
00:07:03,876 --> 00:07:05,586
近期以来

207
00:07:05,586 --> 00:07:07,336
这个问题

208
00:07:07,336 --> 00:07:09,106
越来越引起人们的重视

209
00:07:10,396 --> 00:07:12,216
因此 无论你出于何种原因

210
00:07:12,216 --> 00:07:13,606
要操纵某个 WKWebView 可见的

211
00:07:13,606 --> 00:07:15,786
Cookie  这个全新的 API

212
00:07:15,786 --> 00:07:19,096
WKHTTPCookieStore 它将会满足

213
00:07:19,096 --> 00:07:21,496
你的相关需求

214
00:07:22,316 --> 00:07:25,036
使用 HTTPCookieStore 你就

215
00:07:25,076 --> 00:07:26,876
可以添加和移除

216
00:07:26,876 --> 00:07:28,376
WebView 可见的个人 Cookie 记录

217
00:07:29,716 --> 00:07:32,676
非常直观明了

218
00:07:32,676 --> 00:07:35,226
你也能够获取一份列表

219
00:07:35,226 --> 00:07:36,546
列出 WebView 里可见的

220
00:07:36,546 --> 00:07:36,806
所有 Cookie

221
00:07:36,806 --> 00:07:39,096
如果你是一名经验丰富的

222
00:07:39,576 --> 00:07:41,776
WKWebView 用户 你可能已经

223
00:07:41,776 --> 00:07:43,526
使用 JavaScript 获取过

224
00:07:43,526 --> 00:07:46,256
某个 WebView 在当前展示的文档

225
00:07:46,256 --> 00:07:48,036
可见的 Cookie

226
00:07:49,066 --> 00:07:50,196
可是当你这样操作时 你并不能

227
00:07:50,196 --> 00:07:52,736
控制应该对 JavaScript

228
00:07:52,886 --> 00:07:53,706
进行隐藏  属性为

229
00:07:53,706 --> 00:07:54,456
HttpOnly 的 Cookie

230
00:07:55,216 --> 00:07:56,376
但现在就可以办到了

231
00:07:56,676 --> 00:08:00,926
最后 它为大家增添了

232
00:08:00,926 --> 00:08:02,566
一种机制 可用于观察

233
00:08:02,566 --> 00:08:03,846
Cookie 存储的变化

234
00:08:04,586 --> 00:08:06,076
虽然你可能会特意

235
00:08:06,076 --> 00:08:07,996
从 Cookie 存储里添加或移除 Cookie

236
00:08:07,996 --> 00:08:10,216
但是  任何发送给服务器

237
00:08:10,216 --> 00:08:11,536
并返回的资源请求

238
00:08:11,536 --> 00:08:13,066
都可以在存储里添加新的 Cookie

239
00:08:13,066 --> 00:08:15,046
或者是在页面执行的JavaScript

240
00:08:15,046 --> 00:08:16,706
也可以添加

241
00:08:16,836 --> 00:08:17,936
新的 Cookie

242
00:08:18,276 --> 00:08:20,156
现在你可以观察到这些

243
00:08:20,156 --> 00:08:20,706
变化

244
00:08:22,626 --> 00:08:24,896
所以说 你可以通过 WKWebView Cookie 的

245
00:08:24,896 --> 00:08:27,276
网址数据库

246
00:08:27,276 --> 00:08:28,636
进入它某个具体的存储库

247
00:08:29,286 --> 00:08:30,466
这已经是 WebView

248
00:08:30,466 --> 00:08:31,826
配置中展现的一种

249
00:08:31,826 --> 00:08:32,626
属性

250
00:08:32,926 --> 00:08:34,326
目前来看  网址数据库

251
00:08:34,326 --> 00:08:35,966
自身已经拥有一种连接

252
00:08:35,966 --> 00:08:36,635
Cookie 存储库的新属性

253
00:08:36,635 --> 00:08:42,025
你如果要添加 Cookie 就使用

254
00:08:42,025 --> 00:08:44,145
已经设计好的 HTTPCookie API

255
00:08:44,145 --> 00:08:46,316
来构建自己想要放入

256
00:08:46,316 --> 00:08:47,596
数据库的

257
00:08:47,596 --> 00:08:48,106
Cookie 对象

258
00:08:48,896 --> 00:08:52,376
这些具体细节取决于

259
00:08:52,376 --> 00:08:53,986
你自己 以及你正在交互的

260
00:08:53,986 --> 00:08:56,166
网络服务 不过  一旦你

261
00:08:56,166 --> 00:08:57,176
设置好 Cookie

262
00:08:57,176 --> 00:08:59,706
并且准备运行 你将从

263
00:08:59,736 --> 00:09:00,956
存有你自己 Cookie 的 Cookie 存储器里

264
00:09:00,996 --> 00:09:01,396
调用 Set-Cookie

265
00:09:02,506 --> 00:09:03,416
现在你将看到  这里是

266
00:09:03,416 --> 00:09:04,526
你的尾随闭包

267
00:09:04,526 --> 00:09:05,436
一个 Completion Handler

268
00:09:05,906 --> 00:09:08,316
这个进程是不同步的

269
00:09:08,316 --> 00:09:09,736
它需要向外发送给

270
00:09:09,736 --> 00:09:12,106
WKWebView 机制所包含

271
00:09:12,106 --> 00:09:14,516
且与你的 App 相隔离的

272
00:09:14,516 --> 00:09:15,916
所有进程

273
00:09:16,106 --> 00:09:18,146
所以你需要等到 WebKit

274
00:09:18,146 --> 00:09:19,696
来判定这一切都已

275
00:09:19,696 --> 00:09:20,096
准备就绪

276
00:09:20,096 --> 00:09:21,966
你可以对你的

277
00:09:21,966 --> 00:09:23,716
Completion Handler 保持信心

278
00:09:23,716 --> 00:09:25,016
相信你在 WebView 里加载的

279
00:09:25,356 --> 00:09:26,866
任何请求都会使用到这个 Cookie

280
00:09:30,176 --> 00:09:31,546
如果你需要操纵

281
00:09:31,546 --> 00:09:33,776
现有的 Cookie 你可以获取到

282
00:09:33,776 --> 00:09:34,956
所有 Cookie 的集合

283
00:09:36,006 --> 00:09:37,156
再说一次 在你的 Completion Handler 中

284
00:09:37,156 --> 00:09:38,586
你将拥有一组 Cookie

285
00:09:38,586 --> 00:09:39,676
你可以做些尝试

286
00:09:39,676 --> 00:09:40,796
并找到那个最合适的

287
00:09:41,386 --> 00:09:42,616
在这个示例中  我们

288
00:09:42,806 --> 00:09:44,386
要通过在 Cookie 里

289
00:09:44,386 --> 00:09:45,756
查找日志来注销用户

290
00:09:46,286 --> 00:09:49,336
然后我们会调用删除

291
00:09:49,336 --> 00:09:50,136
把那条 Cookie 处理掉

292
00:09:50,986 --> 00:09:52,166
再次说明 在我们的 Compleition Handler 中

293
00:09:52,166 --> 00:09:53,896
我们将发现  今后出现在 WebView 里的

294
00:09:53,896 --> 00:09:55,116
任何请求都将会

295
00:09:55,356 --> 00:09:56,516
移除这个 Cookie

296
00:09:56,906 --> 00:09:58,286
这些是使用

297
00:09:58,286 --> 00:10:00,016
WKHTTPCookieStore 来管理 Cookie的

298
00:10:00,066 --> 00:10:01,496
基础知识

299
00:10:02,086 --> 00:10:03,376
稍后我们将了解更多

300
00:10:03,376 --> 00:10:04,936
与之相关的信息

301
00:10:04,936 --> 00:10:07,476
下面我想接着介绍 如何过滤

302
00:10:08,836 --> 00:10:09,086
不需要的内容

303
00:10:10,126 --> 00:10:11,786
当你在 WebView HTML 文件里

304
00:10:11,786 --> 00:10:13,656
加载页面时

305
00:10:14,436 --> 00:10:15,776
所有那些子资源都会

306
00:10:15,926 --> 00:10:17,016
一同加载 我在前面提到过

307
00:10:17,016 --> 00:10:17,446
这一点

308
00:10:18,566 --> 00:10:20,106
有许许多多的原因

309
00:10:20,106 --> 00:10:21,566
使得你需要

310
00:10:21,566 --> 00:10:23,956
以资源为基础

311
00:10:23,956 --> 00:10:25,216
来进行考虑 从而决定是否

312
00:10:25,216 --> 00:10:27,216
应该加载某个资源

313
00:10:27,216 --> 00:10:28,286
或者是改变资源加载的

314
00:10:28,286 --> 00:10:28,676
方式

315
00:10:29,226 --> 00:10:31,596
我们从开发人员那里

316
00:10:31,596 --> 00:10:33,496
经常听到的情况是

317
00:10:33,496 --> 00:10:36,076
他们正在创建一种浏览器  适用对象是学校

318
00:10:36,076 --> 00:10:37,756
图书馆  以及其他公共场所

319
00:10:37,756 --> 00:10:40,586
那些地方的浏览器

320
00:10:40,586 --> 00:10:41,886
加载的内容必须是

321
00:10:41,886 --> 00:10:42,316
老少皆宜的

322
00:10:42,616 --> 00:10:43,786
因此我们需要过滤掉

323
00:10:43,786 --> 00:10:45,466
所有不适合全家人使用的

324
00:10:45,466 --> 00:10:45,796
内容

325
00:10:46,316 --> 00:10:50,206
从另一个类似的渠道 我们还从

326
00:10:50,206 --> 00:10:51,156
设计企业局域网 App 的

327
00:10:51,156 --> 00:10:52,896
开发人员那里得知

328
00:10:53,336 --> 00:10:54,596
他们在同一款 App 里

329
00:10:54,596 --> 00:10:55,476
有不同的需求

330
00:10:55,556 --> 00:10:57,576
某一个 WebView 可能

331
00:10:57,576 --> 00:10:59,506
需要拦截所有来自

332
00:10:59,506 --> 00:11:00,596
公司网络以外的内容

333
00:11:01,036 --> 00:11:02,266
另一个 WebView 可能需要

334
00:11:02,266 --> 00:11:04,326
拦截来自某些特定服务器的

335
00:11:04,446 --> 00:11:05,996
所有内容

336
00:11:06,486 --> 00:11:07,936
你可以对每个 WebView 进行设置

337
00:11:08,296 --> 00:11:10,976
使它在每个子资源的基础上

338
00:11:10,976 --> 00:11:11,866
完成自己的工作

339
00:11:15,536 --> 00:11:16,866
此外还有不安全的

340
00:11:16,866 --> 00:11:17,356
内容

341
00:11:17,966 --> 00:11:19,396
我们可以对它进行升级  尽全力达到

342
00:11:19,396 --> 00:11:21,306
最佳安全度

343
00:11:21,716 --> 00:11:23,446
这样可以保证

344
00:11:23,446 --> 00:11:25,266
我们用户的数据、浏览行为

345
00:11:25,426 --> 00:11:26,896
以及我们 App 的浏览行为

346
00:11:27,436 --> 00:11:28,836
免受他人窥探

347
00:11:32,116 --> 00:11:35,526
因此  全新的 WKContentRuleList API

348
00:11:35,526 --> 00:11:37,986
将帮助你实现所有

349
00:11:39,956 --> 00:11:40,086
这些事情

350
00:11:40,286 --> 00:11:42,386
好 如果你熟悉

351
00:11:42,986 --> 00:11:44,916
Safari 的内容拦截扩展

352
00:11:44,966 --> 00:11:47,076
你可以在此提供一条

353
00:11:47,076 --> 00:11:49,676
用来配置 Safari  让它

354
00:11:49,676 --> 00:11:51,326
能够阻止某些资源的加载

355
00:11:52,226 --> 00:11:54,766
ContentRuleList 与

356
00:11:54,866 --> 00:11:56,536
那些内容拦截程序扩展的

357
00:11:56,536 --> 00:11:57,126
句法相同

358
00:11:57,526 --> 00:12:01,276
使用它们 你可以

359
00:12:01,396 --> 00:12:04,406
通过以下方式阻止

360
00:12:04,666 --> 00:12:06,636
特定的资源加载 例如

361
00:12:06,636 --> 00:12:07,876
将资源的 URL 与正则表达式

362
00:12:07,876 --> 00:12:08,396
进行匹配

363
00:12:08,686 --> 00:12:10,016
你或许可以提前告诉 WebKit

364
00:12:10,016 --> 00:12:11,706
绝不要加载这样的

365
00:12:11,926 --> 00:12:12,886
URL

366
00:12:13,236 --> 00:12:17,436
在某些情况下  如果你一古脑儿地拦截了

367
00:12:17,436 --> 00:12:19,176
所有的资源  那么你就

368
00:12:19,176 --> 00:12:21,246
可以用含蓄的方式

369
00:12:21,346 --> 00:12:22,906
有时可以用直白的方式

370
00:12:23,466 --> 00:12:25,296
因此有一个规则操作

371
00:12:25,296 --> 00:12:26,716
你可以让 Webkit 执行加载

372
00:12:26,716 --> 00:12:28,386
但要让生成的内容

373
00:12:28,386 --> 00:12:29,576
对用户不可见

374
00:12:29,976 --> 00:12:34,926
这样到最后我们就可以将

375
00:12:34,926 --> 00:12:37,356
那些不安全的资源加载

376
00:12:37,356 --> 00:12:38,396
升级为安全的加载

377
00:12:39,126 --> 00:12:40,216
这有两种重要的

378
00:12:40,216 --> 00:12:40,726
形式

379
00:12:40,896 --> 00:12:45,156
一种是你遇到的任何 HTTP

380
00:12:45,646 --> 00:12:47,446
纯文本 URL  你可以把它

381
00:12:47,446 --> 00:12:49,306
升级为加密的

382
00:12:49,306 --> 00:12:50,196
HTTP URL

383
00:12:51,336 --> 00:12:54,146
你也可以阻止 Cookie

384
00:12:54,446 --> 00:12:56,156
让它们无法和某些请求一起

385
00:12:56,156 --> 00:12:56,876
向外发送

386
00:12:57,336 --> 00:12:58,576
如果请求的资源具有

387
00:12:58,576 --> 00:13:01,026
敏感内容 那么

388
00:13:01,156 --> 00:13:03,526
你可以对用户的数据和

389
00:13:03,526 --> 00:13:05,116
会话进行保护  以免它们

390
00:13:05,116 --> 00:13:06,216
随着这些请求而泄漏

391
00:13:08,516 --> 00:13:11,646
当你向 WebKit 提供规则列表时

392
00:13:11,646 --> 00:13:14,886
WebKit 会把它编译成

393
00:13:15,096 --> 00:13:16,846
有效的字节码格式

394
00:13:17,066 --> 00:13:19,336
这是一种执行细节

395
00:13:19,336 --> 00:13:21,166
它与你并没有

396
00:13:21,166 --> 00:13:22,506
直接的关联

397
00:13:22,726 --> 00:13:25,126
我之所以提到它  是因为

398
00:13:25,126 --> 00:13:26,636
我想向大家保证

399
00:13:26,636 --> 00:13:28,666
无论是一个内容规则列表

400
00:13:28,756 --> 00:13:31,626
还是数千条规则形成的巨大集合

401
00:13:31,626 --> 00:13:32,966
我们都投入了大量时间精力

402
00:13:32,966 --> 00:13:33,986
从而让事情

403
00:13:34,326 --> 00:13:35,496
尽可能地高效运行

404
00:13:35,496 --> 00:13:36,976
无论你的规则集

405
00:13:36,976 --> 00:13:38,636
有多么庞大 只要它编译成功

406
00:13:38,636 --> 00:13:40,666
你就能看到

407
00:13:40,666 --> 00:13:41,866
它的加载性能

408
00:13:41,866 --> 00:13:42,546
不会出现降低

409
00:13:46,906 --> 00:13:49,106
你用简单的 JSON 格式

410
00:13:49,106 --> 00:13:51,066
来提供规则

411
00:13:52,196 --> 00:13:54,586
JSON 拥有好几对

412
00:13:55,146 --> 00:13:55,986
触发器和动作

413
00:13:56,746 --> 00:13:58,286
在大屏幕上的这个例子里

414
00:13:58,286 --> 00:14:01,456
这个触发器正在匹配

415
00:14:01,456 --> 00:14:03,376
一个 URL 这是 URL

416
00:14:03,476 --> 00:14:04,906
对于每一个 URL 来说

417
00:14:04,906 --> 00:14:05,946
这是一个正则表达式

418
00:14:06,356 --> 00:14:09,436
它表明所有 URL 都要执行

419
00:14:09,436 --> 00:14:11,566
生成 URL HTTP 的动作

420
00:14:12,286 --> 00:14:15,466
所以说这是一个普通而又

421
00:14:15,466 --> 00:14:17,996
重要的一揽子解决办法

422
00:14:17,996 --> 00:14:19,716
它把所有的纯文本请求

423
00:14:19,876 --> 00:14:22,866
升级为加密内容

424
00:14:23,196 --> 00:14:26,456
我不打算在这里

425
00:14:26,456 --> 00:14:27,936
讨论其他现有的动作

426
00:14:27,936 --> 00:14:30,926
和触发器  因为今天我

427
00:14:30,926 --> 00:14:31,996
想谈的事情还有很多

428
00:14:31,996 --> 00:14:33,826
但我们会给大家

429
00:14:33,826 --> 00:14:35,456
介绍一些资源

430
00:14:35,456 --> 00:14:37,586
以便全面获取

431
00:14:37,586 --> 00:14:39,126
你们可以得到的信息

432
00:14:40,696 --> 00:14:43,046
一旦你有了自己的 JSON 你要把它

433
00:14:43,046 --> 00:14:44,746
传送给相关的新 API

434
00:14:44,786 --> 00:14:47,486
也就是 KContentRuleListStore

435
00:14:47,486 --> 00:14:49,336
从而把它编译成有效的

436
00:14:49,336 --> 00:14:50,766
字节码格式

437
00:14:52,716 --> 00:14:54,556
现在请注意 有一个字符串

438
00:14:54,626 --> 00:14:56,086
标识符传送进来了

439
00:14:56,536 --> 00:14:58,146
现在要由你来决定

440
00:14:58,146 --> 00:14:59,896
字符串的性质

441
00:14:59,896 --> 00:15:01,636
要不了多久  它就要

442
00:15:02,166 --> 00:15:02,266
起作用了

443
00:15:04,456 --> 00:15:06,466
你将获得一个 Completion Handler

444
00:15:06,466 --> 00:15:07,556
当你通过 WKContentRuleList

445
00:15:07,556 --> 00:15:08,316
调用这个 Completion Handler时

446
00:15:08,316 --> 00:15:10,586
就可以用那个已经安装的规则列表

447
00:15:10,586 --> 00:15:11,916
来创建一个 WebView

448
00:15:11,916 --> 00:15:14,016
并开始加载内容

449
00:15:14,016 --> 00:15:16,246
--加载网页内容

450
00:15:16,246 --> 00:15:17,776
它可以滤除

451
00:15:17,776 --> 00:15:19,156
不需要的子资源

452
00:15:19,426 --> 00:15:22,756
标识符也是如此

453
00:15:23,746 --> 00:15:25,396
当我们通过 JSON  把一个规则列表

454
00:15:25,396 --> 00:15:27,176
编译为有效的字节码

455
00:15:27,176 --> 00:15:28,916
格式时  你可以给它命名

456
00:15:29,306 --> 00:15:31,286
然后你就可以使用

457
00:15:31,286 --> 00:15:33,126
同一标识符进行查找

458
00:15:33,126 --> 00:15:34,426
这样你就不用再重新编译它

459
00:15:34,656 --> 00:15:36,976
WebKit 把它存入设备的存储器

460
00:15:36,976 --> 00:15:39,546
这样它在以后就可以

461
00:15:39,546 --> 00:15:40,376
更快速地查找

462
00:15:40,876 --> 00:15:42,066
所以你可以-- 你只需要

463
00:15:42,066 --> 00:15:43,906
把某个规则集编译一次就可以了

464
00:15:44,256 --> 00:15:47,326
一旦你获得我刚才提到的

465
00:15:47,326 --> 00:15:50,486
WKContentRuleList

466
00:15:50,486 --> 00:15:51,756
就把它添加到

467
00:15:51,756 --> 00:15:53,946
WebView 配置中  那么现在

468
00:15:54,056 --> 00:15:54,716
你马上就可以运行它了

469
00:15:55,296 --> 00:15:57,306
我相信  没有什么

470
00:15:57,306 --> 00:15:59,096
比一场演示更能让你了解到全新API的

471
00:15:59,096 --> 00:16:00,346
炫酷功能

472
00:16:00,446 --> 00:16:01,936
所以我想邀请 Alex 上台

473
00:16:01,936 --> 00:16:03,406
为大家展示更多

474
00:16:03,406 --> 00:16:03,746
精彩

475
00:16:04,516 --> 00:16:09,996
[掌声]

476
00:16:10,496 --> 00:16:11,346
>> 谢谢 Brady

477
00:16:13,396 --> 00:16:16,646
我正在制作一款 App

478
00:16:16,646 --> 00:16:17,516
它是个教育类 App

479
00:16:17,896 --> 00:16:20,236
这款软件能使人们对

480
00:16:20,236 --> 00:16:22,456
某个主题有更多了解

481
00:16:23,226 --> 00:16:25,226
这个主题让我感到非常快乐

482
00:16:25,226 --> 00:16:26,566
就是狗

483
00:16:27,696 --> 00:16:30,706
那么  我的用户是需要

484
00:16:30,706 --> 00:16:31,796
在线阅读一些文章的

485
00:16:33,066 --> 00:16:34,916
他们要参加一个根据这些文章内容

486
00:16:34,916 --> 00:16:36,386
而设定的测验 然后将会

487
00:16:36,386 --> 00:16:38,376
获得一份证书

488
00:16:39,556 --> 00:16:41,396
因为我准备

489
00:16:41,396 --> 00:16:42,716
显示网页内容  还要把它们

490
00:16:42,716 --> 00:16:44,156
集成到我的 App 里面  所以我准备

491
00:16:44,156 --> 00:16:46,326
使用 WKWebView

492
00:16:53,456 --> 00:16:54,246
马上开始

493
00:16:55,086 --> 00:16:58,896
我们现在有一个非常简单的 App

494
00:16:58,896 --> 00:17:01,426
基本上不用做别的 只需要打开

495
00:17:01,516 --> 00:17:03,696
WKWebView  再在它里面打开

496
00:17:03,696 --> 00:17:05,526
网页内容

497
00:17:06,086 --> 00:17:08,006
让我们把它拿出来看看

498
00:17:08,006 --> 00:17:11,606
到底是什么样

499
00:17:11,766 --> 00:17:13,945
好了 这个 Web 服务检查了

500
00:17:14,596 --> 00:17:18,185
当前这个 Http 页头的

501
00:17:18,185 --> 00:17:21,685
一个 Cookie  以便显示

502
00:17:21,685 --> 00:17:25,076
这名学生是谁 如果没有 Cookie  的话

503
00:17:25,076 --> 00:17:27,406
它会继续把我们引领到

504
00:17:27,406 --> 00:17:28,415
一个登录界面

505
00:17:29,716 --> 00:17:32,576
然后我们可以点击这里

506
00:17:32,576 --> 00:17:33,086
登录

507
00:17:34,276 --> 00:17:37,596
我们可以登录 不过这项

508
00:17:38,066 --> 00:17:39,726
用户体验还可以改进

509
00:17:39,726 --> 00:17:44,666
或许我们已经

510
00:17:44,666 --> 00:17:46,076
通过 Touch ID 或其他方式

511
00:17:46,076 --> 00:17:47,056
登录 App 了

512
00:17:47,516 --> 00:17:49,076
我们知道如何利用这个

513
00:17:49,076 --> 00:17:50,256
Web 服务进行交流

514
00:17:51,076 --> 00:17:52,556
实际上  这位用户

515
00:17:52,556 --> 00:17:53,996
是通过 Cookie 登录的

516
00:17:54,296 --> 00:17:56,566
所以我们接下来就看一看这个

517
00:18:02,636 --> 00:18:04,616
要想做到这一点 我们需要创建

518
00:18:04,616 --> 00:18:05,426
一个 HTTP Cookie

519
00:18:06,396 --> 00:18:09,406
我们需要将这个 Cookie

520
00:18:09,406 --> 00:18:10,546
放入一个网址数据库的

521
00:18:10,626 --> 00:18:14,666
HTTPCookieStore  使用

522
00:18:14,666 --> 00:18:16,426
API 新创建的 Cookie

523
00:18:17,176 --> 00:18:21,616
一旦完成这一步  我们

524
00:18:21,616 --> 00:18:24,236
就需要告诉 WKWebView

525
00:18:24,406 --> 00:18:27,566
让它使用包含这个 Cookie的

526
00:18:27,626 --> 00:18:30,136
网址数据库

527
00:18:30,136 --> 00:18:32,006
我们通过 WKWebView 的配置

528
00:18:32,006 --> 00:18:32,786
来完成这些

529
00:18:34,076 --> 00:18:34,636
就这样

530
00:18:36,126 --> 00:18:38,566
把这个网址数据库设置为

531
00:18:38,566 --> 00:18:40,576
含有 Cookie 的网址数据库

532
00:18:40,576 --> 00:18:41,666
然后我们按照前面的程序

533
00:18:41,666 --> 00:18:42,096
再做一遍

534
00:18:42,686 --> 00:18:43,886
使用这个配置

535
00:18:44,086 --> 00:18:44,946
打开一个 WebView

536
00:18:45,036 --> 00:18:45,976
打开网页内容

537
00:18:54,236 --> 00:18:54,896
好了

538
00:18:55,096 --> 00:18:56,856
我们立马登录

539
00:18:56,856 --> 00:18:57,466
成功

540
00:18:57,816 --> 00:19:00,326
我们最初的请求在页头上

541
00:19:00,326 --> 00:19:01,786
是有这个 HTTP Cookie 的

542
00:19:02,486 --> 00:19:06,446
所以  我想让用户读的这篇

543
00:19:06,446 --> 00:19:09,996
文章里面有一些

544
00:19:09,996 --> 00:19:12,246
已加载到未加密

545
00:19:13,216 --> 00:19:15,026
HTTP 链接的子资源

546
00:19:15,946 --> 00:19:18,486
在默认状态下 我们这个 App的

547
00:19:19,726 --> 00:19:21,506
传输安全性通过阻止加载

548
00:19:21,536 --> 00:19:22,996
未加密 HTTP 链接的方式  来保证

549
00:19:22,996 --> 00:19:25,396
用户安全

550
00:19:26,126 --> 00:19:30,266
就在这个地方  我们看到了一些

551
00:19:30,376 --> 00:19:33,146
缺失的图像

552
00:19:34,046 --> 00:19:36,606
我们想要通过它们来

553
00:19:36,606 --> 00:19:38,696
获取这些图像的服务器

554
00:19:39,586 --> 00:19:41,306
都已经成功配置了

555
00:19:41,306 --> 00:19:43,946
HTTP TLS 证书

556
00:19:44,576 --> 00:19:46,876
如果我们发出一个

557
00:19:47,166 --> 00:19:49,756
加密的 HTTP 请求

558
00:19:49,756 --> 00:19:51,506
它会以同样的图像响应

559
00:19:52,746 --> 00:19:54,936
所以如果我们想要进入

560
00:19:55,366 --> 00:19:58,356
并且获得 HTTP URL

561
00:19:58,356 --> 00:20:01,146
然后把它变成

562
00:20:01,146 --> 00:20:03,706
一个尚未加载的 HTTP URL

563
00:20:04,406 --> 00:20:06,486
然后我们就会通过一个安全链接

564
00:20:06,486 --> 00:20:07,376
来接收原先想要的数据

565
00:20:08,536 --> 00:20:11,266
让我们用 WKContentRuleList

566
00:20:11,566 --> 00:20:12,976
来完成这件事

567
00:20:21,496 --> 00:20:23,146
好了 我加了一点点

568
00:20:24,686 --> 00:20:24,866
代码

569
00:20:26,146 --> 00:20:28,616
这是我们想要使用的

570
00:20:28,616 --> 00:20:31,056
内容规则列表

571
00:20:31,596 --> 00:20:33,476
在这个案例里 我们有一条规则

572
00:20:34,276 --> 00:20:36,926
它包含一个触发器

573
00:20:36,926 --> 00:20:38,116
这个触发器是一个正则表达式

574
00:20:38,196 --> 00:20:38,726
能与一切相匹配

575
00:20:39,296 --> 00:20:40,666
这个正则表达式是

576
00:20:40,666 --> 00:20:42,756
在 WebKit 准备从每个资源里抓取的

577
00:20:43,066 --> 00:20:46,226
URL 上运行

578
00:20:46,436 --> 00:20:48,096
这项操作是创建 HTTPS

579
00:20:48,546 --> 00:20:51,566
因为我们如果已经发出请求

580
00:20:51,566 --> 00:20:54,506
要获取的资源并不安全 那么基本上只需要

581
00:20:54,506 --> 00:20:56,086
在方案里增加字母 s

582
00:20:56,086 --> 00:20:57,816
就可以请求到安全的

583
00:20:57,816 --> 00:20:58,216
资源

584
00:20:59,336 --> 00:21:00,946
一旦我们有了这个 JSON

585
00:21:00,946 --> 00:21:02,436
我们就需要编辑内容规则

586
00:21:03,786 --> 00:21:04,406
列表

587
00:21:05,146 --> 00:21:07,496
在完成这个内容规则列表的

588
00:21:07,496 --> 00:21:11,546
编辑之后　我们需要

589
00:21:11,546 --> 00:21:15,746
通过用户内容控制器

590
00:21:15,746 --> 00:21:17,276
把这个内容规则列表添加到

591
00:21:17,656 --> 00:21:19,296
WKWebView 配置当中

592
00:21:19,296 --> 00:21:21,026
然后按照刚才的流程

593
00:21:21,086 --> 00:21:21,416
继续进行

594
00:21:22,076 --> 00:21:25,546
我们来看看这样做的话

595
00:21:25,546 --> 00:21:26,116
会发生什么

596
00:21:26,116 --> 00:21:30,296
我们加载这篇文章

597
00:21:30,296 --> 00:21:33,186
现在这些资源正通过安全连接

598
00:21:33,186 --> 00:21:34,336
而被加载

599
00:21:35,366 --> 00:21:35,726
搞定

600
00:21:35,926 --> 00:21:37,776
我们现在有一款 App

601
00:21:38,126 --> 00:21:40,546
它从 Cookie 着手

602
00:21:40,546 --> 00:21:42,206
能够把所有的不安全资源

603
00:21:42,206 --> 00:21:43,936
升级为安全资源

604
00:21:44,846 --> 00:21:46,036
现在我们有请 Brady

605
00:21:46,036 --> 00:21:46,826
来详细介绍自定义加载方法

606
00:21:46,936 --> 00:21:48,936
[掌声]

607
00:21:49,046 --> 00:21:49,836
>> 谢谢你 Alex

608
00:21:52,036 --> 00:21:53,056
非常直接清晰

609
00:21:53,136 --> 00:21:55,186
我有两点想要重申

610
00:21:55,186 --> 00:21:55,786
一下

611
00:21:59,046 --> 00:22:02,496
Alex 已经展示过了  大家现在可以

612
00:22:02,496 --> 00:22:05,486
在 WKWebView 中设定一个 Cookie

613
00:22:05,486 --> 00:22:06,986
可以知道什么时候能够

614
00:22:06,986 --> 00:22:08,476
使用 Cookie 来

615
00:22:08,476 --> 00:22:09,006
发送请求

616
00:22:09,006 --> 00:22:11,566
通过 WKHTTPCookieStore API

617
00:22:11,566 --> 00:22:13,086
就能够做到这一点

618
00:22:16,736 --> 00:22:18,296
我们继续把话说得更明白些

619
00:22:18,296 --> 00:22:20,646
我们在这里要集中关注的

620
00:22:20,646 --> 00:22:22,066
这个内容规则列表的

621
00:22:22,066 --> 00:22:24,186
一项小功能

622
00:22:24,386 --> 00:22:26,466
是仅仅通过这个简单的规则列表

623
00:22:26,466 --> 00:22:30,296
将不安全、未加密的资源请求

624
00:22:30,296 --> 00:22:31,686
升级为 HTTPS

625
00:22:31,686 --> 00:22:33,046
只需要一步操作 一次触发

626
00:22:33,566 --> 00:22:34,906
Alex 向大家展示了 WebKit

627
00:22:34,906 --> 00:22:36,566
如何自动帮助你

628
00:22:36,566 --> 00:22:38,946
高效地完成这件事

629
00:22:42,136 --> 00:22:44,326
接下来我想介绍

630
00:22:44,326 --> 00:22:46,596
我们的第三个  最后一个

631
00:22:46,596 --> 00:22:48,526
新机制  那就是

632
00:22:48,526 --> 00:22:50,476
提供自定义资源的能力

633
00:22:51,016 --> 00:22:54,196
我们从很多开发者

634
00:22:54,196 --> 00:22:56,876
那里了解到

635
00:22:56,876 --> 00:22:58,386
他们自己有一大堆网页内容

636
00:22:58,386 --> 00:22:58,916
要控制

637
00:22:59,786 --> 00:23:00,946
有些开发者把它放到了

638
00:23:00,946 --> 00:23:02,056
App 程序套装里面

639
00:23:02,286 --> 00:23:03,926
有些人把它托管在自己控制的

640
00:23:03,926 --> 00:23:05,376
网络服务器上

641
00:23:05,376 --> 00:23:08,036
他们想要把用户设备上的

642
00:23:08,036 --> 00:23:10,116
本地数据插入到

643
00:23:10,116 --> 00:23:12,176
网络内容资源里

644
00:23:12,546 --> 00:23:17,196
有一款相当炫酷的 App

645
00:23:17,196 --> 00:23:19,606
就有这种需求  我们见到过

646
00:23:19,606 --> 00:23:21,806
它是一个相册制作工具

647
00:23:21,806 --> 00:23:24,716
它完全凭借网络技术

648
00:23:24,946 --> 00:23:26,486
来获得相册版式

649
00:23:27,266 --> 00:23:28,896
公司的设计师

650
00:23:28,896 --> 00:23:30,466
不断把新模板加入到新的相册

651
00:23:30,466 --> 00:23:31,866
版式和风格设计里

652
00:23:31,866 --> 00:23:33,786
但是他们想要访问

653
00:23:33,786 --> 00:23:35,166
用户设备上的

654
00:23:35,166 --> 00:23:36,196
本地图片

655
00:23:37,196 --> 00:23:38,966
利用这款新的 API

656
00:23:38,966 --> 00:23:39,586
就可以实现了

657
00:23:41,916 --> 00:23:43,216
另外还有许多的

658
00:23:43,216 --> 00:23:44,376
游戏开发者

659
00:23:44,376 --> 00:23:46,446
听他们说 他们有一个游戏内通知

660
00:23:46,446 --> 00:23:48,596
或游戏内积分排行榜

661
00:23:48,736 --> 00:23:50,296
他们使用的就是

662
00:23:50,296 --> 00:23:50,966
网络技术

663
00:23:51,566 --> 00:23:53,556
他们想整合用户

664
00:23:53,766 --> 00:23:55,866
在本地设备上玩游戏的

665
00:23:55,866 --> 00:23:57,556
本地体验

666
00:23:57,556 --> 00:24:00,196
这样他们的用户就会觉得自己

667
00:24:00,196 --> 00:24:02,466
跟游戏世界的最新进展

668
00:24:02,466 --> 00:24:03,286
更加息息相关

669
00:24:03,806 --> 00:24:07,136
这些只是几个

670
00:24:07,136 --> 00:24:07,776
例子

671
00:24:08,176 --> 00:24:09,816
通过新的 WKURLSchemeHandler API

672
00:24:09,816 --> 00:24:11,606
你还可以去做

673
00:24:11,606 --> 00:24:13,616
更多的事情

674
00:24:15,876 --> 00:24:18,846
WKURLSchemeHandler API 让你的

675
00:24:18,846 --> 00:24:21,036
App 能够针对具体的URL方案

676
00:24:21,036 --> 00:24:23,006
来处理资源加载

677
00:24:23,316 --> 00:24:26,276
那么这样一来  我们大家都

678
00:24:26,276 --> 00:24:26,976
达成一致了

679
00:24:27,086 --> 00:24:28,246
什么是 URL 方案？

680
00:24:28,766 --> 00:24:30,646
这些是我们可能见到过的

681
00:24:30,646 --> 00:24:31,656
一些URL示例

682
00:24:32,916 --> 00:24:34,096
这些就是方案

683
00:24:34,826 --> 00:24:36,446
第一个冒号前面的全部

684
00:24:36,446 --> 00:24:37,076
内容

685
00:24:38,106 --> 00:24:39,486
所以通过引用 WebKit 自身

686
00:24:39,486 --> 00:24:40,536
还没有处理的

687
00:24:40,536 --> 00:24:43,046
自定义 URL 方案  你可以

688
00:24:43,046 --> 00:24:44,786
注册一个方案句柄

689
00:24:44,786 --> 00:24:46,056
来处理任一资源的加载问题

690
00:24:46,056 --> 00:24:47,796
只要这项资源里的某个 URL 与你的方案

691
00:24:47,796 --> 00:24:48,306
相匹配

692
00:24:48,826 --> 00:24:51,126
在这个例子中

693
00:24:51,126 --> 00:24:52,446
我们随意选择了

694
00:24:52,446 --> 00:24:52,866
本地方案

695
00:24:52,946 --> 00:24:54,916
它并不是由 WebKit 自己处理的

696
00:24:54,916 --> 00:24:56,426
标准 URL 方案

697
00:24:56,426 --> 00:24:58,126
它根本不属于哪种网络标准

698
00:24:58,126 --> 00:24:59,626
或与之相似的东西

699
00:25:00,736 --> 00:25:02,866
但我们可以想象到

700
00:25:02,866 --> 00:25:04,596
在将来它将能够

701
00:25:04,596 --> 00:25:05,436
成为一种网络标准

702
00:25:05,436 --> 00:25:07,206
它可能会成为 WebKit

703
00:25:07,206 --> 00:25:07,956
独自处理的某种东西

704
00:25:08,106 --> 00:25:09,596
因此我们愿意鼓励

705
00:25:09,906 --> 00:25:11,836
人们在将来进行彻底实践

706
00:25:11,866 --> 00:25:13,456
来证明你的自定义方案

707
00:25:13,456 --> 00:25:14,906
用你的公司名称或 App 套装的名称

708
00:25:14,906 --> 00:25:17,366
或类似的名称

709
00:25:17,366 --> 00:25:17,956
来完成空间命名

710
00:25:21,696 --> 00:25:23,466
WKURLSchemeHandler  究竟是

711
00:25:23,466 --> 00:25:23,916
什么

712
00:25:24,466 --> 00:25:26,256
它是一种相当简单的协议

713
00:25:26,296 --> 00:25:28,026
你可以用两种方式执行它

714
00:25:28,026 --> 00:25:30,506
你要么是被安排

715
00:25:30,506 --> 00:25:33,036
加载一项方案任务

716
00:25:33,036 --> 00:25:33,496
或是停止加载一项任务

717
00:25:33,956 --> 00:25:36,586
我们过一小会儿再来

718
00:25:36,586 --> 00:25:38,226
谈谈什么是方案任务

719
00:25:38,716 --> 00:25:39,666
一旦你执行协议

720
00:25:39,666 --> 00:25:43,426
你就会在 WebView 的设置上

721
00:25:43,426 --> 00:25:44,716
设立方案处理程序

722
00:25:44,716 --> 00:25:46,616
这就是你决定

723
00:25:46,616 --> 00:25:48,636
要使用这个方案处理程序

724
00:25:48,636 --> 00:25:50,096
为哪个 URL 方案

725
00:25:50,096 --> 00:25:51,146
来处理自定义加载

726
00:25:52,046 --> 00:25:53,616
你可以在 App上 所有

727
00:25:53,616 --> 00:25:55,466
自定义的 URL 方案中

728
00:25:55,466 --> 00:25:57,116
使用同类的实例

729
00:25:57,496 --> 00:25:59,066
你也可以为不同的 URL 方案

730
00:25:59,216 --> 00:26:00,416
设定不同的类别

731
00:26:00,476 --> 00:26:03,136
所以 你可以将不同的实例

732
00:26:03,136 --> 00:26:04,356
用于所有不同的方案

733
00:26:04,356 --> 00:26:06,536
或将一个实例

734
00:26:06,536 --> 00:26:06,996
分别用于所有的方案

735
00:26:07,036 --> 00:26:07,666
这取决于你和

736
00:26:07,666 --> 00:26:08,766
你的 App 程序的架构

737
00:26:09,286 --> 00:26:14,016
接下来 你要创建自己的 Webview

738
00:26:14,526 --> 00:26:15,786
并在里面加载一些内容

739
00:26:16,106 --> 00:26:17,896
这个网页内容里的

740
00:26:17,896 --> 00:26:19,846
参考了你已注册的

741
00:26:19,846 --> 00:26:21,006
自定义 URL 方案

742
00:26:21,006 --> 00:26:23,566
的网页内容  它包含的任何子资源

743
00:26:23,566 --> 00:26:24,856
都会反向调用你拿

744
00:26:24,976 --> 00:26:25,926
WKWebView 注册的对象

745
00:26:26,336 --> 00:26:29,066
要注意 这甚至包括

746
00:26:29,306 --> 00:26:31,086
最高级别的 HTML 文件本身

747
00:26:31,086 --> 00:26:33,396
它可能属于你先前注册的

748
00:26:33,396 --> 00:26:34,746
自定义方案

749
00:26:35,306 --> 00:26:40,466
那么 WKURLSchemeTask 是什么？

750
00:26:41,476 --> 00:26:43,326
每个发送到你处理程序的任务

751
00:26:43,436 --> 00:26:45,516
都代表一个特定的

752
00:26:45,516 --> 00:26:46,166
子资源加载

753
00:26:47,116 --> 00:26:49,566
这个任务包含 URL

754
00:26:49,616 --> 00:26:50,746
请求对象

755
00:26:51,416 --> 00:26:53,226
这是要传递到

756
00:26:53,226 --> 00:26:54,966
某个 HTTP 服务器的相同信息

757
00:26:54,966 --> 00:26:56,646
如果说  这个请求要

758
00:26:56,646 --> 00:26:57,556
传递到网络上的话

759
00:26:58,166 --> 00:26:59,876
它包含了很多与资源相关的

760
00:26:59,876 --> 00:27:01,266
小片段数据资料

761
00:27:01,266 --> 00:27:02,526
可是它们却非常重要 尤其是

762
00:27:02,526 --> 00:27:02,896
URL 本身

763
00:27:04,966 --> 00:27:07,136
再往下看  这项任务

764
00:27:07,386 --> 00:27:09,016
提供了四个直接了当的方法

765
00:27:09,016 --> 00:27:10,526
要让你将加载进程

766
00:27:10,526 --> 00:27:12,056
传递给 WebKit

767
00:27:12,056 --> 00:27:12,976
从而获取这一资源

768
00:27:17,246 --> 00:27:19,706
一旦你接收到某个任务

769
00:27:19,706 --> 00:27:21,486
并且按照要求开始为它进行加载

770
00:27:22,336 --> 00:27:23,566
你首先要做的

771
00:27:23,706 --> 00:27:24,776
是创建一个响应

772
00:27:25,636 --> 00:27:26,856
就像 URL 请求对象

773
00:27:26,856 --> 00:27:28,866
代表着传送到

774
00:27:28,976 --> 00:27:31,156
一台网络服务器上的信息那样

775
00:27:31,156 --> 00:27:32,286
这个响应是服务器将要

776
00:27:32,286 --> 00:27:33,076
返回的内容

777
00:27:33,476 --> 00:27:35,226
你需要对它进行加工

778
00:27:36,446 --> 00:27:38,006
非常重要的是 在这个响应里

779
00:27:38,006 --> 00:27:39,466
你需要包含

780
00:27:39,466 --> 00:27:40,136
MIME 类型

781
00:27:40,416 --> 00:27:42,006
对于在座的

782
00:27:42,006 --> 00:27:43,086
还不算非常熟悉

783
00:27:43,086 --> 00:27:44,536
网络技术的人来说

784
00:27:44,536 --> 00:27:45,506
它有点像是文件类型

785
00:27:45,806 --> 00:27:47,356
这是要由你来告诉 WebKit

786
00:27:47,356 --> 00:27:48,286
如何解读资源

787
00:27:48,606 --> 00:27:50,326
这是一个 HTML 资源

788
00:27:50,446 --> 00:27:55,296
这是一个 JPEG 图像等等

789
00:27:55,296 --> 00:27:57,226
一旦你获得响应

790
00:27:57,226 --> 00:27:59,086
就要向任务告知

791
00:27:59,086 --> 00:27:59,436
响应已收到

792
00:28:00,016 --> 00:28:02,396
在这种情况下 我们的内存里

793
00:28:02,396 --> 00:28:04,066
已经具备了响应回复所需要的

794
00:28:04,066 --> 00:28:04,536
所有数据

795
00:28:04,916 --> 00:28:06,446
所以我们可以立刻将

796
00:28:06,446 --> 00:28:07,956
数据传送到 WebKit  从而

797
00:28:07,956 --> 00:28:08,386
完成任务

798
00:28:08,706 --> 00:28:12,476
我们随后将示意 WebKit

799
00:28:12,476 --> 00:28:13,376
加载已完成

800
00:28:13,476 --> 00:28:14,946
所以 WebKit 就不会再等待

801
00:28:14,946 --> 00:28:18,516
更多数据了

802
00:28:18,776 --> 00:28:20,446
还是那句话 最好的

803
00:28:20,446 --> 00:28:21,856
展示方式就是观看

804
00:28:21,856 --> 00:28:22,386
操作演示

805
00:28:22,476 --> 00:28:23,696
所以 我要邀请 Alex

806
00:28:23,696 --> 00:28:24,246
回到台上

807
00:28:26,516 --> 00:28:29,826
[掌声]

808
00:28:30,326 --> 00:28:30,836
>> 谢谢 Brady

809
00:28:32,506 --> 00:28:34,866
大家还记得 在我的 App 里

810
00:28:34,866 --> 00:28:36,826
是要让在线阅读文章的用户

811
00:28:36,826 --> 00:28:39,736
再参加关于这些文章的测试

812
00:28:39,736 --> 00:28:40,976
然后他们会收到

813
00:28:40,976 --> 00:28:41,496
一张毕业证书

814
00:28:42,166 --> 00:28:43,806
我有一个网络设计团队

815
00:28:43,806 --> 00:28:45,126
他们经常能

816
00:28:45,126 --> 00:28:46,926
想到很漂亮的证书

817
00:28:46,926 --> 00:28:47,436
设计格式

818
00:28:47,906 --> 00:28:49,126
所以我希望我的 App 用户

819
00:28:49,126 --> 00:28:51,126
能去我的服务器里

820
00:28:51,126 --> 00:28:54,286
获取这些新设计  但我又想

821
00:28:54,286 --> 00:28:57,116
让每张证书里都有

822
00:28:57,116 --> 00:28:59,096
用户自己的头像

823
00:28:59,566 --> 00:29:01,496
而且我希望这些头像能够从本地

824
00:29:01,496 --> 00:29:02,636
加载到用户的设备上

825
00:29:03,506 --> 00:29:06,916
所以 要在 WebKit 内部实现

826
00:29:06,916 --> 00:29:09,276
这种自定义本地加载

827
00:29:09,276 --> 00:29:11,136
我就要使用一个自定义方案

828
00:29:12,006 --> 00:29:14,256
现在我给向大家展示一下

829
00:29:15,116 --> 00:29:17,576
我的证书来源

830
00:29:21,046 --> 00:29:22,846
好了 看这里  我有某个 HTML

831
00:29:23,656 --> 00:29:24,556
我还有一张图片

832
00:29:25,346 --> 00:29:27,196
它的来源是一个带有

833
00:29:27,196 --> 00:29:28,016
自定义方案的 URL

834
00:29:28,746 --> 00:29:31,076
在这个例子里

835
00:29:32,496 --> 00:29:33,776
犬科动物—头像

836
00:29:33,776 --> 00:29:38,286
如果我用浏览器或

837
00:29:38,286 --> 00:29:41,436
WKWebView 打开它

838
00:29:41,816 --> 00:29:43,126
WKWebView 并不会知道该做什么

839
00:29:43,126 --> 00:29:45,386
那么我向大家快速展示一下

840
00:29:45,386 --> 00:29:45,976
这是怎么回事

841
00:29:49,156 --> 00:29:49,866
参加测验

842
00:29:51,296 --> 00:29:52,796
狗 是的

843
00:29:53,476 --> 00:29:56,746
好了 这样我就有

844
00:29:56,746 --> 00:29:57,726
一份漂亮的证书了

845
00:29:58,636 --> 00:30:01,486
我有一个缺失的图像标记

846
00:30:02,046 --> 00:30:04,946
因为 WebKit 试图加载含有

847
00:30:05,016 --> 00:30:07,196
犬类——

848
00:30:07,276 --> 00:30:09,746
“犬科动物——头像”方案

849
00:30:09,746 --> 00:30:11,806
的资源

850
00:30:11,806 --> 00:30:13,316
而 WebKit 不知道该怎样

851
00:30:13,366 --> 00:30:14,086
处理这样的方案

852
00:30:15,106 --> 00:30:18,366
所以 我们可以用

853
00:30:18,366 --> 00:30:22,096
WKURLSchemeHandler 来教会

854
00:30:22,206 --> 00:30:24,996
这个 WKWebView 怎样处理类似的

855
00:30:24,996 --> 00:30:25,366
请求

856
00:30:27,046 --> 00:30:29,536
好了 我加了一些代码

857
00:30:29,846 --> 00:30:34,606
我有一个对象 一个用来执行

858
00:30:34,606 --> 00:30:37,036
WKURLSchemeHandler 的分类

859
00:30:37,776 --> 00:30:39,446
这儿还有一些代码

860
00:30:39,446 --> 00:30:40,356
我马上就回来

861
00:30:40,356 --> 00:30:40,766
再说这个

862
00:30:42,396 --> 00:30:44,936
不过  往下看这里  我想在我的 WKWebView

863
00:30:44,936 --> 00:30:47,496
配置里调用

864
00:30:47,496 --> 00:30:49,236
设定新方法的

865
00:30:49,236 --> 00:30:52,586
URLSchemeHandler  这里面有

866
00:30:52,586 --> 00:30:54,366
我的一个分类实例

867
00:30:54,366 --> 00:30:55,446
它执行 URL

868
00:30:55,596 --> 00:31:00,636
WKURLSchemeHandler  然后我

869
00:31:00,636 --> 00:31:02,946
需要告诉 WebKit  这个分类要

870
00:31:02,946 --> 00:31:05,316
处理的请求

871
00:31:05,316 --> 00:31:07,526
是属于哪个 URL 方案

872
00:31:10,256 --> 00:31:12,006
我在分类执行时

873
00:31:14,036 --> 00:31:17,766
执行 WKURLSchemeHandler

874
00:31:18,166 --> 00:31:20,076
就意味着我有这样两种方法

875
00:31:20,456 --> 00:31:22,206
开始和结束

876
00:31:24,216 --> 00:31:25,906
当针对这个方案

877
00:31:25,906 --> 00:31:29,336
的请求生成时

878
00:31:29,366 --> 00:31:30,596
网页内容就会调用开始方法

879
00:31:31,316 --> 00:31:33,246
所以在这个例子中  当网页内容

880
00:31:33,246 --> 00:31:35,266
想要加载我的图像时

881
00:31:35,876 --> 00:31:40,486
我就应该用这个 URL 方案任务

882
00:31:40,486 --> 00:31:43,166
对这个请求做出

883
00:31:44,006 --> 00:31:44,226
响应

884
00:31:45,616 --> 00:31:47,856
在我的例子里  我会暂停

885
00:31:47,856 --> 00:31:49,066
一个图片选择器  并让读者

886
00:31:49,066 --> 00:31:50,646
来选择一张图片

887
00:31:50,646 --> 00:31:51,826
所以我不需要马上

888
00:31:51,826 --> 00:31:52,416
响应

889
00:31:53,786 --> 00:31:56,736
如果在这个过程中 WKWebView 调用了

890
00:31:56,736 --> 00:31:59,076
我的停止方法

891
00:31:59,706 --> 00:32:01,536
那么  我就不该再

892
00:32:01,626 --> 00:32:03,976
响应这个请求了

893
00:32:03,976 --> 00:32:05,666
因为它已经被取消

894
00:32:05,666 --> 00:32:05,946
或其他什么原因

895
00:32:10,236 --> 00:32:12,636
在这里 只要图片选择器完成工作

896
00:32:12,636 --> 00:32:14,756
我就会得到数据

897
00:32:15,606 --> 00:32:18,166
在这个例子中 我要把它编码为 JPEG

898
00:32:18,166 --> 00:32:18,336
格式

899
00:32:19,486 --> 00:32:20,836
我需要调用这三种

900
00:32:20,836 --> 00:32:21,176
方法

901
00:32:22,136 --> 00:32:23,736
响应已收到

902
00:32:24,866 --> 00:32:27,916
数据已接收 已完成

903
00:32:29,776 --> 00:32:31,706
数据已接收  比较特别

904
00:32:31,706 --> 00:32:33,526
我可以不止一次地调用数据

905
00:32:33,656 --> 00:32:35,616
因为数据是生成的 或因为它是接收到的

906
00:32:35,616 --> 00:32:38,996
或不管我是以什么方式提供的

907
00:32:38,996 --> 00:32:39,926
这些数据

908
00:32:40,226 --> 00:32:41,496
在这里 我只准备调用它一次

909
00:32:41,496 --> 00:32:43,116
因为我自己有

910
00:32:43,116 --> 00:32:46,646
这个响应的全部数据

911
00:32:46,646 --> 00:32:48,556
在一个缓存区里使用 JPEG 格式编码的

912
00:32:48,556 --> 00:32:48,916
图像

913
00:32:51,896 --> 00:32:53,796
我们来看看  当我执行这项操作时

914
00:32:53,796 --> 00:32:54,906
会发生什么情况

915
00:33:02,276 --> 00:33:04,276
好了 我已经登录了

916
00:33:04,746 --> 00:33:05,656
因为我有 Cookie 记录

917
00:33:06,516 --> 00:33:08,006
所有都已安全加载

918
00:33:08,186 --> 00:33:11,396
我来参加测验

919
00:33:12,086 --> 00:33:13,496
狗 是的

920
00:33:15,056 --> 00:33:17,506
好了 这个图片选择器出来了

921
00:33:17,506 --> 00:33:21,076
因为这种开始方法

922
00:33:21,076 --> 00:33:21,536
已经被调用

923
00:33:22,276 --> 00:33:26,706
我进入我的相册

924
00:33:26,826 --> 00:33:29,356
选择我的头像照片

925
00:33:29,356 --> 00:33:31,246
我想让它呈现在我的网页内容里

926
00:33:31,966 --> 00:33:34,946
然后  因为在任务当中

927
00:33:34,946 --> 00:33:38,136
调用了那些方法

928
00:33:38,136 --> 00:33:40,136
现在我的网页内容里已经包含

929
00:33:40,176 --> 00:33:40,666
这份数据了

930
00:33:41,256 --> 00:33:42,406
所以我现在拥有这样一个 App

931
00:33:42,406 --> 00:33:44,496
它可以管理它的各种 Cookie

932
00:33:44,496 --> 00:33:46,566
使用内容规则列表

933
00:33:46,566 --> 00:33:49,246
升级不安全的请求

934
00:33:49,246 --> 00:33:51,386
可以通过 WKURLSchemeHandler

935
00:33:52,206 --> 00:33:55,706
进行自定义加载

936
00:33:56,586 --> 00:33:57,186
现在让 Brady 继续来讲

937
00:33:58,516 --> 00:34:00,576
[掌声]

938
00:34:01,076 --> 00:34:02,366
>> 再次重申一下

939
00:34:02,676 --> 00:34:04,726
我们刚才看到了  Alex 用代码形式

940
00:34:04,726 --> 00:34:05,206
给我们做了展示

941
00:34:06,196 --> 00:34:07,776
他选择的是即将推出的 Proof URL

942
00:34:07,776 --> 00:34:08,186
方案

943
00:34:09,005 --> 00:34:10,646
这是我想要强调的

944
00:34:10,646 --> 00:34:12,766
一个最佳方案  我想多强调几次

945
00:34:12,766 --> 00:34:14,206
以便确保你在将来

946
00:34:14,376 --> 00:34:15,636
不会选择某种有可能

947
00:34:15,636 --> 00:34:16,755
标准化的

948
00:34:16,755 --> 00:34:17,126
方案

949
00:34:17,485 --> 00:34:21,686
接下来他又展示了某样东西

950
00:34:21,686 --> 00:34:23,556
是我还没来得及明确提到的东西

951
00:34:23,636 --> 00:34:24,815
也就是说  你可能给

952
00:34:24,815 --> 00:34:26,616
某项任务

953
00:34:26,856 --> 00:34:27,696
异步提供数据

954
00:34:28,576 --> 00:34:29,866
你可以在本地

955
00:34:29,866 --> 00:34:30,516
生成数据

956
00:34:30,676 --> 00:34:32,016
你可以让用户即时

957
00:34:32,016 --> 00:34:32,525
拍照

958
00:34:32,946 --> 00:34:34,216
你可以创建自己的网络

959
00:34:34,216 --> 00:34:34,846
来获取数据

960
00:34:35,126 --> 00:34:36,466
无论你耗费多长时间来

961
00:34:36,466 --> 00:34:38,096
获取数据  你都可以将它

962
00:34:38,096 --> 00:34:39,946
异步传送返回到 WebKit

963
00:34:44,045 --> 00:34:45,446
这就是我今天

964
00:34:45,446 --> 00:34:47,426
想要和大家分享的所有

965
00:34:47,426 --> 00:34:47,735
新事物

966
00:34:48,306 --> 00:34:49,146
今天我们仔细讨论了

967
00:34:49,386 --> 00:34:52,755
WKHTTPCookieStore  这个

968
00:34:52,755 --> 00:34:54,565
用来在你的 WKWebView 里管理 Cookie

969
00:34:54,565 --> 00:34:55,576
的新 API

970
00:34:56,126 --> 00:34:58,936
我们讲了

971
00:34:58,936 --> 00:35:01,866
WKContent 规则列表  这是一种快速

972
00:35:01,866 --> 00:35:04,386
有效的方法 它可以从你的 WKWebViews 里滤除

973
00:35:04,386 --> 00:35:06,886
不想要的内容

974
00:35:07,396 --> 00:35:10,586
我们还讨论了

975
00:35:10,586 --> 00:35:14,036
WKURLSchemeHandler  一种

976
00:35:14,036 --> 00:35:16,266
可以让你把自定义资源

977
00:35:16,266 --> 00:35:18,586
添加到网页内容里的绝妙方法

978
00:35:18,586 --> 00:35:20,006
无论网络内容

979
00:35:20,006 --> 00:35:20,626
从何而来

980
00:35:21,176 --> 00:35:25,366
我想再一次强调

981
00:35:25,366 --> 00:35:27,186
我们之所以能想到这些

982
00:35:27,186 --> 00:35:28,826
新的 API   并且努力进行研发

983
00:35:29,056 --> 00:35:30,846
是因为我们获得了

984
00:35:31,066 --> 00:35:32,576
在座所有开发者的

985
00:35:32,576 --> 00:35:32,866
反馈

986
00:35:33,296 --> 00:35:34,836
我们希望大家继续

987
00:35:34,836 --> 00:35:36,676
给我们反馈建议  这样我们

988
00:35:36,676 --> 00:35:38,426
就能聚到一起  创造出

989
00:35:38,966 --> 00:35:41,086
我们将来新版本 WKWebView 里

990
00:35:41,086 --> 00:35:42,846
能够呈现

991
00:35:42,846 --> 00:35:43,546
更多出色的功能

992
00:35:44,446 --> 00:35:46,246
想要了解更多信息

993
00:35:46,246 --> 00:35:48,086
请访问这次会议的

994
00:35:48,086 --> 00:35:50,276
网址  还有一些相关的

995
00:35:50,276 --> 00:35:51,966
会议  我建议大家

996
00:35:51,966 --> 00:35:52,766
去了解一下

997
00:35:53,296 --> 00:35:54,526
明天早上我们将讨论

998
00:35:54,526 --> 00:35:55,566
Safari View Controller 里的

999
00:35:55,566 --> 00:35:56,686
某些非常优异的新功能

1000
00:35:56,776 --> 00:35:58,296
如果你有兴趣给自己的 App 增添一种

1001
00:35:58,296 --> 00:36:00,186
功能强大的应用内

1002
00:36:00,186 --> 00:36:01,216
网络浏览体验

1003
00:36:01,216 --> 00:36:03,746
请大家过来

1004
00:36:03,746 --> 00:36:04,666
再看看

1005
00:36:05,236 --> 00:36:07,056
自从我们首次推出

1006
00:36:07,056 --> 00:36:09,186
WKWebView 以来

1007
00:36:09,186 --> 00:36:11,026
我们一直都有些分享

1008
00:36:11,026 --> 00:36:13,056
我们推出那些适用于 Safari 的

1009
00:36:13,056 --> 00:36:14,006
内容禁止扩展后

1010
00:36:14,006 --> 00:36:15,296
情况也是这样

1011
00:36:15,886 --> 00:36:17,676
大家从这里可以了解许多

1012
00:36:17,676 --> 00:36:19,596
关于这套强大规则设置的细节

1013
00:36:19,596 --> 00:36:21,516
你在使用 WKContentRuleList

1014
00:36:21,516 --> 00:36:23,216
可以用到这些

1015
00:36:24,556 --> 00:36:25,646
感谢大家的到来 希望大家在

1016
00:36:25,646 --> 00:36:27,056
接下来的 WWDC 会议里能够满载而归

1017
00:36:27,056 --> 00:36:28,000
[掌声]

