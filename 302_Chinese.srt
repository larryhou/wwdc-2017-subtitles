1
00:00:31,732 --> 00:00:32,665
大家好

2
00:00:33,534 --> 00:00:36,503
欢迎来到我们这个介绍
“iTunes Connect新特性”的演讲

3
00:00:36,703 --> 00:00:37,905
我叫作Daniel Meoh

4
00:00:37,971 --> 00:00:40,207
我是iTunes Connect的
一名工程经理

5
00:00:42,576 --> 00:00:45,078
我们今天会介绍一些新功能

6
00:00:45,612 --> 00:00:47,714
其中有些是我们今年早些时候发布的

7
00:00:47,781 --> 00:00:51,084
而其他的功能
我们会在今年剩下的时间逐一发布出来

8
00:00:51,652 --> 00:00:56,056
我们会介绍对于用户评论的反应

9
00:00:56,557 --> 00:00:59,159
还有如何控制你应用版本的新方法

10
00:00:59,226 --> 00:01:01,628
也就是如何将应用的新版本
送达用户的手中

11
00:01:02,629 --> 00:01:03,797
让我们开始

12
00:01:03,864 --> 00:01:07,267
介绍下评分 评论和反馈吧

13
00:01:10,604 --> 00:01:13,373
我们是在几个月前发布这个功能的

14
00:01:13,440 --> 00:01:15,342
你们有多少人已经用过这个功能了呢？

15
00:01:17,744 --> 00:01:18,579
很好

16
00:01:18,912 --> 00:01:21,448
不管你是否用过这个功能

17
00:01:21,548 --> 00:01:23,083
我可以肯定的是

18
00:01:23,383 --> 00:01:27,321
直接跟用户交流会让每个人受益

19
00:01:29,323 --> 00:01:31,859
在我们介绍如何进行反馈之前

20
00:01:32,359 --> 00:01:34,061
让我们花点时间思考一下

21
00:01:34,127 --> 00:01:37,731
用户写评论的出发点是什么

22
00:01:39,399 --> 00:01:44,304
有时候用户
就是单纯喜欢我们的应用

23
00:01:44,371 --> 00:01:45,973
他们想让所有人都知道

24
00:01:47,574 --> 00:01:49,943
有时候是因为用户有点不解

25
00:01:50,010 --> 00:01:54,414
为什么你加入了
或是没有加入某个特定的功能

26
00:01:55,182 --> 00:01:57,918
或者是围绕着你所做的设计决定来说

27
00:02:00,187 --> 00:02:02,823
最后是我们都熟悉的一个

28
00:02:02,890 --> 00:02:05,359
用户经常写评论

29
00:02:05,425 --> 00:02:08,695
是为了让我们发现
应用中的错误和崩溃问题

30
00:02:12,065 --> 00:02:16,170
不管用户写评论是出于哪种原因

31
00:02:16,336 --> 00:02:18,372
我们都有一个很棒的方法让你进行反馈

32
00:02:19,540 --> 00:02:21,208
这里我们看到的就是
iTunes Connect

33
00:02:21,708 --> 00:02:24,945
这就是你阅读用户评论的地方

34
00:02:25,245 --> 00:02:27,881
而现在你也可以在这里进行反馈了

35
00:02:28,849 --> 00:02:30,884
让我们来看下这个应用
Forest Xplorer

36
00:02:30,951 --> 00:02:35,422
这是一个用来爬山和远足的虚拟应用

37
00:02:36,723 --> 00:02:39,059
让我们来看一个需要反馈的评论

38
00:02:39,993 --> 00:02:42,963
我们首先要找到两星的评论

39
00:02:44,665 --> 00:02:47,734
这些评论还没有得到开发者的任何反馈

40
00:02:49,937 --> 00:02:52,906
我们可以看下这个评论

41
00:02:53,407 --> 00:02:56,543
写这条评论的用户
已经使用我们的应用很长时间了

42
00:02:56,610 --> 00:03:01,582
而她最近在登山的时候发现有一个应用

43
00:03:01,648 --> 00:03:03,984
她走的一条路过时了

44
00:03:04,718 --> 00:03:08,288
而我们今天早上
刚刚发布了一个新版本的应用

45
00:03:08,922 --> 00:03:11,158
而她所在地区的路径被更新过了

46
00:03:11,758 --> 00:03:13,527
让我们告诉她一下吧

47
00:03:15,028 --> 00:03:19,399
我们首先需要点击
她评论旁边的“回复”按钮

48
00:03:21,368 --> 00:03:24,571
在弹出的窗口中 我们可以输入反馈

49
00:03:25,772 --> 00:03:26,673
这里我们会让她知道

50
00:03:26,740 --> 00:03:29,943
我们十分感谢
她用了我们的应用这么长时间

51
00:03:30,644 --> 00:03:33,213
她应该去看下我们今早发布的新版本

52
00:03:33,280 --> 00:03:35,048
因为新版应用应该能解决她的困扰

53
00:03:36,517 --> 00:03:38,051
在点击了“提交”按钮后

54
00:03:38,118 --> 00:03:40,754
这条反馈就会出现在该评论的下面

55
00:03:41,522 --> 00:03:45,559
你可能会注意到
反馈标题旁边的“待定”这个词

56
00:03:46,126 --> 00:03:50,330
它的意思是这条反馈还没有到达系统中

57
00:03:50,397 --> 00:03:51,932
并显示在App Store中

58
00:03:52,366 --> 00:03:55,402
当到达系统之后
“待定”这个词就会消失

59
00:03:56,170 --> 00:03:59,139
你们有人可能感到奇怪 是的
这的确和应用评论没什么关系

60
00:04:01,208 --> 00:04:03,177
还有一件事是你们需要注意的

61
00:04:03,243 --> 00:04:07,548
每条评论只能有一个反馈

62
00:04:08,148 --> 00:04:11,618
所以你的用户可以随便更新评论

63
00:04:11,818 --> 00:04:14,888
你也可以随便更新你的反馈

64
00:04:15,422 --> 00:04:17,391
但这不是个条纹状的会话

65
00:04:17,925 --> 00:04:21,195
所以对于每个用户来说
就只有一对评论反馈

66
00:04:23,430 --> 00:04:26,834
如果这条反馈确实到达了应用商店

67
00:04:27,734 --> 00:04:29,937
你的用户就会收到一条通知

68
00:04:30,737 --> 00:04:34,208
而通知会以推送和电邮的形式送达

69
00:04:34,875 --> 00:04:36,543
这条通知会被触发

70
00:04:37,010 --> 00:04:39,880
当作为开发者的你提交最初的反馈

71
00:04:40,080 --> 00:04:44,351
或是更新已有的反馈
在用户更新了他们的评论之后

72
00:04:45,519 --> 00:04:51,925
在其他时间更新反馈的话
你就不会触发通知

73
00:04:53,927 --> 00:04:57,998
在你这边也可以选择使用电邮通知

74
00:04:59,199 --> 00:05:03,070
它将在你反馈后
用户更新评论的时候被触发

75
00:05:03,971 --> 00:05:05,038
你可以开启这个功能

76
00:05:05,105 --> 00:05:08,108
在iTunes Connect的
“使用/注册”部分

77
00:05:10,711 --> 00:05:12,513
回到我们的例子中

78
00:05:13,313 --> 00:05:16,216
这里我们的用户点击了
“更新评论”链接

79
00:05:16,283 --> 00:05:18,452
在她收到的电邮通知中

80
00:05:19,253 --> 00:05:22,689
这就给了她更新评论的机会

81
00:05:23,824 --> 00:05:26,593
该链接会把她直接带到
App Store她的评论下

82
00:05:27,761 --> 00:05:30,330
这里我们的用户已经更新了她的应用

83
00:05:30,931 --> 00:05:32,666
更新她很满意

84
00:05:33,100 --> 00:05:35,969
所以她决定把她的评论更新到五星

85
00:05:36,937 --> 00:05:41,041
在她点击了“发送”按钮之后
我们又多了一个满意的用户

86
00:05:44,878 --> 00:05:47,814
现在看一下这个功能的早期统计数据

87
00:05:48,382 --> 00:05:50,350
我们注意到 所有的评论

88
00:05:50,417 --> 00:05:53,220
也就是所有在开发者反馈后
进行了更新的评论

89
00:05:53,687 --> 00:05:58,258
这些评论平均会增加一点五颗星

90
00:05:58,992 --> 00:06:00,594
这听上去是个不错的理由

91
00:06:00,661 --> 00:06:03,030
出去跟我们的用户进行交流

92
00:06:04,798 --> 00:06:08,235
我们还有一些有关这个功能的
最优方案要讲

93
00:06:09,636 --> 00:06:13,941
首先
用户肯定喜欢他们的意见能被听取

94
00:06:15,809 --> 00:06:19,980
所以你应该积极听取他们的意见
并及时进行反馈

95
00:06:20,881 --> 00:06:22,082
一种实现的办法就是

96
00:06:22,182 --> 00:06:25,385
用我们刚才讲过的那些通知

97
00:06:26,453 --> 00:06:29,790
这样在你反馈后
用户在更新他们评论的时候

98
00:06:29,857 --> 00:06:35,629
你就可以明确知道
他们对你的反馈反应如何

99
00:06:38,198 --> 00:06:42,936
第二点
在你反馈前真的好好听了用户的意见

100
00:06:43,570 --> 00:06:45,339
而在你反馈的时候

101
00:06:45,873 --> 00:06:48,775
需要反馈他们所说的要点

102
00:06:50,277 --> 00:06:51,211
试着保持乐观

103
00:06:51,278 --> 00:06:56,250
请不要用这个功能来宣传
或者刺激得到更高的评分

104
00:06:58,785 --> 00:07:02,222
如果你要反馈或者发布一个新版本

105
00:07:02,756 --> 00:07:05,459
而它们解决了用户所担心的问题

106
00:07:05,526 --> 00:07:07,928
像是功能或者错误报告

107
00:07:08,395 --> 00:07:10,931
请确保将其加到你的
“新功能介绍”文本信息中

108
00:07:10,998 --> 00:07:12,199
伴随着你版本的更新

109
00:07:12,399 --> 00:07:14,568
这样就会有尽可能多的用户

110
00:07:14,635 --> 00:07:17,004
知道你已经解决了他们担心的问题

111
00:07:18,138 --> 00:07:21,808
你还可以借着这次机会
来向这些用户进行反馈

112
00:07:21,875 --> 00:07:26,280
这样他们就被会通知有个新版本发布了
可以去看一下

113
00:07:29,583 --> 00:07:33,287
最后 如果你有些敏感的用户信息

114
00:07:34,655 --> 00:07:39,760
请记住这是个公共论坛
别把它用错了地方

115
00:07:41,662 --> 00:07:43,797
我们为该功能开发了
新的StoreKit API

116
00:07:43,864 --> 00:07:46,900
它可以让你收集评论和评分

117
00:07:46,967 --> 00:07:51,171
直接在你的应用中而不是让你的用户
切换到App Store中去

118
00:07:51,705 --> 00:07:55,108
请一定来参加明天上午11点举办的
“StoreKit新特性”演讲

119
00:07:55,409 --> 00:07:56,777
来获取关于这方面的更多信息

120
00:08:00,047 --> 00:08:02,015
现在让我们介绍一下
testflight

121
00:08:02,983 --> 00:08:04,785
testflight是我们的
beta测试平台

122
00:08:04,852 --> 00:08:09,489
它可以让你将
预发行的应用分发给测试者

123
00:08:09,623 --> 00:08:14,528
大规模发布到App Store前
先对其进行测试

124
00:08:15,128 --> 00:08:17,898
我们最近对这个平台做了很多的改进

125
00:08:17,965 --> 00:08:22,135
都是围绕着你应该如何分发构建的应用
以及如何管理测试者的

126
00:08:22,569 --> 00:08:25,973
我想有请Tom Neglen上台来
给我们介绍一下这部分内容

127
00:08:31,378 --> 00:08:32,578
谢谢你 Daniel

128
00:08:33,714 --> 00:08:36,049
我对于要介绍testflight
感到十分激动

129
00:08:36,683 --> 00:08:40,120
在四月份
我们引入了很多对于编译版本的支持

130
00:08:41,522 --> 00:08:44,057
你现在可以将很多编译版本同时分发给

131
00:08:44,124 --> 00:08:46,560
你的外部测试者

132
00:08:47,861 --> 00:08:51,598
你可以通过将你的测试者进行分组
来实现这个目的

133
00:08:51,698 --> 00:08:54,468
然后将一个或更多的编译版本
分配给各组

134
00:08:56,403 --> 00:08:59,106
你的内部
iTunes Connect测试者

135
00:08:59,173 --> 00:09:02,009
现在可以访问所有的
TestFlight编译版本了

136
00:09:02,276 --> 00:09:03,810
当你上传了一个新编译版本时

137
00:09:04,311 --> 00:09:07,381
它会自动地对你的内部测试者可用

138
00:09:09,216 --> 00:09:12,019
我们还加入了单独的测试者标准

139
00:09:12,085 --> 00:09:17,257
这样你就可以看到谁在主动地进行测试
以及谁遇到了崩溃的情况

140
00:09:18,625 --> 00:09:21,762
最后同样重要的是
我们添加了测试者“重新邀请”按钮

141
00:09:22,262 --> 00:09:24,498
你可以很简单地进入
iTunes Connect

142
00:09:24,831 --> 00:09:28,468
然后仅通过一次点击就可以
将一个新的邀请发送给特定的测试者

143
00:09:30,437 --> 00:09:33,507
现在我想给你们展示下
利用这些新功能可以实现什么

144
00:09:35,809 --> 00:09:37,344
让我们从一个简单的例子开始

145
00:09:37,411 --> 00:09:40,314
就是使用一个组
来将编译版本发送给测试者

146
00:09:43,250 --> 00:09:46,153
我们可以点击左侧导航栏的
“新分组”按钮来创建一个组

147
00:09:47,087 --> 00:09:48,555
然后给我们的新组起个名字

148
00:09:49,456 --> 00:09:51,725
我们把这个组叫作“Beta测试者”

149
00:09:53,994 --> 00:09:57,431
比方说我们想用这个组
来测试主要功能的变化

150
00:09:58,131 --> 00:10:01,935
我们可以添加我们的QA团队
或者其他人

151
00:10:02,002 --> 00:10:04,171
这些人不介意去找下偶然出现的错误

152
00:10:06,540 --> 00:10:07,908
我们可以将测试者添加到分组内

153
00:10:07,975 --> 00:10:10,511
通过点击“测试者”旁边的加号按钮

154
00:10:10,577 --> 00:10:12,513
并且选择“添加新测试者”

155
00:10:15,949 --> 00:10:18,352
为了给我们的应用
邀请到一个测试者 你只需要

156
00:10:18,418 --> 00:10:21,188
一个电邮地址 名字是可选的

157
00:10:25,492 --> 00:10:27,528
我们现已将一些测试者
加入到了该分组中

158
00:10:27,928 --> 00:10:31,298
但他们不会收到测试此应用的邀请

159
00:10:31,532 --> 00:10:34,601
直到我们向这个分组中
加入了至少一个编译版本为止

160
00:10:37,070 --> 00:10:40,774
我们可以通过点击“编译”子标签页的
加号按钮来添加一个编译版本

161
00:10:42,743 --> 00:10:45,679
这里我们有个可以浏览
所有编译版本的对话框

162
00:10:46,346 --> 00:10:47,981
当我们选择了一个编译版本时

163
00:10:48,382 --> 00:10:51,318
我们就可以借此机会来更新测试信息

164
00:10:51,518 --> 00:10:53,387
在该编译版本被送达测试者之前

165
00:10:54,521 --> 00:10:57,157
我们可以在这添加一些注释
这样测试者就可以知道

166
00:10:57,357 --> 00:10:59,560
在他们进行测试的时候都要注意些什么

167
00:11:00,861 --> 00:11:04,531
并且如果我们在应用的某个地方
添加了新的功能或者做了一些改变

168
00:11:04,731 --> 00:11:06,800
我们也可以在这提一下

169
00:11:09,703 --> 00:11:11,972
这样 编译版本就被添加到了此分组中

170
00:11:12,039 --> 00:11:14,107
然后会被送达
我们的beta测试者手上

171
00:11:15,475 --> 00:11:17,477
让我们看下测试者那边会看到什么内容

172
00:11:20,147 --> 00:11:24,451
一旦他们可以访问某个编译版本
他们就会收到测试此应用的邀请

173
00:11:25,786 --> 00:11:27,387
我们只会发一次邀请

174
00:11:27,454 --> 00:11:31,258
而测试者在没有接受邀请之前
不能访问任何的编译版本

175
00:11:32,826 --> 00:11:34,661
邀请看起来是这样的

176
00:11:35,095 --> 00:11:37,331
当测试者点击
“在TestFlight中阅览”时

177
00:11:37,397 --> 00:11:38,832
就会启动TestFlight 应用

178
00:11:42,402 --> 00:11:45,472
在这里 测试者可以接受邀请

179
00:11:45,572 --> 00:11:46,940
并且安装beta应用

180
00:11:49,176 --> 00:11:51,979
他们还可以看到我们所添加的
要对什么进行测试的注释

181
00:11:53,413 --> 00:11:56,350
并且他们可以通过点击
“发送反馈”来提供反馈

182
00:11:58,318 --> 00:12:01,088
比如 现在我们的测试者
已用了一阵子我们的编译版本

183
00:12:01,355 --> 00:12:03,924
并且他们已经发给我们
一个关于找到了错误的反馈

184
00:12:04,458 --> 00:12:08,061
我们可以利用这个反馈来修复错误
并且上传一个新的编译版本

185
00:12:09,630 --> 00:12:12,132
我们可以将这个编译版本
加到beta测试者分组

186
00:12:13,700 --> 00:12:16,904
在我们收到提示的时候
就可以更新测试信息

187
00:12:16,970 --> 00:12:19,406
让测试者知道错误已经被修复了

188
00:12:21,975 --> 00:12:23,577
在此编译版本被添加到分组之后

189
00:12:24,011 --> 00:12:28,348
它就会被送到beta测试者手中
这样他们就可以安装和验证这个修复了

190
00:12:29,950 --> 00:12:33,987
这是个很简单的方法 利用分组
来将编译版本发送给你的测试者

191
00:12:34,788 --> 00:12:37,057
但是除了从你的应用中寻找错误

192
00:12:37,691 --> 00:12:40,761
你也可以使用分组来收集反馈

193
00:12:41,361 --> 00:12:43,363
这些反馈可能是来自于
你的一些重要用户

194
00:12:43,430 --> 00:12:45,699
他们喜欢在早起迭代版本就给出反馈

195
00:12:46,200 --> 00:12:49,236
或者是来自于你的总裁
或者是来自于你潜在的投资者

196
00:12:51,138 --> 00:12:52,372
你可能不想给他们

197
00:12:52,439 --> 00:12:54,775
与你给beta测试者一样的编译版本

198
00:12:55,409 --> 00:12:57,044
你要确保已经解决了

199
00:12:57,110 --> 00:12:59,112
所有的问题
在你将编译版本发给他们之前

200
00:13:00,747 --> 00:13:03,483
我们可以再建一个新分组
就能轻松实现这个目的

201
00:13:05,419 --> 00:13:06,987
我们还是从左侧导航栏点击“新分组”

202
00:13:08,522 --> 00:13:09,623
给新分组起个名字

203
00:13:11,091 --> 00:13:13,060
我们叫这个分组“利益相关者”

204
00:13:14,928 --> 00:13:18,799
我们会将一些重要用户加入到此分组
然后当我们准备之后

205
00:13:18,899 --> 00:13:22,536
我们会选择一个已经被beta测试者
细致测试过的编译版本

206
00:13:22,769 --> 00:13:24,471
然后将其添加到利益相关者分组

207
00:13:25,305 --> 00:13:27,641
这个稳定的编译版本
会被送达利益相关者的手中

208
00:13:27,708 --> 00:13:29,543
这样他们就可以开始提供反馈了

209
00:13:31,945 --> 00:13:34,281
这个例子给你们展示了
如何灵活运用分组功能

210
00:13:34,448 --> 00:13:37,017
来将不同的编译版本发给不同的测试者

211
00:13:39,620 --> 00:13:40,988
再由此延伸一下

212
00:13:41,088 --> 00:13:45,692
我们甚至可以创建三个不同分组
并且给其起名叫“alpha” “beta”

213
00:13:45,959 --> 00:13:47,494
还有“预发布版本”

214
00:13:49,229 --> 00:13:51,698
你可以把经常用到的编译版本
推送到“alpha”分组

215
00:13:52,065 --> 00:13:56,170
并且要保证任何问题
对于该分组内的测试者都是独立的

216
00:13:57,571 --> 00:13:59,072
随着你的编译版本变得更稳定

217
00:13:59,673 --> 00:14:01,742
你可以将它升级到
更大的“beta”分组

218
00:14:03,610 --> 00:14:05,746
一旦你确信

219
00:14:05,812 --> 00:14:07,080
你编译版本的稳定性已经很高了

220
00:14:07,147 --> 00:14:09,750
你就可将其升级到“预发布版本”分组

221
00:14:11,118 --> 00:14:13,153
即使这个时候你已经修复了所有的错误

222
00:14:13,253 --> 00:14:15,989
你仍然可以从“预发布版本”
分组的测试者那里

223
00:14:16,323 --> 00:14:18,458
收集更多的反馈 在发布

224
00:14:18,525 --> 00:14:20,260
最终版本到App Store之前

225
00:14:23,797 --> 00:14:29,269
我们还可以使用分组来处理
开发过程中的两个独立的开发线

226
00:14:32,506 --> 00:14:34,608
例如我们可以再创建一个新分组

227
00:14:34,675 --> 00:14:37,611
这个新分组只被用于实验性功能

228
00:14:38,478 --> 00:14:41,281
我们可以保证
所加到这个分组中的编译版本

229
00:14:41,481 --> 00:14:43,684
是跟我们的标准发布隔离开的

230
00:14:44,184 --> 00:14:47,888
我们可以准确控制
哪些测试者可以访问哪些编译版本

231
00:14:48,889 --> 00:14:52,492
我给你们介绍了几种使用分组来
进行编译版本分发的方法

232
00:14:52,559 --> 00:14:53,894
我相信你们可以想到更多

233
00:14:54,761 --> 00:14:56,563
我想演示的另一个例子

234
00:14:56,897 --> 00:15:00,968
就是在你连编译版本都没有的时候
应该如何组织你的测试者

235
00:15:01,568 --> 00:15:04,838
这里我们可以创建一个
叫“WWDC”的新分组

236
00:15:05,639 --> 00:15:08,008
你可以添加在演讲中遇到的联络人

237
00:15:08,342 --> 00:15:11,278
他们可能想试用一下
你预发布版本的应用

238
00:15:12,412 --> 00:15:14,248
他们不会收到邀请

239
00:15:14,314 --> 00:15:16,183
直到你已给他们准备好了一个编译版本

240
00:15:16,250 --> 00:15:17,217
而且你将其添加到了此分组中

241
00:15:21,088 --> 00:15:25,025
这里还有个特殊的默认分组
叫作“iTunes Connect用户”

242
00:15:25,459 --> 00:15:27,761
这个分组被用于你的内部分组

243
00:15:28,829 --> 00:15:29,863
这是什么意思呢？

244
00:15:31,565 --> 00:15:36,470
只有你iTunes Connect团队成员
才可以被添加为此分组的测试者

245
00:15:37,271 --> 00:15:38,839
不像是其他的分组

246
00:15:39,273 --> 00:15:43,243
你内部分组的成员可以访问
所有的TestFlight编译版本

247
00:15:43,744 --> 00:15:46,346
所以你可以为开发者团队使用这个分组

248
00:15:47,047 --> 00:15:49,049
或是那些跟开发周期有着紧密联系的人

249
00:15:52,319 --> 00:15:54,588
我们已经介绍了一些
如何组织测试者的方法

250
00:15:54,655 --> 00:15:56,490
来让他们访问不同的编译版本

251
00:15:57,624 --> 00:15:59,826
让我们看下测试者可以如何

252
00:15:59,893 --> 00:16:01,461
与他们访问的编译版本进行交互

253
00:16:04,298 --> 00:16:06,233
在他们可以访问某个编译版本后

254
00:16:07,234 --> 00:16:08,068
对不起

255
00:16:08,135 --> 00:16:10,671
在TestFlight应用中
我们总是会给测试者显示

256
00:16:10,737 --> 00:16:12,739
他们可用的最新编译版本

257
00:16:14,741 --> 00:16:16,910
他们可以在这里看到之前的编译版本

258
00:16:17,544 --> 00:16:19,446
但只能看到他们可访问的那些编译版本

259
00:16:21,348 --> 00:16:23,684
他们可以看到关于要测试什么的注释

260
00:16:24,284 --> 00:16:27,621
并且他们可以通过点击“安装”
来轻松在不同版本之间进行切换

261
00:16:28,989 --> 00:16:30,524
这真的挺不错
你可在任意时间

262
00:16:30,591 --> 00:16:32,759
于不同的beta版本之间切换

263
00:16:33,293 --> 00:16:34,795
我们的QA团队真的很喜欢这个功能

264
00:16:37,898 --> 00:16:39,900
接下来让我们看下测试者管理

265
00:16:41,068 --> 00:16:43,437
回到iTunes Connect程序中
在“所有测试者”下面

266
00:16:43,971 --> 00:16:46,106
我们可以看到都有谁已经接受了邀请

267
00:16:47,508 --> 00:16:50,644
我们可以通过状态来排序
就可以找到还没有同意邀请的测试者

268
00:16:52,246 --> 00:16:56,517
如果需要的话 我们可以通过点击
“重发邀请”来给他们发送一个新邀请

269
00:16:58,952 --> 00:17:00,521
我们还有个会话计数

270
00:17:00,654 --> 00:17:04,223
它可以告诉我们每个测试者
已经用过多少次我们的应用了

271
00:17:06,593 --> 00:17:07,994
如果我们想移除某个测试者

272
00:17:08,127 --> 00:17:09,997
我们通过点击“编辑”就能轻松实现

273
00:17:10,531 --> 00:17:12,398
只要选择
我们想要移除的测试者

274
00:17:13,634 --> 00:17:15,801
然后点击“移除”就可以了

275
00:17:17,037 --> 00:17:19,606
现在如果你从“所有测试者”区域
移除了某个测试者

276
00:17:20,207 --> 00:17:21,875
就会把该测试者从你的应用中移除

277
00:17:22,509 --> 00:17:26,280
他们会被从所有的分组中移除
并且不能再访问任何编译版本了

278
00:17:27,580 --> 00:17:30,517
当然了 你也可以将一个测试者
从某个特定分组中移除

279
00:17:31,018 --> 00:17:34,188
这样就只会移除他们访问
那个分组内编译版本的权限

280
00:17:37,157 --> 00:17:39,927
我们的另一个测量数据就是崩溃计数

281
00:17:40,627 --> 00:17:43,697
它会给我们展示哪个测试者碰到了问题

282
00:17:44,464 --> 00:17:46,633
如果他们还没有提供任何反馈的话

283
00:17:46,700 --> 00:17:48,502
你就可以主动去联系一下他们

284
00:17:51,772 --> 00:17:54,675
这些测量数据在分组页面中也能找到

285
00:17:55,142 --> 00:17:59,379
这里你所看到的数字
只和该分组内的编译版本有关

286
00:18:02,182 --> 00:18:04,885
当你将编译版本发给测试者时

287
00:18:04,952 --> 00:18:07,287
它们在过期前都是可以被安装的

288
00:18:08,789 --> 00:18:09,823
编译版本何时过期？

289
00:18:11,725 --> 00:18:15,362
编译版本会在它们
被上传的90天后自动过期

290
00:18:17,064 --> 00:18:19,499
你可以早点将某个编译版本
从分发中移除

291
00:18:19,566 --> 00:18:22,870
通过进入“编译版本细节”页面
并点击“使编译版本过期”

292
00:18:27,140 --> 00:18:29,142
这样做会阻止后面的安装

293
00:18:29,309 --> 00:18:33,280
但是已经安装好的测试者
仍然可以启动应用

294
00:18:33,347 --> 00:18:35,849
一直到最开始的90天截止日期

295
00:18:39,019 --> 00:18:43,724
你还需要记住的是 你现在被限制
只能使用2000名外部测试者

296
00:18:44,658 --> 00:18:47,461
今年晚些时候我们会增加这个数字

297
00:18:48,795 --> 00:18:50,764
我们会将它增加到10000

298
00:18:55,002 --> 00:18:56,570
我们对此感到十分激动

299
00:18:59,239 --> 00:19:01,074
这就是一些小技巧

300
00:19:01,141 --> 00:19:04,578
可以用TestFlight来分发
你的预发布版本应用

301
00:19:05,112 --> 00:19:07,147
你可以在“开发者指南”中
找到关于这方面的更多信息

302
00:19:07,981 --> 00:19:10,717
你还会找到一个有关
TestFlight发布注意事项的链接

303
00:19:10,951 --> 00:19:14,488
在那你可以掌握关于新功能
和未来STK支持的最新动向

304
00:19:15,389 --> 00:19:17,824
我会讲台交回给Daniel
让他来给你们讲一下 谢谢大家

305
00:19:25,666 --> 00:19:28,936
谢谢你 Tommy
这些真的是不错的新功能

306
00:19:29,002 --> 00:19:30,170
我们把这些功能
添加到了TestFlight中

307
00:19:31,038 --> 00:19:33,440
包括同时分发

308
00:19:33,507 --> 00:19:35,776
多个编译版本给测试者

309
00:19:37,044 --> 00:19:40,781
我们还介绍了分组测试者
还有将编译版本分发到这些分组中

310
00:19:41,615 --> 00:19:45,719
当然还有从2000名
测试者的限额增加到10000

311
00:19:48,155 --> 00:19:51,491
接下来让我们换个话题
介绍下新的App Store

312
00:19:52,593 --> 00:19:54,561
你们整个周一直在听
关于这方面的消息

313
00:19:55,162 --> 00:19:58,232
我们从草图开始
重新设计了App Store

314
00:19:58,832 --> 00:20:04,238
我们这样做不仅是为了让用户
可以很容易找到新的应用

315
00:20:05,305 --> 00:20:07,274
还是为了能显示出丰富的文化

316
00:20:07,341 --> 00:20:10,344
围绕着现在已有的应用生态系统

317
00:20:14,481 --> 00:20:16,783
而这是从“今天”标签页开始的

318
00:20:18,252 --> 00:20:20,387
这个标签页就是一个每日目标

319
00:20:20,787 --> 00:20:24,458
其包含了很多的应用

320
00:20:24,525 --> 00:20:26,894
这些应用是由我们编辑团队
所选取并变成故事的

321
00:20:27,694 --> 00:20:31,064
这些故事不仅会告诉用户
他们喜欢的应用

322
00:20:31,398 --> 00:20:32,766
还会告诉他们为何喜欢这些应用

323
00:20:35,536 --> 00:20:39,373
通过点击“今天”标签页的任一图标

324
00:20:39,439 --> 00:20:43,810
或是App Store中的其他位置
你就可以看到产品页面

325
00:20:44,444 --> 00:20:46,446
产品页面就是我们某个应用的主页

326
00:20:47,948 --> 00:20:50,918
而iTunes Connect
的变化

327
00:20:51,552 --> 00:20:55,255
对新App Store产生的影响
多数会浮现于这个页面当中

328
00:20:56,089 --> 00:20:57,758
让我们来看下其中的一些变化

329
00:20:59,593 --> 00:21:01,428
首先让我们来看下应用的图标

330
00:21:02,629 --> 00:21:05,132
从iOS 11和Xcode 9开始

331
00:21:05,199 --> 00:21:08,468
你就不会在iTunes Connect中
管理你的应用图标了

332
00:21:09,236 --> 00:21:15,209
取而代之 你要把图标添加到
应用二进制的资源目录下

333
00:21:20,747 --> 00:21:25,752
有了这个变化 你就可以
为你的图标使用宽色域图像了

334
00:21:25,986 --> 00:21:29,523
这样你就可以在所有支持的设备上
显示全保真度的图标了

335
00:21:31,758 --> 00:21:34,561
而且如果你在处理多色彩空间的话

336
00:21:34,928 --> 00:21:37,898
你就可以利用
Xcode的颜色管理功能

337
00:21:38,365 --> 00:21:43,437
来确保你的图标
在所有的目标设备上都可以准确地显示

338
00:21:45,205 --> 00:21:46,640
而且归功于应用削减

339
00:21:46,773 --> 00:21:49,877
你就不用再担心送达给用户的二进制

340
00:21:49,943 --> 00:21:53,580
会毫无意义地变大
只是因为你加了一个图标

341
00:21:57,150 --> 00:21:59,119
接下来让我们谈下副标题区域

342
00:22:00,387 --> 00:22:04,458
副标题是一个用来做简要介绍的新区域

343
00:22:04,525 --> 00:22:08,795
它可以让你的应用体验
更加简洁和引人注目

344
00:22:10,063 --> 00:22:12,933
这个区域可以写至多30个字符

345
00:22:13,000 --> 00:22:15,035
它就是用来补充你的应用名字的

346
00:22:15,769 --> 00:22:18,839
这就意味着
每当你的应用名字出现在商店中时

347
00:22:19,306 --> 00:22:21,642
你的副标题会随着它一起出现

348
00:22:22,242 --> 00:22:25,846
可以是产品页面 搜索页面
或者是任意的新标签页

349
00:22:27,147 --> 00:22:30,317
你们当中很多人已经将这个信息
加到了你的应用中

350
00:22:31,418 --> 00:22:33,287
你的应用名称看起来可能像是这样

351
00:22:35,122 --> 00:22:37,491
现在有了副标题区域

352
00:22:37,624 --> 00:22:41,962
你可以把这个信息从应用名称中移除
并且着重强调你的品牌

353
00:22:42,029 --> 00:22:46,600
这可以让你的应用名称更加独立
而不用为了可搜索性

354
00:22:46,867 --> 00:22:48,902
或副标题所带来的上下文环境
而做出牺牲

355
00:22:52,406 --> 00:22:55,943
当我们浏览到产品页面时
可以看到应用评论

356
00:22:58,378 --> 00:22:59,246
在新的App Store中

357
00:22:59,313 --> 00:23:05,719
你可以提交至多三个应用预览
而且是每种语音可以提交三个预览

358
00:23:07,421 --> 00:23:11,959
在你的用户浏览商店的时候
预览就会自动播放

359
00:23:12,025 --> 00:23:16,129
这就让你的应用更加生动
而且可以立刻打动用户

360
00:23:19,399 --> 00:23:21,902
在应用预览的下面
我们可以看到描述信息

361
00:23:23,737 --> 00:23:28,609
而在描述信息前面的
是一条推广文本信息

362
00:23:29,610 --> 00:23:30,444
在iTunes Connect中

363
00:23:30,511 --> 00:23:33,313
你会发现这个新的区域
一直是可以编辑的

364
00:23:34,147 --> 00:23:37,184
它就是用来写需要经常变更的信息的

365
00:23:38,018 --> 00:23:40,320
今天你可能想让用户知道

366
00:23:40,387 --> 00:23:43,056
你的应用会限时免费

367
00:23:43,123 --> 00:23:45,359
或者是假日周末六折优惠

368
00:23:46,360 --> 00:23:51,698
在未来 你的描述信息会在
有应用评论之后被锁定

369
00:23:52,099 --> 00:23:55,435
所以请专区专用

370
00:23:58,438 --> 00:24:01,742
我们还有个
令人激动的功能想介绍一下

371
00:24:02,042 --> 00:24:06,079
它可以让你的程序内购买
直接出现在App Store中

372
00:24:06,213 --> 00:24:09,449
让你的用户可以马上就使用
这些程序内购买

373
00:24:10,350 --> 00:24:13,153
我想请Will Avrell上台来
给你们介绍一下这方面的更多内容

374
00:24:20,093 --> 00:24:20,928
谢谢你Daniel

375
00:24:21,962 --> 00:24:24,565
我们非常高兴地宣布 我们第一次

376
00:24:25,098 --> 00:24:28,235
让程序内购买可以在
App Store中直接被搜索到

377
00:24:30,070 --> 00:24:31,371
别控制 鼓掌吧

378
00:24:33,407 --> 00:24:34,274
另外

379
00:24:34,341 --> 00:24:38,145
用户可以直接在App Store中
进行程序内购买

380
00:24:38,378 --> 00:24:41,248
并且直接被带到你的应用来完成购买

381
00:24:41,815 --> 00:24:44,284
总之 我们觉得这对于开发者来说
是非常棒的方法

382
00:24:44,351 --> 00:24:46,086
来增加额外的曝光度

383
00:24:46,253 --> 00:24:48,021
对于它们App Store中的
程序内购买来说

384
00:24:49,156 --> 00:24:50,858
说完了这些 让我们接着

385
00:24:50,924 --> 00:24:53,060
看看推广的程序内购买

386
00:24:53,126 --> 00:24:54,761
能在新App Store的
哪个地方被找到

387
00:24:56,930 --> 00:25:00,801
Daniel提到的第一个地方
是产品页面

388
00:25:01,268 --> 00:25:02,903
当你向下滚动产品页面时

389
00:25:02,970 --> 00:25:08,108
你会发现你的推广程序内购买
被分成了两个独立的列表

390
00:25:08,575 --> 00:25:12,679
你的订阅
和其他所有类型的程序内购买

391
00:25:13,447 --> 00:25:18,218
值得注意的是 你的每个应用
都被限制有最多20个程序内购买

392
00:25:19,286 --> 00:25:21,488
产品页面视图所特有的

393
00:25:21,555 --> 00:25:24,358
是你可以定制

394
00:25:24,424 --> 00:25:28,362
你推广程序内购买在产品页面
出现的顺序和可见性

395
00:25:29,029 --> 00:25:30,197
这就意味着你可以实现

396
00:25:30,264 --> 00:25:33,700
像是隐藏用户
已经在设备上购买过的订阅

397
00:25:33,967 --> 00:25:35,335
或者你有个解谜游戏

398
00:25:35,402 --> 00:25:38,472
你就可以把更加相关的关卡
在列表更早的位置显示

399
00:25:38,906 --> 00:25:39,740
例如

400
00:25:39,806 --> 00:25:43,343
如果你的用户在猜谜游戏中
刚刚通过了关卡二

401
00:25:43,410 --> 00:25:44,645
你可以确保关卡三

402
00:25:44,711 --> 00:25:46,547
是他们在列表中看到的第一个关卡

403
00:25:47,614 --> 00:25:49,383
让我们继续说

404
00:25:49,983 --> 00:25:53,687
推广程序内购买现在可以
在App Store中被搜索到了

405
00:25:55,189 --> 00:25:57,257
这意味着你可以用这个搜索标签

406
00:25:57,324 --> 00:25:58,692
你可以通过名字搜索

407
00:25:58,759 --> 00:26:02,062
或者通过你推广程序内购买的描述
来搜索 并且看到搜索结果

408
00:26:03,096 --> 00:26:05,465
我们还加入了一个新的“热门”区域

409
00:26:05,999 --> 00:26:07,467
来给推广程序内购买搜索使用

410
00:26:07,534 --> 00:26:10,370
它和我们现有的热门应用页很相似

411
00:26:11,738 --> 00:26:14,541
最后 推广程序内购买

412
00:26:14,775 --> 00:26:17,611
是可以被App Store编辑团队
作为特色展示的

413
00:26:18,478 --> 00:26:20,581
这就意味着你的应用可以被特色展示

414
00:26:20,647 --> 00:26:24,318
在今日 应用或者游戏标签页

415
00:26:26,153 --> 00:26:27,287
在这个区域

416
00:26:27,487 --> 00:26:30,424
会有一个关于你
推广程序内购买的不错介绍

417
00:26:30,657 --> 00:26:32,659
点击除“购买”之外的任意内容

418
00:26:32,726 --> 00:26:34,428
都会把你带到产品页面

419
00:26:34,728 --> 00:26:38,966
而点击“购买”按钮会打开应用
并且完成购买

420
00:26:39,733 --> 00:26:43,403
我介绍了很多关于
推广程序内购买是什么

421
00:26:43,470 --> 00:26:45,539
还有它们在新App Store
出现位置的内容

422
00:26:45,873 --> 00:26:48,842
现在让我们谈下
你作为一名开发者需要做什么

423
00:26:48,942 --> 00:26:53,447
来实现将一个普通的程序内购买
变成推广的程序内购买

424
00:26:54,147 --> 00:26:57,150
我们要分三步实现

425
00:26:57,684 --> 00:27:00,020
头两步是在iTunes Connect中
进行管理的

426
00:27:00,454 --> 00:27:05,492
但是严格来说
你必须要定义一些推广的数据

427
00:27:05,659 --> 00:27:07,361
供推广程序内购买使用

428
00:27:07,661 --> 00:27:10,531
这些数据包括一个图片 一个名字
还有一个描述

429
00:27:11,665 --> 00:27:13,500
这就是该信息的三个组成部分

430
00:27:13,567 --> 00:27:16,003
它们都可在App Store中看到

431
00:27:16,370 --> 00:27:20,607
正因如此
它们必须被应用审查团队所审查

432
00:27:21,675 --> 00:27:23,944
你可能对名字和描述很熟悉了

433
00:27:24,077 --> 00:27:26,380
因为iTunes Connect中
现在就有这些区域

434
00:27:26,813 --> 00:27:28,849
不过我们对字数限制做了点微调

435
00:27:29,016 --> 00:27:32,452
新的字符数限制分别是30和45

436
00:27:33,654 --> 00:27:37,024
当在iTunes Connect中
设置好推广数据之后

437
00:27:37,291 --> 00:27:39,593
你需要配置你的程序内购买

438
00:27:40,027 --> 00:27:41,795
你要完成像是激活这类的操作

439
00:27:41,862 --> 00:27:44,331
这样我们就会知道不要用
20个字符的限制去数它

440
00:27:44,831 --> 00:27:47,668
而且你需要设置一个默认的顺序
和可视性

441
00:27:47,734 --> 00:27:49,436
来给你的推广程序内购买

442
00:27:49,703 --> 00:27:51,471
就如会在产品页面中出现的那样

443
00:27:53,173 --> 00:27:57,344
最后 你需要实现一些storeKit API
就像是这个

444
00:27:57,778 --> 00:28:02,049
但是你一定要实现这个单一代理方法

445
00:28:02,182 --> 00:28:05,219
在SK Payment Transaction
Observer Protocol上

446
00:28:05,953 --> 00:28:08,455
如果你没有实现这个单一代理方法

447
00:28:08,789 --> 00:28:11,892
你的推广程序内购买
就不会出现在App Store中

448
00:28:13,427 --> 00:28:16,597
我之前提到了定制你推广程序内购买
的顺序和可视性

449
00:28:16,663 --> 00:28:19,800
就如它们出现在产品页面的那样

450
00:28:20,167 --> 00:28:21,201
其实现

451
00:28:21,268 --> 00:28:24,671
是通过SK Products Store
Promotion Controller API完成的

452
00:28:25,506 --> 00:28:28,008
就像我所说的 使用这个API

453
00:28:28,208 --> 00:28:31,612
你就可以在产品页面上显示有更多
关系的推广程序内购买

454
00:28:32,346 --> 00:28:35,048
我不会详细讲要如何
通过代码实现这个功能

455
00:28:35,115 --> 00:28:38,752
或是那些给人留下深刻印象的

456
00:28:38,819 --> 00:28:41,755
你可以通过这个可选
storeKit API实现的功能

457
00:28:41,989 --> 00:28:44,992
但请一定去听
“Store Kit新特性”演讲

458
00:28:45,259 --> 00:28:46,727
它会在明天上午11点举办

459
00:28:46,927 --> 00:28:50,264
来搞清楚如何使用并且实现这些API

460
00:28:51,098 --> 00:28:55,469
就如我介绍过的那样
实现推广程序内购买的前两步

461
00:28:55,536 --> 00:28:56,937
是在iTunes Connect中
完成的

462
00:28:57,404 --> 00:28:59,606
我想花点时间来给你们做个演示

463
00:28:59,673 --> 00:29:02,809
看看是什么样的
如果把普通程序内购买设置成

464
00:29:02,876 --> 00:29:04,478
推广的程序内购买的话

465
00:29:04,678 --> 00:29:06,713
这个功能会在今年夏天晚些时候发布

466
00:29:11,018 --> 00:29:12,920
希望你们每个人都很熟悉这个视图

467
00:29:12,986 --> 00:29:16,723
我在这所做的就是进入
iTunes Connect的网站

468
00:29:16,790 --> 00:29:18,592
通过我的用户名和密码登录

469
00:29:19,359 --> 00:29:23,263
在这我们要点击“我的应用”模块

470
00:29:24,198 --> 00:29:27,000
这会把我们带到iTunes Connect的
我的应用页面

471
00:29:27,067 --> 00:29:29,203
这里会有个我们所有应用的列表

472
00:29:30,103 --> 00:29:33,040
我们一直在介绍
Forest Xplorer

473
00:29:33,106 --> 00:29:37,711
事实上 我们刚刚发布了
一个全新的订阅 叫作专业版订阅

474
00:29:37,878 --> 00:29:40,747
我们想让它在App Store中
是推广并且可见的

475
00:29:41,081 --> 00:29:43,684
首先第一步是点击
Forest Xplorer应用

476
00:29:45,219 --> 00:29:47,354
我们会来到应用信息视图

477
00:29:47,421 --> 00:29:50,357
这里我们可以看到一些应用的全局信息

478
00:29:50,424 --> 00:29:54,494
我们可以设置名字 副标题 改变分类

479
00:29:54,695 --> 00:29:56,830
但是这些并不是
我们在这考虑的主要内容

480
00:29:56,897 --> 00:29:58,699
我们要点击下“功能”标签

481
00:29:59,600 --> 00:30:00,701
而点击“功能”标签

482
00:30:00,767 --> 00:30:03,971
就会自动选择左导航栏的程序内购买

483
00:30:04,204 --> 00:30:06,273
它就会给我们显示所有的程序内购买

484
00:30:06,340 --> 00:30:07,641
有关Forest Xplorer
应用

485
00:30:08,942 --> 00:30:11,411
我很关心专业版订阅这部分

486
00:30:11,478 --> 00:30:13,580
我现在就点击下“专业版订阅”

487
00:30:16,149 --> 00:30:19,086
然后我就可以看到程序内购买细节视图

488
00:30:19,419 --> 00:30:21,355
随着我们向下滚动页面

489
00:30:21,421 --> 00:30:22,623
里面很多内容你们该都很熟悉

490
00:30:22,689 --> 00:30:24,658
如果你原来在iTunes Connect中
用过程序内购买

491
00:30:25,125 --> 00:30:28,362
不过还有个全新的部分 叫作
App Store Promotion

492
00:30:28,629 --> 00:30:31,265
我们可以从这开始将程序内购买设置为

493
00:30:31,331 --> 00:30:33,066
推广的程序内购买

494
00:30:33,901 --> 00:30:36,436
我们首先要做的就是上传一张图片

495
00:30:36,503 --> 00:30:39,606
我要点击“选择文件”

496
00:30:39,673 --> 00:30:41,108
很好 我的图片就在这里

497
00:30:41,408 --> 00:30:42,910
让我们看一下 看起来不错

498
00:30:44,077 --> 00:30:48,615
选择了图片之后
你马上就会注意到我们的图片被遮盖了

499
00:30:48,682 --> 00:30:52,052
并且现在就显示在
我们名字和描述的旁边

500
00:30:52,319 --> 00:30:54,555
这就给了我们一个不错的预览

501
00:30:54,621 --> 00:30:57,291
我们的推广程序内购买在
App Store中看起来是什么样的

502
00:30:58,058 --> 00:30:59,026
还有我提过了

503
00:30:59,092 --> 00:31:02,129
由于这三部分数据
是出现在App Store中的

504
00:31:02,296 --> 00:31:03,297
它们必须被审查

505
00:31:03,363 --> 00:31:05,766
即使我们的专业版订阅程序内购买

506
00:31:05,832 --> 00:31:07,434
已经通过审核并且可以开卖了

507
00:31:09,937 --> 00:31:10,904
另外 我会介绍下

508
00:31:10,971 --> 00:31:14,775
这里的选择框 也就是你默认的可见性

509
00:31:15,309 --> 00:31:17,511
在本例中 我们不想

510
00:31:17,578 --> 00:31:19,680
实现可选的storeKit API

511
00:31:19,880 --> 00:31:22,015
所以我们最好勾选上这个选择框

512
00:31:22,082 --> 00:31:25,419
因为如果我们不勾选这个选择框
且没实现storeKit API

513
00:31:25,652 --> 00:31:27,554
我们就不能重写可见性的假值

514
00:31:27,621 --> 00:31:29,389
它也就永远不会
显示在App Store中了

515
00:31:29,590 --> 00:31:31,091
所以我要勾选上这个选择框

516
00:31:32,392 --> 00:31:34,561
我还发现当我上传了图片的时候

517
00:31:34,862 --> 00:31:37,130
我的名字和描述区域变了颜色

518
00:31:37,197 --> 00:31:40,267
这是因为我们引入了
对于这些区域新的限制

519
00:31:40,400 --> 00:31:44,671
所以我旧的名字和描述
就比允许的限制长了

520
00:31:44,738 --> 00:31:46,273
所以我要编辑一下这些内容

521
00:31:46,707 --> 00:31:49,109
我要把这里改成专业版订阅

522
00:31:52,513 --> 00:31:55,082
然后我要把持续时间从描述中移除

523
00:31:56,850 --> 00:31:59,586
这就可以了
现在这两个区域就都在限制之下了

524
00:31:59,820 --> 00:32:01,455
现在我就可以点击“保存”了

525
00:32:02,656 --> 00:32:05,259
我已经设置好了
这个程序内购买的推广数据

526
00:32:05,692 --> 00:32:08,028
差不多要完成了
不过我还需要配置一下它

527
00:32:08,529 --> 00:32:09,863
要配置这个程序内购买

528
00:32:09,930 --> 00:32:12,132
使其成为一个推广的程序内购买

529
00:32:12,366 --> 00:32:14,735
我需要进到App Store
推广导航

530
00:32:14,801 --> 00:32:15,669
它就在左边这里

531
00:32:16,436 --> 00:32:19,439
它会给我显示我所有程序内购买的列表

532
00:32:19,540 --> 00:32:21,875
还有与它们相关联的推广数据

533
00:32:22,309 --> 00:32:25,546
你可以看到我的专业版订阅
被加到了列表的最上面

534
00:32:25,846 --> 00:32:26,914
但是它还没有被激活

535
00:32:26,980 --> 00:32:29,149
也就意味着它不会被
显示到App Store上

536
00:32:29,917 --> 00:32:33,787
要激活我的专业版订阅
我只需要勾选这里的选择框

537
00:32:34,087 --> 00:32:35,956
你就会发现 勾选了选择框后

538
00:32:36,023 --> 00:32:38,058
就会自动给它一个位置1

539
00:32:38,559 --> 00:32:41,461
这些排序或者说排列位置是可以管理的

540
00:32:41,528 --> 00:32:44,164
通过滑动这些框

541
00:32:44,231 --> 00:32:45,699
这里我把它移动到位置2

542
00:32:46,133 --> 00:32:47,201
然后把它移动到位置3

543
00:32:49,403 --> 00:32:50,571
你也可以点击这个箭头

544
00:32:50,637 --> 00:32:53,273
它可以很方便地自动将
所选框移动到列表的最上面

545
00:32:54,808 --> 00:32:55,843
正如我提到过的那样

546
00:32:55,909 --> 00:32:59,680
你的每个应用只能有最多20个
激活的推广程序内购买

547
00:33:00,080 --> 00:33:02,950
但是对于推广数据的设置
你想要多少个都可以

548
00:33:03,183 --> 00:33:06,854
所以这个列表有可能会变得特别长
为了帮助你们进行管理

549
00:33:06,920 --> 00:33:08,488
我们在右边这里有一个过滤器

550
00:33:08,889 --> 00:33:12,593
你可以过滤推广的
以及未推广的程序内购买

551
00:33:13,961 --> 00:33:15,262
我们喜欢它现在的样子

552
00:33:15,329 --> 00:33:17,297
我们想把专业版订阅放到列表的第一位

553
00:33:17,364 --> 00:33:18,966
现在我们就可以点击“保存”了

554
00:33:20,400 --> 00:33:21,702
你可以很轻松地
在iTunes Connect中设置

555
00:33:21,768 --> 00:33:24,037
推广的程序内购买

556
00:33:24,338 --> 00:33:26,440
现在我想把讲台交回给Daniel

557
00:33:26,607 --> 00:33:27,441
感谢你们的参与

558
00:33:39,219 --> 00:33:40,053
谢谢你 Will

559
00:33:42,923 --> 00:33:45,192
推广程序内购买这个功能

560
00:33:45,259 --> 00:33:47,427
对所有的程序内购买类型都是可用的

561
00:33:48,362 --> 00:33:51,064
不管你是有个iOS还是通用应用

562
00:33:51,298 --> 00:33:53,433
你都可以享受到这个功能带来的便利

563
00:33:54,568 --> 00:33:57,104
而且就像是新App Store的
其他部分一样

564
00:33:57,171 --> 00:33:59,673
它会在iOS 11中可用

565
00:34:02,509 --> 00:34:04,978
现在让我们谈下阶段性发布

566
00:34:06,446 --> 00:34:07,881
现在请跟我设想下

567
00:34:08,549 --> 00:34:12,886
你马上要发布应用的一个
很棒的新版本到商店中

568
00:34:13,453 --> 00:34:16,023
你对它进行了延长时间的beta测试

569
00:34:16,790 --> 00:34:19,960
你还对它进行了多轮的低测试

570
00:34:20,994 --> 00:34:22,829
你将其发布到商店的时候

571
00:34:23,764 --> 00:34:26,800
你就会发现你的生成环境崩溃了

572
00:34:29,036 --> 00:34:35,175
我们理解生产环境总是独特的

573
00:34:35,242 --> 00:34:37,043
不管你进行了多少测试

574
00:34:38,545 --> 00:34:40,547
这就是为什么我们创建了阶段性发布

575
00:34:41,849 --> 00:34:43,516
让我们来看下它是如何运作的

576
00:34:46,119 --> 00:34:50,023
当你选择了一个可用的版本
进行阶段性发布的时候

577
00:34:50,858 --> 00:34:52,960
且你将该版本推送到
App Store中

578
00:34:53,493 --> 00:34:58,131
该版本会马上就可用
就像是现在的任何其他版本那样

579
00:34:58,665 --> 00:35:00,267
所以若用户进入App Store

580
00:35:00,334 --> 00:35:05,038
进行手动更新
或是首次下载该应用的话

581
00:35:05,172 --> 00:35:06,974
他们就会收到这个最新的版本

582
00:35:07,908 --> 00:35:09,776
而阶段性发布的不同之处

583
00:35:10,444 --> 00:35:15,249
就是通过自动更新来
接收这个版本的用户

584
00:35:16,383 --> 00:35:19,653
会在一个七天的时间段内逐渐收到它

585
00:35:21,388 --> 00:35:24,958
这样在第一天
会有最多百分之一的用户

586
00:35:25,025 --> 00:35:27,027
通过自动更新收到这个版本

587
00:35:27,094 --> 00:35:28,328
这个版本就对他们可用了

588
00:35:29,196 --> 00:35:31,131
到了第二天 会有最多百分之二的用户

589
00:35:32,065 --> 00:35:33,767
到了第四天 是百分之十

590
00:35:34,835 --> 00:35:36,136
到了第七天

591
00:35:36,803 --> 00:35:39,673
所有使用了自动更新的用户

592
00:35:39,773 --> 00:35:41,508
都会收到这个最新版本的可用更新

593
00:35:42,409 --> 00:35:43,243
你记住的是

594
00:35:43,510 --> 00:35:46,313
如果当中有些用户
直接进入App Store中

595
00:35:46,480 --> 00:35:48,949
更新 或是首次下载这个应用

596
00:35:49,349 --> 00:35:52,719
他们就会马上收到这个最新的版本

597
00:35:54,188 --> 00:35:56,790
让我们看下如何在
iTunes Connect中对其进行设置

598
00:35:57,891 --> 00:35:59,526
比如说我们要发布

599
00:35:59,593 --> 00:36:02,129
Forest Xplorer应用
的一个全新版本

600
00:36:02,829 --> 00:36:04,198
我们想用阶段性发布

601
00:36:04,898 --> 00:36:08,869
要实现这个目的
在我们发布此版本之前

602
00:36:09,203 --> 00:36:11,205
我们可以到版本页面的底部

603
00:36:11,271 --> 00:36:13,574
选择“在七天内发布”

604
00:36:14,842 --> 00:36:18,178
当我们做完了这个操作
而且新版本已经出现在商店中了以后

605
00:36:18,812 --> 00:36:22,182
这部分会发生变化
我们会看到一个天数计数器

606
00:36:23,283 --> 00:36:26,153
在每一天下面有个最大用户数

607
00:36:26,220 --> 00:36:28,956
通过自动更新接收到这个版本

608
00:36:31,391 --> 00:36:36,797
比如在第三天
我们觉得生产过程有点问题

609
00:36:37,631 --> 00:36:39,800
这时候我们想暂停阶段性发布

610
00:36:41,168 --> 00:36:44,071
要实现这个功能
我们只需要选择“暂停阶段性发布”

611
00:36:44,471 --> 00:36:46,006
在这个地方的收音机按钮进行选择

612
00:36:47,841 --> 00:36:49,309
然后这个区域就会变灰

613
00:36:50,177 --> 00:36:52,646
它意味着不会再有更多的用户

614
00:36:52,713 --> 00:36:56,617
在暂停的时候
通过自动更新收到这个新版本

615
00:36:57,618 --> 00:36:59,152
如果用户直接去商店的话

616
00:36:59,219 --> 00:37:02,589
他们还是可以得到最新的版本

617
00:37:04,658 --> 00:37:05,759
现在八天后

618
00:37:06,827 --> 00:37:11,498
我们解决了性能表现问题并且
准备好恢复发布了

619
00:37:11,632 --> 00:37:14,868
这里我们只需要选择
“恢复阶段性发布”

620
00:37:15,869 --> 00:37:16,937
我们马上就恢复了

621
00:37:18,639 --> 00:37:19,940
现在我们来到了第五天

622
00:37:20,574 --> 00:37:23,744
我们很有信心生产环境

623
00:37:23,810 --> 00:37:25,546
已经可以处理全负荷运转了

624
00:37:26,246 --> 00:37:29,816
所以我们想马上将其发布给所有的用户

625
00:37:30,984 --> 00:37:32,119
为了实现这个目的

626
00:37:32,419 --> 00:37:36,123
我们可以选择
页面右上角的“向所有用户发布”

627
00:37:36,190 --> 00:37:38,058
在我们确认了之后

628
00:37:38,792 --> 00:37:41,929
现在这个版本就对所有的用户可用了

629
00:37:44,064 --> 00:37:46,733
你们今天开始就可以使用阶段性发布了

630
00:37:47,801 --> 00:37:48,869
不管

631
00:37:55,175 --> 00:37:58,545
不管你的用户在使用哪个版本的iOS

632
00:37:59,146 --> 00:38:01,481
你都可以使用这个功能

633
00:38:04,318 --> 00:38:05,419
这即阶段性发布的内容

634
00:38:06,320 --> 00:38:09,056
像是每年一样 我们想在演讲的结尾

635
00:38:09,189 --> 00:38:10,657
介绍一些应用审核的技巧

636
00:38:11,058 --> 00:38:14,494
有关如何能让你的版本
更顺利地通过审核

637
00:38:16,230 --> 00:38:17,965
首先我们要说的是

638
00:38:18,031 --> 00:38:21,835
确保你的应用在审核期间
是可以正常运行的

639
00:38:22,870 --> 00:38:26,273
我们中很多人有外部服务

640
00:38:26,340 --> 00:38:29,142
而我们的应用是依赖于这些服务
才能正常运行的

641
00:38:29,877 --> 00:38:33,614
所以请确保你的外部服务
是一直正常运转的

642
00:38:34,014 --> 00:38:37,951
否则我们就不能完成
对于你依赖这些服务的应用的审核了

643
00:38:39,686 --> 00:38:45,092
然后 请在提交前
在实际的设备上运行下你的版本

644
00:38:46,360 --> 00:38:49,663
在模拟器上运行
并不等于在实际设备上运行

645
00:38:52,032 --> 00:38:55,369
另外如果你的应用需要任何登录信息

646
00:38:55,736 --> 00:38:57,938
请把它加到版本页面上

647
00:38:58,405 --> 00:38:59,873
我们有很多的提交

648
00:38:59,940 --> 00:39:03,143
他们的登录信息要么没有
要么就是过期了

649
00:39:03,677 --> 00:39:05,646
所以在你进行版本更换的时候

650
00:39:05,712 --> 00:39:08,916
请确保这个信息是当前最新的

651
00:39:11,718 --> 00:39:14,454
如果你的应用有什么模糊的部分

652
00:39:14,521 --> 00:39:17,057
或是很难到达的区域

653
00:39:17,491 --> 00:39:19,259
请在你的应用审核注释中
提醒我们一下

654
00:39:19,693 --> 00:39:21,428
如果还有其他我们应该
对于你应用了解的内容

655
00:39:21,728 --> 00:39:24,097
也请用这个地方来告诉我们

656
00:39:27,301 --> 00:39:29,136
我们的二进制兼容性团队

657
00:39:29,203 --> 00:39:32,039
可能会通过解决中心联系你们

658
00:39:32,439 --> 00:39:33,473
如果他们担心

659
00:39:33,540 --> 00:39:37,044
你的二进制会跟OS有兼容性的问题

660
00:39:37,511 --> 00:39:40,747
所以如果他们给你发了条信息的话
也不要太担心

661
00:39:42,216 --> 00:39:46,587
最后 请使用与你应用相关的关键词

662
00:39:47,087 --> 00:39:50,090
还要用你有权使用的关键词

663
00:39:53,193 --> 00:39:54,528
这就是关于应用审核的内容

664
00:39:55,495 --> 00:39:56,563
最后总结下

665
00:39:57,331 --> 00:39:58,899
我们介绍了很多新功能

666
00:39:58,966 --> 00:40:01,101
它们改变了你处理应用的方式

667
00:40:01,568 --> 00:40:04,838
像是在beta测试中
分发编译版本的新方法

668
00:40:05,105 --> 00:40:09,276
还有你如何向用户
发布应用版本的新控制方法

669
00:40:10,978 --> 00:40:12,813
当你的应用在商店上架之后

670
00:40:13,046 --> 00:40:16,517
我们创造了一个新方法
来让你的用户找到你的应用

671
00:40:17,317 --> 00:40:19,987
当你的用户准备给你反馈的时候

672
00:40:20,320 --> 00:40:23,257
你现在有了新的方法来跟用户进行交流

673
00:40:23,323 --> 00:40:24,658
并且回复他们的反馈

674
00:40:26,460 --> 00:40:29,129
有关我们今天所介绍内容的更多信息

675
00:40:30,264 --> 00:40:34,034
还有其他相关的信息
像是应用审核 指南更新

676
00:40:34,101 --> 00:40:37,204
或者更改优惠和热门订阅的内容

677
00:40:38,272 --> 00:40:39,773
请去看下这条链接

678
00:40:41,808 --> 00:40:43,944
我们还有一些相关的演讲

679
00:40:44,578 --> 00:40:48,248
如果你对如何在Xcode中处理
应用图标感到好奇的话

680
00:40:48,849 --> 00:40:52,352
请参见“Cocoa Touch
会话录制中的新特性”

681
00:40:53,253 --> 00:40:55,689
我们今早还有一个不错的演讲

682
00:40:56,056 --> 00:40:59,326
介绍的是设计哲学以及总体思路

683
00:40:59,393 --> 00:41:00,861
有关新的App Store

684
00:41:01,295 --> 00:41:03,330
就在今天早上举办
叫作“介绍新的App Store”

685
00:41:03,397 --> 00:41:04,998
如果你没有听这个演讲

686
00:41:05,065 --> 00:41:07,701
请去看一下吧 因为真的挺有意思的

687
00:41:08,535 --> 00:41:11,205
明天我们有两个
关于storeKit的演讲

688
00:41:11,271 --> 00:41:13,807
“Store Kit新特性”和
“高级别Store Kit”

689
00:41:14,708 --> 00:41:15,742
所以如果你想了解更多

690
00:41:15,809 --> 00:41:19,112
关于我们今天所介绍功能
API方面的内容

691
00:41:19,680 --> 00:41:20,647
去参加下这两个演讲吧

692
00:41:23,016 --> 00:41:24,351
感谢你们参加我们的演讲

693
00:41:24,418 --> 00:41:27,020
我们希望你们可以在剩余大会中
度过美好时光

