1
00:00:23,516 --> 00:00:26,126
[ 掌声 ]

2
00:00:26,626 --> 00:00:27,116
>> 上午好

3
00:00:31,036 --> 00:00:32,375
我是 Bruce Nilo

4
00:00:32,375 --> 00:00:33,326
我是 UIKit 的

5
00:00:33,326 --> 00:00:34,676
一名工程经理

6
00:00:35,936 --> 00:00:36,906
今天我们将讨论

7
00:00:36,906 --> 00:00:38,676
一项新的特性

8
00:00:38,676 --> 00:00:39,696
你可能已经听说过

9
00:00:39,696 --> 00:00:41,226
它将被引入到 iOS 11中

10
00:00:42,256 --> 00:00:43,886
这是四场专题会议中的第一场

11
00:00:44,006 --> 00:00:45,806
在这四场会议期间

12
00:00:45,806 --> 00:00:47,406
我们将专门探索

13
00:00:47,406 --> 00:00:49,516
新的拖放 API 的

14
00:00:49,516 --> 00:00:51,236
广度和深度

15
00:00:51,786 --> 00:00:53,296
我们会向你展示

16
00:00:53,296 --> 00:00:56,586
用这些 API 将拖放

17
00:00:56,586 --> 00:00:58,926
嵌入到你的 App 中非常简单

18
00:00:58,926 --> 00:01:01,926
你的用户也会

19
00:01:01,926 --> 00:01:02,416
爱上这项功能

20
00:01:04,226 --> 00:01:05,876
我们首先会谈到

21
00:01:06,066 --> 00:01:08,666
拖放背后的

22
00:01:08,996 --> 00:01:10,176
目标和概念

23
00:01:11,046 --> 00:01:13,366
我们还会深入下去

24
00:01:13,366 --> 00:01:15,036
谈谈将拖放加入到

25
00:01:15,036 --> 00:01:18,056
你的 App 中所需要的

26
00:01:18,056 --> 00:01:19,246
核心 API

27
00:01:19,356 --> 00:01:20,556
之后我们会有

28
00:01:20,556 --> 00:01:21,906
一个实例演示

29
00:01:21,906 --> 00:01:23,366
看一下这些 API 有多么

30
00:01:23,366 --> 00:01:23,906
简单易用

31
00:01:24,566 --> 00:01:25,946
最后我们会提出一些建议

32
00:01:25,946 --> 00:01:28,026
提示你如何

33
00:01:28,026 --> 00:01:30,006
快速使用这项出色的

34
00:01:30,006 --> 00:01:31,066
新特性

35
00:01:34,196 --> 00:01:35,806
那什么是拖放呢

36
00:01:37,016 --> 00:01:38,366
我想我们都知道

37
00:01:38,366 --> 00:01:40,026
就是以图形方式把数据

38
00:01:40,356 --> 00:01:43,546
从一个应用程序移动到另一个

39
00:01:43,546 --> 00:01:45,146
应用程序 或者在应用程序内部

40
00:01:45,146 --> 00:01:45,896
移动的操作

41
00:01:49,516 --> 00:01:51,426
当我们开始设计拖放

42
00:01:51,426 --> 00:01:53,156
并将其引入 iOS 时

43
00:01:53,156 --> 00:01:54,346
我们想实现这些目标

44
00:01:55,226 --> 00:01:57,426
我们希望它快速并能

45
00:01:57,426 --> 00:01:58,236
迅速响应

46
00:01:59,086 --> 00:02:00,266
我们尤其不希望

47
00:02:00,266 --> 00:02:01,876
移动或拷贝不需要的

48
00:02:01,876 --> 00:02:02,426
数据

49
00:02:02,426 --> 00:02:04,146
因此我们充分利用了

50
00:02:04,146 --> 00:02:05,626
iOS 11 中新文件系统

51
00:02:05,626 --> 00:02:08,326
的功能 设计了自己的

52
00:02:08,326 --> 00:02:10,506
API  我们使这些 API

53
00:02:10,506 --> 00:02:12,076
只有在请求数据时

54
00:02:12,076 --> 00:02:13,756
才会移动数据

55
00:02:13,756 --> 00:02:16,426
此外在这样的设计中

56
00:02:16,426 --> 00:02:17,886
数据以异步方式

57
00:02:17,886 --> 00:02:19,816
传送到你的应用程序中

58
00:02:19,816 --> 00:02:21,496
这样你的 App 就不会阻止 run loop

59
00:02:21,496 --> 00:02:23,156
不会阻止用户做他们

60
00:02:23,156 --> 00:02:25,016
想做的操作

61
00:02:25,616 --> 00:02:27,136
我们还希望确保拖放的

62
00:02:27,136 --> 00:02:28,856
安全性 要高于

63
00:02:28,856 --> 00:02:30,116
粘贴板

64
00:02:30,686 --> 00:02:32,456
尤其要保证数据只能

65
00:02:32,456 --> 00:02:34,216
对目的应用程序

66
00:02:34,216 --> 00:02:36,816
也就是用户希望

67
00:02:36,816 --> 00:02:38,376
放置数据的应用程序

68
00:02:38,376 --> 00:02:38,756
可见

69
00:02:39,386 --> 00:02:40,736
但这还不够

70
00:02:40,976 --> 00:02:41,936
我们希望源应用程序

71
00:02:41,936 --> 00:02:44,136
有能力将

72
00:02:44,136 --> 00:02:46,326
获取其数据的权限

73
00:02:46,656 --> 00:02:50,506
限制在 App 本身或者

74
00:02:50,506 --> 00:02:52,046
同一团队开发的其他 App 之间

75
00:02:52,706 --> 00:02:54,886
当然也向系统中所有其他 App

76
00:02:54,886 --> 00:02:55,456
开放

77
00:02:56,086 --> 00:02:58,936
在发布 GM 版本时我们也会

78
00:02:58,936 --> 00:03:01,036
支持企业用户的

79
00:03:01,096 --> 00:03:02,966
管理配置

80
00:03:05,196 --> 00:03:08,466
最后最重要的就是

81
00:03:08,466 --> 00:03:10,166
需要为用户提供

82
00:03:10,166 --> 00:03:11,656
Multi-Touch 的体验

83
00:03:12,436 --> 00:03:13,686
为做到这一点很明显

84
00:03:13,686 --> 00:03:14,906
我们需要在很多

85
00:03:14,906 --> 00:03:16,736
重要方面对拖放提出

86
00:03:16,736 --> 00:03:17,286
新的设想

87
00:03:18,036 --> 00:03:20,196
那么来看一下

88
00:03:20,196 --> 00:03:22,126
我们设想中这一体验的

89
00:03:22,126 --> 00:03:22,616
几个方面

90
00:03:23,746 --> 00:03:25,216
在播放视频之前

91
00:03:25,216 --> 00:03:26,626
我先介绍下背景

92
00:03:26,706 --> 00:03:28,456
我这几天拍了几张

93
00:03:28,456 --> 00:03:29,796
纽约帝国大厦的照片

94
00:03:29,796 --> 00:03:31,576
下面的视频中你会

95
00:03:31,576 --> 00:03:32,986
看到我用几个

96
00:03:32,986 --> 00:03:35,106
不同的手指来完成一封邮件

97
00:03:35,106 --> 00:03:36,226
发给朋友们

98
00:03:37,356 --> 00:03:39,186
我们从 Spotlight 开始

99
00:03:39,186 --> 00:03:40,756
这里我们先拖拽一个链接

100
00:03:40,756 --> 00:03:43,146
向上滑出 Dock

101
00:03:43,916 --> 00:03:45,786
悬停在 Safari 图标上

102
00:03:45,786 --> 00:03:47,526
启动 Safari 把链接放在

103
00:03:47,526 --> 00:03:49,416
+ 按钮上打开一个

104
00:03:49,416 --> 00:03:50,516
标签页

105
00:03:51,266 --> 00:03:52,776
然后选择一些文本

106
00:03:52,776 --> 00:03:55,716
长按开始移动

107
00:03:55,716 --> 00:03:57,206
不过发现那并不是我

108
00:03:57,206 --> 00:03:59,106
想要的文本

109
00:03:59,686 --> 00:04:01,486
我可以轻松取消拖动

110
00:04:01,486 --> 00:04:03,146
然后选择我

111
00:04:03,146 --> 00:04:03,516
想要的文本

112
00:04:03,516 --> 00:04:05,836
手势仍然是长按

113
00:04:05,836 --> 00:04:07,766
文本会抬起

114
00:04:07,766 --> 00:04:10,036
接着是移动这时

115
00:04:10,066 --> 00:04:11,026
我可以和系统的其他部分

116
00:04:11,026 --> 00:04:11,856
进行交互

117
00:04:11,946 --> 00:04:13,936
我可以打开 Split View  这样就能

118
00:04:13,936 --> 00:04:15,456
更好地看到我需要的照片

119
00:04:15,456 --> 00:04:17,966
现在我可以选择

120
00:04:18,266 --> 00:04:19,586
多张帝国大厦的

121
00:04:19,586 --> 00:04:20,486
照片

122
00:04:20,736 --> 00:04:21,935
你会注意到我还在

123
00:04:21,935 --> 00:04:23,556
用另一只手拖拽着

124
00:04:23,556 --> 00:04:26,286
文本而用右手

125
00:04:26,286 --> 00:04:26,556
添加图像

126
00:04:26,556 --> 00:04:28,176
我将选择的照片

127
00:04:28,176 --> 00:04:29,796
交给左手

128
00:04:29,796 --> 00:04:31,596
以便将邮件划到

129
00:04:32,146 --> 00:04:34,656
右半屏

130
00:04:34,656 --> 00:04:36,296
再把照片交给右手

131
00:04:36,296 --> 00:04:37,766
这样就可以把它们

132
00:04:37,766 --> 00:04:39,326
放置到邮箱的编写

133
00:04:39,326 --> 00:04:39,586
区域

134
00:04:40,516 --> 00:04:46,306
[ 掌声 ]

135
00:04:46,806 --> 00:04:47,936
这就是我们所说的

136
00:04:48,036 --> 00:04:49,586
优秀的 Multi-Touch 体验

137
00:04:49,586 --> 00:04:50,686
我们看到了什么

138
00:04:50,686 --> 00:04:52,516
交互界面是即时呈现的

139
00:04:52,936 --> 00:04:55,036
它深度融合进了

140
00:04:55,036 --> 00:04:55,426
iOS 之中

141
00:04:55,646 --> 00:04:57,276
你可以从 Spotlight 中拖拽

142
00:04:57,526 --> 00:04:58,886
可以划出 Dock

143
00:04:59,056 --> 00:05:00,486
实际上系统 UI

144
00:05:00,486 --> 00:05:02,266
是基于拖放

145
00:05:02,266 --> 00:05:02,816
实现的

146
00:05:03,286 --> 00:05:05,176
视觉反馈优秀

147
00:05:05,176 --> 00:05:06,766
动画效果出众

148
00:05:06,766 --> 00:05:08,566
你可以在控件上悬停

149
00:05:08,566 --> 00:05:09,356
进行导航

150
00:05:09,586 --> 00:05:11,536
你可以添加项目到已有的

151
00:05:11,536 --> 00:05:12,406
拖拽会话

152
00:05:12,676 --> 00:05:14,966
你可以在不同手指

153
00:05:14,966 --> 00:05:16,206
以及两手之间转移拖拽

154
00:05:16,206 --> 00:05:17,946
甚至可以同时开始

155
00:05:17,946 --> 00:05:20,566
多个拖拽会话

156
00:05:21,736 --> 00:05:24,456
在讨论其中的一些

157
00:05:24,456 --> 00:05:26,896
概念之前我想先说说

158
00:05:26,896 --> 00:05:28,616
iPhone 上的拖放

159
00:05:29,416 --> 00:05:31,106
起初我们将拖放预想为

160
00:05:31,106 --> 00:05:32,956
iPad 的生产效率

161
00:05:33,006 --> 00:05:33,366
特性

162
00:05:33,966 --> 00:05:36,106
但事实上所有这些 API

163
00:05:36,176 --> 00:05:37,866
在手机上也是可用的

164
00:05:38,046 --> 00:05:39,856
但有一项限制

165
00:05:39,856 --> 00:05:41,486
就是在 iPhone 上

166
00:05:41,486 --> 00:05:45,846
我们只允许拖拽在同一个

167
00:05:45,846 --> 00:05:46,916
应用程序中执行

168
00:05:48,516 --> 00:05:51,506
那我们来看看其中的

169
00:05:51,506 --> 00:05:52,956
一些关键概念

170
00:05:53,186 --> 00:05:54,236
这些概念将提供良好基础

171
00:05:54,236 --> 00:05:56,636
帮助理解

172
00:05:56,636 --> 00:05:57,666
之后会讲到的 API

173
00:06:04,236 --> 00:06:05,696
我们先来谈谈

174
00:06:05,696 --> 00:06:07,356
拖拽会话的各个阶段

175
00:06:08,006 --> 00:06:09,786
我们将一个拖拽会话

176
00:06:09,786 --> 00:06:12,076
分解成四个阶段

177
00:06:12,076 --> 00:06:13,396
这其中源应用程序

178
00:06:13,396 --> 00:06:15,086
和目的应用程序

179
00:06:15,086 --> 00:06:15,866
都会参与

180
00:06:16,416 --> 00:06:17,946
整个过程从内容抬起开始

181
00:06:18,386 --> 00:06:19,406
抬起 就是

182
00:06:19,406 --> 00:06:21,256
长按以使视图

183
00:06:21,256 --> 00:06:22,296
离开屏幕的过程

184
00:06:22,506 --> 00:06:24,026
然后当用户

185
00:06:24,026 --> 00:06:25,826
开始拖拽时就进入了

186
00:06:25,826 --> 00:06:26,966
拖拽阶段

187
00:06:27,386 --> 00:06:28,826
这一阶段你可以

188
00:06:28,826 --> 00:06:30,496
在拖拽的同时

189
00:06:30,496 --> 00:06:31,686
更新所拖拽内容

190
00:06:31,686 --> 00:06:32,316
外观的预览

191
00:06:32,316 --> 00:06:33,836
你可以点击以添加内容

192
00:06:33,836 --> 00:06:35,256
可以悬停以进行导航

193
00:06:36,346 --> 00:06:37,356
当用户抬起手指时

194
00:06:37,356 --> 00:06:38,716
会有两种

195
00:06:38,716 --> 00:06:38,906
可能的情况

196
00:06:39,056 --> 00:06:42,926
或者是拖拽取消

197
00:06:42,926 --> 00:06:44,616
或者是用户想在

198
00:06:44,616 --> 00:06:46,756
抬起手指的位置

199
00:06:46,756 --> 00:06:47,306
放置内容

200
00:06:47,396 --> 00:06:49,616
我们提供很棒的针对性 API

201
00:06:49,616 --> 00:06:50,756
让放置动画

202
00:06:50,756 --> 00:06:52,426
效果不俗

203
00:06:53,696 --> 00:06:55,096
最后我们进入数据转移阶段

204
00:06:55,096 --> 00:06:56,746
在这一阶段

205
00:06:56,746 --> 00:06:57,956
目的应用程序

206
00:06:57,956 --> 00:06:59,706
会向源应用程序

207
00:06:59,706 --> 00:07:00,586
请求数据

208
00:07:01,146 --> 00:07:05,286
在讨论拖拽 API 的

209
00:07:05,286 --> 00:07:07,006
构成之前

210
00:07:07,006 --> 00:07:08,966
我想告诉大家

211
00:07:08,966 --> 00:07:10,626
这都是围绕着交互

212
00:07:10,626 --> 00:07:12,356
这一概念构建的

213
00:07:12,356 --> 00:07:14,366
交互是一个非常

214
00:07:14,366 --> 00:07:15,356
简单的概念

215
00:07:15,646 --> 00:07:17,746
基本上就是接收输入

216
00:07:17,746 --> 00:07:19,626
并产生某种

217
00:07:19,666 --> 00:07:20,086
效果

218
00:07:20,876 --> 00:07:22,796
拖放 API 围绕这一概念构建

219
00:07:22,796 --> 00:07:24,466
有以下几个

220
00:07:24,466 --> 00:07:25,086
原因

221
00:07:25,276 --> 00:07:27,136
第一它让我们在系统中

222
00:07:27,136 --> 00:07:28,926
为拖放提供

223
00:07:28,926 --> 00:07:30,706
一致的观感

224
00:07:31,346 --> 00:07:33,096
但最重要的是

225
00:07:33,096 --> 00:07:35,676
能让你可以非常轻松地

226
00:07:36,476 --> 00:07:38,016
把拖拽加入到你的 App 中

227
00:07:38,016 --> 00:07:39,826
而不需要重新整理代码

228
00:07:39,826 --> 00:07:41,526
或视图层次体系

229
00:07:41,996 --> 00:07:43,256
我来介绍下拖拽

230
00:07:43,256 --> 00:07:43,936
交互

231
00:07:44,556 --> 00:07:46,116
它属于一个视图

232
00:07:46,116 --> 00:07:47,516
可能你在之前演讲中

233
00:07:47,516 --> 00:07:49,776
听说过它很像一个

234
00:07:49,776 --> 00:07:51,156
手势识别器

235
00:07:51,156 --> 00:07:52,596
使用过的人会发现

236
00:07:52,596 --> 00:07:54,196
模式是一样的

237
00:07:54,596 --> 00:07:55,956
你用委托（delegate）创建一个对象

238
00:07:55,956 --> 00:07:57,746
通过这个委托

239
00:07:57,746 --> 00:07:59,826
你可以与系统进行

240
00:07:59,826 --> 00:08:00,346
交互

241
00:08:01,026 --> 00:08:03,166
比如可以让委托

242
00:08:03,166 --> 00:08:05,426
在抬起动画开始前

243
00:08:05,536 --> 00:08:07,266
返回拖拽的

244
00:08:07,316 --> 00:08:07,896
项目

245
00:08:09,136 --> 00:08:11,326
这就是针对拖拽交互委托

246
00:08:11,566 --> 00:08:13,466
所必需的方法

247
00:08:14,506 --> 00:08:16,606
委托可以没有

248
00:08:16,606 --> 00:08:18,516
返回项 这种情况下

249
00:08:18,516 --> 00:08:20,246
手势无效

250
00:08:20,246 --> 00:08:22,046
点按会按照

251
00:08:22,046 --> 00:08:22,416
正常情况处理

252
00:08:22,996 --> 00:08:25,436
那什么是拖拽项呢

253
00:08:25,986 --> 00:08:28,166
拖拽项正是

254
00:08:28,166 --> 00:08:29,336
其中的关键所在

255
00:08:29,556 --> 00:08:31,426
它是一个模型对象

256
00:08:31,426 --> 00:08:33,385
与拖拽交互所属的视图

257
00:08:33,385 --> 00:08:35,736
相关联

258
00:08:40,616 --> 00:08:43,206
在拖放功能中 拖拽项

259
00:08:43,206 --> 00:08:45,566
既包括其在屏幕上

260
00:08:45,566 --> 00:08:46,846
移动时的外观

261
00:08:46,846 --> 00:08:49,006
也就是预览

262
00:08:49,256 --> 00:08:50,756
也包括当目的应用程序

263
00:08:50,756 --> 00:08:52,936
请求数据时 源应用程序

264
00:08:52,936 --> 00:08:55,016
向其传输数据的

265
00:08:55,016 --> 00:08:55,946
承诺（promise）

266
00:08:57,586 --> 00:08:59,536
我们称这些承诺为

267
00:08:59,536 --> 00:09:00,526
Item Provider（项目提供器）在 iOS11 中

268
00:09:00,526 --> 00:09:02,806
它们由 NSItemProvider 中的

269
00:09:02,806 --> 00:09:05,046
一些新增内容执行

270
00:09:05,626 --> 00:09:09,346
那么 如何实现放置

271
00:09:10,816 --> 00:09:11,606
很简单

272
00:09:12,836 --> 00:09:14,236
第一种方法是

273
00:09:14,236 --> 00:09:17,216
利用 UIResponder 中增加的

274
00:09:17,216 --> 00:09:19,156
一项新属性

275
00:09:19,156 --> 00:09:20,616
叫做 Paste Configuration（粘贴配置）

276
00:09:21,526 --> 00:09:23,126
什么是粘贴配置呢

277
00:09:23,706 --> 00:09:25,126
大致来说它是一种声明式的

278
00:09:25,126 --> 00:09:27,806
方法来指定 UIResponder

279
00:09:27,806 --> 00:09:29,606
可以接收为

280
00:09:29,606 --> 00:09:31,536
粘贴或置放的类

281
00:09:32,426 --> 00:09:33,566
要利用粘贴配置

282
00:09:33,566 --> 00:09:34,766
你需要

283
00:09:34,766 --> 00:09:36,056
实现一种新方法叫做

284
00:09:36,126 --> 00:09:37,466
paste itemProviders

285
00:09:37,566 --> 00:09:39,366
实现后就可以

286
00:09:39,366 --> 00:09:41,426
无需额外配置 使用

287
00:09:41,426 --> 00:09:43,516
粘贴和放置

288
00:09:43,986 --> 00:09:47,666
但是对于更复杂的

289
00:09:47,666 --> 00:09:48,996
放置交互你需要

290
00:09:48,996 --> 00:09:49,926
在视图中添加一个

291
00:09:49,926 --> 00:09:51,176
放置交互

292
00:09:51,856 --> 00:09:53,506
用类似添加拖拽交互

293
00:09:53,506 --> 00:09:54,616
的方法就可以

294
00:09:54,616 --> 00:09:55,316
添加放置交互

295
00:09:56,086 --> 00:09:57,746
这样操作之后

296
00:09:57,746 --> 00:09:59,586
当拖拽到包含这种交互

297
00:09:59,586 --> 00:10:00,956
的视图上时我们会

298
00:10:00,956 --> 00:10:02,866
对委托发起查询让它

299
00:10:02,866 --> 00:10:03,986
告诉我们是否对

300
00:10:03,986 --> 00:10:05,296
拖拽到它上面的

301
00:10:05,296 --> 00:10:06,676
项目感兴趣

302
00:10:06,676 --> 00:10:09,136
委托会做出回应

303
00:10:09,136 --> 00:10:11,656
我们称之为意图

304
00:10:11,656 --> 00:10:12,126
或者建议

305
00:10:13,476 --> 00:10:16,016
抬起手指时委托可能说

306
00:10:16,016 --> 00:10:17,436
不感兴趣

307
00:10:17,436 --> 00:10:18,986
这时拖拽会取消

308
00:10:18,986 --> 00:10:20,916
所有的预览

309
00:10:20,916 --> 00:10:22,166
将通过动画 回到他们

310
00:10:22,166 --> 00:10:23,656
原来的位置或者从屏幕上

311
00:10:23,656 --> 00:10:25,286
消失以表示

312
00:10:25,286 --> 00:10:25,796
拖拽取消

313
00:10:26,526 --> 00:10:27,816
然而更有意思的是

314
00:10:27,816 --> 00:10:30,106
当委托说

315
00:10:30,106 --> 00:10:31,656
是的我对这些项目

316
00:10:31,656 --> 00:10:32,276
有兴趣 的时候

317
00:10:32,536 --> 00:10:33,726
这时系统会

318
00:10:33,726 --> 00:10:36,506
下令执行放置

319
00:10:37,086 --> 00:10:38,736
就在这个回调函数的

320
00:10:38,736 --> 00:10:40,826
作用域内

321
00:10:40,826 --> 00:10:41,886
也只有在这个作用域内

322
00:10:41,886 --> 00:10:44,226
委托才能

323
00:10:44,226 --> 00:10:46,996
请求它感兴趣的

324
00:10:47,076 --> 00:10:48,736
项目

325
00:10:48,736 --> 00:10:50,956
更确切地说是

326
00:10:50,956 --> 00:10:52,886
项目的 Representation（描述）

327
00:10:53,946 --> 00:10:55,556
一旦发出请求

328
00:10:55,556 --> 00:10:56,586
此时源应用程序

329
00:10:56,586 --> 00:10:58,106
就会履行承诺

330
00:10:58,106 --> 00:10:59,906
并且系统会

331
00:10:59,906 --> 00:11:01,686
以异步方式将数据

332
00:11:01,686 --> 00:11:03,766
传输回目的应用程序

333
00:11:06,106 --> 00:11:08,766
好的要探讨的

334
00:11:08,766 --> 00:11:09,476
还有很多

335
00:11:09,596 --> 00:11:11,096
比如从目的应用程序或者

336
00:11:11,096 --> 00:11:13,136
源应用程序的角度看

337
00:11:13,136 --> 00:11:15,186
拖拽会话的的生命周期

338
00:11:15,186 --> 00:11:16,026
是什么样的

339
00:11:16,926 --> 00:11:18,046
怎么能让放置的过渡效果

340
00:11:18,046 --> 00:11:19,476
看上去很棒

341
00:11:20,466 --> 00:11:21,516
该如何处理

342
00:11:21,516 --> 00:11:23,106
数据传输用时过长

343
00:11:23,106 --> 00:11:23,786
的问题

344
00:11:24,866 --> 00:11:26,136
回答部分问题之前

345
00:11:26,136 --> 00:11:27,296
看一下这张图会

346
00:11:27,296 --> 00:11:28,656
有所帮助因为

347
00:11:28,656 --> 00:11:29,756
它会以鸟瞰图的方式

348
00:11:29,756 --> 00:11:31,636
让你看到我们的 API

349
00:11:31,786 --> 00:11:32,536
是如何构建的

350
00:11:32,896 --> 00:11:34,116
左边蓝色部分

351
00:11:34,116 --> 00:11:35,806
可以看到一些对象和类

352
00:11:35,806 --> 00:11:37,496
源应用程序

353
00:11:37,496 --> 00:11:39,596
将使用它们实现

354
00:11:39,596 --> 00:11:40,766
拖拽

355
00:11:41,236 --> 00:11:42,516
右边部分是

356
00:11:42,516 --> 00:11:44,836
目的应用程序用来

357
00:11:44,836 --> 00:11:46,196
实现放置的对象和类

358
00:11:46,696 --> 00:11:48,236
中间部分的

359
00:11:48,236 --> 00:11:50,376
对象和类

360
00:11:50,376 --> 00:11:52,146
源应用和目的应用都会

361
00:11:52,366 --> 00:11:55,876
用到以完成拖放

362
00:11:55,876 --> 00:11:56,836
契约

363
00:11:57,396 --> 00:11:59,476
现在要探讨

364
00:11:59,476 --> 00:12:01,106
这些基本类更多的细节

365
00:12:01,106 --> 00:12:03,136
我将请上我的同事

366
00:12:03,136 --> 00:12:04,806
Kurt Revis

367
00:12:04,806 --> 00:12:05,296
上台

368
00:12:07,516 --> 00:12:11,906
[ 掌声 ]

369
00:12:12,406 --> 00:12:13,106
>> 谢谢  Bruce

370
00:12:14,076 --> 00:12:15,256
刚才  Bruce 介绍了拖放的

371
00:12:15,256 --> 00:12:16,716
整体情况

372
00:12:16,766 --> 00:12:18,276
我会向大家介绍更多

373
00:12:18,276 --> 00:12:19,886
使用拖放API

374
00:12:19,886 --> 00:12:20,206
的方法

375
00:12:21,456 --> 00:12:22,636
我会谈及三个方面

376
00:12:22,636 --> 00:12:24,366
我会介绍进行拖放时

377
00:12:24,366 --> 00:12:25,616
事件的时间线

378
00:12:25,616 --> 00:12:27,456
我会介绍

379
00:12:27,456 --> 00:12:29,376
API 中一些最核心的方法

380
00:12:29,376 --> 00:12:30,746
你需要执行这些方法

381
00:12:30,746 --> 00:12:31,946
才能在你的 App 中实现拖放

382
00:12:32,166 --> 00:12:33,496
最后 我会

383
00:12:33,496 --> 00:12:34,966
介绍完整的 API

384
00:12:35,906 --> 00:12:38,156
拖放看上去十分简单

385
00:12:38,156 --> 00:12:38,806
对吗

386
00:12:38,806 --> 00:12:40,036
屏幕上有个对象

387
00:12:40,396 --> 00:12:41,326
用户点按它

388
00:12:41,326 --> 00:12:42,526
它会抬起

389
00:12:43,166 --> 00:12:45,106
然后用户在 App 内部移动它

390
00:12:45,106 --> 00:12:46,346
也可能移动到

391
00:12:46,346 --> 00:12:46,726
另外一个 App

392
00:12:47,556 --> 00:12:48,606
最终用户松开

393
00:12:48,606 --> 00:12:49,076
手指

394
00:12:49,246 --> 00:12:49,886
按压停止

395
00:12:50,406 --> 00:12:51,666
对象被放置到

396
00:12:51,666 --> 00:12:52,286
新的位置

397
00:12:52,986 --> 00:12:54,016
当然这背后的情况

398
00:12:54,016 --> 00:12:55,566
更为复杂 那我们来说说

399
00:12:55,566 --> 00:12:57,036
何时发生何事

400
00:12:58,626 --> 00:13:00,256
一切都从点按

401
00:13:00,256 --> 00:13:02,376
含有拖拽交互的视图

402
00:13:02,376 --> 00:13:03,046
开始

403
00:13:04,016 --> 00:13:05,366
UIKit 会创建

404
00:13:05,366 --> 00:13:07,236
抬起的动画随后由于

405
00:13:07,236 --> 00:13:08,706
点按动作持续 我们

406
00:13:08,706 --> 00:13:10,256
会完整运行抬起的动画

407
00:13:10,256 --> 00:13:10,736
直至动画结束

408
00:13:11,896 --> 00:13:13,676
然后用户手指移动

409
00:13:13,676 --> 00:13:15,256
达到一定距离时我们会真正

410
00:13:15,256 --> 00:13:15,966
启动拖拽

411
00:13:16,696 --> 00:13:17,906
该对象抬起呈现于

412
00:13:17,906 --> 00:13:19,306
视图中其他内容之上以及

413
00:13:19,306 --> 00:13:22,396
所有 App 之上用户可以

414
00:13:22,396 --> 00:13:23,666
在屏幕上随意拖动

415
00:13:24,776 --> 00:13:25,926
最后 在某个位置

416
00:13:25,926 --> 00:13:27,036
用户会松开手指

417
00:13:27,296 --> 00:13:28,636
我们的操作则取决于

418
00:13:28,636 --> 00:13:29,176
这个位置

419
00:13:30,206 --> 00:13:32,236
第一种可能是

420
00:13:32,236 --> 00:13:33,566
下面的视图

421
00:13:33,566 --> 00:13:34,496
没有兴趣接收

422
00:13:34,496 --> 00:13:34,796
放置

423
00:13:35,216 --> 00:13:36,306
此时我们会运行一小段

424
00:13:36,346 --> 00:13:37,456
取消动画

425
00:13:38,716 --> 00:13:40,216
退一步看可能

426
00:13:40,216 --> 00:13:42,316
这个位置的视图

427
00:13:42,316 --> 00:13:43,366
希望接收放置

428
00:13:44,016 --> 00:13:45,036
那么就有更多的事情

429
00:13:45,036 --> 00:13:45,326
要做

430
00:13:46,036 --> 00:13:48,236
我们让放置交互的委托

431
00:13:48,236 --> 00:13:49,786
执行放置

432
00:13:49,826 --> 00:13:51,586
请求数据然后

433
00:13:51,636 --> 00:13:52,946
有两件事会同步发生

434
00:13:53,906 --> 00:13:55,496
我们会播放放置动画

435
00:13:55,556 --> 00:13:56,686
让拖拽的内容动起来

436
00:13:56,686 --> 00:13:59,246
到达最终位置并进行

437
00:13:59,246 --> 00:13:59,996
数据传输

438
00:13:59,996 --> 00:14:02,876
这两个框大小一样

439
00:14:02,926 --> 00:14:04,336
但实际上

440
00:14:04,336 --> 00:14:05,686
数据传输是异步的

441
00:14:05,776 --> 00:14:07,166
谁也不能提前预知

442
00:14:07,166 --> 00:14:08,156
需要多久完成

443
00:14:09,056 --> 00:14:09,896
可能会 [口误]

444
00:14:10,246 --> 00:14:11,656
抱歉可能会

445
00:14:11,656 --> 00:14:12,136
很快

446
00:14:12,336 --> 00:14:13,826
实际上也许比放置动画

447
00:14:13,826 --> 00:14:14,756
要快一些

448
00:14:15,726 --> 00:14:17,106
也可能会需要

449
00:14:17,106 --> 00:14:18,396
更长的时间比如

450
00:14:18,396 --> 00:14:22,016
需要下载数据

451
00:14:22,086 --> 00:14:23,186
现在大家看完了完整的

452
00:14:23,246 --> 00:14:23,756
时间线

453
00:14:23,756 --> 00:14:24,536
这就是所有可能

454
00:14:24,536 --> 00:14:24,966
发生的情况

455
00:14:25,346 --> 00:14:26,756
UIKit 负责运行

456
00:14:26,756 --> 00:14:29,146
这个时间线但在三个特定

457
00:14:29,196 --> 00:14:31,126
节点上需要你们的帮助

458
00:14:31,876 --> 00:14:33,136
第一个就是拖拽

459
00:14:33,136 --> 00:14:33,586
开始的时候

460
00:14:33,786 --> 00:14:35,146
我们需要找到要拖拽

461
00:14:35,146 --> 00:14:35,626
的项目

462
00:14:36,256 --> 00:14:37,546
我们会调用

463
00:14:37,546 --> 00:14:39,646
拖拽交互委托上必需的方法

464
00:14:39,646 --> 00:14:40,636
也就是

465
00:14:41,656 --> 00:14:42,506
dragInteraction

466
00:14:42,556 --> 00:14:44,116
itemsForBeginning session

467
00:14:44,366 --> 00:14:45,996
这会给我们返回一个包含

468
00:14:45,996 --> 00:14:46,316
拖拽项的数组

469
00:14:47,216 --> 00:14:48,256
我举个例子

470
00:14:48,706 --> 00:14:49,566
我们只拖拽一个

471
00:14:49,566 --> 00:14:51,616
字符串那么对象就是

472
00:14:51,616 --> 00:14:52,966
Hello World 这个字符串

473
00:14:53,676 --> 00:14:55,176
我把它放进

474
00:14:55,176 --> 00:14:56,046
NSItemProvider

475
00:14:56,106 --> 00:14:58,036
这是数据表达

476
00:14:58,066 --> 00:14:59,396
数据传输层面的东西

477
00:15:00,256 --> 00:15:01,356
现在注意我把它转换成

478
00:15:01,356 --> 00:15:02,216
NSString

479
00:15:02,216 --> 00:15:03,666
这是因为 NSItemProvider

480
00:15:03,666 --> 00:15:05,026
只处理对象

481
00:15:05,166 --> 00:15:06,436
不处理 Swift

482
00:15:06,436 --> 00:15:06,866
结构体

483
00:15:08,436 --> 00:15:09,956
接下来我创建一个拖拽项

484
00:15:10,066 --> 00:15:11,336
这上升到了

485
00:15:11,336 --> 00:15:11,616
拖放层面

486
00:15:12,326 --> 00:15:13,796
我用项目提供器创建

487
00:15:13,796 --> 00:15:14,466
UIDragItem

488
00:15:14,466 --> 00:15:15,976
最后返回那一个项目

489
00:15:16,016 --> 00:15:17,246
即可

490
00:15:18,336 --> 00:15:20,096
下一项 API 的核心方法在

491
00:15:20,096 --> 00:15:20,776
放置端

492
00:15:21,256 --> 00:15:22,996
当你在屏幕上

493
00:15:22,996 --> 00:15:24,296
拖拽对象时

494
00:15:24,676 --> 00:15:26,446
UIKit 在每个点上都想知道

495
00:15:26,446 --> 00:15:27,916
如果用户此时在此处

496
00:15:27,916 --> 00:15:29,236
抬起手指

497
00:15:29,286 --> 00:15:29,656
会发生什么

498
00:15:30,716 --> 00:15:32,266
这是通过放置交互委托上

499
00:15:32,266 --> 00:15:33,656
的这个方法

500
00:15:33,826 --> 00:15:34,766
实现的

501
00:15:35,336 --> 00:15:36,216
也就是 dropInteraction

502
00:15:36,696 --> 00:15:38,876
sessionDidUpdate  这会返回

503
00:15:38,876 --> 00:15:39,826
置放建议

504
00:15:40,386 --> 00:15:41,566
当我们进入这个视图

505
00:15:41,566 --> 00:15:42,826
并在当前视图内移动对象时

506
00:15:42,826 --> 00:15:44,326
就会实现这个方法

507
00:15:44,786 --> 00:15:46,096
每次你都可以返回

508
00:15:46,096 --> 00:15:46,696
新的建议

509
00:15:47,816 --> 00:15:49,476
通过 UIDropProposal 和

510
00:15:49,476 --> 00:15:51,596
放置操作就可以做到

511
00:15:52,926 --> 00:15:54,286
放置操作是一种

512
00:15:54,286 --> 00:15:54,516
枚举

513
00:15:54,516 --> 00:15:55,896
有四种可能的值

514
00:15:55,956 --> 00:15:57,086
我会按照可能性

515
00:15:57,086 --> 00:15:58,916
由大到小的顺序

516
00:15:58,916 --> 00:15:59,256
来谈

517
00:16:00,016 --> 00:16:00,976
首先是 .cancel

518
00:16:01,746 --> 00:16:02,636
就是说当用户

519
00:16:02,636 --> 00:16:03,946
抬起手指时

520
00:16:03,946 --> 00:16:04,846
不接受拖拽

521
00:16:04,906 --> 00:16:05,956
而是取消拖拽

522
00:16:07,356 --> 00:16:08,286
第二是 .copy

523
00:16:08,666 --> 00:16:09,416
这正好相反

524
00:16:09,546 --> 00:16:10,796
这意味着 确实要得到

525
00:16:10,796 --> 00:16:10,986
那份数据

526
00:16:11,136 --> 00:16:12,836
希望接收该数据并把它

527
00:16:12,836 --> 00:16:14,106
拷贝到用户放置的

528
00:16:14,106 --> 00:16:14,826
视图中去

529
00:16:15,526 --> 00:16:17,126
大多数情况下应该给出

530
00:16:17,126 --> 00:16:17,896
上面两种建议

531
00:16:18,496 --> 00:16:20,256
总体来说在 iOS 上拖放

532
00:16:20,256 --> 00:16:21,716
会将数据从一处拷贝到

533
00:16:21,716 --> 00:16:21,986
另一处

534
00:16:23,496 --> 00:16:24,396
下一个是 .move

535
00:16:24,696 --> 00:16:26,196
这很像拷贝

536
00:16:26,566 --> 00:16:27,846
但却表示你希望

537
00:16:27,846 --> 00:16:29,356
将数据从源应用程序

538
00:16:29,356 --> 00:16:30,656
移动到目的应用程序

539
00:16:31,596 --> 00:16:32,846
这更复杂一些

540
00:16:32,846 --> 00:16:34,316
你应该知道 UIKit

541
00:16:34,526 --> 00:16:36,196
无法使它看上去

542
00:16:36,246 --> 00:16:36,726
像一次移动

543
00:16:36,856 --> 00:16:37,856
我们给出数据的方式

544
00:16:37,856 --> 00:16:39,306
和拷贝时完全一样

545
00:16:40,046 --> 00:16:41,776
你的委托需要配合

546
00:16:42,146 --> 00:16:43,186
才能让它看上去像

547
00:16:43,186 --> 00:16:43,456
移动

548
00:16:44,546 --> 00:16:46,356
所以这只有在同一款 App 内

549
00:16:46,356 --> 00:16:47,236
才能进行

550
00:16:47,936 --> 00:16:49,506
你的拖拽交互委托必须

551
00:16:49,506 --> 00:16:50,266
同意才可以

552
00:16:50,676 --> 00:16:51,656
有一个委托方法

553
00:16:51,656 --> 00:16:52,966
询问委托是否同意

554
00:16:54,266 --> 00:16:55,796
拖拽交互会

555
00:16:55,796 --> 00:16:57,356
检查 UIDropSession 的

556
00:16:57,386 --> 00:16:59,106
allowsMoveOperation 属性

557
00:16:59,436 --> 00:17:00,716
如果值为真那么你就可以

558
00:17:00,816 --> 00:17:02,196
建议移动操作

559
00:17:02,646 --> 00:17:05,736
下一个是 .forbidden

560
00:17:06,026 --> 00:17:07,336
这个很像 .cancel

561
00:17:07,336 --> 00:17:08,516
但我们会在拖拽项上增加

562
00:17:08,516 --> 00:17:10,496
一个标志

563
00:17:11,195 --> 00:17:12,685
这是为了告诉用户

564
00:17:12,965 --> 00:17:14,286
正常情况下你可以

565
00:17:14,286 --> 00:17:15,846
在此放置 但在此情况下

566
00:17:15,846 --> 00:17:16,086
不可以

567
00:17:17,036 --> 00:17:18,175
例如如果我把一张图像

568
00:17:18,175 --> 00:17:19,836
拖拽到文件夹上

569
00:17:19,836 --> 00:17:21,165
正常情况下是可以的但如果

570
00:17:21,165 --> 00:17:23,236
文件夹是只读的

571
00:17:23,236 --> 00:17:24,546
就会用禁止标志

572
00:17:24,596 --> 00:17:25,665
告诉用户现在不能执行

573
00:17:25,665 --> 00:17:26,366
这个操作

574
00:17:27,076 --> 00:17:28,435
这会让人觉得反感

575
00:17:28,435 --> 00:17:29,656
所以不要经常使用

576
00:17:29,896 --> 00:17:33,026
要谨慎使用

577
00:17:33,026 --> 00:17:35,316
下面是第三个 API 核心操作

578
00:17:35,316 --> 00:17:36,796
之前你已经提议了

579
00:17:36,796 --> 00:17:37,636
一项操作

580
00:17:37,636 --> 00:17:39,136
如果是拷贝或者移动的话

581
00:17:39,136 --> 00:17:40,606
你需要执行这一操作

582
00:17:41,526 --> 00:17:43,136
那么在放置

583
00:17:43,136 --> 00:17:44,386
交互委托上你需要

584
00:17:44,386 --> 00:17:46,526
实现 dropInteraction

585
00:17:47,146 --> 00:17:47,896
performDrop

586
00:17:48,466 --> 00:17:49,776
这里 就可以从会话中

587
00:17:49,776 --> 00:17:50,776
加载数据

588
00:17:50,896 --> 00:17:52,106
实际上也只有这里

589
00:17:52,106 --> 00:17:52,576
可以加载数据

590
00:17:52,706 --> 00:17:55,046
我来举两个例子

591
00:17:55,046 --> 00:17:56,236
演示从会话中的项目

592
00:17:56,236 --> 00:17:56,616
加载数据

593
00:17:57,576 --> 00:17:58,866
第一个很简单

594
00:17:58,866 --> 00:18:00,046
我们使用会话中一项

595
00:18:00,046 --> 00:18:02,176
很便捷的方法叫做

596
00:18:02,176 --> 00:18:03,346
session.loadObjects(ofClass)

597
00:18:03,346 --> 00:18:04,706
这里我用的是 UIImage

598
00:18:05,586 --> 00:18:07,236
我调用它并且提供了

599
00:18:07,236 --> 00:18:09,286
一个闭包在那些对象

600
00:18:09,286 --> 00:18:11,136
可用时可以

601
00:18:11,136 --> 00:18:11,606
回调这个闭包

602
00:18:12,626 --> 00:18:14,406
对象进入闭包时我可以对列表

603
00:18:14,406 --> 00:18:15,076
进行迭代

604
00:18:15,266 --> 00:18:17,536
我知道他们会是 UIImage 所以

605
00:18:17,536 --> 00:18:19,126
这里进行强行转换

606
00:18:19,126 --> 00:18:19,416
没有问题

607
00:18:19,416 --> 00:18:21,426
然后就可以直接

608
00:18:21,426 --> 00:18:21,936
更新 UI

609
00:18:22,236 --> 00:18:23,656
这里我在 imageView 内

610
00:18:23,656 --> 00:18:24,706
更换图像

611
00:18:25,646 --> 00:18:27,026
这个便捷的方法会把我回调

612
00:18:27,026 --> 00:18:28,806
到主队列

613
00:18:28,806 --> 00:18:30,046
我直接就可以

614
00:18:30,046 --> 00:18:30,486
更新 UI

615
00:18:32,026 --> 00:18:33,316
下面是一个更复杂的例子

616
00:18:34,046 --> 00:18:35,166
我将对会话中的多个

617
00:18:35,166 --> 00:18:37,266
UI 拖拽项

618
00:18:37,266 --> 00:18:37,836
进行迭代

619
00:18:37,836 --> 00:18:38,926
需要的话我可以对不同的项

620
00:18:38,926 --> 00:18:40,046
进行不同的操作

621
00:18:41,366 --> 00:18:43,706
现在我要对其中一项

622
00:18:43,816 --> 00:18:45,566
使用 NSItemProvider 这是

623
00:18:45,676 --> 00:18:47,506
用来加载对象的

624
00:18:47,506 --> 00:18:47,986
底层 API

625
00:18:48,116 --> 00:18:49,176
我会加载一个类中的

626
00:18:49,176 --> 00:18:49,636
一个对象

627
00:18:49,636 --> 00:18:50,576
仍然是 UIImage

628
00:18:51,226 --> 00:18:52,426
可以看到闭包获得了

629
00:18:52,476 --> 00:18:53,036
两项内容

630
00:18:53,136 --> 00:18:55,866
有一个对象还有一个

631
00:18:55,866 --> 00:18:57,406
错误对象

632
00:18:58,206 --> 00:18:59,196
还有另外一件事情是

633
00:18:59,196 --> 00:19:00,156
它位于底层

634
00:19:00,156 --> 00:19:01,126
把我回调到

635
00:19:01,126 --> 00:19:02,066
后台队列

636
00:19:02,346 --> 00:19:03,696
所以如果我需要对数据

637
00:19:03,696 --> 00:19:04,876
做更多的处理就可以

638
00:19:04,876 --> 00:19:05,636
在此时此地直接进行处理

639
00:19:06,306 --> 00:19:08,076
但当需要更新

640
00:19:08,206 --> 00:19:09,466
UI 的时候我也要

641
00:19:09,536 --> 00:19:10,986
负责调度回

642
00:19:10,986 --> 00:19:11,326
主队列

643
00:19:12,456 --> 00:19:13,526
那就回到

644
00:19:13,526 --> 00:19:14,296
主队列

645
00:19:14,556 --> 00:19:15,276
来纠正差错

646
00:19:15,946 --> 00:19:18,336
这就是三个 API 核心方法

647
00:19:18,336 --> 00:19:20,736
获取拖拽对象

648
00:19:20,736 --> 00:19:22,566
获得拖拽建议

649
00:19:22,566 --> 00:19:23,696
然后实际执行

650
00:19:23,696 --> 00:19:27,256
放置

651
00:19:27,436 --> 00:19:29,176
现在我们再回过头

652
00:19:29,176 --> 00:19:30,146
回到时间线的起点

653
00:19:30,146 --> 00:19:31,356
来谈谈

654
00:19:31,356 --> 00:19:32,646
其他的委托方法

655
00:19:32,646 --> 00:19:33,726
因为还有很多

656
00:19:34,686 --> 00:19:35,596
首先我会从

657
00:19:35,596 --> 00:19:36,626
拖拽交互委托

658
00:19:36,626 --> 00:19:38,566
的角度来谈

659
00:19:39,796 --> 00:19:41,486
一旦提供图像

660
00:19:41,486 --> 00:19:42,896
作为拖拽项

661
00:19:42,896 --> 00:19:45,386
如果你不进行

662
00:19:45,386 --> 00:19:46,956
其他操作 我们只会

663
00:19:46,956 --> 00:19:48,496
把整个视图抬起

664
00:19:48,766 --> 00:19:50,706
所以拖动图像 也就是预览

665
00:19:50,706 --> 00:19:52,206
会是整个视图的

666
00:19:52,206 --> 00:19:52,896
一个快照

667
00:19:53,286 --> 00:19:54,736
如果这不是你想要的

668
00:19:55,516 --> 00:19:56,866
你可以自定义预览

669
00:19:57,316 --> 00:19:59,136
利用 dragInteraction() 的

670
00:19:59,226 --> 00:20:01,276
previewForLifting 项可以

671
00:20:01,276 --> 00:20:03,436
返回 UITargetedDragPreview

672
00:20:04,086 --> 00:20:05,176
我用一个例子

673
00:20:05,216 --> 00:20:05,916
来说明

674
00:20:07,216 --> 00:20:08,776
UITargetedDragPreview

675
00:20:08,776 --> 00:20:09,486
包含两部分

676
00:20:09,766 --> 00:20:11,256
分别是拖拽预览部分

677
00:20:11,256 --> 00:20:12,586
和目标部分

678
00:20:13,226 --> 00:20:14,876
拖拽预览部分规定了

679
00:20:14,876 --> 00:20:16,276
拖拽时项目

680
00:20:16,276 --> 00:20:17,546
所呈现的样子

681
00:20:17,616 --> 00:20:18,746
要告诉我们这一点

682
00:20:18,746 --> 00:20:19,796
你需要提供一个视图

683
00:20:20,506 --> 00:20:21,866
这种情况下我会创建

684
00:20:21,866 --> 00:20:23,276
imageView  包括一幅

685
00:20:23,276 --> 00:20:24,426
来自 Asset Catalog 的图像

686
00:20:24,976 --> 00:20:26,246
它会根据图像大小

687
00:20:26,246 --> 00:20:27,066
自动调节尺寸

688
00:20:27,116 --> 00:20:28,076
那就是它将呈现的

689
00:20:28,076 --> 00:20:28,226
样子

690
00:20:29,356 --> 00:20:31,056
第二部分是

691
00:20:31,116 --> 00:20:31,396
目标部分

692
00:20:31,636 --> 00:20:32,626
你会发现这是一个独立的

693
00:20:32,626 --> 00:20:33,596
视图

694
00:20:33,596 --> 00:20:34,926
不存在于 View Hierarchy

695
00:20:34,926 --> 00:20:35,306
（视图层次结构）中

696
00:20:35,846 --> 00:20:37,266
所以 UIKit 不知道在哪

697
00:20:37,266 --> 00:20:37,656
显示它

698
00:20:37,896 --> 00:20:39,116
你需要用目标

699
00:20:39,116 --> 00:20:39,466
告诉我们

700
00:20:40,356 --> 00:20:42,206
目标有两方面含义

701
00:20:42,206 --> 00:20:43,996
它既是一个容器视图

702
00:20:43,996 --> 00:20:45,356
也是容器视图内的一个位置

703
00:20:46,176 --> 00:20:47,476
在这个容器视图中

704
00:20:47,476 --> 00:20:48,226
我会使用

705
00:20:48,226 --> 00:20:49,236
交互视图

706
00:20:49,236 --> 00:20:50,296
这是拖拽开始的

707
00:20:50,296 --> 00:20:50,646
地方

708
00:20:51,416 --> 00:20:52,886
对于位置我会使用

709
00:20:52,946 --> 00:20:54,986
视图中的

710
00:20:54,986 --> 00:20:55,286
会话位置

711
00:20:55,536 --> 00:20:56,736
这是用户手指的

712
00:20:56,736 --> 00:20:56,936
位置

713
00:20:58,236 --> 00:20:59,586
我把这两项内容

714
00:20:59,586 --> 00:21:01,756
一起放入

715
00:21:01,976 --> 00:21:04,236
拖拽预览目标

716
00:21:04,236 --> 00:21:05,146
最后我会创建

717
00:21:05,146 --> 00:21:07,246
UITargetedDragPreview 这会用到

718
00:21:07,346 --> 00:21:08,976
上面的视图一套默认参数

719
00:21:08,976 --> 00:21:10,176
以及上面的

720
00:21:10,176 --> 00:21:10,466
目标

721
00:21:11,216 --> 00:21:11,826
以上是抬起部分

722
00:21:12,906 --> 00:21:13,696
抬起阶段你还可以做的

723
00:21:13,696 --> 00:21:15,826
一件事情是同时让你自己的 UI

724
00:21:15,826 --> 00:21:17,566
动起来

725
00:21:17,956 --> 00:21:19,046
可能在视图内

726
00:21:19,046 --> 00:21:20,476
有其他 UI 需要

727
00:21:20,476 --> 00:21:21,956
在拖拽期间暗淡下来

728
00:21:21,956 --> 00:21:22,596
诸如此类的效果

729
00:21:23,366 --> 00:21:24,516
你可以实现这个方法

730
00:21:24,576 --> 00:21:26,406
也就是 dragInteraction 的

731
00:21:26,406 --> 00:21:28,406
willAnimate 方法

732
00:21:28,406 --> 00:21:30,006
同时 调用 animator 的

733
00:21:30,006 --> 00:21:30,726
addAnimations

734
00:21:31,166 --> 00:21:32,046
这里我只改变了

735
00:21:32,046 --> 00:21:33,216
视图的背景色

736
00:21:34,476 --> 00:21:35,736
你还可以得到抬起动画的

737
00:21:36,046 --> 00:21:37,086
结束态

738
00:21:37,756 --> 00:21:38,976
现在注意对于抬起

739
00:21:38,976 --> 00:21:40,006
可以有两种结束

740
00:21:40,006 --> 00:21:40,106
方式

741
00:21:40,376 --> 00:21:41,736
如果用户在抬起过程中

742
00:21:41,736 --> 00:21:42,896
一直按压时间足够长

743
00:21:42,896 --> 00:21:44,926
那就会完整

744
00:21:44,926 --> 00:21:45,416
进行这个过程

745
00:21:45,596 --> 00:21:46,526
此时的位置就是终点

746
00:21:47,516 --> 00:21:49,056
如果用户中途

747
00:21:49,056 --> 00:21:50,366
抬起手指

748
00:21:50,366 --> 00:21:51,756
我们则会将动画反过来

749
00:21:51,756 --> 00:21:53,136
一直回到开头并且

750
00:21:53,136 --> 00:21:54,466
告诉你 此时的位置是起点

751
00:21:54,966 --> 00:21:58,766
因为用户移动手指后

752
00:21:58,766 --> 00:22:00,486
会话开始

753
00:22:00,486 --> 00:22:01,786
我们会告诉你会话即将开始

754
00:22:02,776 --> 00:22:04,336
我们会问几个

755
00:22:04,336 --> 00:22:04,936
问题

756
00:22:04,936 --> 00:22:06,146
比如我们会问

757
00:22:06,146 --> 00:22:07,546
这个会话允许 .move

758
00:22:07,546 --> 00:22:08,186
操作吗

759
00:22:09,276 --> 00:22:11,016
然后随着会话的移动

760
00:22:11,016 --> 00:22:12,746
每移动一次我们都会

761
00:22:12,746 --> 00:22:13,356
告诉你

762
00:22:13,356 --> 00:22:14,356
所以你可以在这里找到

763
00:22:14,356 --> 00:22:17,076
新的位置

764
00:22:17,276 --> 00:22:19,066
同时在这个拖拽阶段

765
00:22:19,066 --> 00:22:20,706
你可以在拖放会话中

766
00:22:20,706 --> 00:22:21,696
增加项目

767
00:22:22,186 --> 00:22:23,116
这里有一个点按操作

768
00:22:23,116 --> 00:22:24,086
用于移动拖拽

769
00:22:24,136 --> 00:22:25,906
另一个点按操作可以去点击

770
00:22:25,906 --> 00:22:28,706
任何含有拖拽交互的

771
00:22:28,706 --> 00:22:29,296
视窗

772
00:22:29,906 --> 00:22:31,146
不一定非要是

773
00:22:31,146 --> 00:22:31,806
原始视窗

774
00:22:31,806 --> 00:22:32,616
可以是完全不同的

775
00:22:32,616 --> 00:22:33,166
视窗

776
00:22:33,996 --> 00:22:35,706
检测到点击后

777
00:22:35,936 --> 00:22:37,746
我们会向委托请求项目

778
00:22:37,746 --> 00:22:38,616
加入到会话中

779
00:22:39,806 --> 00:22:41,746
在一个点上点击调用

780
00:22:41,746 --> 00:22:43,646
dragInteraction 的 itemsForAddingTo session

781
00:22:43,646 --> 00:22:45,406
就可以做到这一点

782
00:22:45,446 --> 00:22:47,576
你可以用这个点进行 Hit-test

783
00:22:47,576 --> 00:22:49,676
弄清楚有没有任何

784
00:22:49,676 --> 00:22:51,196
项目要添加到

785
00:22:51,196 --> 00:22:51,576
会话中

786
00:22:52,156 --> 00:22:53,166
如果找到了就返回这些项目

787
00:22:53,196 --> 00:22:54,116
如果没有

788
00:22:54,116 --> 00:22:55,716
就返回一个空数组

789
00:22:56,326 --> 00:22:58,606
然后我们会像

790
00:22:58,666 --> 00:22:59,986
正常情况一样

791
00:22:59,986 --> 00:23:00,426
把触摸传递下去

792
00:23:01,406 --> 00:23:03,966
当然你可以自定义

793
00:23:04,016 --> 00:23:05,456
那些项目的预览

794
00:23:05,456 --> 00:23:06,506
样式

795
00:23:08,516 --> 00:23:10,066
最后会话结束时

796
00:23:10,066 --> 00:23:11,286
用户松开手指

797
00:23:11,806 --> 00:23:13,276
我们会告诉你会话将

798
00:23:13,276 --> 00:23:14,676
以所选的操作

799
00:23:14,676 --> 00:23:15,076
结束

800
00:23:16,676 --> 00:23:18,386
如果以取消结束

801
00:23:18,386 --> 00:23:19,276
会有一个结束动画

802
00:23:19,276 --> 00:23:20,296
动画可以进行

803
00:23:20,296 --> 00:23:20,806
自定义

804
00:23:21,666 --> 00:23:23,136
那么用默认值调用

805
00:23:23,266 --> 00:23:25,966
dragInteraction previewForCancelling item

806
00:23:25,966 --> 00:23:27,316
就会返回

807
00:23:27,316 --> 00:23:27,936
UITargetedDragPreview

808
00:23:28,646 --> 00:23:29,966
这里你可以返回空

809
00:23:29,966 --> 00:23:31,056
项目就会

810
00:23:31,056 --> 00:23:31,516
就地消失

811
00:23:32,036 --> 00:23:33,606
你可以用系统默认值

812
00:23:33,606 --> 00:23:34,486
并改变它的目标

813
00:23:34,846 --> 00:23:35,906
如果你知道它

814
00:23:35,906 --> 00:23:37,646
该飞回到哪里的话你就只需要

815
00:23:37,696 --> 00:23:38,696
给它一个新目标

816
00:23:38,696 --> 00:23:39,896
它就会飞回到那儿

817
00:23:41,046 --> 00:23:42,316
你可以用和以前一样的方式

818
00:23:42,316 --> 00:23:43,736
和取消动画一起增加

819
00:23:43,736 --> 00:23:44,426
动画

820
00:23:45,136 --> 00:23:46,436
最终完成后我们会

821
00:23:46,436 --> 00:23:47,496
告诉你会话

822
00:23:47,496 --> 00:23:47,736
结束了

823
00:23:48,726 --> 00:23:50,876
如果是拷贝或者移动

824
00:23:50,946 --> 00:23:51,876
是没有取消动画的

825
00:23:51,876 --> 00:23:53,056
那么我们会告诉你

826
00:23:53,056 --> 00:23:55,126
会话结束了我们还会

827
00:23:55,126 --> 00:23:56,996
在数据传输完成时

828
00:23:56,996 --> 00:23:57,456
通知你

829
00:23:57,456 --> 00:24:01,356
以上是拖拽交互

830
00:24:01,356 --> 00:24:01,586
一侧

831
00:24:01,586 --> 00:24:02,736
现在我们聊聊置放交互

832
00:24:02,736 --> 00:24:03,616
这一端

833
00:24:04,146 --> 00:24:04,966
这个要更为

834
00:24:04,966 --> 00:24:05,396
有趣

835
00:24:05,396 --> 00:24:06,606
要开始拖拽

836
00:24:06,606 --> 00:24:07,866
只涉及到一个

837
00:24:07,866 --> 00:24:08,726
拖拽交互

838
00:24:09,266 --> 00:24:10,346
但它可以经过很多

839
00:24:10,346 --> 00:24:11,346
不同的视图这些视图可以

840
00:24:11,546 --> 00:24:12,896
有它们自己的置放交互

841
00:24:12,896 --> 00:24:14,636
可以与同一个委托进行交互

842
00:24:14,636 --> 00:24:16,146
也可以与多个委托进行交互

843
00:24:16,786 --> 00:24:18,166
但最终它们中只有一个

844
00:24:18,166 --> 00:24:19,766
能够选择用户抬起手指后

845
00:24:19,766 --> 00:24:24,616
的动作

846
00:24:24,846 --> 00:24:26,626
所以当拖拽会话

847
00:24:26,676 --> 00:24:28,226
进入到你的视图你已经有了

848
00:24:28,226 --> 00:24:29,236
一个置放交互

849
00:24:29,236 --> 00:24:30,246
我们首先要做的是问你

850
00:24:30,246 --> 00:24:31,406
你能处理

851
00:24:31,466 --> 00:24:31,746
该会话吗

852
00:24:32,526 --> 00:24:33,436
那么你可以

853
00:24:33,436 --> 00:24:34,706
调用这个方法

854
00:24:34,706 --> 00:24:36,166
也就是 dropInteraction canHandle session

855
00:24:36,966 --> 00:24:39,126
你不能查看实际被拖拽的是

856
00:24:39,126 --> 00:24:40,056
什么数据

857
00:24:40,056 --> 00:24:41,126
我们还没提供这个权限

858
00:24:41,126 --> 00:24:43,106
但是你可以找到

859
00:24:43,106 --> 00:24:44,106
被拖拽数据的类型

860
00:24:44,566 --> 00:24:45,386
那么假设你只对

861
00:24:45,386 --> 00:24:46,366
图像感兴趣

862
00:24:46,786 --> 00:24:47,856
你可以查看

863
00:24:48,426 --> 00:24:50,596
canLoadObjectsofClass UIImage 会话

864
00:24:51,786 --> 00:24:52,796
或者你可以做更

865
00:24:52,796 --> 00:24:53,356
具体的事情

866
00:24:53,356 --> 00:24:54,626
如果你对特定的

867
00:24:54,626 --> 00:24:56,736
统一类型标识符感兴趣

868
00:24:56,736 --> 00:24:58,446
你可以查看会话中有没有项目

869
00:24:58,476 --> 00:25:01,076
符合那个特定的

870
00:25:01,146 --> 00:25:02,296
统一类型标识符

871
00:25:02,626 --> 00:25:04,196
那这里我就用 PNG 图像

872
00:25:04,196 --> 00:25:05,566
假设我只对 PNG 格式的

873
00:25:05,566 --> 00:25:06,116
图像感兴趣

874
00:25:08,676 --> 00:25:10,076
接下来在你说可以

875
00:25:10,076 --> 00:25:11,976
处理该拖拽会话后

876
00:25:12,836 --> 00:25:14,186
我们会在会话

877
00:25:14,236 --> 00:25:15,696
进入你的视图时

878
00:25:15,696 --> 00:25:16,966
和在你的视图内移动时

879
00:25:16,966 --> 00:25:17,866
通知你当然你会

880
00:25:17,866 --> 00:25:20,186
返回一个建议 我们

881
00:25:20,186 --> 00:25:21,306
会在它存在时通知你

882
00:25:21,516 --> 00:25:22,496
当然这些可以发生多次

883
00:25:22,496 --> 00:25:23,996
进入退出

884
00:25:24,056 --> 00:25:24,656
进入退出

885
00:25:27,136 --> 00:25:28,136
另外会话进行过程中

886
00:25:28,136 --> 00:25:29,246
可能发生

887
00:25:29,246 --> 00:25:29,576
Spring-loading（弹跳加载）

888
00:25:30,206 --> 00:25:31,616
所以我们在 UIKit 中

889
00:25:31,616 --> 00:25:32,946
内置了对弹跳加载的支持

890
00:25:33,106 --> 00:25:34,906
有不同的类比如

891
00:25:34,906 --> 00:25:35,516
UIButton

892
00:25:35,666 --> 00:25:36,536
你所需要做的就是给出

893
00:25:36,536 --> 00:25:37,916
isSpringLoaded = true

894
00:25:38,366 --> 00:25:39,326
当拖拽会话

895
00:25:39,326 --> 00:25:41,626
悬浮在那个按钮上时

896
00:25:41,696 --> 00:25:42,626
按钮的动作会

897
00:25:42,626 --> 00:25:44,036
自动运行

898
00:25:45,136 --> 00:25:46,336
或者你可以建立自己的

899
00:25:46,336 --> 00:25:47,836
弹跳加载交互

900
00:25:47,836 --> 00:25:49,266
当需要激活时调用其自身的

901
00:25:49,266 --> 00:25:50,766
处理器即可并把它

902
00:25:50,926 --> 00:25:53,766
添加到任何你要的视图

903
00:25:54,766 --> 00:25:56,676
最后当会话在

904
00:25:56,676 --> 00:25:57,966
dropInteraction 委托上结束时

905
00:25:58,486 --> 00:25:59,596
我们会告诉你

906
00:25:59,596 --> 00:25:59,826
会话结束

907
00:25:59,876 --> 00:26:02,246
所以见到过这个会话的

908
00:26:02,246 --> 00:26:03,726
每个交互每个放置交互

909
00:26:03,726 --> 00:26:05,086
都会被告知

910
00:26:05,086 --> 00:26:05,926
会话结束

911
00:26:06,276 --> 00:26:07,256
如果你正在跟踪会话

912
00:26:07,256 --> 00:26:08,726
现在就可以停止

913
00:26:09,476 --> 00:26:10,846
跟踪了

914
00:26:11,116 --> 00:26:12,976
当然如果需要执行放置

915
00:26:12,976 --> 00:26:13,946
那就有更多需要做的

916
00:26:13,946 --> 00:26:15,016
我们已经说过

917
00:26:15,016 --> 00:26:15,486
执行阶段了

918
00:26:15,696 --> 00:26:16,306
现在我们说说

919
00:26:16,306 --> 00:26:17,536
动画和数据

920
00:26:17,536 --> 00:26:17,936
传输

921
00:26:18,476 --> 00:26:21,096
动画方面放置动画

922
00:26:21,096 --> 00:26:22,716
和取消动画

923
00:26:22,716 --> 00:26:23,626
的动画部分

924
00:26:23,666 --> 00:26:24,116
是完全一样的

925
00:26:24,276 --> 00:26:25,416
只是 API 的名称

926
00:26:25,416 --> 00:26:25,816
有所不同

927
00:26:25,926 --> 00:26:26,826
那现在它在 dropInteraction 委托上的

928
00:26:26,826 --> 00:26:28,646
previewForDropping item

929
00:26:28,646 --> 00:26:29,926
但你可以做

930
00:26:29,926 --> 00:26:30,986
完全相同的事情

931
00:26:31,826 --> 00:26:32,996
用同样的方法

932
00:26:33,046 --> 00:26:33,626
让它动起来

933
00:26:34,256 --> 00:26:35,536
最终所有项目的

934
00:26:35,536 --> 00:26:36,796
所有放置动画完成时

935
00:26:36,796 --> 00:26:38,106
我们会告诉你结束

936
00:26:38,106 --> 00:26:38,456
放置

937
00:26:38,946 --> 00:26:41,616
当然在数据传输上

938
00:26:41,616 --> 00:26:43,026
当数据可用时

939
00:26:43,026 --> 00:26:44,046
这个闭包会被调用

940
00:26:44,566 --> 00:26:45,486
但我刚才没有提到的一点是

941
00:26:45,486 --> 00:26:47,686
当你开始加载数据时

942
00:26:48,276 --> 00:26:49,566
你会得到一个

943
00:26:49,616 --> 00:26:51,296
Progress（进度）对象

944
00:26:51,296 --> 00:26:53,526
这个对象可以告诉你

945
00:26:53,526 --> 00:26:54,606
数据传输已完成多少

946
00:26:54,606 --> 00:26:56,516
是否已经结束

947
00:26:56,696 --> 00:26:58,126
你甚至可以在这里

948
00:26:58,336 --> 00:27:00,246
取消数据传输

949
00:27:00,446 --> 00:27:02,096
此外你可以为每个项

950
00:27:02,096 --> 00:27:04,406
创建一个进度对象

951
00:27:04,406 --> 00:27:05,616
或者可以有一个整个

952
00:27:05,616 --> 00:27:07,136
会话的进度对象可以

953
00:27:07,136 --> 00:27:08,766
结束所有加载项的

954
00:27:08,766 --> 00:27:08,986
进度

955
00:27:09,536 --> 00:27:11,166
就是这些

956
00:27:11,396 --> 00:27:12,756
以上就是拖放的完整

957
00:27:12,756 --> 00:27:13,186
时间线

958
00:27:13,186 --> 00:27:14,046
所有会发生的情况

959
00:27:14,046 --> 00:27:14,416
都在这里

960
00:27:15,316 --> 00:27:16,306
你了解了三个 API 的核心函数

961
00:27:16,306 --> 00:27:17,866
你需要实现它们

962
00:27:17,866 --> 00:27:19,216
才可以实现

963
00:27:19,216 --> 00:27:19,826
拖放

964
00:27:19,826 --> 00:27:21,386
这里我真正希望你们

965
00:27:21,386 --> 00:27:22,206
理解的一点是

966
00:27:22,606 --> 00:27:24,116
拖放的自定义是通过

967
00:27:24,116 --> 00:27:25,586
这些交互委托

968
00:27:25,586 --> 00:27:25,976
实现的

969
00:27:26,056 --> 00:27:28,256
这就是 UIKit 和你的 App

970
00:27:28,256 --> 00:27:29,076
是如何一同工作

971
00:27:29,076 --> 00:27:30,336
来实现优秀的拖放

972
00:27:30,336 --> 00:27:30,876
体验的

973
00:27:32,416 --> 00:27:33,646
我要邀请 Emanuele 上台

974
00:27:33,646 --> 00:27:34,936
向大家展示如何给 App

975
00:27:34,936 --> 00:27:36,676
添加拖放

976
00:27:37,076 --> 00:27:37,976
>> 谢谢你 Kurt

977
00:27:38,516 --> 00:27:43,666
[ 掌声 ]

978
00:27:44,166 --> 00:27:44,906
>> 我们利用拖放交互

979
00:27:44,906 --> 00:27:46,506
为图像创造了

980
00:27:46,506 --> 00:27:48,066
一个拟物化的

981
00:27:48,066 --> 00:27:48,596
记事板

982
00:27:49,056 --> 00:27:51,746
比如我们可以

983
00:27:51,746 --> 00:27:52,926
从图像拖拽开始

984
00:27:53,406 --> 00:27:54,356
可以把它拖到

985
00:27:54,356 --> 00:27:54,916
记事板上

986
00:27:54,916 --> 00:27:57,566
放置时就可以拷贝

987
00:27:57,566 --> 00:27:58,536
图像 并显示在

988
00:27:58,536 --> 00:27:58,976
记事板上

989
00:27:59,386 --> 00:28:03,736
注意 放置动画

990
00:28:03,736 --> 00:28:05,156
按比例缩小了图像

991
00:28:05,186 --> 00:28:06,026
而我们在记事板中

992
00:28:06,026 --> 00:28:07,716
收到数据时动画会显示

993
00:28:07,716 --> 00:28:08,266
完整的图像

994
00:28:08,796 --> 00:28:12,156
我们也可以把它拖到

995
00:28:12,156 --> 00:28:13,506
记事板上可以看到

996
00:28:13,506 --> 00:28:15,336
原始图像会变暗

997
00:28:15,736 --> 00:28:17,456
还可以把它拖拽

998
00:28:17,456 --> 00:28:19,706
添加回照片 App 中

999
00:28:21,676 --> 00:28:22,356
希望如此

1000
00:28:22,456 --> 00:28:26,596
嗯这个以前

1001
00:28:26,596 --> 00:28:26,836
是可以的

1002
00:28:27,356 --> 00:28:30,776
[笑声] 还可以在同一个记事板中

1003
00:28:30,776 --> 00:28:33,116
拖拽图像然后当我们

1004
00:28:33,116 --> 00:28:34,926
放置时就会重新

1005
00:28:34,926 --> 00:28:35,566
排列

1006
00:28:35,676 --> 00:28:37,246
再看一下

1007
00:28:37,246 --> 00:28:37,886
动画

1008
00:28:38,166 --> 00:28:39,776
先让原图变暗

1009
00:28:39,776 --> 00:28:41,786
当放置时就把原图像隐藏

1010
00:28:41,786 --> 00:28:43,476
然后我们在新的位置

1011
00:28:43,476 --> 00:28:44,396
显示图像

1012
00:28:44,736 --> 00:28:46,576
那我们回来看看代码

1013
00:28:46,576 --> 00:28:47,996
看看这是如何实现的

1014
00:28:49,756 --> 00:28:52,096
我们从主视图控制器开始

1015
00:28:52,096 --> 00:28:54,456
在视图中添加一个放置交互

1016
00:28:54,456 --> 00:28:56,676
和一个

1017
00:28:56,676 --> 00:28:58,376
拖拽交互

1018
00:28:58,926 --> 00:29:00,026
然后将视图控制器设为

1019
00:29:00,026 --> 00:29:02,176
这些交互的

1020
00:29:02,176 --> 00:29:03,166
委托

1021
00:29:04,446 --> 00:29:06,186
然后我们要实现

1022
00:29:06,186 --> 00:29:09,446
几个放置交互委托的

1023
00:29:09,446 --> 00:29:09,926
方法

1024
00:29:10,236 --> 00:29:11,726
第一个是

1025
00:29:11,726 --> 00:29:13,546
dropInteraction 的 canHandle 会话

1026
00:29:13,856 --> 00:29:16,096
如果会话可以加载图像

1027
00:29:16,096 --> 00:29:17,456
就会返回 true

1028
00:29:17,656 --> 00:29:18,476
很简单

1029
00:29:19,246 --> 00:29:21,076
第二个是

1030
00:29:21,076 --> 00:29:23,116
dropInteraction 的 sessionDidUpdate

1031
00:29:23,456 --> 00:29:25,076
这里我们返回一个建议

1032
00:29:25,136 --> 00:29:27,396
指定想要执行的

1033
00:29:27,396 --> 00:29:28,756
是哪种操作

1034
00:29:29,146 --> 00:29:31,266
有两种情况

1035
00:29:31,726 --> 00:29:35,116
第一种是如果拖拽

1036
00:29:35,266 --> 00:29:36,916
来自其他应用程序

1037
00:29:37,186 --> 00:29:38,556
我们希望执行

1038
00:29:38,556 --> 00:29:39,146
拷贝操作

1039
00:29:39,326 --> 00:29:40,826
我们可以通过查看

1040
00:29:41,236 --> 00:29:43,836
session.localDragSession 这一属性

1041
00:29:43,836 --> 00:29:44,286
进行检查

1042
00:29:44,646 --> 00:29:47,456
如果属性为空意味着

1043
00:29:47,456 --> 00:29:49,216
这一拖拽操作

1044
00:29:49,216 --> 00:29:50,636
源自另一个应用程序

1045
00:29:50,636 --> 00:29:51,736
那我们会进行拷贝

1046
00:29:52,156 --> 00:29:53,256
否则我们只是

1047
00:29:53,256 --> 00:29:54,736
重新排列项目

1048
00:29:54,736 --> 00:29:56,046
会进行一次移动操作

1049
00:29:58,776 --> 00:30:00,376
第三我们会实现

1050
00:30:00,756 --> 00:30:02,996
dropInteraction performDrop

1051
00:30:03,036 --> 00:30:03,506
会话

1052
00:30:04,196 --> 00:30:06,176
同样如果拖拽源自其他应用程序

1053
00:30:06,176 --> 00:30:08,246
我们就只希望拷贝

1054
00:30:08,246 --> 00:30:09,166
数据

1055
00:30:09,166 --> 00:30:10,876
所以 我们会再次检查

1056
00:30:11,116 --> 00:30:12,506
localDragSession 是否为空

1057
00:30:13,436 --> 00:30:14,806
然后我们会先执行放置

1058
00:30:14,806 --> 00:30:17,146
方法是通过调用

1059
00:30:17,546 --> 00:30:19,776
session.location(in: .view)

1060
00:30:19,776 --> 00:30:21,936
得到用户抬起手指的

1061
00:30:21,936 --> 00:30:23,196
那个放置点

1062
00:30:23,996 --> 00:30:25,966
然后我们会检查

1063
00:30:25,966 --> 00:30:27,566
会话中的每个拖拽项

1064
00:30:27,566 --> 00:30:30,946
并调用帮助函数

1065
00:30:30,946 --> 00:30:32,776
它会从项目提供器中

1066
00:30:32,776 --> 00:30:34,146
加载图像

1067
00:30:34,526 --> 00:30:36,096
放入图像视图

1068
00:30:36,096 --> 00:30:38,326
然后利用刚才的那个点

1069
00:30:38,326 --> 00:30:40,416
将其显示在

1070
00:30:40,416 --> 00:30:40,706
记事板中

1071
00:30:44,276 --> 00:30:47,816
我们还想在抬起手指时

1072
00:30:48,016 --> 00:30:50,086
执行一个

1073
00:30:50,086 --> 00:30:50,566
放置动画

1074
00:30:51,026 --> 00:30:54,016
仍然会有两种情况

1075
00:30:54,366 --> 00:30:55,646
在 dropInteraction 的

1076
00:30:55,646 --> 00:30:57,816
previewForDropping item 中

1077
00:30:57,816 --> 00:31:01,326
我们希望返回一个预览

1078
00:31:01,326 --> 00:31:03,246
如果拖拽来自其他应用程序

1079
00:31:03,246 --> 00:31:04,356
预览会缩小

1080
00:31:04,716 --> 00:31:06,996
并且如果我们

1081
00:31:06,996 --> 00:31:09,346
从记事板移动图像

1082
00:31:09,346 --> 00:31:10,766
就不会应用任何

1083
00:31:10,766 --> 00:31:11,256
效果

1084
00:31:11,256 --> 00:31:12,256
只会把它就地

1085
00:31:12,256 --> 00:31:12,636
放置

1086
00:31:16,046 --> 00:31:19,516
因此我们可以检查 该项目

1087
00:31:19,516 --> 00:31:22,646
是来自本地拖拽还是

1088
00:31:22,646 --> 00:31:25,156
外部拖拽方法是查看

1089
00:31:25,156 --> 00:31:27,116
拖拽项的这个叫做

1090
00:31:27,306 --> 00:31:28,486
localObject 的属性

1091
00:31:29,516 --> 00:31:32,136
如果项目来自

1092
00:31:32,136 --> 00:31:34,036
其他应用程序我们会返回

1093
00:31:34,036 --> 00:31:34,746
空值

1094
00:31:35,126 --> 00:31:38,116
这就会有我们之前

1095
00:31:38,166 --> 00:31:39,306
看到的效果

1096
00:31:39,556 --> 00:31:41,446
也就是缩小预览

1097
00:31:41,446 --> 00:31:44,566
并且 预览会停留在

1098
00:31:44,566 --> 00:31:45,076
原地

1099
00:31:45,376 --> 00:31:47,926
而默认预览则会

1100
00:31:47,926 --> 00:31:49,156
缩小并移动到

1101
00:31:49,156 --> 00:31:50,456
记事板中心

1102
00:31:50,456 --> 00:31:51,526
但这不是我们想要的

1103
00:31:52,076 --> 00:31:54,706
当我们从记事板

1104
00:31:54,706 --> 00:31:57,376
移动图像

1105
00:31:57,376 --> 00:31:59,636
以重新排列时

1106
00:31:59,636 --> 00:32:02,136
我们会让它就地动起来

1107
00:32:02,826 --> 00:32:04,926
为此我们需要

1108
00:32:04,926 --> 00:32:06,646
为默认预览重新指定目标

1109
00:32:07,016 --> 00:32:09,576
如 Kurt 介绍的那样我们需要

1110
00:32:09,576 --> 00:32:11,306
一个容器就是记事板本身

1111
00:32:11,306 --> 00:32:13,756
还需要视图的中心

1112
00:32:13,756 --> 00:32:17,216
也就是预览的

1113
00:32:17,296 --> 00:32:17,656
中心

1114
00:32:18,536 --> 00:32:19,566
然后我们将

1115
00:32:19,566 --> 00:32:22,326
为默认预览重新指定目标 并

1116
00:32:22,416 --> 00:32:23,746
把它返回

1117
00:32:25,836 --> 00:32:27,276
接下来我们要实现

1118
00:32:27,406 --> 00:32:28,276
dropInteraction 的

1119
00:32:28,456 --> 00:32:30,226
willAnimateDropwithanimator

1120
00:32:31,156 --> 00:32:34,526
这里我们要使本地移动产生动画

1121
00:32:34,526 --> 00:32:37,266
因为就像你之前看到的

1122
00:32:37,266 --> 00:32:39,416
我们使原图像

1123
00:32:39,416 --> 00:32:41,216
视图变暗当把它

1124
00:32:41,216 --> 00:32:42,936
置放在新的地方

1125
00:32:42,936 --> 00:32:45,186
我们会把原来位置上的

1126
00:32:45,276 --> 00:32:46,456
图像隐藏

1127
00:32:46,456 --> 00:32:48,116
然后在动画结束时

1128
00:32:48,116 --> 00:32:50,076
在新的位置

1129
00:32:50,076 --> 00:32:50,666
显示图像

1130
00:32:51,076 --> 00:32:52,396
我们会添加一个

1131
00:32:52,396 --> 00:32:54,686
伴随动画并将

1132
00:32:54,686 --> 00:32:57,286
拖拽项透明度逐渐降低至

1133
00:32:57,616 --> 00:32:59,246
alpha=0

1134
00:33:00,416 --> 00:33:02,156
接下来在动画末尾

1135
00:33:02,156 --> 00:33:04,166
通过添加一个

1136
00:33:04,166 --> 00:33:07,456
Completion Block（完成块）我们可以设置

1137
00:33:07,566 --> 00:33:09,396
该图像视图的新中心

1138
00:33:09,396 --> 00:33:11,046
然后通过设置其alpha值为1

1139
00:33:11,046 --> 00:33:12,466
我们可以让它重新

1140
00:33:12,466 --> 00:33:13,176
显示出来

1141
00:33:13,506 --> 00:33:15,736
这里你可以看到

1142
00:33:15,736 --> 00:33:17,666
我们再次检查了本地对象

1143
00:33:17,916 --> 00:33:19,176
这种情况下我会传递

1144
00:33:19,176 --> 00:33:22,136
一个索引以便知晓

1145
00:33:22,186 --> 00:33:25,136
图像在模型对象中的位置

1146
00:33:25,136 --> 00:33:26,786
我们一会就可以看到

1147
00:33:26,786 --> 00:33:28,356
在拖拽交互中如何

1148
00:33:28,356 --> 00:33:29,546
设置

1149
00:33:30,376 --> 00:33:32,786
那我下面就谈谈

1150
00:33:32,786 --> 00:33:34,756
拖拽交互委托

1151
00:33:35,666 --> 00:33:37,136
首先我需要实现的是

1152
00:33:37,136 --> 00:33:39,606
在拖拽中要传递的

1153
00:33:39,606 --> 00:33:41,356
是哪种数据

1154
00:33:42,006 --> 00:33:44,586
我在整个记事板上

1155
00:33:44,586 --> 00:33:45,646
安装了交互

1156
00:33:46,036 --> 00:33:48,886
那我想做的是

1157
00:33:48,886 --> 00:33:51,306
给出我手指下方的图像

1158
00:33:52,706 --> 00:33:54,716
为此我首先需要

1159
00:33:54,716 --> 00:33:57,206
得到拖拽的点按这可以通过

1160
00:33:57,206 --> 00:33:58,786
再次调用 session.location(in: .view)

1161
00:33:58,786 --> 00:33:59,156
实现

1162
00:33:59,956 --> 00:34:01,696
然后如果手指下方

1163
00:34:01,776 --> 00:34:03,556
有图像我要获得图像

1164
00:34:03,656 --> 00:34:07,236
以及图像的数据

1165
00:34:07,236 --> 00:34:09,396
将数据打包到

1166
00:34:09,396 --> 00:34:11,666
项目提供器再把项目提供器

1167
00:34:11,666 --> 00:34:14,626
打包进 dragItem（拖拽项）然后附上

1168
00:34:14,696 --> 00:34:16,166
其他信息这些信息将允许我

1169
00:34:16,166 --> 00:34:18,085
在置放点识别出

1170
00:34:18,376 --> 00:34:20,376
那个本地

1171
00:34:20,376 --> 00:34:20,696
拖拽项

1172
00:34:25,216 --> 00:34:26,746
下面我们需要为该项目

1173
00:34:26,806 --> 00:34:28,656
提供一个预览

1174
00:34:29,005 --> 00:34:31,585
如前所述如果我们

1175
00:34:31,585 --> 00:34:33,906
不提供预览拖拽交互

1176
00:34:33,906 --> 00:34:35,896
会默认为整个视图

1177
00:34:35,896 --> 00:34:37,416
获取快照

1178
00:34:37,956 --> 00:34:39,795
很明显我们不希望

1179
00:34:39,795 --> 00:34:40,076
那样

1180
00:34:40,076 --> 00:34:41,686
我们只希望为

1181
00:34:41,686 --> 00:34:43,326
正在拖拽的单张图像

1182
00:34:43,326 --> 00:34:44,226
提供预览

1183
00:34:48,196 --> 00:34:50,386
做到这一点需要通过获取

1184
00:34:50,386 --> 00:34:53,585
拖拽项的目录

1185
00:34:53,815 --> 00:34:55,795
获取它相关的图像视图

1186
00:34:55,795 --> 00:34:57,636
然后作为目标预览

1187
00:34:57,696 --> 00:34:58,066
传递

1188
00:35:01,256 --> 00:35:04,256
最后拖拽一旦开始

1189
00:35:04,256 --> 00:35:05,816
我们就会让原始图像

1190
00:35:05,816 --> 00:35:07,156
变暗

1191
00:35:07,586 --> 00:35:09,626
所以 我们要添加

1192
00:35:10,046 --> 00:35:12,536
一个完成块

1193
00:35:12,536 --> 00:35:16,076
到拖拽交互的 animator 中

1194
00:35:16,156 --> 00:35:18,286
在 willAnimateLift 委托中传递

1195
00:35:18,786 --> 00:35:20,936
那我们添加这个

1196
00:35:20,936 --> 00:35:23,056
完成块抬起就结束了

1197
00:35:23,126 --> 00:35:24,956
如果位置是终点

1198
00:35:25,056 --> 00:35:27,906
那就使原始项颜色

1199
00:35:27,906 --> 00:35:30,986
减淡至 alpha 值为 0.5

1200
00:35:31,516 --> 00:35:34,246
这就是全部了

1201
00:35:34,616 --> 00:35:36,906
大家已经看到了

1202
00:35:37,646 --> 00:35:39,986
添加拖放交互有多

1203
00:35:39,986 --> 00:35:40,576
简单

1204
00:35:41,146 --> 00:35:44,136
这个例子也展示了

1205
00:35:44,926 --> 00:35:46,586
如何实现

1206
00:35:46,586 --> 00:35:47,656
Pace Configuration

1207
00:35:47,936 --> 00:35:49,616
Pace Configuration 可以和你的放置交互

1208
00:35:49,616 --> 00:35:51,816
一起使用示例代码

1209
00:35:51,816 --> 00:35:53,636
网上可以找到

1210
00:35:53,636 --> 00:35:55,026
大家一定要去看一下

1211
00:35:55,726 --> 00:35:56,406
交回给 Bruce

1212
00:35:57,021 --> 00:35:59,021
[ 掌声 ]

1213
00:35:59,026 --> 00:35:59,666
>> 谢谢  Emanuele

1214
00:36:00,516 --> 00:36:03,546
[ 掌声 ]

1215
00:36:04,046 --> 00:36:05,726
>> 好的 现在你们已经等不及

1216
00:36:05,726 --> 00:36:07,276
跑到自己的笔记本电脑上

1217
00:36:07,276 --> 00:36:08,396
我看有人已经带进来了

1218
00:36:08,396 --> 00:36:09,466
给你们的 App 添加

1219
00:36:09,466 --> 00:36:10,366
拖放了

1220
00:36:10,856 --> 00:36:12,646
那么现在我要分享

1221
00:36:12,646 --> 00:36:14,816
几条建议是关于如何

1222
00:36:14,816 --> 00:36:16,646
让这个过程更加顺利的

1223
00:36:16,776 --> 00:36:19,516
首先不要立马

1224
00:36:19,516 --> 00:36:20,096
开始操作

1225
00:36:20,376 --> 00:36:21,566
先探索下系统

1226
00:36:21,766 --> 00:36:23,156
看看我们都做了什么

1227
00:36:23,156 --> 00:36:24,486
看看我们实现的

1228
00:36:24,486 --> 00:36:25,986
放置动画的种类有哪些

1229
00:36:25,986 --> 00:36:27,746
以及我们实际传输的

1230
00:36:27,746 --> 00:36:29,626
那些数据类型

1231
00:36:29,626 --> 00:36:31,026
我相信你会感到惊讶的

1232
00:36:31,596 --> 00:36:32,546
然后从简单的开始

1233
00:36:32,546 --> 00:36:34,366
试着添加一个放置目标

1234
00:36:34,366 --> 00:36:35,996
可以用 Pace Configuration 来做

1235
00:36:35,996 --> 00:36:37,456
只是感受一下它是如何

1236
00:36:37,456 --> 00:36:38,056
工作的

1237
00:36:39,266 --> 00:36:40,916
用拖拽源实验一下

1238
00:36:41,456 --> 00:36:44,096
甚至尝试弹跳加载一两个

1239
00:36:44,096 --> 00:36:44,926
控件

1240
00:36:44,926 --> 00:36:46,786
然后你会看着它说

1241
00:36:46,786 --> 00:36:49,536
就是有哪里

1242
00:36:49,536 --> 00:36:50,206
看上去不对

1243
00:36:50,316 --> 00:36:51,356
我们漏掉了什么呢

1244
00:36:51,876 --> 00:36:52,666
这时 你就需要

1245
00:36:52,666 --> 00:36:54,276
更深入地研究

1246
00:36:54,276 --> 00:36:55,536
这些拖放 API 了

1247
00:36:55,536 --> 00:36:57,256
因为有很多这样的 API

1248
00:36:57,616 --> 00:36:59,076
我们也让这个过程

1249
00:36:59,076 --> 00:36:59,296
足够简单了

1250
00:36:59,916 --> 00:37:01,276
所以我要重新回到

1251
00:37:01,276 --> 00:37:02,476
这张图开始

1252
00:37:02,476 --> 00:37:03,476
谈一谈

1253
00:37:03,476 --> 00:37:05,716
后面会有一场关于精通

1254
00:37:05,716 --> 00:37:06,746
这些拖放 API 的演讲

1255
00:37:06,746 --> 00:37:09,006
它会更加深入

1256
00:37:09,006 --> 00:37:11,446
比 Kurt 的大致讲解

1257
00:37:11,446 --> 00:37:12,216
更详细

1258
00:37:12,946 --> 00:37:14,686
还会有一场会议是关于

1259
00:37:14,686 --> 00:37:15,676
我们如何改进

1260
00:37:15,726 --> 00:37:17,826
NSItemProvider 的这场会议

1261
00:37:17,826 --> 00:37:18,936
也会很精彩

1262
00:37:18,936 --> 00:37:21,176
比如我们可以拖放文件

1263
00:37:21,176 --> 00:37:22,616
你可以就地打开这些文件

1264
00:37:22,616 --> 00:37:24,766
实际上你可以

1265
00:37:24,906 --> 00:37:26,386
利用文件提供器

1266
00:37:26,386 --> 00:37:28,786
从你的源代码中提供数据

1267
00:37:28,786 --> 00:37:29,946
我们会在那场演讲中

1268
00:37:29,946 --> 00:37:31,316
深入讲解

1269
00:37:33,186 --> 00:37:33,986
还有更多的内容

1270
00:37:33,986 --> 00:37:38,366
比如文本视图有一个委托

1271
00:37:38,366 --> 00:37:40,006
是一个较高层的

1272
00:37:40,006 --> 00:37:41,316
委托 支持

1273
00:37:41,316 --> 00:37:41,676
拖放

1274
00:37:41,676 --> 00:37:42,596
所以如果你有自定义的附件

1275
00:37:42,596 --> 00:37:44,386
或者需要某种

1276
00:37:44,386 --> 00:37:46,886
自定义文本处理

1277
00:37:46,886 --> 00:37:49,196
你应该探究下这些委托上的

1278
00:37:49,196 --> 00:37:49,866
API

1279
00:37:50,776 --> 00:37:52,126
我知道你们中的很多人

1280
00:37:52,166 --> 00:37:53,776
在 App 中使用表格视图

1281
00:37:53,776 --> 00:37:55,506
和集合视图如果你们想

1282
00:37:55,506 --> 00:37:56,946
让这些视图支持拖放

1283
00:37:56,946 --> 00:37:58,516
我们也开发了一些非常棒的

1284
00:37:58,516 --> 00:38:00,126
高层 API

1285
00:38:00,126 --> 00:38:02,656
会有一整场的演讲都是关于

1286
00:38:02,656 --> 00:38:04,496
这个话题你们真的应该

1287
00:38:04,496 --> 00:38:04,846
去看看

1288
00:38:06,216 --> 00:38:07,806
和往常一样这个链接里

1289
00:38:07,806 --> 00:38:09,746
有关于这场演讲

1290
00:38:09,746 --> 00:38:11,356
的更多信息

1291
00:38:11,356 --> 00:38:12,176
尤其是有示例 App

1292
00:38:13,116 --> 00:38:14,446
这里是一些相关的

1293
00:38:14,446 --> 00:38:15,116
会议

1294
00:38:15,346 --> 00:38:17,286
我增加了一个关于

1295
00:38:17,286 --> 00:38:18,886
文件提供器改进的会议

1296
00:38:18,886 --> 00:38:20,776
以及一场关于 Spotlight 的会议

1297
00:38:21,056 --> 00:38:22,206
它会谈及你怎么样可以

1298
00:38:22,206 --> 00:38:23,916
拖放 Spotlight 为

1299
00:38:23,916 --> 00:38:26,136
你的 App 找到的

1300
00:38:26,136 --> 00:38:26,986
项目

1301
00:38:26,986 --> 00:38:28,306
如果你有任何问题

1302
00:38:28,626 --> 00:38:30,026
请来找我们

1303
00:38:30,486 --> 00:38:31,886
希望你们能享受

1304
00:38:32,176 --> 00:38:33,236
WWDC

1305
00:38:34,516 --> 00:38:37,500
[ 掌声 ]

