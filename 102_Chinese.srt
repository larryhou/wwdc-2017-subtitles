1
00:00:18,796 --> 00:00:20,286
让我们欢迎

2
00:00:20,286 --> 00:00:22,636
负责技术平台开发的副总裁

3
00:00:22,636 --> 00:00:23,216
Andreas Wendker

4
00:00:24,516 --> 00:00:33,496
[掌声]

5
00:00:33,996 --> 00:00:36,226
>>  下午好

6
00:00:36,226 --> 00:00:37,606
欢迎来到 WWDC

7
00:00:38,266 --> 00:00:39,616
大家今天上午在主题演讲中了解到

8
00:00:39,716 --> 00:00:41,516
今年的重点集中在

9
00:00:41,516 --> 00:00:43,096
Apple 所有产品线的

10
00:00:43,096 --> 00:00:44,666
技术基础

11
00:00:44,666 --> 00:00:46,216
与改良上面

12
00:00:47,416 --> 00:00:49,016
我们推出了很多 API

13
00:00:49,016 --> 00:00:51,456
让你们的 app 能够有新的应用案例

14
00:00:51,456 --> 00:00:52,816
范围十分广泛

15
00:00:52,816 --> 00:00:53,886
从机器学习

16
00:00:53,886 --> 00:00:55,816
到增强现实

17
00:00:55,816 --> 00:00:57,426
与虚拟现实

18
00:00:57,706 --> 00:00:59,486
再到使用 Apple Music

19
00:00:59,486 --> 00:00:59,866
Library 获取音乐

20
00:01:01,616 --> 00:01:03,346
我们还对许多

21
00:01:03,396 --> 00:01:04,396
核心科技做了

22
00:01:04,396 --> 00:01:05,075
改良

23
00:01:05,446 --> 00:01:07,486
比如我们的新的现代

24
00:01:07,596 --> 00:01:09,496
文件系统 APFS 现在更加

25
00:01:09,496 --> 00:01:09,946
强力了

26
00:01:10,556 --> 00:01:12,426
这会带来一个新的  更高效的

27
00:01:12,426 --> 00:01:14,486
版本  此外我们还

28
00:01:14,486 --> 00:01:15,926
帮助定义并采用了

29
00:01:16,066 --> 00:01:17,546
带有先进压缩技术的

30
00:01:17,786 --> 00:01:18,876
高效图形格式

31
00:01:20,196 --> 00:01:21,916
大多数技术

32
00:01:21,916 --> 00:01:23,476
与 API 都适用

33
00:01:23,476 --> 00:01:24,706
我们所有的操作系统

34
00:01:24,706 --> 00:01:26,066
所以它们是共同进步的

35
00:01:27,486 --> 00:01:28,476
但我们也要看一下

36
00:01:28,476 --> 00:01:29,796
一些独具特色的特点

37
00:01:29,796 --> 00:01:31,226
它们会影响作为应用开发者的

38
00:01:33,076 --> 00:01:33,526
诸位

39
00:01:33,526 --> 00:01:35,406
iOS 11 有大量的很棒的功能

40
00:01:35,406 --> 00:01:37,466
但也许最重要的是

41
00:01:37,466 --> 00:01:38,746
这是目前为止最大的

42
00:01:38,746 --> 00:01:40,726
iPad 的发布

43
00:01:41,066 --> 00:01:42,626
iOS11 把 iPad 变成了一个

44
00:01:42,626 --> 00:01:44,076
主力生产力设备

45
00:01:44,076 --> 00:01:46,236
有了新的 Dock Drag and Drop

46
00:01:46,236 --> 00:01:47,426
查找管理  和增强的

47
00:01:47,426 --> 00:01:48,216
多任务功能

48
00:01:48,696 --> 00:01:51,516
在 macOS 中 你们花了很多时间去

49
00:01:51,516 --> 00:01:52,926
大范围清理

50
00:01:52,926 --> 00:01:54,236
动画性能

51
00:01:54,236 --> 00:01:56,796
现在有了

52
00:01:56,796 --> 00:01:58,476
对 Fusion Drives 和对磁盘加密的

53
00:01:58,476 --> 00:02:00,336
附加支持 APFS 已经准备好

54
00:02:00,336 --> 00:02:01,516
作为一个全面支持的文件系统

55
00:02:01,516 --> 00:02:02,576
进入 Mac 了

56
00:02:03,116 --> 00:02:05,576
你们还做了许多基础工作

57
00:02:05,576 --> 00:02:06,696
让虚拟现实在 Mac 中

58
00:02:06,696 --> 00:02:07,716
大显身手

59
00:02:08,276 --> 00:02:11,876
在 watchOS 上 你们让我们的

60
00:02:11,876 --> 00:02:13,506
UI 组件变得更加灵便

61
00:02:13,506 --> 00:02:14,966
这样就可以提供更多的个性化

62
00:02:14,966 --> 00:02:15,716
用户体验了

63
00:02:16,576 --> 00:02:18,566
导航与录音的

64
00:02:18,566 --> 00:02:20,226
新模式会让你们的 app

65
00:02:20,276 --> 00:02:22,106
在后台运行的时候

66
00:02:22,106 --> 00:02:23,376
也可以持续处理数据

67
00:02:23,376 --> 00:02:24,076
并反馈给用户

68
00:02:24,526 --> 00:02:26,656
新的统一的 app 运行时间

69
00:02:26,796 --> 00:02:28,086
让 app 变得更加灵敏

70
00:02:28,716 --> 00:02:31,236
你们还为 Core

71
00:02:31,236 --> 00:02:32,396
Bluetooth 增加了支持

72
00:02:32,396 --> 00:02:34,466
现在可以直接连接 BTLE 设备

73
00:02:34,776 --> 00:02:36,406
并直接在用户的手腕上

74
00:02:36,406 --> 00:02:37,216
显示数据了

75
00:02:37,216 --> 00:02:40,896
在 tvOS 里  我们提供了

76
00:02:40,896 --> 00:02:42,346
很多种类的增强

77
00:02:42,346 --> 00:02:43,486
你们可以利用它们

78
00:02:43,486 --> 00:02:44,646
大大增强 app 的功能

79
00:02:44,646 --> 00:02:46,046
从而让所有用户受益

80
00:02:46,046 --> 00:02:47,546
其中就包括对一些语言

81
00:02:47,546 --> 00:02:48,656
从右向左写作的文字的

82
00:02:48,656 --> 00:02:49,166
支持

83
00:02:49,476 --> 00:02:52,556
在我们的操作系统之外

84
00:02:52,556 --> 00:02:53,816
你们也努力工作

85
00:02:53,886 --> 00:02:55,546
改进我们整体的

86
00:02:55,546 --> 00:02:57,086
开发者生态系统

87
00:02:57,236 --> 00:02:58,666
这个系统能为你们

88
00:02:58,666 --> 00:03:00,726
提供 app 的推广与应用

89
00:03:01,316 --> 00:03:03,026
我们增加了用户的数量

90
00:03:03,026 --> 00:03:03,946
而且你们可以通过

91
00:03:03,946 --> 00:03:05,376
TestFlight 发送你们的 app 的

92
00:03:05,376 --> 00:03:05,946
Beta 版本

93
00:03:06,726 --> 00:03:08,206
App Store 现在允许

94
00:03:08,206 --> 00:03:10,096
你们在几天的时间里

95
00:03:10,096 --> 00:03:11,396
排除掉 app 的更新

96
00:03:12,176 --> 00:03:13,606
这样就可以对用户的反馈

97
00:03:13,606 --> 00:03:15,406
和评论做出反应了

98
00:03:16,306 --> 00:03:17,036
你们能够在 Store 页面上

99
00:03:17,036 --> 00:03:18,386
展现推广的一些素材

100
00:03:18,386 --> 00:03:20,006
还有更多信息

101
00:03:22,096 --> 00:03:23,836
我们还在 App Store 上

102
00:03:23,836 --> 00:03:25,416
的内容方面做了现代化处理

103
00:03:25,916 --> 00:03:26,946
我们已经有一段时间在

104
00:03:26,946 --> 00:03:28,856
致力于让所有的 iOS 软件

105
00:03:28,856 --> 00:03:30,306
能够利用上我们的 64 位处理器

106
00:03:30,306 --> 00:03:32,296
的强大性能

107
00:03:33,306 --> 00:03:35,206
有了 iOS 11 你们就可以彻底

108
00:03:35,206 --> 00:03:35,906
实现这个变化了

109
00:03:36,456 --> 00:03:38,146
iOS 11 只为 64 位的 app

110
00:03:38,146 --> 00:03:40,756
提供支持  而 32 位的 app

111
00:03:40,886 --> 00:03:42,196
以后就不会被支持了

112
00:03:43,106 --> 00:03:45,826
现在是时候

113
00:03:45,826 --> 00:03:47,176
把注意力转向 macOS

114
00:03:47,246 --> 00:03:48,326
并做同样的事了

115
00:03:48,876 --> 00:03:50,306
让 Mac app 也向 64 位转化

116
00:03:50,306 --> 00:03:51,836
这个过程将和 iOS 上的

117
00:03:51,836 --> 00:03:53,496
转化过程非常相似

118
00:03:55,306 --> 00:03:57,416
最重要的是 High Sierra

119
00:03:57,416 --> 00:03:58,806
将是最后一个全面支持 32 位 app

120
00:03:58,806 --> 00:04:00,836
而没有任何妥协的

121
00:04:00,836 --> 00:04:02,376
MacOS 更新了

122
00:04:03,126 --> 00:04:04,506
在 High Sierra 之后的下一次

123
00:04:04,506 --> 00:04:05,616
重大更新的时候

124
00:04:05,616 --> 00:04:07,336
如果你们的 app 不兼容 64 位

125
00:04:07,906 --> 00:04:09,466
就必须开始对用户提出严重警告

126
00:04:12,386 --> 00:04:13,416
Mac App Store 也将就此

127
00:04:13,416 --> 00:04:14,536
作出调整

128
00:04:14,976 --> 00:04:16,375
在大约 6 个月后

129
00:04:16,375 --> 00:04:17,875
你们将要求所有提交到

130
00:04:17,875 --> 00:04:19,185
Mac App Store 的新 app

131
00:04:19,185 --> 00:04:21,776
都必须支持 64 位

132
00:04:21,776 --> 00:04:23,396
一年后  所有的新 app

133
00:04:23,396 --> 00:04:25,406
和现有 app 的更新

134
00:04:25,406 --> 00:04:27,486
在提交到 Mac App Store 的时候

135
00:04:27,486 --> 00:04:28,746
都必须仅支持 64 位

136
00:04:29,296 --> 00:04:32,616
在接下来的 90 分钟

137
00:04:32,616 --> 00:04:34,106
他们将深入讲解

138
00:04:34,106 --> 00:04:35,546
我们今天要发布的

139
00:04:35,546 --> 00:04:36,366
最重要的 API

140
00:04:36,366 --> 00:04:37,286
和技术

141
00:04:37,636 --> 00:04:38,656
还会深入讲解

142
00:04:38,656 --> 00:04:40,136
我们的开发者工具

143
00:04:40,576 --> 00:04:41,606
实际上  他们首先会讲到

144
00:04:41,606 --> 00:04:42,496
Swift Playgrounds

145
00:04:42,636 --> 00:04:44,146
我现在要把舞台交给

146
00:04:44,146 --> 00:04:45,666
Matthew 请他讲解

147
00:04:46,516 --> 00:04:51,116
[ 掌声 ]

148
00:04:51,616 --> 00:04:52,496
>>  谢谢 Andreas

149
00:04:53,276 --> 00:04:54,726
Swift Playgrounds 为教育

150
00:04:54,726 --> 00:04:56,366
带来了一些新的  重要的变化

151
00:04:56,366 --> 00:04:58,106
那就是用真正的代码

152
00:04:58,176 --> 00:04:59,976
以充满乐趣的方式

153
00:05:00,356 --> 00:05:01,256
教孩子们编程

154
00:05:01,696 --> 00:05:03,076
反响

155
00:05:03,186 --> 00:05:03,966
非常良好

156
00:05:04,416 --> 00:05:06,016
在 App Store 上发布不到 10 个月

157
00:05:06,016 --> 00:05:07,606
就已经有超过一千万人

158
00:05:07,606 --> 00:05:09,056
开始用 Swift Playgrounds

159
00:05:09,056 --> 00:05:09,996
进行编程了

160
00:05:10,546 --> 00:05:12,056
用户来自世界各地

161
00:05:12,056 --> 00:05:13,406
因为我们在 6 个国家及地区

162
00:05:13,406 --> 00:05:15,716
发布了这个 app  做了相应的本地化处理

163
00:05:17,176 --> 00:05:19,536
实际上  所有用户中

164
00:05:19,536 --> 00:05:21,396
有大约三分之二

165
00:05:21,396 --> 00:05:23,266
不是美国人  这让 Swift

166
00:05:23,266 --> 00:05:24,966
Playgrounds  获得了国际性的

167
00:05:25,036 --> 00:05:25,586
成功

168
00:05:27,736 --> 00:05:29,006
去年首发以来

169
00:05:29,006 --> 00:05:30,296
我们先后向这个 app

170
00:05:30,296 --> 00:05:31,876
加入了一系列新特性

171
00:05:32,416 --> 00:05:33,296
比如在代码运行时

172
00:05:33,296 --> 00:05:34,516
一行行的高光显示

173
00:05:34,516 --> 00:05:36,116
新内容可用时

174
00:05:36,116 --> 00:05:37,936
出现内容通知

175
00:05:37,936 --> 00:05:39,796
以及添加新的

176
00:05:39,796 --> 00:05:41,456
Playground  页面功能

177
00:05:42,206 --> 00:05:43,496
这些特性以及许多其他特性

178
00:05:43,546 --> 00:05:45,466
和新内容一起使

179
00:05:45,466 --> 00:05:47,216
Swift Playgrounds 变得出色

180
00:05:48,606 --> 00:05:49,856
大家也许听说了

181
00:05:49,856 --> 00:05:51,636
今天我们要发布

182
00:05:51,636 --> 00:05:53,126
Swift Playgrounds 的新版本

183
00:05:53,126 --> 00:05:55,136
也就是1.5版

184
00:05:55,736 --> 00:05:57,006
在这次发布中

185
00:05:57,006 --> 00:05:58,926
我们会让用户更容易连接

186
00:05:58,926 --> 00:06:00,526
蓝牙机器人

187
00:06:00,816 --> 00:06:02,236
无人机等设备

188
00:06:03,086 --> 00:06:05,356
这会让 Swift 进入

189
00:06:05,356 --> 00:06:07,116
真正的世界  甚至可以

190
00:06:07,276 --> 00:06:08,216
出门去探索

191
00:06:08,666 --> 00:06:10,686
它会随着你的编程技巧提高

192
00:06:10,686 --> 00:06:12,016
自然地予以配合

193
00:06:12,016 --> 00:06:14,376
在这次发布中

194
00:06:14,376 --> 00:06:15,796
我们与一些出色的伙伴

195
00:06:15,876 --> 00:06:17,386
合作  他们也想利用 Swift

196
00:06:17,386 --> 00:06:19,176
为他们的设备

197
00:06:19,176 --> 00:06:22,596
设计很好的体验

198
00:06:22,776 --> 00:06:24,226
比如 Parrot 公司的迷你无人机

199
00:06:24,226 --> 00:06:27,126
可以飞行和翻转  还有 UBTECH

200
00:06:27,326 --> 00:06:28,916
可搭建  可编程的 MeeBot

201
00:06:28,916 --> 00:06:32,786
还有 Sphero 的

202
00:06:32,786 --> 00:06:34,906
Sprk+ 机器球 非常厉害

203
00:06:35,006 --> 00:06:37,936
还有 Wonder Workshop 的

204
00:06:37,936 --> 00:06:39,936
能够行走和说话的 Dash

205
00:06:41,266 --> 00:06:43,126
还有 Skoogmusic 和他们的 Tactile

206
00:06:43,196 --> 00:06:47,716
Musical cube 还有乐高公司的

207
00:06:47,816 --> 00:06:48,606
MINDSTORMS EV3

208
00:06:50,516 --> 00:06:55,966
[ 掌声 ]

209
00:06:56,466 --> 00:06:57,876
你可以用 MINDSTORMS

210
00:06:57,876 --> 00:06:59,526
搭建出无穷的可能

211
00:06:59,526 --> 00:07:01,286
这让它和 Swift Playgrounds 成为

212
00:07:01,286 --> 00:07:01,936
绝配

213
00:07:02,406 --> 00:07:03,806
实际上 我们所有的伙伴

214
00:07:03,806 --> 00:07:04,996
都运用了这个 app 的

215
00:07:04,996 --> 00:07:06,416
互动性

216
00:07:06,996 --> 00:07:08,686
设计出直观的  可以拖拽放置的 API

217
00:07:08,686 --> 00:07:10,436
并在 live view 中

218
00:07:10,476 --> 00:07:12,166
推出最新的设备

219
00:07:12,166 --> 00:07:13,486
和传感数据

220
00:07:14,146 --> 00:07:16,256
在你看到你的想法

221
00:07:16,256 --> 00:07:17,656
变成代码并让设备活起来

222
00:07:17,726 --> 00:07:19,716
这个过程非常

223
00:07:19,716 --> 00:07:20,876
让人着迷

224
00:07:22,006 --> 00:07:23,416
现在  我们所有的伙伴

225
00:07:23,416 --> 00:07:24,936
都做到了让 Playgrounds

226
00:07:24,936 --> 00:07:26,466
和他们的设备共同工作

227
00:07:26,466 --> 00:07:28,396
你可以在 app 里的新设备

228
00:07:28,426 --> 00:07:29,956
菜单找到它们

229
00:07:29,956 --> 00:07:31,436
有可以试玩的样品

230
00:07:31,436 --> 00:07:33,126
还有建立你自己的文件的

231
00:07:33,836 --> 00:07:34,286
模板

232
00:07:34,286 --> 00:07:35,696
我们很期待看到

233
00:07:35,696 --> 00:07:37,946
不同年龄的用户

234
00:07:37,946 --> 00:07:39,036
利用新的 Swift

235
00:07:39,036 --> 00:07:40,556
Playgrounds 因为我们相信

236
00:07:40,556 --> 00:07:42,476
它是用你自己写的代码

237
00:07:42,476 --> 00:07:44,946
控制机器人和无人机

238
00:07:44,946 --> 00:07:45,436
最棒的工具

239
00:07:46,816 --> 00:07:47,886
Swift Playgrounds 的新版本

240
00:07:47,886 --> 00:07:49,576
今天就能在 App Store 里

241
00:07:49,576 --> 00:07:51,766
免费下载

242
00:07:51,766 --> 00:07:52,706
你可以在你附近的 Apple 实体店

243
00:07:52,706 --> 00:07:53,816
找到很多我们的合作伙伴

244
00:07:53,816 --> 00:07:55,886
生产的蓝牙设备

245
00:07:56,596 --> 00:07:59,226
今天我还想和大家分享

246
00:07:59,226 --> 00:08:00,166
另一个版本的 Swift Playgrounds

247
00:08:00,166 --> 00:08:01,606
那就是 Swift Playgrounds 2

248
00:08:01,606 --> 00:08:03,416
这个版本将会在今年秋天的

249
00:08:03,416 --> 00:08:04,096
晚些时候发布

250
00:08:05,176 --> 00:08:07,736
今天 我们的内容包括

251
00:08:07,826 --> 00:08:09,056
代码学习

252
00:08:09,296 --> 00:08:10,916
存在的挑战  以及来自合作伙伴的

253
00:08:10,916 --> 00:08:12,206
新升级版本的 Playgrounds

254
00:08:12,756 --> 00:08:14,426
但我们也知道  你们也有

255
00:08:14,426 --> 00:08:16,966
很多很棒的想法

256
00:08:16,966 --> 00:08:17,646
所以今年秋天

257
00:08:17,646 --> 00:08:19,106
我们会让每个人更容易分享

258
00:08:19,376 --> 00:08:19,936
Playgrounds

259
00:08:21,406 --> 00:08:22,676
有了 Swift Playgrounds 2

260
00:08:22,676 --> 00:08:23,906
我们就能够支持

261
00:08:23,996 --> 00:08:25,756
第三方内容的信息流

262
00:08:25,756 --> 00:08:26,546
用户可以订阅

263
00:08:27,536 --> 00:08:29,696
这个内容会让

264
00:08:29,696 --> 00:08:31,056
学校开办课程

265
00:08:31,056 --> 00:08:32,826
开发者发布 API 探索

266
00:08:32,905 --> 00:08:35,416
朋友之间分享想法

267
00:08:35,486 --> 00:08:36,916
让这些事变得更容易

268
00:08:38,566 --> 00:08:40,046
这个版本还会包括

269
00:08:40,046 --> 00:08:41,366
升级的文件编制体验

270
00:08:41,366 --> 00:08:43,645
在 iOS11 SDK 中支持 Swift 4

271
00:08:43,645 --> 00:08:46,486
并启动相机功能

272
00:08:46,486 --> 00:08:48,306
和增强现实 API

273
00:08:49,376 --> 00:08:52,536
我们还会增强

274
00:08:52,536 --> 00:08:54,106
这个 app 的国际性

275
00:08:54,106 --> 00:08:55,556
再提供 8 个语言的

276
00:08:55,556 --> 00:08:57,286
本地化版本

277
00:08:58,696 --> 00:09:00,206
Swift Playgrounds 2

278
00:09:00,206 --> 00:09:01,236
的 beta 版本

279
00:09:01,236 --> 00:09:02,856
可以在 TestFlight 上获取

280
00:09:03,376 --> 00:09:04,246
大家可以在

281
00:09:04,246 --> 00:09:06,406
developer.apple.com 上登记

282
00:09:06,626 --> 00:09:07,066
试着玩一玩

283
00:09:08,556 --> 00:09:10,586
所以我们为你准备了两个

284
00:09:10,586 --> 00:09:11,766
Swift Playgrounds 的重要版本

285
00:09:12,386 --> 00:09:14,296
现在我想换个话题

286
00:09:14,296 --> 00:09:16,456
说一说 Xcode 9

287
00:09:17,416 --> 00:09:20,036
Xcode 9 也是一个重大发布

288
00:09:20,486 --> 00:09:21,656
我们在各项工具的基础

289
00:09:21,656 --> 00:09:23,376
工作流程和性能

290
00:09:23,596 --> 00:09:25,306
上面都做了重大投入

291
00:09:25,526 --> 00:09:27,416
并且已经获得了一些

292
00:09:27,416 --> 00:09:28,776
可喜的成果

293
00:09:29,376 --> 00:09:30,586
今天我想先讲一讲

294
00:09:30,586 --> 00:09:32,056
我们在 Xcode 9 里的

295
00:09:33,796 --> 00:09:35,406
Source Editor

296
00:09:35,506 --> 00:09:36,336
我们彻底重新实现了 Source

297
00:09:36,336 --> 00:09:36,596
Editor

298
00:09:37,276 --> 00:09:38,266
用 Swift 彻底重写了它

299
00:09:40,516 --> 00:09:47,226
[ 掌声 ]

300
00:09:47,726 --> 00:09:48,236
我同意

301
00:09:48,236 --> 00:09:49,016
这是件大事

302
00:09:50,196 --> 00:09:51,936
第一眼看去

303
00:09:51,936 --> 00:09:53,626
你会看到熟悉的

304
00:09:53,736 --> 00:09:55,436
多种字体和字号

305
00:09:55,856 --> 00:09:57,166
但现在有更多选项

306
00:09:57,166 --> 00:09:59,336
可以用于行距  光标类型

307
00:09:59,386 --> 00:09:59,596
等等

308
00:10:00,416 --> 00:10:01,606
我们还采用了

309
00:10:01,606 --> 00:10:03,726
语义表达的概念  并没有

310
00:10:03,726 --> 00:10:05,296
停止在源代码阶段  因为

311
00:10:05,296 --> 00:10:07,066
现在我们有统一的

312
00:10:07,066 --> 00:10:08,466
Markdown 编辑器了

313
00:10:10,516 --> 00:10:14,436
[ 掌声 ]

314
00:10:14,936 --> 00:10:16,676
此外  针对城市化编辑

315
00:10:16,766 --> 00:10:18,166
你们会有类似的编辑

316
00:10:18,166 --> 00:10:19,816
经历  例如使用 Jump bar

317
00:10:19,816 --> 00:10:20,886
进行导航  在链接上

318
00:10:21,126 --> 00:10:22,826
使用 Command-clicking on links

319
00:10:22,826 --> 00:10:24,326
甚至是在 Scope 里用 Edit All

320
00:10:24,326 --> 00:10:25,146
来更改 reference

321
00:10:26,676 --> 00:10:27,706
现在  你开始编写源代码时

322
00:10:27,706 --> 00:10:29,186
你会发现 issues

323
00:10:29,186 --> 00:10:31,026
现在得到了漂亮的显示

324
00:10:31,306 --> 00:10:32,706
不再需要调整

325
00:10:32,706 --> 00:10:33,226
代码的布局了

326
00:10:34,166 --> 00:10:35,766
Issues 现在有更多细节了

327
00:10:36,026 --> 00:10:36,146
没错

328
00:10:37,516 --> 00:10:41,776
[ 掌声 ]

329
00:10:42,276 --> 00:10:43,346
Issues 现在能够以更多细节显示

330
00:10:43,346 --> 00:10:45,196
并且集成了 Fix-it

331
00:10:45,196 --> 00:10:47,026
工作流

332
00:10:47,466 --> 00:10:48,786
包括一键使用

333
00:10:48,786 --> 00:10:50,716
多个 Fix-its 的功能

334
00:10:52,516 --> 00:10:55,876
[ 掌声 ]

335
00:10:56,376 --> 00:10:58,086
这个新的 issue 展示

336
00:10:58,086 --> 00:10:59,606
是一块完美的画布  适用于

337
00:10:59,606 --> 00:11:01,486
超过 300 个新诊断程式

338
00:11:01,536 --> 00:11:02,876
分析器  和我们为了

339
00:11:02,876 --> 00:11:04,626
帮你们写出更棒的代码而添加的

340
00:11:04,706 --> 00:11:06,536
Fix-its

341
00:11:07,366 --> 00:11:08,786
性能也很重要

342
00:11:08,786 --> 00:11:10,116
在这次发布后

343
00:11:10,116 --> 00:11:11,596
你会发现编辑器打开文件

344
00:11:11,596 --> 00:11:13,966
速度比以前快 3 倍

345
00:11:14,016 --> 00:11:15,946
在文件中浏览时

346
00:11:15,946 --> 00:11:17,036
以每秒 60 帧的速度滚动

347
00:11:17,036 --> 00:11:18,606
效果也会更顺畅

348
00:11:18,606 --> 00:11:20,716
跳到某一行的速度则比以前提高了

349
00:11:20,906 --> 00:11:21,946
50 倍

350
00:11:22,516 --> 00:11:27,286
[ 掌声 ]

351
00:11:27,786 --> 00:11:28,836
简单来说

352
00:11:28,836 --> 00:11:30,196
一切都会在瞬间完成

353
00:11:31,646 --> 00:11:33,406
现在  在 Xcode 9 中的编辑体验

354
00:11:33,486 --> 00:11:34,946
也会是全新的

355
00:11:35,796 --> 00:11:37,466
我们的编辑器现在有了更多的

356
00:11:37,516 --> 00:11:39,036
语义意识  我们还使用了

357
00:11:39,036 --> 00:11:40,366
从 Swift Playgrounds 那里

358
00:11:40,366 --> 00:11:41,506
带来的标记化编辑

359
00:11:41,576 --> 00:11:41,956
体验

360
00:11:43,156 --> 00:11:44,436
你在代码中移动的时候

361
00:11:44,436 --> 00:11:45,596
我们会把下面的结构

362
00:11:45,596 --> 00:11:46,846
高亮标出

363
00:11:48,516 --> 00:11:55,366
[ 掌声 ]

364
00:11:55,866 --> 00:11:58,386
你点击其中一个标记时

365
00:11:58,386 --> 00:11:59,376
会出现一个

366
00:11:59,376 --> 00:12:01,036
充满符号性变化的

367
00:12:01,036 --> 00:12:02,666
动作菜单帮你

368
00:12:02,666 --> 00:12:03,256
扩展你的代码

369
00:12:04,516 --> 00:12:08,996
[ 掌声 ]

370
00:12:09,496 --> 00:12:10,586
我猜有人已经猜到

371
00:12:10,586 --> 00:12:12,806
接下来我会说什么了

372
00:12:13,646 --> 00:12:14,736
没错  是真的

373
00:12:14,776 --> 00:12:16,366
Xcode 9 有一个全新的

374
00:12:16,366 --> 00:12:17,386
重构系统了

375
00:12:18,516 --> 00:12:27,206
[ 掌声 ]

376
00:12:27,706 --> 00:12:29,196
没错  我们的重构系统

377
00:12:29,196 --> 00:12:30,956
适用于 Swift  Objective-C

378
00:12:31,066 --> 00:12:33,356
C 和 C++ 所以你可以

379
00:12:33,636 --> 00:12:34,926
尽情使用

380
00:12:35,406 --> 00:12:36,806
重构工作流

381
00:12:36,916 --> 00:12:38,436
能够利用新的

382
00:12:38,436 --> 00:12:40,396
标记化编辑体验

383
00:12:40,396 --> 00:12:41,926
代表 contextual actions

384
00:12:41,926 --> 00:12:44,376
比如抽取和重命名

385
00:12:44,376 --> 00:12:45,686
这些都是可绑定的

386
00:12:45,796 --> 00:12:47,376
你可以把常用的动作设成

387
00:12:47,376 --> 00:12:48,376
关键性的量值

388
00:12:49,366 --> 00:12:50,936
我们也准备了一个很棒的

389
00:12:50,986 --> 00:12:52,586
演示来帮大家熟悉这些改动

390
00:12:53,826 --> 00:12:54,966
所以下面我要

391
00:12:54,966 --> 00:12:56,026
请 Ken Orr 上台

392
00:12:56,026 --> 00:12:57,286
为大家演示

393
00:12:57,286 --> 00:12:58,536
重构的新 Source Editor

394
00:13:00,516 --> 00:13:05,566
[ 掌声 ]

395
00:13:06,066 --> 00:13:06,656
>>  谢谢 Matthew

396
00:13:07,246 --> 00:13:09,166
Xcode 9 有了一个全新的

397
00:13:09,166 --> 00:13:10,816
彻底重写的 Source Editor

398
00:13:10,816 --> 00:13:13,736
它变得更快了

399
00:13:13,736 --> 00:13:16,096
我想你首先就会注意到

400
00:13:16,096 --> 00:13:18,546
这种速度的变化

401
00:13:19,076 --> 00:13:20,866
在这 1 万行代码

402
00:13:20,916 --> 00:13:25,326
中一直滚动到底  都非常

403
00:13:25,326 --> 00:13:26,736
顺畅  而且我可以

404
00:13:26,736 --> 00:13:28,766
瞬间回到顶部

405
00:13:29,666 --> 00:13:31,536
当然  代码看上去

406
00:13:31,626 --> 00:13:33,206
也棒极了

407
00:13:33,286 --> 00:13:34,626
我把它放大一点

408
00:13:34,626 --> 00:13:35,726
让大家看得更容易

409
00:13:35,916 --> 00:13:38,036
点击几下 Command+

410
00:13:39,516 --> 00:13:43,796
[ 掌声 ]

411
00:13:44,296 --> 00:13:45,956
这都是小改动

412
00:13:48,246 --> 00:13:50,596
假设我正在制作一个 iOS app

413
00:13:50,596 --> 00:13:52,956
让我们的用户探索

414
00:13:52,956 --> 00:13:53,756
太阳系

415
00:13:53,826 --> 00:13:55,286
我想加几行

416
00:13:55,286 --> 00:13:55,846
代码

417
00:13:55,846 --> 00:13:56,966
我要跳转到这个

418
00:13:56,966 --> 00:14:00,456
Objective-C 文件上

419
00:14:00,456 --> 00:14:01,586
而我刚加入的这几行代码

420
00:14:01,586 --> 00:14:03,426
有一点小问题

421
00:14:03,576 --> 00:14:05,146
你会看到 这个新的

422
00:14:05,146 --> 00:14:06,866
issues presentation 马上出现了

423
00:14:07,186 --> 00:14:09,236
而且还内置了 Fix-its

424
00:14:10,286 --> 00:14:12,156
这个在 Objective-C 是新的

425
00:14:14,156 --> 00:14:16,106
而且还警告我  我是在用 iOS 11

426
00:14:16,106 --> 00:14:18,346
API  但我的 project

427
00:14:18,346 --> 00:14:21,046
却是配置到 iOS 10 的

428
00:14:21,046 --> 00:14:21,556
这会导致系统崩溃 [掌声]

429
00:14:22,216 --> 00:14:28,886
对于这个问题有 Fix-it

430
00:14:28,886 --> 00:14:29,586
我会接受

431
00:14:30,246 --> 00:14:32,986
如果我接受了 Xcode 就会用新的

432
00:14:32,986 --> 00:14:35,086
Objective-C 关键词 atAvailable

433
00:14:35,086 --> 00:14:36,686
把我的代码打包

434
00:14:37,106 --> 00:14:38,736
现在  这几行代码

435
00:14:38,736 --> 00:14:41,066
就只会在 iOS 11 下面才运行了

436
00:14:42,516 --> 00:14:46,076
[ 掌声]

437
00:14:46,576 --> 00:14:47,676
我还想展示另外一个

438
00:14:47,676 --> 00:14:48,386
新的 Fix-it

439
00:14:48,386 --> 00:14:49,866
我要跳到这边这个

440
00:14:49,956 --> 00:14:50,856
SWF 文件上面

441
00:14:51,096 --> 00:14:52,756
这个 class 代表的是

442
00:14:52,756 --> 00:14:54,106
我们的太阳系中的一个

443
00:14:54,106 --> 00:14:56,126
卫星  我要使用

444
00:14:56,126 --> 00:14:59,336
物理物体协议

445
00:14:59,946 --> 00:15:01,186
这有一些不同的

446
00:15:01,186 --> 00:15:01,816
方法

447
00:15:01,816 --> 00:15:04,766
我有一些

448
00:15:04,766 --> 00:15:05,586
不同的方法

449
00:15:06,086 --> 00:15:07,536
当然  我还没有执行

450
00:15:07,536 --> 00:15:09,226
因此出现了一个问题

451
00:15:10,156 --> 00:15:13,526
现在  只要点击一下

452
00:15:13,526 --> 00:15:16,386
Fix-it 它就会把所有

453
00:15:16,386 --> 00:15:17,796
我还没有执行的方法

454
00:15:17,796 --> 00:15:18,206
添加进来

455
00:15:19,516 --> 00:15:24,576
[ 掌声 ]

456
00:15:25,076 --> 00:15:26,686
Xcode 9 还能帮助我

457
00:15:26,686 --> 00:15:29,316
转化并重构我的代码

458
00:15:29,686 --> 00:15:30,426
我来展示一下

459
00:15:30,426 --> 00:15:32,626
我现在要跳到这个

460
00:15:32,626 --> 00:15:35,856
solarsystem.swf 文件上

461
00:15:35,856 --> 00:15:36,926
按住 Command 键

462
00:15:36,926 --> 00:15:38,776
操作鼠标

463
00:15:39,186 --> 00:15:41,586
这时 Xcode 就会显示出

464
00:15:41,586 --> 00:15:43,486
我的代码的结构

465
00:15:44,156 --> 00:15:46,076
点击一下  就能得到

466
00:15:46,076 --> 00:15:48,146
一系列选项与变化

467
00:15:48,146 --> 00:15:49,706
这是针对我所点击的

468
00:15:49,706 --> 00:15:50,396
Expression 的

469
00:15:50,936 --> 00:15:51,856
我在这里点击这个

470
00:15:51,856 --> 00:15:52,996
expression 生成一个

471
00:15:52,996 --> 00:15:54,926
卫星  然后把它加到

472
00:15:55,086 --> 00:15:55,566
地球上

473
00:15:56,476 --> 00:15:58,226
你知道  我个人更喜欢

474
00:15:58,266 --> 00:16:00,586
捕捉我在

475
00:16:00,586 --> 00:16:01,976
变量中生成的所有对象

476
00:16:01,976 --> 00:16:03,196
所以我就把这个提取出来

477
00:16:03,196 --> 00:16:04,976
进入一个 expression

478
00:16:04,976 --> 00:16:06,976
然后我使用 Scope 里的 Edit All

479
00:16:06,976 --> 00:16:08,586
来给它起个好名字

480
00:16:08,586 --> 00:16:09,346
月球

481
00:16:10,826 --> 00:16:12,046
大家知道  实际上

482
00:16:12,046 --> 00:16:13,516
我喜欢让 methods

483
00:16:13,516 --> 00:16:15,856
简短并直达主题

484
00:16:15,856 --> 00:16:16,936
因此我要把这个

485
00:16:16,936 --> 00:16:18,956
If block 拉到它自己的

486
00:16:18,956 --> 00:16:19,346
method 里

487
00:16:20,126 --> 00:16:22,926
我这样做的时候 Xcode 会

488
00:16:22,926 --> 00:16:24,756
为我生成一个新 method

489
00:16:24,756 --> 00:16:26,856
并把所有代码添加进去

490
00:16:26,856 --> 00:16:28,036
然后在起始处留给我一个

491
00:16:28,036 --> 00:16:29,086
这个 method 的 call

492
00:16:30,216 --> 00:16:31,406
也给它起个名吧

493
00:16:32,516 --> 00:16:37,806
[ 掌声 ]

494
00:16:38,306 --> 00:16:39,886
这就是一些本地的

495
00:16:39,886 --> 00:16:41,866
转换  但很多时候

496
00:16:41,866 --> 00:16:43,466
我想做的是

497
00:16:43,466 --> 00:16:44,556
重构在整个 project 里面

498
00:16:44,556 --> 00:16:45,586
使用的东西

499
00:16:45,586 --> 00:16:46,626
的名字

500
00:16:47,586 --> 00:16:48,836
实际上  我这就有个很好的

501
00:16:48,836 --> 00:16:51,026
例子  也就是这个

502
00:16:51,486 --> 00:16:52,276
position method

503
00:16:52,276 --> 00:16:53,966
这个名字有点一般

504
00:16:53,966 --> 00:16:54,866
我想我应该把它

505
00:16:54,866 --> 00:16:56,006
换成一个更具描述性的

506
00:16:56,006 --> 00:16:56,566
名字

507
00:16:56,566 --> 00:16:57,806
所以我就要按住

508
00:16:57,806 --> 00:17:00,376
Command 键  点击  并说

509
00:17:00,416 --> 00:17:03,226
重命名  这时

510
00:17:03,226 --> 00:17:05,786
Xcode 就会收起我所在的文件

511
00:17:06,516 --> 00:17:11,586
[ 掌声 ]

512
00:17:12,086 --> 00:17:13,816
收起这个文件

513
00:17:13,945 --> 00:17:16,306
然后从我的 project 各个

514
00:17:16,366 --> 00:17:18,205
使用了这个 method 的地方

515
00:17:18,205 --> 00:17:18,566
把它们拉上来

516
00:17:19,195 --> 00:17:21,346
我选个新名字

517
00:17:21,346 --> 00:17:22,536
就用这个吧

518
00:17:22,856 --> 00:17:25,246
"orbital position"

519
00:17:26,046 --> 00:17:27,866
我键入的时候

520
00:17:27,866 --> 00:17:29,376
它就会把所有的 slide 都改名了

521
00:17:29,976 --> 00:17:31,636
我还可以为参数

522
00:17:31,636 --> 00:17:32,056
重命名

523
00:17:32,426 --> 00:17:33,756
第一个参数名  看上去

524
00:17:33,756 --> 00:17:34,116
没问题

525
00:17:34,436 --> 00:17:35,666
但第二个名称 date

526
00:17:35,666 --> 00:17:36,816
我决定把它改成

527
00:17:36,856 --> 00:17:39,696
"moment in time"

528
00:17:40,926 --> 00:17:43,726
点击重命名  完成了

529
00:17:43,806 --> 00:17:46,926
所以对于这样的 method

530
00:17:47,186 --> 00:17:48,416
重命名这个重构是很好用的

531
00:17:48,936 --> 00:17:50,486
对于所有的 classes 的工作也是一样

532
00:17:50,976 --> 00:17:53,596
在这里有这个 class

533
00:17:53,936 --> 00:17:55,776
"trans-Neptunian object"

534
00:17:56,426 --> 00:17:58,606
这名字有点太长了

535
00:17:58,606 --> 00:18:00,026
我们给它改一个简单点的

536
00:18:00,026 --> 00:18:00,666
名字吧

537
00:18:01,466 --> 00:18:02,976
我要把它的名字改成

538
00:18:03,076 --> 00:18:05,206
"minor planet"

539
00:18:06,236 --> 00:18:07,696
重构  它能够完成

540
00:18:07,886 --> 00:18:09,186
你所希望的一切

541
00:18:09,566 --> 00:18:11,696
在我的 project 里  它意味着

542
00:18:11,856 --> 00:18:14,876
SWF 文件 Objective-C 文件

543
00:18:15,936 --> 00:18:17,566
甚至是故事板

544
00:18:18,516 --> 00:18:26,506
[ 掌声 ]

545
00:18:27,006 --> 00:18:29,856
我做好后  点击重命名

546
00:18:30,056 --> 00:18:31,056
就完工了

547
00:18:31,056 --> 00:18:32,016
非常简单

548
00:18:32,356 --> 00:18:33,236
非常好用

549
00:18:33,826 --> 00:18:35,246
这就是新的 Source Editor

550
00:18:35,246 --> 00:18:36,246
和 Xcode 9 里的重构功能

551
00:18:36,726 --> 00:18:37,326
Matthew 上来吧

552
00:18:38,516 --> 00:18:43,766
[ 掌声 ]

553
00:18:44,266 --> 00:18:44,706
>>  谢谢 Ken

554
00:18:44,796 --> 00:18:45,946
非常精彩的讲解

555
00:18:48,346 --> 00:18:50,246
新的重构功能

556
00:18:50,246 --> 00:18:51,506
大大有利于改进你的代码

557
00:18:51,906 --> 00:18:53,536
除了重命名

558
00:18:53,536 --> 00:18:54,996
这项重构  我们还会加入

559
00:18:54,996 --> 00:18:56,206
一系列本地转化

560
00:18:56,206 --> 00:18:57,916
比如抽取代码

561
00:18:58,336 --> 00:19:00,026
添加 missing overrides

562
00:19:00,026 --> 00:19:01,246
以及本地化的字符串

563
00:19:02,176 --> 00:19:03,516
但这只是开始

564
00:19:04,186 --> 00:19:05,256
因为我们会公开重构引擎

565
00:19:05,256 --> 00:19:06,856
的源代码  这是

566
00:19:07,146 --> 00:19:08,846
Apple Clang 和 Swift compilers

567
00:19:08,846 --> 00:19:09,896
的一部分

568
00:19:11,516 --> 00:19:16,086
[ 掌声 ]

569
00:19:16,586 --> 00:19:17,986
Xcode 会自动拾取

570
00:19:18,016 --> 00:19:19,556
你在本地工具链中

571
00:19:19,556 --> 00:19:21,216
搭建的转换这样你就

572
00:19:21,216 --> 00:19:22,856
有一个很棒的方法去让你的新的转换原型化

573
00:19:24,926 --> 00:19:26,906
我们的新 Source Editor

574
00:19:27,326 --> 00:19:28,916
看上去很棒

575
00:19:28,916 --> 00:19:30,506
性能更是强大  现在又能

576
00:19:30,546 --> 00:19:31,156
重构了

577
00:19:31,706 --> 00:19:33,456
这是 Xcode 9 的一个良好开端

578
00:19:33,556 --> 00:19:36,566
我们在 Swift 里

579
00:19:36,706 --> 00:19:38,596
也有一些好消息

580
00:19:38,596 --> 00:19:40,106
下面就请 Ted Kremenek

581
00:19:40,106 --> 00:19:40,416
来讲解

582
00:19:42,516 --> 00:19:47,096
[ 掌声 ]

583
00:19:47,596 --> 00:19:49,626
>>  对于 Swift

584
00:19:49,626 --> 00:19:51,316
我们的任务是让编程

585
00:19:51,486 --> 00:19:55,046
更简单  更快速  更安全  更现代化

586
00:19:56,556 --> 00:19:58,066
在不到三年的时间里

587
00:19:58,066 --> 00:19:59,676
改进的速度是

588
00:19:59,676 --> 00:20:00,946
十分惊人的

589
00:20:01,666 --> 00:20:05,376
在这段时间里  超过 25 万个 app

590
00:20:05,796 --> 00:20:07,596
的代码是用 Swift 写就的并

591
00:20:07,646 --> 00:20:09,246
提交到 App Store 上面

592
00:20:10,026 --> 00:20:11,736
不仅是这个数量

593
00:20:11,736 --> 00:20:12,766
令人振奋

594
00:20:12,766 --> 00:20:14,396
科技公司真的是

595
00:20:14,396 --> 00:20:16,186
在用 Swift 写那些他们

596
00:20:16,186 --> 00:20:17,746
赖以生存的 app

597
00:20:18,186 --> 00:20:19,346
在 App Store 之外

598
00:20:20,106 --> 00:20:21,336
公司和企业也都

599
00:20:21,406 --> 00:20:22,616
接受了 Swift

600
00:20:23,116 --> 00:20:25,346
IBM 用 Swift 写了

601
00:20:25,346 --> 00:20:27,286
100多个 MobileFirst iOS 系统的 app

602
00:20:27,286 --> 00:20:29,526
IBM 和 SAP 都发布了

603
00:20:29,606 --> 00:20:32,826
允许 Swift 开发者

604
00:20:32,826 --> 00:20:34,606
利用他们的服务基础设施的

605
00:20:34,606 --> 00:20:35,976
SDK

606
00:20:37,006 --> 00:20:39,096
我们对于 Swift 的表现

607
00:20:39,096 --> 00:20:40,846
非常满意  当然

608
00:20:40,846 --> 00:20:42,486
Swift 不会停滞不前

609
00:20:43,766 --> 00:20:45,336
Xcode 9 包括新发布的

610
00:20:45,336 --> 00:20:47,726
Swift 和 Swift 4

611
00:20:47,726 --> 00:20:49,136
我们对此很期待

612
00:20:50,276 --> 00:20:52,066
这次发布的焦点

613
00:20:52,066 --> 00:20:53,686
是最基础最核心的东西

614
00:20:53,956 --> 00:20:56,266
让这些变得更加坚实可靠

615
00:20:56,396 --> 00:20:58,086
因为我们希望 Swift 成为

616
00:20:58,086 --> 00:21:00,026
大家搭建软件的

617
00:21:00,026 --> 00:21:01,726
最佳基础工具

618
00:21:03,186 --> 00:21:04,976
我只能够讲到

619
00:21:04,976 --> 00:21:05,896
这次发布的一小部分

620
00:21:05,966 --> 00:21:07,456
内容  但我想

621
00:21:07,456 --> 00:21:08,996
这些应该算是

622
00:21:08,996 --> 00:21:11,006
很了不起的改进了

623
00:21:11,556 --> 00:21:13,406
首先我想说的

624
00:21:13,406 --> 00:21:15,376
是有了极大改进的

625
00:21:15,616 --> 00:21:16,096
字符串

626
00:21:17,356 --> 00:21:19,946
字符串处理是

627
00:21:19,946 --> 00:21:22,716
写软件的一个

628
00:21:23,066 --> 00:21:24,166
最基础的方面

629
00:21:24,166 --> 00:21:26,056
我们时刻都要和它打交道

630
00:21:26,656 --> 00:21:28,136
我们的目标一直是

631
00:21:28,136 --> 00:21:29,806
让 Swift 里的字符串处理

632
00:21:29,806 --> 00:21:31,596
成为第一类的

633
00:21:31,596 --> 00:21:33,176
而不必向 Unicode correctness

634
00:21:33,176 --> 00:21:33,706
有所妥协

635
00:21:34,376 --> 00:21:35,426
所以我们在 Swift 4 中

636
00:21:35,426 --> 00:21:37,306
为了这个目标

637
00:21:37,306 --> 00:21:38,376
迈出了三大步

638
00:21:39,276 --> 00:21:41,416
第一  你想让 API 变得

639
00:21:41,416 --> 00:21:43,636
更加易用  对吧

640
00:21:43,636 --> 00:21:44,866
因为你时刻都在用它

641
00:21:46,036 --> 00:21:48,316
我们也想大力

642
00:21:48,316 --> 00:21:49,966
改进 Unicode 的精确度

643
00:21:50,296 --> 00:21:51,216
这一点是字符串

644
00:21:51,216 --> 00:21:52,686
擅长的  但还没有完全

645
00:21:52,826 --> 00:21:54,406
达到我们的期望

646
00:21:55,056 --> 00:21:56,056
我们想让字符串

647
00:21:56,056 --> 00:21:58,066
变得超快速

648
00:21:59,036 --> 00:22:00,556
所以不难理解

649
00:22:00,556 --> 00:22:01,986
我们当然很希望

650
00:22:01,986 --> 00:22:03,366
让字符串也变得

651
00:22:03,366 --> 00:22:04,076
更加易用

652
00:22:04,106 --> 00:22:05,526
这里是一些你们可能

653
00:22:05,526 --> 00:22:06,666
在 Swift 3 里

654
00:22:06,666 --> 00:22:07,746
用字符串写过的代码

655
00:22:07,746 --> 00:22:09,816
比如遍历字符

656
00:22:09,816 --> 00:22:11,366
或者查询字符串

657
00:22:11,366 --> 00:22:12,346
看看里面是否有某个

658
00:22:12,346 --> 00:22:13,746
字符  或者把字符串

659
00:22:13,746 --> 00:22:14,016
拼接在一起

660
00:22:14,016 --> 00:22:16,266
我们会发现自己要

661
00:22:16,266 --> 00:22:18,116
经常到下面的

662
00:22:18,116 --> 00:22:20,236
这个字符视图上面

663
00:22:20,236 --> 00:22:21,046
我是说  你想得到

664
00:22:21,046 --> 00:22:22,226
基本字符集

665
00:22:22,226 --> 00:22:23,106
但它只有一步之遥

666
00:22:23,386 --> 00:22:25,736
它会造成这种不必要的

667
00:22:25,736 --> 00:22:26,236
麻烦

668
00:22:26,736 --> 00:22:29,066
所以在 Swift 4 里  我们极大地

669
00:22:29,146 --> 00:22:30,966
简化了这个过程

670
00:22:30,966 --> 00:22:33,236
去除了阻碍  现在字符串

671
00:22:33,236 --> 00:22:34,216
可以大范围替换

672
00:22:34,216 --> 00:22:36,546
字符集了

673
00:22:37,426 --> 00:22:39,336
不光是代码会

674
00:22:39,336 --> 00:22:40,746
完全按你的期望

675
00:22:40,926 --> 00:22:42,436
读写  你还可以把

676
00:22:42,436 --> 00:22:43,576
集合上的泛型算法的力量

677
00:22:45,036 --> 00:22:46,926
直接用在字符串上

678
00:22:48,656 --> 00:22:50,566
我们还添加了很棒的句法

679
00:22:50,636 --> 00:22:51,666
比如多行字符串

680
00:22:51,666 --> 00:22:53,056
常量  包括

681
00:22:53,056 --> 00:22:54,596
White space 语言

682
00:22:55,806 --> 00:22:57,536
有了 one-sided ranges 的支持

683
00:22:57,536 --> 00:22:58,986
字符切割会变得

684
00:22:58,986 --> 00:23:00,236
更加不重要

685
00:23:00,956 --> 00:23:02,316
你可以很快地

686
00:23:02,356 --> 00:23:03,876
在一个片段里

687
00:23:03,936 --> 00:23:05,376
指明你想要的字符串

688
00:23:06,736 --> 00:23:07,756
这些对于核心人机工程的

689
00:23:07,756 --> 00:23:09,646
改进必须要得到

690
00:23:09,646 --> 00:23:10,606
Unicode 的改进与支持

691
00:23:12,086 --> 00:23:13,726
你在 Swift 3 中

692
00:23:13,726 --> 00:23:15,076
处理字符串的时候

693
00:23:15,076 --> 00:23:18,336
应该注意到过

694
00:23:18,426 --> 00:23:20,066
这样的怪事

695
00:23:20,066 --> 00:23:24,046
你会想  这是怎么回事

696
00:23:24,766 --> 00:23:26,806
这其实要归因于

697
00:23:26,806 --> 00:23:28,376
Unicode 的丰富性

698
00:23:28,966 --> 00:23:30,706
我们对于字符的概念

699
00:23:30,706 --> 00:23:32,116
实际上是由多个

700
00:23:32,116 --> 00:23:34,096
Unicode 标量值构成的

701
00:23:34,456 --> 00:23:36,356
成功地把它解构

702
00:23:36,356 --> 00:23:37,336
对于 Unicode 的精确性

703
00:23:37,416 --> 00:23:40,786
以及字符和字符串 API 的精确性

704
00:23:40,786 --> 00:23:42,656
都至关重要

705
00:23:43,846 --> 00:23:45,096
在 Swift 4 中  我们有了

706
00:23:45,096 --> 00:23:46,516
Unicode 9 Grapheme Breaking

707
00:23:46,516 --> 00:23:47,106
算法

708
00:23:47,106 --> 00:23:48,686
它能够按照你的期望

709
00:23:48,686 --> 00:23:49,736
把这些字符串

710
00:23:49,736 --> 00:23:51,456
或者字符分离开

711
00:23:51,456 --> 00:23:53,336
让你有基本字符集

712
00:23:53,336 --> 00:23:54,896
的全面精确度

713
00:23:55,006 --> 00:23:56,346
这真的很重要

714
00:23:56,346 --> 00:23:58,266
因为字符串就是

715
00:23:58,266 --> 00:23:59,236
字符的集合

716
00:24:00,786 --> 00:24:02,446
现在  这个对 Unicode

717
00:24:02,446 --> 00:24:04,786
支持的改进不是以牺牲性能

718
00:24:04,786 --> 00:24:05,436
为代价的

719
00:24:05,966 --> 00:24:07,256
我们已经调试过

720
00:24:07,256 --> 00:24:08,546
字符串的运行了

721
00:24:08,926 --> 00:24:10,336
所以对大多数的字符串处理工作来说

722
00:24:10,336 --> 00:24:12,416
对于英语  法语

723
00:24:12,456 --> 00:24:14,736
德语  西班牙语

724
00:24:14,736 --> 00:24:15,856
特别是那些以拉丁文为基础的

725
00:24:15,856 --> 00:24:16,736
语言  你会看到

726
00:24:16,796 --> 00:24:17,666
字符串的性能大约

727
00:24:17,666 --> 00:24:18,766
提高了 3.5 倍

728
00:24:20,516 --> 00:24:25,356
[ 掌声 ]

729
00:24:25,856 --> 00:24:27,336
同样 你会看到

730
00:24:27,336 --> 00:24:28,316
简体中文和大部分

731
00:24:28,366 --> 00:24:30,286
当代日本文字的处理

732
00:24:30,286 --> 00:24:32,556
也有很大改进

733
00:24:33,056 --> 00:24:35,146
[掌声]

734
00:24:35,646 --> 00:24:37,736
那就是改良后的字符串

735
00:24:38,036 --> 00:24:40,206
更快  更易用

736
00:24:40,456 --> 00:24:41,176
性能更强

737
00:24:42,646 --> 00:24:43,566
我想说的第二个特性

738
00:24:43,566 --> 00:24:46,516
就是让你们能够

739
00:24:46,516 --> 00:24:48,096
轻松把 Swift  类型

740
00:24:48,786 --> 00:24:51,066
转化成可编码的格式

741
00:24:51,066 --> 00:24:53,546
例如 JSON 和属性列表

742
00:24:53,546 --> 00:24:55,096
同时还提供了

743
00:24:55,136 --> 00:24:56,676
自定义的机会

744
00:24:58,416 --> 00:25:01,116
在 Swift 里  我们会用到值类型

745
00:25:01,116 --> 00:25:02,766
和引用类型

746
00:25:02,766 --> 00:25:04,556
虽然 NSCoding 支持 class

747
00:25:04,556 --> 00:25:06,996
但它对 struct 或者 enum 就无能为力了

748
00:25:08,296 --> 00:25:09,126
这个新特性

749
00:25:09,156 --> 00:25:10,726
能够支持上面所有类型

750
00:25:11,946 --> 00:25:12,776
咱们看一下实际操作

751
00:25:13,156 --> 00:25:14,856
我有一个简单的数值类型

752
00:25:15,356 --> 00:25:16,046
这是一个结构

753
00:25:16,046 --> 00:25:16,676
是一个表

754
00:25:17,156 --> 00:25:18,126
有一些属性

755
00:25:18,756 --> 00:25:19,556
我希望让它能够

756
00:25:19,556 --> 00:25:21,706
被 JSON 属性列表编码和解码

757
00:25:23,196 --> 00:25:25,276
我可以轻松做到这点

758
00:25:25,276 --> 00:25:27,856
只要在一个叫做 Codable 的

759
00:25:28,126 --> 00:25:28,706
新协议里添加一致性就好了

760
00:25:30,126 --> 00:25:32,376
如果这个类型的属性

761
00:25:32,476 --> 00:25:34,086
具有与 Codable 一致的类型

762
00:25:34,086 --> 00:25:35,806
这就是所有

763
00:25:35,906 --> 00:25:38,206
我需要写的代码了

764
00:25:38,206 --> 00:25:40,296
因为与这个协议的一致性

765
00:25:40,296 --> 00:25:41,876
已经被程序

766
00:25:41,876 --> 00:25:42,526
合成了

767
00:25:43,516 --> 00:25:49,836
[ 掌声 ]

768
00:25:50,336 --> 00:25:51,266
它会按照你们的期待工作

769
00:25:51,266 --> 00:25:52,956
我可以建立一个这个类型的值

770
00:25:53,006 --> 00:25:55,856
只需要一行代码

771
00:25:55,856 --> 00:25:57,506
我便可以把这个序列化到

772
00:25:57,506 --> 00:25:57,806
JSON 上

773
00:25:58,516 --> 00:26:04,196
[ 掌声 ]

774
00:26:04,696 --> 00:26:07,156
一旦我有了 JSON 值

775
00:26:07,156 --> 00:26:08,996
就能很轻易地重新建立它

776
00:26:08,996 --> 00:26:10,966
只需一行代码

777
00:26:10,966 --> 00:26:13,026
让它变回外来值

778
00:26:13,026 --> 00:26:15,016
这也是 100% 安全的类型

779
00:26:16,516 --> 00:26:20,866
[ 掌声 ]

780
00:26:21,366 --> 00:26:22,956
非常简单  非常容易

781
00:26:23,826 --> 00:26:24,636
我们认为你们一定会爱上它的

782
00:26:24,726 --> 00:26:26,356
Swift 4 里有很多很棒的特性

783
00:26:26,386 --> 00:26:29,816
我们也很满意

784
00:26:29,816 --> 00:26:31,386
对于 Swift

785
00:26:31,386 --> 00:26:32,736
所做的改进

786
00:26:33,406 --> 00:26:35,656
在 Swift 4 中另一个重要的目标

787
00:26:35,656 --> 00:26:37,746
就是我们想让所有的

788
00:26:37,776 --> 00:26:40,646
特性都很容易上手

789
00:26:41,256 --> 00:26:44,026
因此在 Xcode 9 里面

790
00:26:44,026 --> 00:26:45,976
你可以搞定 Swift 3 的项目

791
00:26:46,616 --> 00:26:49,066
然后不用做任何修改

792
00:26:49,066 --> 00:26:50,366
就可以构建它们

793
00:26:51,656 --> 00:26:52,686
这意味着你可以使用

794
00:26:52,686 --> 00:26:56,596
最新的 OS 操作系统 工具

795
00:26:56,596 --> 00:26:58,036
甚至是很多新的语言特性

796
00:26:58,036 --> 00:26:59,776
而不必更改

797
00:26:59,776 --> 00:27:01,416
你的代码

798
00:27:02,326 --> 00:27:04,196
这要怎么实现呢

799
00:27:05,926 --> 00:27:07,066
在 Xcode 里  有一个构建是

800
00:27:07,066 --> 00:27:08,436
设置 Swift 语言版本的功能

801
00:27:09,606 --> 00:27:11,706
它有两个值 Swift 3.2 和

802
00:27:11,706 --> 00:27:14,686
Swift 4.0

803
00:27:14,856 --> 00:27:16,296
这意味着

804
00:27:16,296 --> 00:27:18,246
一个程序能够支持

805
00:27:18,296 --> 00:27:19,276
这两种不同的语言

806
00:27:19,316 --> 00:27:19,556
模型

807
00:27:21,016 --> 00:27:22,376
你能做的是

808
00:27:22,376 --> 00:27:24,076
你可以有一个单一项目

809
00:27:24,076 --> 00:27:26,136
混合搭配构建的目标

810
00:27:26,136 --> 00:27:28,276
3.2 或者 4.0 都可以

811
00:27:28,786 --> 00:27:29,746
还意味着你可以

812
00:27:29,746 --> 00:27:31,366
有一个使用全新 Swift 4 特性

813
00:27:31,366 --> 00:27:33,416
编写的 app 但仍然使用

814
00:27:33,416 --> 00:27:34,836
Swift 3.2 构建的包

815
00:27:34,876 --> 00:27:36,306
或者框架

816
00:27:37,206 --> 00:27:38,586
这让你会很容易地

817
00:27:38,586 --> 00:27:40,026
利用最新的 Swift 的

818
00:27:40,026 --> 00:27:41,236
新特性

819
00:27:41,306 --> 00:27:44,146
Swift 3.2 是什么呢

820
00:27:45,496 --> 00:27:46,246
它是个语言模型

821
00:27:47,026 --> 00:27:47,876
你基本上可以

822
00:27:47,876 --> 00:27:49,486
不做修改  构建你的项目

823
00:27:50,936 --> 00:27:52,156
你可以访问几乎所有

824
00:27:52,156 --> 00:27:52,986
新的语言特性

825
00:27:52,986 --> 00:27:56,076
字符串  编码  什么都行

826
00:27:56,076 --> 00:27:57,916
你可以访问在 SDK 上的

827
00:27:58,216 --> 00:27:58,886
所有 API

828
00:28:00,006 --> 00:28:01,456
你唯一得不到的是

829
00:28:01,456 --> 00:28:02,916
在现有的  你以前可能用过的

830
00:28:02,946 --> 00:28:04,986
API 上  与 Swift 有关的

831
00:28:04,986 --> 00:28:05,836
更新

832
00:28:06,476 --> 00:28:07,536
因此你不用

833
00:28:07,536 --> 00:28:08,866
修改项目就可以

834
00:28:08,866 --> 00:28:09,746
轻松开始

835
00:28:10,346 --> 00:28:12,936
要得到这些优势

836
00:28:12,936 --> 00:28:13,716
这有一个 Swift 4 模型

837
00:28:14,566 --> 00:28:16,026
你可以访问几乎

838
00:28:16,026 --> 00:28:16,866
所有的新东西

839
00:28:17,426 --> 00:28:18,226
还有很多新机会

840
00:28:18,226 --> 00:28:19,786
去进一步改进

841
00:28:19,786 --> 00:28:21,226
你的 app 的性能

842
00:28:21,786 --> 00:28:23,726
包括减少

843
00:28:23,726 --> 00:28:24,246
其占用空间

844
00:28:25,136 --> 00:28:25,966
对于 Swift 开发者来说

845
00:28:26,016 --> 00:28:27,716
在 SDK 里也有很多

846
00:28:27,716 --> 00:28:29,656
很棒的升级

847
00:28:29,656 --> 00:28:31,006
要利用它们

848
00:28:31,066 --> 00:28:32,746
需要对你的代码做一些

849
00:28:32,746 --> 00:28:33,256
迁移

850
00:28:33,256 --> 00:28:35,096
这些是很重要的升级

851
00:28:35,536 --> 00:28:36,886
是革命性的

852
00:28:36,886 --> 00:28:37,636
改变

853
00:28:37,976 --> 00:28:39,646
比起从 Swift 2 到 Swift 3 的

854
00:28:39,646 --> 00:28:41,696
大刀阔斧

855
00:28:41,696 --> 00:28:43,526
从 Swift 3 到 Swift 4 的变化其实很

856
00:28:43,526 --> 00:28:43,936
简单

857
00:28:45,636 --> 00:28:46,866
我们很开心 大家

858
00:28:46,866 --> 00:28:48,216
对 Swift 投入了这么多精力

859
00:28:48,216 --> 00:28:49,436
我们看到这样的

860
00:28:49,506 --> 00:28:51,236
投入越来越多

861
00:28:51,236 --> 00:28:53,776
Swift 项目的规模也同时

862
00:28:54,086 --> 00:28:55,476
在增长  对吧

863
00:28:55,476 --> 00:28:56,476
人们在用 Swift 写更多的代码

864
00:28:57,866 --> 00:28:59,796
我们意识到这很重要

865
00:28:59,796 --> 00:29:01,616
我们需要把力量

866
00:29:01,616 --> 00:29:02,806
集中到工具改良上

867
00:29:03,436 --> 00:29:05,786
所以我们致力于两个方面

868
00:29:05,786 --> 00:29:07,376
来缩短大型项目的

869
00:29:07,376 --> 00:29:08,236
构建时间

870
00:29:09,076 --> 00:29:10,836
首先是混合搭配

871
00:29:10,836 --> 00:29:12,796
Objective-C 和 Swift 项目

872
00:29:14,516 --> 00:29:18,106
[ 掌声 ]

873
00:29:18,606 --> 00:29:19,916
通过预编码 bridging header

874
00:29:19,916 --> 00:29:21,266
我们在构建时间上获得了

875
00:29:21,266 --> 00:29:23,006
40% 的提升

876
00:29:23,006 --> 00:29:24,216
特别是有关 debug 的构建

877
00:29:24,216 --> 00:29:25,326
我们在编写自己的

878
00:29:25,326 --> 00:29:26,626
音乐 app 上已经见证了这种提升

879
00:29:27,376 --> 00:29:29,996
同样  如果你在使用

880
00:29:29,996 --> 00:29:32,436
全模型优化

881
00:29:32,436 --> 00:29:34,176
我们极大地提高了程序

882
00:29:34,176 --> 00:29:35,186
和构建系统的并行优化

883
00:29:35,186 --> 00:29:37,376
你可以看到

884
00:29:37,376 --> 00:29:38,726
构建时间

885
00:29:38,726 --> 00:29:40,076
多达2倍的提升

886
00:29:41,316 --> 00:29:42,996
这个优化非常重要

887
00:29:42,996 --> 00:29:45,596
我们不想等到 Xcode 9 了

888
00:29:45,596 --> 00:29:47,356
因此我们有些激进地

889
00:29:47,356 --> 00:29:48,476
在 Xcode 8.3.2

890
00:29:48,476 --> 00:29:50,996
就发布了

891
00:29:51,716 --> 00:29:53,256
因此你们很多人

892
00:29:53,256 --> 00:29:54,486
都已经体验过这一构建提升

893
00:29:54,956 --> 00:29:56,176
带来的好处了

894
00:29:56,646 --> 00:29:58,116
至于那些还没有

895
00:29:58,116 --> 00:29:58,956
使用过全模块优化的人

896
00:29:58,956 --> 00:30:01,116
我强烈建议你们去

897
00:30:01,116 --> 00:30:02,776
试一试  因为它真的

898
00:30:02,776 --> 00:30:03,306
很厉害

899
00:30:04,266 --> 00:30:06,536
这些只是 Swift 4 里

900
00:30:06,536 --> 00:30:08,126
的冰山一角

901
00:30:08,536 --> 00:30:09,446
我们相信你们一定会爱上它

902
00:30:09,546 --> 00:30:12,636
现在我把时间还给

903
00:30:12,636 --> 00:30:12,976
Matthew

904
00:30:14,516 --> 00:30:17,316
[ 掌声 ]

905
00:30:17,816 --> 00:30:18,236
>>  多谢 Ted

906
00:30:19,476 --> 00:30:21,396
Xcode 的另一个关键特色是

907
00:30:21,396 --> 00:30:23,266
我们的核心技术

908
00:30:23,266 --> 00:30:24,816
我想从索引讲起

909
00:30:25,856 --> 00:30:27,806
我们的源码和文本索引

910
00:30:27,806 --> 00:30:29,196
为许多工作流提供了后端支持

911
00:30:29,196 --> 00:30:31,116
比如导航

912
00:30:31,166 --> 00:30:32,696
搜索和重构

913
00:30:33,356 --> 00:30:34,456
在 Xcode 9 里

914
00:30:34,456 --> 00:30:35,856
我们重新搭建了它们  现在它们

915
00:30:35,856 --> 00:30:37,806
可以存储更多数据  性能也更强了

916
00:30:39,176 --> 00:30:40,456
实际上  你会看到

917
00:30:40,456 --> 00:30:42,556
Open Quickly 这样的工作流

918
00:30:42,556 --> 00:30:43,926
在你的项目上打开的速度比以前快 35 倍

919
00:30:46,456 --> 00:30:47,846
在大型项目中查找速度

920
00:30:47,846 --> 00:30:49,366
比以前快 50 倍

921
00:30:50,516 --> 00:30:53,546
[ 掌声 ]

922
00:30:54,046 --> 00:30:55,616
所以我们的新的索引真的改变了很多

923
00:30:57,006 --> 00:30:58,416
除此之外  Xcode 9 还会

924
00:30:58,416 --> 00:31:00,426
在搭建的同时包含索引

925
00:31:01,276 --> 00:31:02,406
Xcode 同样也会在后台索引

926
00:31:04,516 --> 00:31:07,606
[ 掌声 ]

927
00:31:08,106 --> 00:31:09,256
Xcode 会在后台索引

928
00:31:09,256 --> 00:31:10,566
但是  在你构建的时候

929
00:31:10,566 --> 00:31:12,096
它会利用已完成的工作

930
00:31:12,096 --> 00:31:13,586
去生成和

931
00:31:13,586 --> 00:31:15,086
更新索引

932
00:31:15,436 --> 00:31:16,366
所以在你完成构建后

933
00:31:16,596 --> 00:31:18,336
索引也更新完毕了

934
00:31:18,336 --> 00:31:19,836
所有相关功能

935
00:31:19,836 --> 00:31:21,106
都以前所未有的快速可以为你所用了

936
00:31:22,516 --> 00:31:26,256
[ 掌声 ]

937
00:31:26,756 --> 00:31:27,996
我们的构建系统

938
00:31:28,106 --> 00:31:29,886
也是很关键的

939
00:31:30,006 --> 00:31:31,906
我们花大力气在它身上

940
00:31:31,906 --> 00:31:33,156
提升性能

941
00:31:33,226 --> 00:31:35,156
添加特性  让它支持未来的目标

942
00:31:36,236 --> 00:31:37,156
我很兴奋地与大家分享

943
00:31:37,156 --> 00:31:39,476
我们有了一个新的构建系统

944
00:31:41,196 --> 00:31:42,736
我们的新构建系统是由 Swift 写成的

945
00:31:42,776 --> 00:31:44,746
它在我们的开源

946
00:31:44,746 --> 00:31:46,596
低层级构建系统 llbuild 的上层

947
00:31:47,376 --> 00:31:49,336
它使用一个现代化的

948
00:31:49,336 --> 00:31:50,586
前瞻性的结构

949
00:31:50,586 --> 00:31:52,176
实现了很多重大提升

950
00:31:54,266 --> 00:31:55,296
我们的新构建系统

951
00:31:55,296 --> 00:31:56,646
使用程序隔离  有一个

952
00:31:56,646 --> 00:31:58,296
统一的依赖性图标

953
00:31:58,296 --> 00:32:00,046
还有提升的配置分析

954
00:32:01,646 --> 00:32:02,646
我们还使用了新结构

955
00:32:02,646 --> 00:32:04,096
去增强并联和缓存

956
00:32:04,146 --> 00:32:06,116
以此来缩短

957
00:32:06,116 --> 00:32:07,326
整体构建时间

958
00:32:08,106 --> 00:32:09,186
我想深入讲解一下

959
00:32:10,796 --> 00:32:12,456
构建过程包括

960
00:32:12,456 --> 00:32:13,136
两大块

961
00:32:13,136 --> 00:32:14,866
也就是负责管理和协调

962
00:32:14,866 --> 00:32:16,296
任务的构建系统

963
00:32:16,846 --> 00:32:18,266
以及构建工具

964
00:32:18,266 --> 00:32:19,266
比如 compiler 和 linker

965
00:32:20,026 --> 00:32:21,036
两者一起构成了

966
00:32:21,036 --> 00:32:21,906
整体构建时间

967
00:32:23,166 --> 00:32:23,826
这些部分的工作量

968
00:32:23,826 --> 00:32:25,626
随着你项目规模的扩大

969
00:32:25,626 --> 00:32:26,146
而增加

970
00:32:26,786 --> 00:32:28,026
项目越大  每个部分的

971
00:32:28,026 --> 00:32:29,356
工作量也就越大

972
00:32:31,476 --> 00:32:32,986
这个视图代表了整体构建

973
00:32:33,846 --> 00:32:35,326
但在大多数时候

974
00:32:35,326 --> 00:32:36,396
我们要循序渐进地构建项目

975
00:32:36,396 --> 00:32:37,916
每次只改变一小部分

976
00:32:37,966 --> 00:32:38,796
文件

977
00:32:39,746 --> 00:32:40,946
这时  构建工具的

978
00:32:40,946 --> 00:32:42,666
工作量就很小

979
00:32:43,166 --> 00:32:44,316
对于大型项目来说

980
00:32:44,426 --> 00:32:45,816
还有很多细节要

981
00:32:45,816 --> 00:32:46,236
管理

982
00:32:47,206 --> 00:32:48,636
这是我们在 Xcode 9 中集中发力的

983
00:32:48,736 --> 00:32:49,566
一个环节

984
00:32:49,946 --> 00:32:51,376
在我们的新构建系统中

985
00:32:51,376 --> 00:32:52,666
我们让构建操作

986
00:32:52,666 --> 00:32:54,476
比以前快了

987
00:32:54,476 --> 00:32:55,096
2.5 倍

988
00:32:55,096 --> 00:32:57,596
如果你再加上

989
00:32:57,866 --> 00:33:00,606
是的  它很快[笑声]

990
00:33:00,606 --> 00:33:01,816
如果你再加上刚才说到的

991
00:33:01,816 --> 00:33:03,796
混合搭配项目的编程

992
00:33:03,796 --> 00:33:05,536
过程中提升的 40%

993
00:33:05,536 --> 00:33:07,476
那么你就会看到

994
00:33:07,476 --> 00:33:09,336
在构建中使用 Xcode 9

995
00:33:09,336 --> 00:33:10,476
新的构建系统比

996
00:33:10,736 --> 00:33:11,696
原来的版本的提升

997
00:33:11,696 --> 00:33:11,906
是非常大的

998
00:33:13,906 --> 00:33:14,716
新构建系统

999
00:33:14,716 --> 00:33:16,036
设计时就考虑到要和你们的项目

1000
00:33:16,036 --> 00:33:17,556
兼容  在 Xcode 9 里

1001
00:33:17,556 --> 00:33:19,076
有一个预览

1002
00:33:20,096 --> 00:33:21,506
你可以在工作空间设置

1003
00:33:21,506 --> 00:33:23,276
中选择尝试它

1004
00:33:23,276 --> 00:33:24,316
很快我们就会把它设成

1005
00:33:24,316 --> 00:33:26,186
默认构建系统了

1006
00:33:27,446 --> 00:33:29,096
另外一项我们大力投入的核心技术

1007
00:33:29,096 --> 00:33:30,886
就是源码控制

1008
00:33:30,886 --> 00:33:32,386
我很好奇

1009
00:33:32,416 --> 00:33:32,966
请举一下手

1010
00:33:33,056 --> 00:33:34,416
有多少人有 GitHub

1011
00:33:35,326 --> 00:33:35,516
账户

1012
00:33:36,036 --> 00:33:37,476
好的

1013
00:33:38,286 --> 00:33:40,236
Craig 举手了

1014
00:33:41,306 --> 00:33:42,996
你们绝不是一个人

1015
00:33:43,186 --> 00:33:43,966
因为我们在 GitHub 的好朋友

1016
00:33:43,966 --> 00:33:45,736
告诉我们  在桌面上

1017
00:33:45,736 --> 00:33:48,086
三分之二的 pull request

1018
00:33:48,086 --> 00:33:49,386
相关的行为都

1019
00:33:49,646 --> 00:33:50,786
来自于 Mac

1020
00:33:52,126 --> 00:33:53,456
因此我们认为这里

1021
00:33:53,456 --> 00:33:55,186
可以下些功夫

1022
00:33:55,186 --> 00:33:56,136
因此我们把

1023
00:33:56,136 --> 00:33:58,046
GitHub.com 和 GitHub Enterprise

1024
00:33:58,326 --> 00:33:59,186
集成到了 Xcode 9 里

1025
00:34:00,516 --> 00:34:06,746
[ 掌声 ]

1026
00:34:07,246 --> 00:34:08,366
在你添加 GitHub 账户后

1027
00:34:08,366 --> 00:34:10,386
你可以使用 Xcode 的新

1028
00:34:10,516 --> 00:34:12,186
Clone 工作流了  它展示了

1029
00:34:12,186 --> 00:34:13,876
你在 GitHub 上的所有项目

1030
00:34:13,876 --> 00:34:14,815
和搜索结果

1031
00:34:15,696 --> 00:34:17,116
你可以添加星标

1032
00:34:17,156 --> 00:34:19,126
查看项目细节

1033
00:34:19,126 --> 00:34:20,746
甚至在访问项目之前就查看 Readme

1034
00:34:20,746 --> 00:34:21,136
文件

1035
00:34:22,335 --> 00:34:24,025
一旦你 clone 了一个项目

1036
00:34:24,025 --> 00:34:25,716
你就能用 Xcode 的新

1037
00:34:25,716 --> 00:34:27,826
源码控制导航

1038
00:34:27,826 --> 00:34:28,946
这展示了你的所有

1039
00:34:28,946 --> 00:34:30,466
副本  包括分支

1040
00:34:30,516 --> 00:34:33,166
标签 remote

1041
00:34:33,166 --> 00:34:34,466
push 和 pull count 这些细节

1042
00:34:35,505 --> 00:34:37,025
这只是我们为你准备的

1043
00:34:37,025 --> 00:34:38,386
一系列特别出色的新

1044
00:34:38,386 --> 00:34:39,505
源码控制工作流的一个开始

1045
00:34:40,065 --> 00:34:41,096
更多内容 我要请上

1046
00:34:41,096 --> 00:34:42,306
Mike Ferris 来为大家

1047
00:34:42,306 --> 00:34:43,005
做一个展示

1048
00:34:44,516 --> 00:34:48,616
[ 掌声 ]

1049
00:34:49,116 --> 00:34:50,596
>>  嗨  谢谢 Matthew

1050
00:34:51,096 --> 00:34:53,346
大家好  我今天要展示一些

1051
00:34:53,346 --> 00:34:55,626
在 Xcode 里使用源码控制的

1052
00:34:55,626 --> 00:34:57,005
一些很棒的新方式

1053
00:34:58,066 --> 00:34:59,266
咱们就从 GitHub 开始吧

1054
00:35:01,196 --> 00:35:03,116
我已经连上了

1055
00:35:03,116 --> 00:35:04,646
这个新的 clone 窗口

1056
00:35:04,646 --> 00:35:06,336
我的 GitHub 库就在中间

1057
00:35:08,176 --> 00:35:09,796
现在我想要找到

1058
00:35:09,796 --> 00:35:11,356
Swift Foundation Project

1059
00:35:11,356 --> 00:35:12,976
所以我在 GitHub 上搜索

1060
00:35:18,966 --> 00:35:19,936
好的  找到了

1061
00:35:20,366 --> 00:35:23,486
咱们把它 clone 一下

1062
00:35:24,276 --> 00:35:26,156
一旦 clone 完成

1063
00:35:26,156 --> 00:35:27,216
我们就打开项目

1064
00:35:28,546 --> 00:35:29,876
我的朋友 Felipe 总说

1065
00:35:29,876 --> 00:35:31,226
数据类最近有了些

1066
00:35:31,226 --> 00:35:32,626
新变化  我去

1067
00:35:32,626 --> 00:35:33,446
看一看

1068
00:35:35,326 --> 00:35:37,016
新的源码控制导航

1069
00:35:37,156 --> 00:35:38,896
允许我浏览项目

1070
00:35:40,556 --> 00:35:42,436
我可以选择当前分支

1071
00:35:42,436 --> 00:35:43,896
显示它的历史  我看到

1072
00:35:43,896 --> 00:35:45,966
所有的提交记录

1073
00:35:45,966 --> 00:35:48,256
包括提交者的头像

1074
00:35:48,976 --> 00:35:50,796
和标签等注释内容

1075
00:35:53,166 --> 00:35:55,136
我可以根据提交者或是提交信息

1076
00:35:55,136 --> 00:35:57,116
筛选提交记录

1077
00:35:57,836 --> 00:36:01,936
我先找 Felipe 的提交

1078
00:36:01,936 --> 00:36:02,806
然后在进一步缩小范围

1079
00:36:02,806 --> 00:36:04,356
只看关于 Beta

1080
00:36:04,356 --> 00:36:05,366
的提交记录

1081
00:36:06,766 --> 00:36:09,396
这就是我在找的

1082
00:36:09,426 --> 00:36:10,006
提交记录

1083
00:36:11,666 --> 00:36:13,066
我双击一个提交记录

1084
00:36:13,066 --> 00:36:14,476
就进入新的提交视图

1085
00:36:14,616 --> 00:36:15,746
在这里我可以看到

1086
00:36:15,746 --> 00:36:16,636
真实的代码变化

1087
00:36:17,436 --> 00:36:18,856
浏览历史非常容易

1088
00:36:18,856 --> 00:36:20,996
查找特定的提交记录也不难

1089
00:36:23,956 --> 00:36:25,856
现在  我还可以在改动的同时

1090
00:36:25,996 --> 00:36:27,386
无缝使用源码控制

1091
00:36:27,386 --> 00:36:28,916
我还有另一个需要

1092
00:36:28,916 --> 00:36:30,386
稍作修改的项目

1093
00:36:30,796 --> 00:36:31,576
现在我把它打开

1094
00:36:31,576 --> 00:36:37,036
在开始前  我要做一个

1095
00:36:37,036 --> 00:36:37,866
分支

1096
00:36:39,436 --> 00:36:40,436
在新的源码控制导航中

1097
00:36:40,436 --> 00:36:42,806
我要使用 Context 菜单

1098
00:36:42,806 --> 00:36:44,086
制作一个分支  名字叫

1099
00:36:44,086 --> 00:36:44,606
"master"

1100
00:36:49,106 --> 00:36:51,416
好的  新的分支弄好了

1101
00:36:51,416 --> 00:36:52,546
我可以开始了

1102
00:36:54,316 --> 00:36:55,576
在我的项目里  我想让

1103
00:36:55,576 --> 00:36:57,026
群组与文件夹相匹配

1104
00:36:57,026 --> 00:36:58,886
这个项目已经这样

1105
00:36:58,886 --> 00:37:00,066
设定好了

1106
00:37:00,686 --> 00:37:02,046
但让我不爽的是

1107
00:37:02,046 --> 00:37:03,846
这两个相机模型类

1108
00:37:03,946 --> 00:37:05,186
在错误的群组里

1109
00:37:07,006 --> 00:37:09,146
不过这不要紧

1110
00:37:09,146 --> 00:37:10,516
因为现在我把这些文件

1111
00:37:10,516 --> 00:37:13,346
移动到正确的群组后

1112
00:37:13,396 --> 00:37:14,816
Xcode 就会自动把它们移动到正确的

1113
00:37:14,906 --> 00:37:15,286
文件夹了

1114
00:37:16,516 --> 00:37:24,316
[ 掌声 ]

1115
00:37:24,816 --> 00:37:26,346
在群组和文件夹的层级

1116
00:37:26,346 --> 00:37:27,916
是一样的项目里面

1117
00:37:27,916 --> 00:37:29,266
Xcode 会让它们保持一致

1118
00:37:31,356 --> 00:37:34,336
我提交时  所有的更改

1119
00:37:34,336 --> 00:37:36,446
都会被记录  因此

1120
00:37:36,446 --> 00:37:37,466
我会继续提交

1121
00:37:37,466 --> 00:37:41,026
我想我已经准备好

1122
00:37:41,026 --> 00:37:41,956
完成这个分支了

1123
00:37:43,506 --> 00:37:44,516
回到源码控制导航上面

1124
00:37:44,516 --> 00:37:46,316
我会选择

1125
00:37:46,316 --> 00:37:48,436
目的分支  并再次使用

1126
00:37:48,436 --> 00:37:50,576
Context 菜单融入

1127
00:37:50,576 --> 00:37:52,116
我的工作分支的更改

1128
00:37:52,736 --> 00:37:54,806
这就完成了

1129
00:37:54,896 --> 00:37:56,696
我看到我的新提交

1130
00:37:56,696 --> 00:37:58,896
已经在主分支上了

1131
00:37:58,896 --> 00:37:59,936
我想我准备好首个

1132
00:37:59,936 --> 00:38:00,566
beta  发布了

1133
00:38:01,356 --> 00:38:02,696
因此我也许应该做一个标签

1134
00:38:03,626 --> 00:38:05,926
我可以在这里用 Context 菜单

1135
00:38:05,926 --> 00:38:07,576
为任何提交做标签

1136
00:38:08,776 --> 00:38:11,956
好了  我想我可以分享它了

1137
00:38:13,236 --> 00:38:14,716
现在  这个项目还没有到

1138
00:38:14,716 --> 00:38:16,686
GitHub 上面  但我可以很容易

1139
00:38:16,686 --> 00:38:17,026
把它放上去

1140
00:38:18,526 --> 00:38:20,026
我只需选择  生成一个

1141
00:38:20,026 --> 00:38:20,836
GitHub remote

1142
00:38:22,356 --> 00:38:23,596
所有默认看上去都不错

1143
00:38:23,596 --> 00:38:24,736
可以开始了

1144
00:38:25,636 --> 00:38:27,316
Xcode 现在正在 GitHub 上面

1145
00:38:27,316 --> 00:38:29,276
生成一个项目

1146
00:38:29,276 --> 00:38:31,046
并把我的库及其完整历史推上去

1147
00:38:32,266 --> 00:38:33,976
现在  我的项目已经在

1148
00:38:33,976 --> 00:38:34,356
GitHub 上了

1149
00:38:35,596 --> 00:38:37,016
我有一个新的源 remote 了

1150
00:38:37,836 --> 00:38:39,076
我可以从这里直接跳到

1151
00:38:39,076 --> 00:38:40,546
GitHub.com 的

1152
00:38:40,546 --> 00:38:43,006
项目页面上

1153
00:38:43,216 --> 00:38:43,826
完成了

1154
00:38:45,146 --> 00:38:46,386
我们和 GitHub 的朋友们

1155
00:38:46,386 --> 00:38:48,106
在这个集成上面并肩奋斗

1156
00:38:48,106 --> 00:38:50,896
GitHub.com 也有一个

1157
00:38:50,896 --> 00:38:52,456
非常棒的新特性

1158
00:38:53,556 --> 00:38:55,336
Xcode 用户现在可以直接

1159
00:38:55,336 --> 00:38:58,196
使用这个新的 Open in Xcode 按钮

1160
00:38:58,196 --> 00:38:59,716
在 Xcode 里面 clone 并打开了

1161
00:39:01,516 --> 00:39:07,386
[ 掌声 ]

1162
00:39:07,886 --> 00:39:09,846
这就是 Xcode 9 里的源码控制

1163
00:39:09,846 --> 00:39:11,476
和 GitHub 内容

1164
00:39:12,496 --> 00:39:12,906
Matthew

1165
00:39:14,516 --> 00:39:17,736
[ 掌声 ]

1166
00:39:18,236 --> 00:39:18,736
>>  谢谢 Mike

1167
00:39:19,846 --> 00:39:21,336
Xcode 9 还包括很多

1168
00:39:21,336 --> 00:39:22,726
在 debug 和 runtime 分析工具

1169
00:39:22,846 --> 00:39:24,326
上的更新

1170
00:39:24,846 --> 00:39:25,916
我想先讲视图 debug 工具

1171
00:39:27,466 --> 00:39:28,466
视图控制器在 UI 开发中

1172
00:39:28,466 --> 00:39:29,866
的角色非常重要

1173
00:39:29,866 --> 00:39:31,276
所以我们要

1174
00:39:31,276 --> 00:39:32,456
把它包含到视图 debug

1175
00:39:32,456 --> 00:39:33,416
体验中去

1176
00:39:34,406 --> 00:39:35,726
Captures 现在会在层级中

1177
00:39:35,726 --> 00:39:37,806
包含视图控制

1178
00:39:37,806 --> 00:39:39,326
并在它们管理的视图之上

1179
00:39:39,326 --> 00:39:40,456
把它描绘出来

1180
00:39:41,176 --> 00:39:42,026
这会帮助你导航

1181
00:39:42,026 --> 00:39:43,886
并帮助你理解

1182
00:39:43,886 --> 00:39:45,246
你的视图控制边界

1183
00:39:46,866 --> 00:39:48,216
视图 debug 工具

1184
00:39:48,216 --> 00:39:50,146
还会包括 SpriteKit 场景的细节

1185
00:39:50,276 --> 00:39:52,026
视图 debug 工具是

1186
00:39:52,026 --> 00:39:53,636
扩展并反转你的场景

1187
00:39:53,636 --> 00:39:55,226
范围  甚至查看裁剪区域

1188
00:39:55,226 --> 00:39:57,086
的完美方式

1189
00:39:59,176 --> 00:40:00,396
我们还包含了对

1190
00:40:00,566 --> 00:40:01,816
SceneKit 场景的支持

1191
00:40:02,456 --> 00:40:03,326
你可以用熟悉的

1192
00:40:03,376 --> 00:40:05,256
SceneKit 编辑器去

1193
00:40:05,256 --> 00:40:07,446
反转相机  导航

1194
00:40:07,446 --> 00:40:08,306
检查对象

1195
00:40:09,256 --> 00:40:10,886
视图控制器的 SpriteKit

1196
00:40:10,986 --> 00:40:12,476
和 SceneKit 现在都

1197
00:40:12,476 --> 00:40:13,616
被加入了视觉 debug 工作中

1198
00:40:13,616 --> 00:40:13,936
这很棒

1199
00:40:15,516 --> 00:40:20,026
[ 掌声 ]

1200
00:40:20,526 --> 00:40:21,696
在过去几年中

1201
00:40:21,696 --> 00:40:23,826
我们加入了 runtime 清理工具

1202
00:40:23,826 --> 00:40:25,286
在 debug 体验中

1203
00:40:25,286 --> 00:40:27,026
它们在帮助找出错误这方面

1204
00:40:27,026 --> 00:40:28,586
获得了很大成功

1205
00:40:29,436 --> 00:40:30,676
除了两个已有的清理工具

1206
00:40:30,676 --> 00:40:32,396
的改进之外

1207
00:40:32,736 --> 00:40:34,396
今年  我们又加入了两个

1208
00:40:34,396 --> 00:40:36,706
runtime 分析工具

1209
00:40:36,706 --> 00:40:38,556
Undefined Behavior Sanitizer 和

1210
00:40:38,556 --> 00:40:40,356
Main Thread API Checker

1211
00:40:42,476 --> 00:40:44,136
编程语言有一些

1212
00:40:44,206 --> 00:40:45,776
未定义行为  比如

1213
00:40:45,776 --> 00:40:46,746
如何处理偏离的指针

1214
00:40:46,786 --> 00:40:48,376
以及遇到带符号整数

1215
00:40:48,376 --> 00:40:49,746
溢出时该怎么办

1216
00:40:50,486 --> 00:40:51,806
在这些情况出现时

1217
00:40:52,026 --> 00:40:53,016
会非常难以

1218
00:40:53,016 --> 00:40:53,376
debug

1219
00:40:54,466 --> 00:40:56,056
Undefined Behavior Sanitizer

1220
00:40:56,096 --> 00:40:58,116
能够抓取很多类似情景

1221
00:40:58,116 --> 00:40:59,446
并显示细节  以帮助你

1222
00:40:59,446 --> 00:40:59,976
调查

1223
00:41:00,506 --> 00:41:03,546
你们一定会爱上

1224
00:41:03,546 --> 00:41:04,786
Main Thread API Checker

1225
00:41:05,606 --> 00:41:07,626
从后台线程调用 UI 相关的 API

1226
00:41:07,626 --> 00:41:09,436
这是一个常见错误

1227
00:41:09,436 --> 00:41:11,366
可能会导致视觉缺陷

1228
00:41:11,366 --> 00:41:13,296
和随机崩溃的情况

1229
00:41:14,236 --> 00:41:15,756
Main Thread API Checker

1230
00:41:15,976 --> 00:41:18,086
能够捕捉到未被主线程调用的

1231
00:41:18,456 --> 00:41:20,146
AppKit 和 UIKit API

1232
00:41:21,236 --> 00:41:22,446
然后显示错误  帮助你

1233
00:41:22,446 --> 00:41:22,986
调查

1234
00:41:24,516 --> 00:41:30,106
[ 掌声 ]

1235
00:41:30,606 --> 00:41:32,056
我们超爱这一点  于是

1236
00:41:32,056 --> 00:41:33,506
把它设成默认启动了

1237
00:41:33,916 --> 00:41:34,836
所以在你开始用 Xcode 9

1238
00:41:34,836 --> 00:41:36,176
debug 时  会自动获取

1239
00:41:36,176 --> 00:41:37,096
这一行为

1240
00:41:38,196 --> 00:41:39,796
我们两个新的 runtime

1241
00:41:39,796 --> 00:41:41,396
清理器在你的计划的

1242
00:41:41,396 --> 00:41:43,126
Diagnostic Options 中可以找到

1243
00:41:43,126 --> 00:41:44,766
所有的诊断工具

1244
00:41:44,766 --> 00:41:46,266
都可以在运行和测试设置中

1245
00:41:46,296 --> 00:41:48,226
找到

1246
00:41:48,826 --> 00:41:50,346
这让它们可以很完美地契合

1247
00:41:50,346 --> 00:41:52,466
持续集成使用

1248
00:41:52,466 --> 00:41:54,216
这就引出了我们的

1249
00:41:54,216 --> 00:41:55,006
下一个部分

1250
00:41:56,636 --> 00:41:57,536
我们相信  持续集成

1251
00:41:57,536 --> 00:41:59,166
是开发伟大软件的

1252
00:41:59,276 --> 00:42:00,816
重要关键

1253
00:42:00,866 --> 00:42:02,216
让我们

1254
00:42:02,216 --> 00:42:04,096
使用 Xcode Server 变得更容易

1255
00:42:04,096 --> 00:42:04,806
我们把所有的功能

1256
00:42:04,806 --> 00:42:06,526
都放在了 Xcode 里面

1257
00:42:07,016 --> 00:42:08,356
你们不再需要安装

1258
00:42:08,536 --> 00:42:09,506
macOS 服务器 app 了

1259
00:42:11,516 --> 00:42:15,526
[ 掌声 ]

1260
00:42:16,026 --> 00:42:17,536
在 Preferences 中

1261
00:42:17,536 --> 00:42:19,196
一个新的  简化的 UI

1262
00:42:19,196 --> 00:42:21,136
只需点击几下就能开始

1263
00:42:21,136 --> 00:42:22,396
我们还集成了预备工作流

1264
00:42:22,396 --> 00:42:24,246
包括自动和手动

1265
00:42:24,246 --> 00:42:25,596
代码签字

1266
00:42:25,596 --> 00:42:26,966
让你的配置加速

1267
00:42:28,516 --> 00:42:29,526
在测试方面

1268
00:42:29,526 --> 00:42:30,996
我们集成了一个流行的请求

1269
00:42:31,286 --> 00:42:33,266
就是支持测试多个

1270
00:42:33,266 --> 00:42:33,916
app

1271
00:42:35,166 --> 00:42:37,066
你们的 UI 测试现在可以

1272
00:42:37,066 --> 00:42:39,206
分支到很多其他 app 上去

1273
00:42:39,206 --> 00:42:41,106
这对 app 扩展  设置

1274
00:42:41,106 --> 00:42:43,036
和其他的集成工作流来说

1275
00:42:43,296 --> 00:42:44,686
是很好的改进

1276
00:42:46,056 --> 00:42:47,176
此外  你们还会发现

1277
00:42:47,176 --> 00:42:48,756
我们还加强了

1278
00:42:48,756 --> 00:42:49,796
UI 测试的性能

1279
00:42:50,746 --> 00:42:52,326
UI 测试询问

1280
00:42:52,326 --> 00:42:53,556
的运行速度比以前快3倍

1281
00:42:54,486 --> 00:42:57,086
如果你采用了新的询问 API

1282
00:42:57,316 --> 00:42:58,986
那么你自己的测试速度

1283
00:42:59,026 --> 00:43:00,526
将比以前快 10 倍

1284
00:43:02,516 --> 00:43:06,026
[ 掌声 ]

1285
00:43:06,526 --> 00:43:08,116
但我们不止如此

1286
00:43:08,116 --> 00:43:09,296
你还会发现使用

1287
00:43:09,326 --> 00:43:11,026
xcodebuild 测试  现在已经默认

1288
00:43:11,026 --> 00:43:12,966
在多个目的之间同时

1289
00:43:12,966 --> 00:43:13,746
运行了

1290
00:43:15,516 --> 00:43:18,916
[ 掌声 ]

1291
00:43:19,416 --> 00:43:20,426
这意味着你的命令行

1292
00:43:20,426 --> 00:43:21,986
测试和你的 Xcode Server bot

1293
00:43:21,986 --> 00:43:23,826
可以在不同设备

1294
00:43:23,826 --> 00:43:26,196
和模拟器上同时

1295
00:43:26,196 --> 00:43:27,586
评估测试了

1296
00:43:27,826 --> 00:43:29,046
说到模拟器

1297
00:43:30,066 --> 00:43:31,646
模拟器 app 现在支持用同一个 app

1298
00:43:31,646 --> 00:43:33,876
使用 iOS  tvOS  watch OS 等

1299
00:43:33,876 --> 00:43:36,236
多个启动的设备了

1300
00:43:37,516 --> 00:43:43,046
[ 掌声 ]

1301
00:43:43,546 --> 00:43:45,146
多模拟器会话

1302
00:43:45,146 --> 00:43:46,916
在测试不同配置

1303
00:43:46,916 --> 00:43:48,376
以及评估多客户场景时

1304
00:43:48,626 --> 00:43:50,236
意味着生产力的重大提高

1305
00:43:52,066 --> 00:43:53,076
你还会发现模拟器

1306
00:43:53,076 --> 00:43:54,136
有了一个新体验

1307
00:43:54,516 --> 00:43:55,826
我们在边缘加入了

1308
00:43:55,826 --> 00:43:57,026
边框  给你控制硬件的熟悉感

1309
00:43:57,126 --> 00:43:59,046
并且启动了交互

1310
00:43:59,046 --> 00:44:00,476
比如从边缘进行

1311
00:44:00,476 --> 00:44:01,946
扫动手势等

1312
00:44:02,576 --> 00:44:03,306
我们还让模拟器

1313
00:44:03,376 --> 00:44:04,966
的大小可以调整

1314
00:44:06,516 --> 00:44:10,556
[ 掌声 ]

1315
00:44:11,056 --> 00:44:12,686
还有一个 Xcode 9 的特性

1316
00:44:12,686 --> 00:44:13,746
是我想要和你们分享的

1317
00:44:13,746 --> 00:44:15,366
它始于我们

1318
00:44:15,436 --> 00:44:16,266
一直想取消的一样东西

1319
00:44:16,266 --> 00:44:18,796
不如直接减少对

1320
00:44:18,796 --> 00:44:19,256
这个东西的需求

1321
00:44:20,516 --> 00:44:32,446
[ 掌声 ]

1322
00:44:32,946 --> 00:44:33,916
我本想说

1323
00:44:33,916 --> 00:44:34,956
我知道你们都爱

1324
00:44:34,956 --> 00:44:36,136
USB 线  但那显然

1325
00:44:36,136 --> 00:44:36,766
是假话 [笑声]

1326
00:44:37,736 --> 00:44:39,026
但那不重要

1327
00:44:39,026 --> 00:44:40,066
因为在 Xcode 9 里  不再需要它了

1328
00:44:40,916 --> 00:44:42,046
我们加入了无线开发功能

1329
00:44:43,516 --> 00:44:50,976
[ 掌声 ]

1330
00:44:51,476 --> 00:44:52,776
在 Xcode 9 里  你可以用

1331
00:44:52,776 --> 00:44:54,736
最适合你需要的连接方式

1332
00:44:55,476 --> 00:44:57,046
USB WiFi  或者以太网

1333
00:44:57,046 --> 00:44:58,286
连接到你的

1334
00:44:58,286 --> 00:45:00,436
iOS 或者 tvOS 设备上

1335
00:45:01,356 --> 00:45:02,396
所有的开发工作流

1336
00:45:02,396 --> 00:45:03,476
都会得到

1337
00:45:03,476 --> 00:45:04,276
无线开发的支持

1338
00:45:04,906 --> 00:45:06,066
实际上  你可以把

1339
00:45:06,066 --> 00:45:07,316
无线开发用在其他 app 上

1340
00:45:07,316 --> 00:45:08,696
比如 Accessibility

1341
00:45:08,696 --> 00:45:10,686
Inspector QuickTime Player 还有

1342
00:45:10,686 --> 00:45:11,096
Console

1343
00:45:11,506 --> 00:45:12,556
这会很自然地

1344
00:45:12,556 --> 00:45:13,986
添加到你的开发

1345
00:45:14,606 --> 00:45:15,576
工作流中去

1346
00:45:16,146 --> 00:45:17,566
这就是我们在 Xcode 9 里

1347
00:45:17,566 --> 00:45:19,806
为你准备的一些东西

1348
00:45:19,806 --> 00:45:20,936
新的重构的源码编辑器

1349
00:45:20,936 --> 00:45:23,856
和 Swift 4

1350
00:45:23,856 --> 00:45:25,476
新的索引  构建系统

1351
00:45:25,476 --> 00:45:26,586
集成了 GitHub 的

1352
00:45:26,586 --> 00:45:28,246
源码控制工作流

1353
00:45:28,246 --> 00:45:29,526
还有 debug 分析和测试工具

1354
00:45:29,636 --> 00:45:31,656
的增强

1355
00:45:31,656 --> 00:45:32,876
以及无线开发

1356
00:45:34,176 --> 00:45:36,046
一切全在 Xcode 9 里

1357
00:45:36,566 --> 00:45:37,696
还有更多  这就是今天讲的工具更新

1358
00:45:39,516 --> 00:45:48,306
[ 掌声 ]

1359
00:45:48,806 --> 00:45:49,686
接下来  我们想和你分享

1360
00:45:49,686 --> 00:45:51,256
一些我们为你准备的新 API

1361
00:45:51,256 --> 00:45:52,476
我想请 Josh Shaffer 上台

1362
00:45:52,476 --> 00:45:53,616
为大家讲解

1363
00:45:54,516 --> 00:45:59,436
[ 掌声 ]

1364
00:45:59,936 --> 00:46:00,536
>>  谢谢 Matthew

1365
00:46:01,606 --> 00:46:03,156
我很兴奋  要告诉大家

1366
00:46:03,156 --> 00:46:05,506
iOS 11 里很多很多

1367
00:46:05,506 --> 00:46:07,356
新的和增强的 API

1368
00:46:10,206 --> 00:46:12,356
新东西太多了

1369
00:46:12,356 --> 00:46:13,216
咱们就从最重要的

1370
00:46:13,216 --> 00:46:15,416
API 讲起吧  那就是  拖拽与放置

1371
00:46:17,186 --> 00:46:18,746
拖拽与放置  简单易用

1372
00:46:18,746 --> 00:46:20,106
在系统中持续交互

1373
00:46:20,106 --> 00:46:21,696
当然  还很容易

1374
00:46:21,696 --> 00:46:23,096
就能够添加到

1375
00:46:23,096 --> 00:46:24,746
你们的 app 里

1376
00:46:26,136 --> 00:46:27,486
不但简单  还非常灵活

1377
00:46:27,486 --> 00:46:29,016
而且可以自定义

1378
00:46:29,016 --> 00:46:31,136
全面利用了

1379
00:46:31,136 --> 00:46:33,016
iPad 的多点触碰

1380
00:46:33,016 --> 00:46:33,676
功能

1381
00:46:34,566 --> 00:46:35,916
当然  设计上是安全的

1382
00:46:35,916 --> 00:46:38,046
被拖拽的数据

1383
00:46:38,156 --> 00:46:39,786
只有在被放置之后

1384
00:46:39,786 --> 00:46:40,706
才能被访问

1385
00:46:41,296 --> 00:46:43,726
把拖拽放置添加到

1386
00:46:43,726 --> 00:46:45,856
app 里面  几乎和使用它一样容易

1387
00:46:46,926 --> 00:46:48,676
对于标准的文本和网络控制来说

1388
00:46:48,676 --> 00:46:50,536
它是完全自动的

1389
00:46:50,946 --> 00:46:52,336
因此你们的 app 其实没准

1390
00:46:52,336 --> 00:46:53,356
早已经支持它了

1391
00:46:54,656 --> 00:46:56,836
现有的 app 比如 Slack

1392
00:46:56,836 --> 00:46:58,436
就是这样

1393
00:46:58,436 --> 00:47:00,126
比如  它可以接受

1394
00:47:00,126 --> 00:47:02,706
把文本拖拽到现有的文本视图上去

1395
00:47:03,636 --> 00:47:04,856
在其他情况下  你还需要

1396
00:47:04,856 --> 00:47:05,556
做一点小工作

1397
00:47:06,426 --> 00:47:07,496
如果你在表格视图

1398
00:47:07,496 --> 00:47:09,206
或者集合视图上

1399
00:47:09,206 --> 00:47:11,096
显示内容

1400
00:47:11,096 --> 00:47:12,596
新的委托方法会让

1401
00:47:12,596 --> 00:47:14,126
添加拖拽放置变得异常简单

1402
00:47:14,126 --> 00:47:15,316
只需几行代码就可以

1403
00:47:16,286 --> 00:47:17,946
开始拖拽  就像

1404
00:47:17,946 --> 00:47:19,206
提供数据那样容易

1405
00:47:19,716 --> 00:47:21,496
接受放置也一样简单

1406
00:47:23,356 --> 00:47:24,446
对于其他一切东西

1407
00:47:24,446 --> 00:47:28,356
这个简单易用的标准 API

1408
00:47:28,356 --> 00:47:29,646
可以整合到你们所有的

1409
00:47:29,646 --> 00:47:30,446
自定义视图上

1410
00:47:31,976 --> 00:47:33,886
这个 API 默认提供

1411
00:47:33,886 --> 00:47:34,936
标准手势和动画

1412
00:47:34,936 --> 00:47:36,836
但它也是完全可以自定义的

1413
00:47:38,276 --> 00:47:39,496
你可以自定义

1414
00:47:39,496 --> 00:47:40,636
在拖拽开始时的

1415
00:47:40,636 --> 00:47:42,866
抬升动画

1416
00:47:42,866 --> 00:47:44,586
向正在进行的拖拽过程添加多个项目

1417
00:47:44,586 --> 00:47:46,886
为每个项目生成自定义预览图像

1418
00:47:46,886 --> 00:47:49,236
选择显示在被拖拽

1419
00:47:49,236 --> 00:47:50,686
项目上的标志

1420
00:47:50,686 --> 00:47:52,146
以表示它将被移动或复制

1421
00:47:52,146 --> 00:47:54,396
你甚至可以

1422
00:47:54,396 --> 00:47:55,916
提供完全自定义的

1423
00:47:55,916 --> 00:47:57,656
放置动画  供放置时使用

1424
00:47:59,196 --> 00:48:01,566
这个 API 非常灵活

1425
00:48:01,566 --> 00:48:02,906
就算在日历 app 中

1426
00:48:02,906 --> 00:48:04,986
那种高度自定义的

1427
00:48:04,986 --> 00:48:06,826
基于手势的事件生成与重新安排

1428
00:48:06,826 --> 00:48:08,416
都可以在拖拽放置 API 之上

1429
00:48:08,516 --> 00:48:09,536
进行重新实现

1430
00:48:09,536 --> 00:48:12,406
这种灵活性不仅

1431
00:48:12,406 --> 00:48:13,526
停留在表面

1432
00:48:13,596 --> 00:48:15,486
数据模型也同样

1433
00:48:15,556 --> 00:48:16,386
非常灵活

1434
00:48:17,396 --> 00:48:18,406
可以兼容你 app 使用的

1435
00:48:18,406 --> 00:48:19,956
任何类型数据

1436
00:48:20,386 --> 00:48:21,696
允许你支持非常

1437
00:48:21,696 --> 00:48:22,836
丰富的交互

1438
00:48:23,596 --> 00:48:25,446
比如  从地图上

1439
00:48:25,446 --> 00:48:27,116
拖拽出的地点就包括

1440
00:48:27,116 --> 00:48:29,446
丰富的定位信息

1441
00:48:29,446 --> 00:48:30,596
以及富有细节的拖拽预览

1442
00:48:31,866 --> 00:48:33,306
现在  有了拖拽与放置

1443
00:48:33,306 --> 00:48:34,536
现有的交互体验也会变得更好

1444
00:48:35,926 --> 00:48:37,586
Reminders 使用 UITableView

1445
00:48:37,586 --> 00:48:38,946
内置的重新安排支持

1446
00:48:38,946 --> 00:48:40,586
允许你快速重排与

1447
00:48:40,586 --> 00:48:41,706
组织你的任务

1448
00:48:42,276 --> 00:48:44,636
你可以开始拖拽  拖拽一个

1449
00:48:44,636 --> 00:48:46,446
项目  把它移动到一个不同的位置

1450
00:48:46,446 --> 00:48:48,546
甚至可以拾取

1451
00:48:48,546 --> 00:48:50,556
多个提醒  让它们在

1452
00:48:50,556 --> 00:48:52,486
列表之间移动  以便你能够

1453
00:48:52,486 --> 00:48:54,186
非常快速地组织你的

1454
00:48:54,186 --> 00:48:54,946
所有任务

1455
00:48:56,136 --> 00:48:57,526
因为所有这些都是在

1456
00:48:57,696 --> 00:48:59,916
一个普通 API 的基础上构建的

1457
00:48:59,916 --> 00:49:01,476
因此它们会无缝工作

1458
00:49:02,306 --> 00:49:03,616
你可以打开 Calendar

1459
00:49:03,616 --> 00:49:04,826
开始拖拽其中一个事件

1460
00:49:04,826 --> 00:49:06,836
把它直接拖到

1461
00:49:06,876 --> 00:49:08,696
Reminders 里面  把它放置在里面

1462
00:49:08,736 --> 00:49:12,266
这样就能快速把它加到任务列表了

1463
00:49:12,536 --> 00:49:13,426
拖拽正在进行的过程中

1464
00:49:13,506 --> 00:49:15,096
系统会响应触摸这个动作

1465
00:49:15,156 --> 00:49:16,866
让你的 app 完全可交互

1466
00:49:17,166 --> 00:49:18,666
能够响应

1467
00:49:18,666 --> 00:49:20,526
其他的触摸动作

1468
00:49:21,406 --> 00:49:22,816
这让需要你的 app

1469
00:49:22,816 --> 00:49:24,216
内部导航的

1470
00:49:24,216 --> 00:49:25,436
复杂交互

1471
00:49:25,436 --> 00:49:27,636
变得很简单

1472
00:49:27,636 --> 00:49:29,766
比如在不同相册之间转移照片

1473
00:49:30,936 --> 00:49:33,106
在 iPad 上  整个 OS

1474
00:49:33,106 --> 00:49:34,276
都完全可交互

1475
00:49:34,766 --> 00:49:36,226
允许你在一个地方拾取

1476
00:49:36,226 --> 00:49:37,836
多个项目

1477
00:49:37,836 --> 00:49:39,506
并在系统中自由导航

1478
00:49:39,556 --> 00:49:41,076
甚至切换 app

1479
00:49:41,396 --> 00:49:42,526
同时携带这些被拖拽的项目

1480
00:49:42,526 --> 00:49:43,956
以便把它们应用在

1481
00:49:43,956 --> 00:49:45,526
其他地方

1482
00:49:46,376 --> 00:49:48,346
在整个导航过程中

1483
00:49:48,346 --> 00:49:50,366
拖拽背后的数据

1484
00:49:50,366 --> 00:49:52,896
受到保护

1485
00:49:52,976 --> 00:49:54,146
不会受到其拖拽路径上的其他 app 的

1486
00:49:54,186 --> 00:49:54,966
无意访问

1487
00:49:55,776 --> 00:49:58,366
在拖拽完成之前

1488
00:49:58,366 --> 00:50:00,046
潜在放置目的对象

1489
00:50:00,046 --> 00:50:01,466
是可以访问元数据的

1490
00:50:02,506 --> 00:50:03,946
放置的时候

1491
00:50:04,046 --> 00:50:05,506
数据就很快能被

1492
00:50:05,506 --> 00:50:06,356
接收 app 访问了

1493
00:50:07,156 --> 00:50:08,386
这个 lazy delivery

1494
00:50:08,386 --> 00:50:09,836
提供的安全性

1495
00:50:09,876 --> 00:50:10,786
并不是以性能

1496
00:50:10,786 --> 00:50:12,526
为代价的  因为

1497
00:50:12,526 --> 00:50:13,946
大型文件

1498
00:50:14,036 --> 00:50:15,656
也可以几乎在瞬间

1499
00:50:15,856 --> 00:50:17,016
使用 APFS cloning 传送

1500
00:50:18,356 --> 00:50:19,466
这一切不过

1501
00:50:19,466 --> 00:50:19,976
是开始

1502
00:50:20,916 --> 00:50:22,346
接下来要向大家展示

1503
00:50:22,346 --> 00:50:23,796
另外一些令人振奋的案例

1504
00:50:23,796 --> 00:50:25,206
并展示向你的 app

1505
00:50:25,206 --> 00:50:26,436
添加拖拽放置有多么容易

1506
00:50:26,436 --> 00:50:28,096
有请 Eliza Block

1507
00:50:28,096 --> 00:50:29,056
上台为大家演示

1508
00:50:30,096 --> 00:50:30,466
Eliza

1509
00:50:31,516 --> 00:50:36,466
[ 掌声 ]

1510
00:50:36,966 --> 00:50:37,496
>>  谢谢 Josh

1511
00:50:37,826 --> 00:50:39,996
我想先展示一下

1512
00:50:39,996 --> 00:50:41,146
我们对 iOS 主屏幕的改进

1513
00:50:41,146 --> 00:50:43,386
这是通过

1514
00:50:43,386 --> 00:50:44,566
拖拽放置 API 实现的

1515
00:50:45,606 --> 00:50:48,076
在这个 iPad 上

1516
00:50:48,246 --> 00:50:53,186
我可以通过长按 home 键来

1517
00:50:53,186 --> 00:50:54,546
重新安排我的 app

1518
00:50:54,546 --> 00:50:55,886
比如 我可以创建

1519
00:50:55,886 --> 00:50:57,546
我可以把 reiminder 拖拽到

1520
00:50:57,546 --> 00:50:59,236
Calendar 上面  创建一个

1521
00:50:59,456 --> 00:51:00,376
效率文件夹

1522
00:51:01,856 --> 00:51:03,796
现在  在 iOS 11 里

1523
00:51:03,886 --> 00:51:05,606
我们使用拖拽放置

1524
00:51:05,826 --> 00:51:07,866
完全重写了重新归置 app 的功能

1525
00:51:07,866 --> 00:51:09,056
我们让它变得

1526
00:51:09,056 --> 00:51:09,776
更加强大了

1527
00:51:10,616 --> 00:51:11,346
我们再找一些

1528
00:51:11,346 --> 00:51:12,786
效率 app 加到这个文件夹里

1529
00:51:13,906 --> 00:51:16,006
这个是 Pages

1530
00:51:16,006 --> 00:51:17,946
我开始拖拽它

1531
00:51:17,946 --> 00:51:19,766
我这样做的时候  主屏幕

1532
00:51:19,766 --> 00:51:21,406
仍然是完全可交互的

1533
00:51:21,486 --> 00:51:23,266
用我的另一只手  我可以

1534
00:51:23,266 --> 00:51:25,376
在不同页面上扫动

1535
00:51:25,376 --> 00:51:27,616
进出文件夹  最棒的是

1536
00:51:27,616 --> 00:51:28,856
我不再受限于

1537
00:51:28,856 --> 00:51:30,416
每次只能拖拽一个 app 了

1538
00:51:30,576 --> 00:51:33,486
我可以点击 Keynote 把它

1539
00:51:33,536 --> 00:51:35,496
加入到我正在进行的拖拽中

1540
00:51:35,496 --> 00:51:36,956
关闭文件夹  我们看一看

1541
00:51:36,956 --> 00:51:38,176
能不能找到 Numbers

1542
00:51:39,516 --> 00:51:43,086
[ 掌声 ]

1543
00:51:43,586 --> 00:51:44,956
找到了  我点一下

1544
00:51:45,296 --> 00:51:47,426
抓住它  现在我可以

1545
00:51:47,426 --> 00:51:48,796
把这三个 app  拖拽回

1546
00:51:48,796 --> 00:51:50,436
第一页  然后只要一下

1547
00:51:50,436 --> 00:51:52,156
就能把它们全部放到文件夹里

1548
00:51:53,516 --> 00:51:58,376
[ 掌声 ]

1549
00:51:58,876 --> 00:52:00,336
这就是使用拖拽放置

1550
00:52:00,336 --> 00:52:01,586
重新归置 app 的方法

1551
00:52:01,586 --> 00:52:02,656
你可以在你自己的 app 中

1552
00:52:02,656 --> 00:52:03,586
也做到类似的事

1553
00:52:04,496 --> 00:52:06,356
来看一个例子

1554
00:52:06,416 --> 00:52:08,426
我要打开这个叫做 Byte Swap 的 app

1555
00:52:08,426 --> 00:52:10,556
这是我的团队写的 app

1556
00:52:10,556 --> 00:52:12,686
它能帮我浏览和组织我的

1557
00:52:12,876 --> 00:52:14,316
Swift Playgrounds 交换卡

1558
00:52:15,756 --> 00:52:18,476
它有一个 Swift

1559
00:52:18,476 --> 00:52:19,846
不好意思  是有一个分割视图控制器

1560
00:52:20,286 --> 00:52:22,276
在屏幕右边  你可以

1561
00:52:22,276 --> 00:52:23,866
看到我的卡片

1562
00:52:23,866 --> 00:52:25,146
通过基本浮动布局

1563
00:52:25,146 --> 00:52:26,256
以集合视图呈现

1564
00:52:27,136 --> 00:52:28,856
现在我想

1565
00:52:28,856 --> 00:52:30,406
如果我能拾取这些卡片

1566
00:52:30,406 --> 00:52:31,576
使用拖拽来重新归置它们

1567
00:52:31,576 --> 00:52:32,936
让它们在不同相册中移动

1568
00:52:32,936 --> 00:52:35,156
这一定会很酷

1569
00:52:35,156 --> 00:52:36,486
所以咱们现在就开始

1570
00:52:36,486 --> 00:52:37,016
这样做吧

1571
00:52:37,556 --> 00:52:40,606
我要切换到 Xcode

1572
00:52:40,606 --> 00:52:42,426
我已经打开了卡片视图控制器

1573
00:52:47,096 --> 00:52:48,936
因为 Table View 和

1574
00:52:48,936 --> 00:52:50,566
Collection View 已经包含了

1575
00:52:50,676 --> 00:52:52,096
对拖拽与放置的内置支持

1576
00:52:52,096 --> 00:52:54,386
所以如果你正在使用

1577
00:52:54,386 --> 00:52:55,196
这些类  那么添加拖拽放置功能

1578
00:52:55,226 --> 00:52:56,786
就真的很简单了

1579
00:52:57,746 --> 00:52:59,836
首先我只需

1580
00:52:59,836 --> 00:53:01,626
声明遵守新的

1581
00:53:01,626 --> 00:53:03,426
UICollectionView 拖拽／委托协议

1582
00:53:03,776 --> 00:53:07,476
我这样做时 Xcode 就会

1583
00:53:07,476 --> 00:53:09,016
通知我  我还没有履行协议

1584
00:53:09,016 --> 00:53:10,346
要求必须使用的某个方法

1585
00:53:10,346 --> 00:53:12,116
我可以点击这个错误

1586
00:53:12,116 --> 00:53:13,806
接受 Fix-it

1587
00:53:13,856 --> 00:53:16,046
来添加协议

1588
00:53:17,636 --> 00:53:19,496
因此  这个方法

1589
00:53:19,496 --> 00:53:21,186
Items for Beginning Session

1590
00:53:21,186 --> 00:53:22,646
提示我要将被拖拽的

1591
00:53:22,716 --> 00:53:24,256
项目数据打包

1592
00:53:24,286 --> 00:53:25,736
因此我要调出一个

1593
00:53:25,876 --> 00:53:28,106
我之前写的帮助方法

1594
00:53:28,106 --> 00:53:29,866
它会把数据打包成

1595
00:53:29,866 --> 00:53:31,556
一个图像  并让它可拖拽

1596
00:53:32,106 --> 00:53:35,396
我为了让拖拽的基本框架

1597
00:53:35,396 --> 00:53:36,666
在这个 app 内生效

1598
00:53:36,666 --> 00:53:39,096
其实  要做的事已经做完了

1599
00:53:39,096 --> 00:53:40,766
但我还想通过点击来向

1600
00:53:40,866 --> 00:53:44,846
正在进行的拖拽

1601
00:53:44,846 --> 00:53:45,636
添加项目

1602
00:53:45,816 --> 00:53:47,226
所以我要再添加

1603
00:53:47,316 --> 00:53:48,376
一个方法  然后

1604
00:53:48,376 --> 00:53:53,136
我们可以做这个

1605
00:53:53,336 --> 00:53:54,896
我切换到 iPad 上

1606
00:53:54,896 --> 00:53:57,176
好了  出现了

1607
00:53:57,176 --> 00:53:59,726
你们可以看到

1608
00:53:59,726 --> 00:54:01,126
我现在可以把这个家伙捡起来到处拖拽

1609
00:54:01,696 --> 00:54:03,626
但我还不能重新安排位置

1610
00:54:03,626 --> 00:54:04,926
因为我还没有在这个 app 中

1611
00:54:04,926 --> 00:54:05,676
实现放置

1612
00:54:06,326 --> 00:54:07,856
不过我仍然可以

1613
00:54:07,856 --> 00:54:10,636
在 app 中自由互动

1614
00:54:10,636 --> 00:54:12,186
并拾取第二个项目

1615
00:54:12,186 --> 00:54:14,266
添加到正在进行的拖拽中

1616
00:54:14,266 --> 00:54:15,506
实际上这比看上去更加实用

1617
00:54:15,506 --> 00:54:17,836
因为我不但能够

1618
00:54:17,836 --> 00:54:18,726
把这些东西拖拽到各处

1619
00:54:18,726 --> 00:54:20,956
我还可以与其他

1620
00:54:21,036 --> 00:54:22,426
可能已经实现了放置的 app

1621
00:54:22,426 --> 00:54:23,546
进行交互

1622
00:54:23,546 --> 00:54:25,116
比如 Mail

1623
00:54:26,436 --> 00:54:28,846
我可以打开 Mail

1624
00:54:28,846 --> 00:54:30,536
点击写邮件  然后

1625
00:54:30,536 --> 00:54:32,526
把这两张卡片放进去

1626
00:54:33,456 --> 00:54:34,106
就这样

1627
00:54:34,306 --> 00:54:35,816
只需要把两个委托方法

1628
00:54:35,816 --> 00:54:37,546
添加到现有的 app 中去

1629
00:54:39,256 --> 00:54:40,836
好了  切换回 Xcode

1630
00:54:41,516 --> 00:54:43,126
让我们继续

1631
00:54:43,126 --> 00:54:44,006
实现放置

1632
00:54:45,176 --> 00:54:48,006
我再次声明

1633
00:54:48,006 --> 00:54:50,146
遵守新的委托协议

1634
00:54:50,146 --> 00:54:51,116
也就是 UICollectionView 放置委托

1635
00:54:52,436 --> 00:54:55,676
Xcode 会再次

1636
00:54:55,676 --> 00:54:57,886
提示我完成缺失的协议步骤

1637
00:54:59,536 --> 00:55:02,196
这个执行放置方法

1638
00:55:02,196 --> 00:55:03,346
会稍微复杂一点

1639
00:55:04,086 --> 00:55:08,266
我必须要更新我的模型

1640
00:55:08,776 --> 00:55:10,156
让它接受新的

1641
00:55:10,156 --> 00:55:12,696
放置数据

1642
00:55:12,696 --> 00:55:14,046
我也在这里使用帮助方法

1643
00:55:14,046 --> 00:55:15,146
自定义了动画

1644
00:55:15,616 --> 00:55:18,246
我还要再添加

1645
00:55:18,246 --> 00:55:21,786
一个方法

1646
00:55:21,826 --> 00:55:24,506
我把手指拖过

1647
00:55:24,506 --> 00:55:26,516
一个放置目标时会调用它

1648
00:55:26,516 --> 00:55:27,456
它会让集合视图

1649
00:55:27,456 --> 00:55:28,656
打开一个缺口

1650
00:55:28,836 --> 00:55:30,306
这样我就能在某个特定列表中

1651
00:55:30,306 --> 00:55:31,056
重新组织了

1652
00:55:32,366 --> 00:55:35,366
再次切换回我的 iPad

1653
00:55:35,586 --> 00:55:38,186
这次我再拾取一张卡片

1654
00:55:38,586 --> 00:55:41,056
其他卡片会让出路来

1655
00:55:41,056 --> 00:55:43,816
我仍然可以在列表间切换

1656
00:55:43,906 --> 00:55:46,286
拿起更多的卡片

1657
00:55:46,286 --> 00:55:49,276
然后我可以把它们

1658
00:55:49,276 --> 00:55:50,796
一起放置到我最喜欢的

1659
00:55:50,796 --> 00:55:51,396
相册里去

1660
00:55:52,006 --> 00:55:54,376
非常简单

1661
00:55:54,376 --> 00:55:55,796
这就是在你的 app 中添加拖拽与放置

1662
00:55:56,476 --> 00:55:58,386
我们和不少

1663
00:55:58,386 --> 00:55:59,396
伙伴共同工作

1664
00:55:59,396 --> 00:56:01,166
他们一直努力让

1665
00:56:01,166 --> 00:56:03,336
拖拽和放置进入

1666
00:56:03,336 --> 00:56:04,176
他们的应用

1667
00:56:04,486 --> 00:56:05,906
其中一个合作伙伴

1668
00:56:05,996 --> 00:56:07,636
创造性地使用了这个 API

1669
00:56:07,636 --> 00:56:09,386
那就是 Adobe

1670
00:56:09,856 --> 00:56:11,046
所以现在我想请

1671
00:56:11,046 --> 00:56:13,056
Adobe 的 Brooke Francesi 上台

1672
00:56:13,056 --> 00:56:13,856
为你展示他们的成果

1673
00:56:15,516 --> 00:56:20,876
[ 掌声 ]

1674
00:56:21,376 --> 00:56:22,016
>>  谢谢 Eliza

1675
00:56:22,416 --> 00:56:24,946
我已经迫不及待地想

1676
00:56:24,946 --> 00:56:26,266
给你们展示拖拽放置对于

1677
00:56:26,266 --> 00:56:27,296
创意行业的意义了

1678
00:56:27,946 --> 00:56:30,596
这是 Adobe Photoshop Sketch

1679
00:56:31,056 --> 00:56:32,526
它是专用于油画与图画的 app

1680
00:56:32,526 --> 00:56:33,486
在它里面  有很多

1681
00:56:33,486 --> 00:56:35,066
最好用的 natural media brushes

1682
00:56:35,416 --> 00:56:36,746
包括 My Photoshop Brushes 里的

1683
00:56:36,746 --> 00:56:37,166
全部笔刷

1684
00:56:37,676 --> 00:56:38,506
我在画这副插画

1685
00:56:38,506 --> 00:56:40,166
在完成之前

1686
00:56:40,166 --> 00:56:41,336
我想在背景中

1687
00:56:41,336 --> 00:56:42,636
添加一些元素

1688
00:56:43,096 --> 00:56:44,296
要做到这一点

1689
00:56:44,416 --> 00:56:46,996
我要打开另一个 Adobe app

1690
00:56:46,996 --> 00:56:47,746
叫做 Capture

1691
00:56:48,506 --> 00:56:50,066
Capture 这个 app 允许我

1692
00:56:50,066 --> 00:56:52,046
捕捉周围世界的灵感

1693
00:56:52,046 --> 00:56:53,866
生成图案

1694
00:56:53,866 --> 00:56:57,036
色彩主题  甚至是自定义笔刷等等

1695
00:56:57,036 --> 00:56:59,096
我在这个项目中

1696
00:56:59,096 --> 00:57:00,116
一直在使用这些笔刷

1697
00:57:01,386 --> 00:57:03,456
现在  为了在背景中

1698
00:57:03,456 --> 00:57:04,826
添加一些元素

1699
00:57:04,826 --> 00:57:06,296
我需要把色彩主题

1700
00:57:06,296 --> 00:57:08,416
读取到 Photoshop Sketch 的工具栏里

1701
00:57:09,676 --> 00:57:11,306
在过去  我得去

1702
00:57:11,306 --> 00:57:13,276
找到所有的色彩

1703
00:57:13,616 --> 00:57:15,336
用手动方式把每一种色彩

1704
00:57:15,336 --> 00:57:17,616
读取到工具栏里

1705
00:57:17,616 --> 00:57:18,886
然后再回去  找到笔刷

1706
00:57:19,256 --> 00:57:19,736
你懂的

1707
00:57:19,736 --> 00:57:21,456
那是一个很长又很麻烦的

1708
00:57:21,506 --> 00:57:21,936
过程

1709
00:57:23,046 --> 00:57:25,056
但使用拖拽放置

1710
00:57:25,056 --> 00:57:27,126
我可以一下选择五种色彩

1711
00:57:27,996 --> 00:57:29,576
导航到我的笔刷中

1712
00:57:30,286 --> 00:57:32,086
选择我在这个项目中用到的

1713
00:57:32,086 --> 00:57:33,166
两种笔刷

1714
00:57:33,226 --> 00:57:36,566
然后同时把它们

1715
00:57:36,566 --> 00:57:38,096
拖拽到我的工具栏里

1716
00:57:38,556 --> 00:57:39,676
真够厉害  是不是

1717
00:57:41,516 --> 00:57:44,866
[ 掌声 ]

1718
00:57:45,366 --> 00:57:46,956
这在之前要花上

1719
00:57:47,096 --> 00:57:49,256
很多步骤才能完成  现在却只要

1720
00:57:49,256 --> 00:57:50,046
几秒钟

1721
00:57:50,506 --> 00:57:51,796
我们甚至还利用这个

1722
00:57:51,796 --> 00:57:53,896
API 去生成我们自己的自定义

1723
00:57:53,896 --> 00:57:54,596
动画

1724
00:57:56,016 --> 00:57:57,346
我们开始使用新的

1725
00:57:57,346 --> 00:57:59,206
拖拽放置后  惊讶不已

1726
00:57:59,206 --> 00:58:00,546
它的实现竟是如此

1727
00:58:00,546 --> 00:58:01,326
简单直接

1728
00:58:01,726 --> 00:58:03,996
只用了两天时间

1729
00:58:03,996 --> 00:58:05,786
我们的一个工程师就让

1730
00:58:05,856 --> 00:58:08,136
基本的 API 特性在一个 app 里实现了

1731
00:58:08,136 --> 00:58:09,236
于是我们决定继续挖掘

1732
00:58:10,176 --> 00:58:11,486
拖拽放置带来的可能性

1733
00:58:11,486 --> 00:58:12,946
真的是无穷无尽的

1734
00:58:13,796 --> 00:58:15,486
最酷的是这不仅

1735
00:58:15,486 --> 00:58:18,516
限于图像  笔刷

1736
00:58:18,516 --> 00:58:19,956
以及色彩主题

1737
00:58:20,266 --> 00:58:21,896
我还能在不同的 app 之间

1738
00:58:21,896 --> 00:58:23,926
拖拽放置图层

1739
00:58:24,326 --> 00:58:25,486
现在  我想看看它在 Context

1740
00:58:25,486 --> 00:58:26,876
里的效果怎么样

1741
00:58:27,356 --> 00:58:28,376
让我先画上几笔

1742
00:58:29,206 --> 00:58:30,526
我想看看在 Context 里

1743
00:58:30,526 --> 00:58:32,526
效果怎样

1744
00:58:32,526 --> 00:58:33,716
我选择这些

1745
00:58:33,716 --> 00:58:35,296
我之前画的图层

1746
00:58:35,366 --> 00:58:39,446
打开我的 Dock

1747
00:58:39,536 --> 00:58:41,106
然后把它们都

1748
00:58:41,326 --> 00:58:43,526
拖拽到另一个 Adobe app 里

1749
00:58:43,526 --> 00:58:44,976
这是 Photoshop Mix

1750
00:58:44,976 --> 00:58:46,346
它是一个图像合成工具

1751
00:58:46,766 --> 00:58:48,176
在我进来之后

1752
00:58:48,176 --> 00:58:49,586
我还能有所选择

1753
00:58:49,836 --> 00:58:51,416
我可以在我的画布上

1754
00:58:51,416 --> 00:58:53,116
对准任何坐标

1755
00:58:53,116 --> 00:58:54,426
如果我确切知道

1756
00:58:54,426 --> 00:58:57,326
要把图层放在哪的话

1757
00:58:57,326 --> 00:58:58,716
或者我可以把它们直接放在图层栏里

1758
00:58:59,326 --> 00:59:02,316
超棒的  对不对

1759
00:59:02,316 --> 00:59:03,556
我真是永远都看不够

1760
00:59:05,516 --> 00:59:09,936
[ 掌声 ]

1761
00:59:10,436 --> 00:59:11,676
现在 我要总结一下了

1762
00:59:11,676 --> 00:59:13,176
怕是有人已经在这两分钟睡过去了

1763
00:59:13,496 --> 00:59:15,426
我刚刚从三个

1764
00:59:15,426 --> 00:59:16,636
完全不同的 app 中

1765
00:59:16,676 --> 00:59:18,196
拖拽了三种

1766
00:59:18,196 --> 00:59:19,466
完全不同的东西

1767
00:59:19,466 --> 00:59:21,336
因此  拖拽与放置

1768
00:59:21,336 --> 00:59:22,786
绝不仅仅是在我的工作中节省了步骤

1769
00:59:23,736 --> 00:59:26,076
它是一个为在 iPad 上

1770
00:59:26,076 --> 00:59:27,736
进行创意工作的人准备的

1771
00:59:27,736 --> 00:59:28,146
全新的工作流

1772
00:59:28,366 --> 00:59:29,536
谢谢大家

1773
00:59:31,516 --> 00:59:37,126
[ 掌声 ]

1774
00:59:37,626 --> 00:59:38,086
>>  谢谢 Brooke

1775
00:59:38,856 --> 00:59:40,076
拖拽放置真是一个令人振奋的

1776
00:59:40,076 --> 00:59:41,816
新 API 我们已经迫不及待

1777
00:59:41,816 --> 00:59:42,656
要看看你们会用它

1778
00:59:42,656 --> 00:59:44,146
做什么 但还有很多

1779
00:59:44,146 --> 00:59:45,096
iOS 11 上的其他改进

1780
00:59:45,096 --> 00:59:46,886
你们也应该

1781
00:59:46,886 --> 00:59:47,846
去了解它们

1782
00:59:47,846 --> 00:59:49,996
我们说一说

1783
00:59:49,996 --> 00:59:51,096
对用户交互的更新吧

1784
00:59:52,236 --> 00:59:53,236
大多数 app 的顶端层级

1785
00:59:53,236 --> 00:59:54,696
现在有了一个大标题

1786
00:59:54,696 --> 00:59:56,856
在导航栏中非常显眼

1787
00:59:56,856 --> 00:59:58,596
还有一项新的

1788
00:59:58,596 --> 01:00:00,166
集成的搜索栏的

1789
01:00:00,166 --> 01:00:00,836
设计

1790
01:00:01,756 --> 01:00:02,766
在大多数 app 的

1791
01:00:02,766 --> 01:00:04,676
顶层  你们会发现它  包括

1792
01:00:04,676 --> 01:00:06,886
全新的 Messages Mail  App

1793
01:00:07,016 --> 01:00:09,696
Store 和 Photos 等等

1794
01:00:09,696 --> 01:00:11,686
要在你自己的 app 中

1795
01:00:11,686 --> 01:00:13,316
显示大标题  也是非常简单的

1796
01:00:14,596 --> 01:00:16,366
只要调用一些属性

1797
01:00:16,366 --> 01:00:18,186
你们就能采用并且控制

1798
01:00:18,266 --> 01:00:19,706
新的外观采用大标题

1799
01:00:19,756 --> 01:00:21,446
并且采用新的

1800
01:00:21,606 --> 01:00:22,716
搜索框了

1801
01:00:24,036 --> 01:00:26,076
你们还会发现  在 iOS 11 里

1802
01:00:26,076 --> 01:00:27,666
UITableView 现在已经默认启用

1803
01:00:27,836 --> 01:00:29,596
自适应尺寸的单元格

1804
01:00:30,156 --> 01:00:31,706
这会让你

1805
01:00:31,866 --> 01:00:33,046
更加容易地得到

1806
01:00:33,046 --> 01:00:33,856
动态字体效果

1807
01:00:35,516 --> 01:00:38,846
[ 掌声 ]

1808
01:00:39,346 --> 01:00:40,916
这也让 iOS 11 的 UI

1809
01:00:40,916 --> 01:00:43,176
对于字体变化的响应

1810
01:00:43,176 --> 01:00:44,936
比以前更灵活了

1811
01:00:45,706 --> 01:00:47,156
有了更广的

1812
01:00:47,206 --> 01:00:49,116
动态字体尺寸范围

1813
01:00:49,116 --> 01:00:50,416
你们的用户就能选择

1814
01:00:50,416 --> 01:00:51,566
他们用起来最舒服的字体大小了

1815
01:00:53,286 --> 01:00:54,736
动态字体是一个

1816
01:00:54,836 --> 01:00:56,216
使用频繁的用户偏好

1817
01:00:56,366 --> 01:00:57,316
所以你们一定要确定

1818
01:00:57,316 --> 01:00:58,736
去测试它

1819
01:00:58,736 --> 01:00:59,736
并对它的响应及时

1820
01:01:00,606 --> 01:01:02,216
别忘了去为每个人设计

1821
01:01:03,326 --> 01:01:04,296
使用更大的

1822
01:01:04,296 --> 01:01:05,966
辅助尺寸进行测试

1823
01:01:05,966 --> 01:01:07,876
也可行了  在这种情况下

1824
01:01:07,876 --> 01:01:09,106
你们的表格视图行高会

1825
01:01:09,106 --> 01:01:10,916
增加

1826
01:01:10,916 --> 01:01:12,386
所以你们要确定内容

1827
01:01:12,386 --> 01:01:14,146
布局良好  保持易读性

1828
01:01:14,386 --> 01:01:15,686
即便是字体很大时也要这样

1829
01:01:16,766 --> 01:01:19,616
接下来我们说说文件

1830
01:01:20,846 --> 01:01:21,906
文件管理在 iOS 11 里

1831
01:01:21,906 --> 01:01:23,816
彻底更新了

1832
01:01:24,616 --> 01:01:25,776
当然  你可以在新的

1833
01:01:25,776 --> 01:01:27,316
Flies app 里访问文件

1834
01:01:27,316 --> 01:01:27,976
你们今天早晨已经听过了

1835
01:01:27,976 --> 01:01:30,336
但更好的是

1836
01:01:30,336 --> 01:01:32,136
具有同样功能的

1837
01:01:32,186 --> 01:01:34,016
新的文档浏览器

1838
01:01:34,016 --> 01:01:35,566
可以在你们的 app 内部

1839
01:01:35,726 --> 01:01:36,636
出现了

1840
01:01:39,656 --> 01:01:40,946
你可以筛选出现在

1841
01:01:40,986 --> 01:01:42,056
浏览器里的文件

1842
01:01:42,056 --> 01:01:44,526
类型

1843
01:01:45,106 --> 01:01:46,736
不好意思  在导航栏中

1844
01:01:46,736 --> 01:01:48,116
添加自定义动作

1845
01:01:48,216 --> 01:01:50,046
甚至是允许在同一个交互页面

1846
01:01:50,046 --> 01:01:51,416
内部直接生成

1847
01:01:51,416 --> 01:01:52,816
新文件

1848
01:01:53,636 --> 01:01:54,756
当然  你还可以

1849
01:01:54,756 --> 01:01:57,676
定义它的外观

1850
01:01:57,676 --> 01:01:59,216
让它更好地融入

1851
01:01:59,216 --> 01:01:59,976
你的 app

1852
01:02:01,456 --> 01:02:03,036
文档浏览器还提供了

1853
01:02:03,036 --> 01:02:04,456
快速访问 iCloud Drive 的

1854
01:02:04,546 --> 01:02:06,086
新分享文档支持

1855
01:02:06,086 --> 01:02:07,836
让 iOS 和 macOS 之间

1856
01:02:07,836 --> 01:02:09,916
的协作变的更加简单

1857
01:02:11,506 --> 01:02:13,206
你可以使用 NSFileCoordinator

1858
01:02:13,206 --> 01:02:14,906
轻易找到对这些文档的更改

1859
01:02:14,906 --> 01:02:16,516
甚至在

1860
01:02:16,956 --> 01:02:18,586
其他用户做出这些更改时

1861
01:02:18,586 --> 01:02:19,236
也可以

1862
01:02:19,916 --> 01:02:21,646
在 macOS 上 NSDocument

1863
01:02:21,646 --> 01:02:22,896
包括对在你的 app

1864
01:02:22,896 --> 01:02:24,146
内部直接分享文件的支持

1865
01:02:25,916 --> 01:02:27,696
最后  我们来说一说

1866
01:02:27,696 --> 01:02:29,636
iOS 11 的新的多任务功能

1867
01:02:30,376 --> 01:02:31,536
这让你的 app 能够

1868
01:02:31,536 --> 01:02:32,606
参与到新的多任务工作流中来

1869
01:02:32,606 --> 01:02:34,456
这是由新的浮动 Dock

1870
01:02:34,456 --> 01:02:35,696
slide-over apps

1871
01:02:36,186 --> 01:02:37,976
pinned apps

1872
01:02:38,316 --> 01:02:39,576
和全新的 App Switcher 共同构成的

1873
01:02:39,826 --> 01:02:40,946
它非常简单直接

1874
01:02:41,806 --> 01:02:43,416
如果你在过去几年中采用了

1875
01:02:43,556 --> 01:02:44,896
size classes 灵活分层

1876
01:02:44,896 --> 01:02:46,206
和默认故事板

1877
01:02:46,206 --> 01:02:47,566
那么你实际上

1878
01:02:47,566 --> 01:02:48,286
已经完成了

1879
01:02:49,176 --> 01:02:50,966
iOS 11 在这些现有技术的基础上

1880
01:02:50,966 --> 01:02:52,766
进行构建  从而诞生了

1881
01:02:52,766 --> 01:02:54,526
一大批新的工作流

1882
01:02:55,496 --> 01:02:56,666
如果你还没有采用上面提到的东西

1883
01:02:56,666 --> 01:02:58,286
现在的时机是最好的

1884
01:03:00,636 --> 01:03:01,646
这些都只是一个开始

1885
01:03:02,196 --> 01:03:03,776
在iOS 11 里还有很多

1886
01:03:03,776 --> 01:03:05,626
新的和增强的 API

1887
01:03:06,696 --> 01:03:08,506
比如  密码自动填充

1888
01:03:08,776 --> 01:03:10,676
让你从 iCloud 钥匙串中

1889
01:03:10,676 --> 01:03:12,226
获得登录信息

1890
01:03:12,226 --> 01:03:14,046
并直接在你的 app 里登录

1891
01:03:14,046 --> 01:03:15,886
变得更快  更安全

1892
01:03:15,886 --> 01:03:17,196
这对你的 app 登录体验来说

1893
01:03:17,196 --> 01:03:18,056
是一个很大的提升

1894
01:03:19,076 --> 01:03:20,676
这非常棒 [ 掌声 ]

1895
01:03:22,616 --> 01:03:23,966
现在在你的素材目录里

1896
01:03:23,966 --> 01:03:25,226
可以保存已命名颜色素材

1897
01:03:25,226 --> 01:03:26,886
和向量素材

1898
01:03:26,886 --> 01:03:29,516
UIFontMetrics 让你自定义的字体

1899
01:03:29,516 --> 01:03:30,866
加入动态字体

1900
01:03:30,866 --> 01:03:32,496
变得更加容易

1901
01:03:34,516 --> 01:03:37,676
[ 掌声 ]

1902
01:03:38,176 --> 01:03:39,336
除此之外

1903
01:03:39,336 --> 01:03:40,736
对于各种 Apple 服务的 API

1904
01:03:40,736 --> 01:03:42,696
也有很多

1905
01:03:42,696 --> 01:03:44,516
很棒的改进

1906
01:03:44,516 --> 01:03:46,246
我们只能谈一点  就从

1907
01:03:46,386 --> 01:03:46,916
iMessage 开始吧

1908
01:03:47,426 --> 01:03:50,476
有了 iOS 11 里的新应用带

1909
01:03:50,476 --> 01:03:52,486
信息 app 现在更加容易被发现了

1910
01:03:52,486 --> 01:03:53,926
而且它们也变得

1911
01:03:53,926 --> 01:03:55,076
更加强大了

1912
01:03:55,666 --> 01:03:57,196
你们的 app 现在可以

1913
01:03:57,296 --> 01:03:58,786
在交谈中的聊天气泡中

1914
01:03:58,876 --> 01:03:59,956
递交 live 内容了

1915
01:04:01,956 --> 01:04:03,146
使用新的直接发送 API

1916
01:04:03,146 --> 01:04:05,106
你可以帮你的用户

1917
01:04:05,146 --> 01:04:05,996
去除一项痛点

1918
01:04:05,996 --> 01:04:07,886
让发送信息变得非常简单

1919
01:04:07,886 --> 01:04:09,506
在你的 app 扩展里

1920
01:04:09,506 --> 01:04:11,326
只需点击一下

1921
01:04:11,326 --> 01:04:12,756
就可以完成

1922
01:04:14,076 --> 01:04:15,736
接下来是 SiriKit

1923
01:04:16,776 --> 01:04:17,996
支持的域扩大了

1924
01:04:17,996 --> 01:04:20,346
包括了一些新的域

1925
01:04:20,346 --> 01:04:21,476
比如支付账户

1926
01:04:21,516 --> 01:04:24,236
列表  笔记

1927
01:04:24,866 --> 01:04:26,566
二维码显示  等等

1928
01:04:27,096 --> 01:04:29,006
如果你错过了的话

1929
01:04:29,006 --> 01:04:30,596
今年早些时候  我们极大地简化了

1930
01:04:30,596 --> 01:04:32,146
SiriKit 开发

1931
01:04:32,146 --> 01:04:33,556
添加了 iOS 和 watchOS 上的

1932
01:04:33,716 --> 01:04:35,836
模拟器支持

1933
01:04:37,076 --> 01:04:38,416
最后是 Apple Music

1934
01:04:39,196 --> 01:04:40,706
使用 MusicKit 在你们的 app 中

1935
01:04:40,766 --> 01:04:42,036
添加音乐回放变得前所未有地简单

1936
01:04:43,136 --> 01:04:44,706
用户们现在可以直接在 app 内部

1937
01:04:44,706 --> 01:04:46,456
播放为 Apple Music

1938
01:04:46,456 --> 01:04:48,276
订阅客户准备的全部

1939
01:04:48,276 --> 01:04:49,216
4000 万首歌曲了

1940
01:04:50,066 --> 01:04:51,186
这对于健身 app 来说

1941
01:04:51,186 --> 01:04:53,336
更是好消息

1942
01:04:53,336 --> 01:04:55,696
现在你们不用中断锻炼

1943
01:04:55,696 --> 01:04:57,426
就能访问歌曲  播放列表

1944
01:04:57,426 --> 01:04:58,396
和广播电台了

1945
01:04:59,536 --> 01:05:00,806
这些只不过是

1946
01:05:00,806 --> 01:05:02,316
对于 Apple 各种服务的

1947
01:05:02,316 --> 01:05:03,566
API 的一部分加强

1948
01:05:04,466 --> 01:05:05,816
接下来  给大家讲解

1949
01:05:05,816 --> 01:05:07,366
我们超棒的照片和

1950
01:05:07,366 --> 01:05:08,716
图像 API 改进的是 Sebastien

1951
01:05:08,716 --> 01:05:09,816
Marineau-Mes  欢迎他上场

1952
01:05:10,796 --> 01:05:11,056
Seb

1953
01:05:12,516 --> 01:05:15,006
[ 掌声 ]

1954
01:05:15,506 --> 01:05:16,156
>>  谢谢 Josh

1955
01:05:17,216 --> 01:05:17,656
谢谢

1956
01:05:17,786 --> 01:05:18,756
来这里真激动

1957
01:05:18,756 --> 01:05:20,076
我今天要讲的很多

1958
01:05:20,076 --> 01:05:21,556
咱们马上开始

1959
01:05:21,976 --> 01:05:23,286
首先  我们来说一说

1960
01:05:23,286 --> 01:05:25,096
macOS 上的新的照片项目扩展

1961
01:05:26,236 --> 01:05:27,386
你现在可以把创意性的

1962
01:05:27,626 --> 01:05:29,326
基于项目的特性

1963
01:05:29,596 --> 01:05:30,576
直接加入照片了

1964
01:05:31,236 --> 01:05:32,696
用户可以在 Mac App Store 里

1965
01:05:32,696 --> 01:05:33,936
轻易发现你们的新扩展

1966
01:05:34,396 --> 01:05:35,966
你把它准备好后

1967
01:05:35,966 --> 01:05:38,196
用户可以选择照片

1968
01:05:38,196 --> 01:05:40,066
回忆  或者相册

1969
01:05:40,066 --> 01:05:41,316
然后从 Create 菜单

1970
01:05:41,316 --> 01:05:42,056
选择扩展

1971
01:05:42,596 --> 01:05:43,876
Photos app

1972
01:05:44,026 --> 01:05:45,526
扩展不仅限于图像

1973
01:05:45,726 --> 01:05:47,486
还包括丰富的文本

1974
01:05:47,486 --> 01:05:48,996
这会让生成项目

1975
01:05:48,996 --> 01:05:49,816
完全自然

1976
01:05:50,386 --> 01:05:51,846
此外  我们还允许你

1977
01:05:51,846 --> 01:05:53,506
保留自己的项目数据

1978
01:05:54,266 --> 01:05:56,356
现在  你们的扩展

1979
01:05:56,656 --> 01:05:57,906
在 Photos app 内部运行

1980
01:05:57,906 --> 01:05:59,096
所以真的是无缝体验

1981
01:06:00,556 --> 01:06:01,696
当然  我们把它设计成

1982
01:06:01,756 --> 01:06:02,786
支持打印产品

1983
01:06:02,786 --> 01:06:03,986
这有一个好例子

1984
01:06:04,456 --> 01:06:06,006
但你可以用它做得更多

1985
01:06:07,256 --> 01:06:08,676
这里  有人在构建一个

1986
01:06:08,676 --> 01:06:09,966
网络出版应用

1987
01:06:09,966 --> 01:06:11,956
甚至是直接

1988
01:06:11,956 --> 01:06:14,026
从你的最爱照片中

1989
01:06:14,096 --> 01:06:14,766
订购带框打印

1990
01:06:15,506 --> 01:06:16,746
我们认为用户一定会

1991
01:06:16,746 --> 01:06:18,056
爱上你们用这个建立的

1992
01:06:18,056 --> 01:06:19,126
扩展去拓展

1993
01:06:19,126 --> 01:06:20,356
他们的照片

1994
01:06:21,336 --> 01:06:23,256
接下来是相机

1995
01:06:24,196 --> 01:06:26,556
在 iOS 11 中的更新

1996
01:06:26,556 --> 01:06:28,986
相机有一个轻量化的二维码探测器

1997
01:06:28,986 --> 01:06:29,926
你只需要把相机对准二维码

1998
01:06:29,926 --> 01:06:30,636
就可以了

1999
01:06:31,036 --> 01:06:32,576
二维码会自动被解码

2000
01:06:32,576 --> 01:06:34,446
并可以在合适的 app 中

2001
01:06:34,446 --> 01:06:35,996
打开深层链接

2002
01:06:36,686 --> 01:06:37,186
就像这样

2003
01:06:38,516 --> 01:06:42,356
[ 掌声 ]

2004
01:06:42,856 --> 01:06:43,966
作为开发者

2005
01:06:43,966 --> 01:06:44,656
这很容易使用

2006
01:06:44,656 --> 01:06:45,676
你只需采用

2007
01:06:45,676 --> 01:06:47,136
通用链接

2008
01:06:47,136 --> 01:06:49,246
我们甚至还支持

2009
01:06:49,246 --> 01:06:51,666
位置  通讯录  和 WiFi 网络

2010
01:06:51,666 --> 01:06:52,076
等二维码格式

2011
01:06:52,936 --> 01:06:54,596
接下来是

2012
01:06:54,596 --> 01:06:55,596
压缩与格式

2013
01:06:56,246 --> 01:06:57,306
今年我们在这方面的改进

2014
01:06:57,306 --> 01:06:59,006
真的非常大

2015
01:07:00,196 --> 01:07:01,356
当然  JPEG 是无所不在的

2016
01:07:01,356 --> 01:07:02,706
而且在过去 25 年中

2017
01:07:02,706 --> 01:07:04,466
为我们提供了很好的服务

2018
01:07:04,466 --> 01:07:05,956
但今天我们知道

2019
01:07:05,956 --> 01:07:07,966
有一些技术会提供

2020
01:07:07,966 --> 01:07:09,066
更好的压缩与

2021
01:07:09,066 --> 01:07:09,786
灵活性

2022
01:07:10,516 --> 01:07:12,786
这对 H.264 也一样

2023
01:07:12,786 --> 01:07:13,816
它也有超过 10 年的历史了

2024
01:07:14,486 --> 01:07:15,786
压缩很重要

2025
01:07:15,846 --> 01:07:17,456
但我们也要考虑到

2026
01:07:17,456 --> 01:07:18,896
其他的要求  所以让我们

2027
01:07:18,896 --> 01:07:19,396
看看这个

2028
01:07:20,106 --> 01:07:21,806
举例来说  现在

2029
01:07:21,806 --> 01:07:23,706
照片与视频之间的界限

2030
01:07:23,766 --> 01:07:24,696
已经很模糊了

2031
01:07:24,696 --> 01:07:26,186
我们所拍摄的很多东西

2032
01:07:26,186 --> 01:07:27,266
其实是这两种类型素材的

2033
01:07:27,316 --> 01:07:28,086
混合产物

2034
01:07:29,016 --> 01:07:30,846
我们也有新的传感器

2035
01:07:30,846 --> 01:07:32,936
它可以捕捉更丰富的图像

2036
01:07:32,936 --> 01:07:34,306
并显示它们

2037
01:07:34,306 --> 01:07:35,016
栩栩如生

2038
01:07:35,566 --> 01:07:37,176
说到底  无论我们选择什么格式

2039
01:07:37,206 --> 01:07:38,226
都必须跟上

2040
01:07:38,226 --> 01:07:40,106
日益提高的分辨率

2041
01:07:40,846 --> 01:07:41,916
所以  我们选择了

2042
01:07:41,916 --> 01:07:44,216
HEVC 作为编解码器  因为

2043
01:07:44,456 --> 01:07:45,506
它符合上述所有要求

2044
01:07:45,926 --> 01:07:47,736
它能在同等图像质量下

2045
01:07:47,806 --> 01:07:49,396
提供2倍压缩率

2046
01:07:49,396 --> 01:07:50,646
如果你考虑到数以十亿计的

2047
01:07:50,716 --> 01:07:52,096
照片与视频

2048
01:07:52,096 --> 01:07:54,086
或者应该说数以兆计

2049
01:07:54,086 --> 01:07:56,046
那么节省的空间是很惊人的

2050
01:07:56,046 --> 01:07:57,396
HEVC 也从很多

2051
01:07:57,396 --> 01:07:59,026
设备上得到了硬件加速

2052
01:07:59,806 --> 01:08:01,506
而且它还支持照片

2053
01:08:01,786 --> 01:08:04,326
视频  4K 及更高分辨率

2054
01:08:04,326 --> 01:08:05,846
支持很多拍摄与显示的

2055
01:08:05,936 --> 01:08:07,136
新技术

2056
01:08:08,146 --> 01:08:10,576
我们还选择了一个新的

2057
01:08:10,576 --> 01:08:13,206
图像格式  名叫 HEIF

2058
01:08:13,206 --> 01:08:14,546
我习惯叫它 heef

2059
01:08:14,546 --> 01:08:16,845
你们可以跟我一起说 heef

2060
01:08:18,276 --> 01:08:19,845
HEIF 支持

2061
01:08:19,845 --> 01:08:21,446
复合素材的概念

2062
01:08:21,526 --> 01:08:22,765
所以在单一文件里

2063
01:08:22,765 --> 01:08:24,055
你可以放下一个或是更多的照片或图像

2064
01:08:24,055 --> 01:08:25,076
还可以是视频

2065
01:08:25,076 --> 01:08:27,586
还可以有辅助数据

2066
01:08:27,586 --> 01:08:28,765
比如 alpha 和景深

2067
01:08:28,765 --> 01:08:30,446
它也是高度可扩展的

2068
01:08:30,666 --> 01:08:32,366
它支持丰富的元数据

2069
01:08:32,366 --> 01:08:34,486
动画和序列  还有其他

2070
01:08:34,486 --> 01:08:35,906
媒体类型  比如音频

2071
01:08:36,366 --> 01:08:38,486
最后 HEIF 是 ISO 标准的

2072
01:08:38,586 --> 01:08:40,305
这对生态来说

2073
01:08:40,305 --> 01:08:41,326
非常重要

2074
01:08:42,416 --> 01:08:44,506
现在  我们的标准 API

2075
01:08:44,506 --> 01:08:46,916
会直接支持 HEVC 和

2076
01:08:46,986 --> 01:08:47,446
HEIF

2077
01:08:47,836 --> 01:08:49,446
总体上来说  它是显而易见的

2078
01:08:49,526 --> 01:08:50,716
不需要主动做什么

2079
01:08:51,236 --> 01:08:52,586
但有时也许你会想

2080
01:08:52,586 --> 01:08:54,316
明确控制格式

2081
01:08:55,026 --> 01:08:56,706
比如  如果你正想

2082
01:08:56,706 --> 01:08:58,426
在没有硬件加速的

2083
01:08:58,685 --> 01:09:00,046
老设备上播放一部

2084
01:09:00,046 --> 01:09:02,296
高分辨率的影片

2085
01:09:02,296 --> 01:09:03,886
在这种情况下  我们为你准备了

2086
01:09:03,886 --> 01:09:05,106
一个 API  你可以用它

2087
01:09:05,106 --> 01:09:06,866
决定某个文件

2088
01:09:06,866 --> 01:09:08,426
在这个例子中是 HEVC 格式的电影

2089
01:09:08,606 --> 01:09:09,386
是否能够在这个设备上顺利播放

2090
01:09:09,845 --> 01:09:11,725
如果不行

2091
01:09:11,725 --> 01:09:13,316
我们能够自动回退到

2092
01:09:13,316 --> 01:09:15,086
老一点的格式

2093
01:09:15,086 --> 01:09:16,305
来保持良好的用户体验

2094
01:09:17,666 --> 01:09:19,546
现在  在我们的生态系统内部

2095
01:09:19,546 --> 01:09:21,506
我们已经自动使用 HEVC 和 HEIF 格式

2096
01:09:21,756 --> 01:09:22,826
在所有兼容的设备上

2097
01:09:22,826 --> 01:09:23,886
分享文件了

2098
01:09:24,496 --> 01:09:26,265
但如果我们不确定

2099
01:09:26,265 --> 01:09:28,185
对方能否解码

2100
01:09:28,185 --> 01:09:30,326
这些新格式  我们就会

2101
01:09:30,326 --> 01:09:31,935
以兼容性为先

2102
01:09:31,935 --> 01:09:33,526
自动转码成 JPEG 和

2103
01:09:33,555 --> 01:09:35,206
H.264 格式

2104
01:09:35,206 --> 01:09:36,386
举个例子

2105
01:09:36,736 --> 01:09:38,496
把照片放入 email 附件

2106
01:09:39,616 --> 01:09:40,685
我真的建议大家

2107
01:09:40,685 --> 01:09:41,946
在采用这些新格式

2108
01:09:42,015 --> 01:09:43,895
把它们放进你的 app 时

2109
01:09:43,895 --> 01:09:44,736
要多考虑一下兼容性

2110
01:09:45,935 --> 01:09:47,276
这就是关于压缩的内容

2111
01:09:47,276 --> 01:09:49,026
接下来让我来说一说

2112
01:09:49,026 --> 01:09:51,246
另一个新主题  景深

2113
01:09:52,196 --> 01:09:53,456
我们都看到了 iPhone 7 Plus

2114
01:09:53,456 --> 01:09:54,956
上面的人像模式

2115
01:09:55,006 --> 01:09:56,626
它使用双摄像头生成

2116
01:09:56,936 --> 01:09:57,606
景深效果

2117
01:09:58,286 --> 01:09:59,846
我们是这样做的

2118
01:10:00,456 --> 01:10:02,536
我们用两个摄像头

2119
01:10:02,956 --> 01:10:04,746
同时捕捉图像

2120
01:10:04,746 --> 01:10:06,796
然后使用立体视法计算景深

2121
01:10:07,096 --> 01:10:08,226
这和人类的视觉原理是一样的

2122
01:10:09,226 --> 01:10:10,526
我们把这个储存在

2123
01:10:10,526 --> 01:10:12,876
深度图上面

2124
01:10:13,156 --> 01:10:14,436
在人像模式下  会拍摄照片

2125
01:10:14,436 --> 01:10:15,966
和深度图  然后

2126
01:10:15,966 --> 01:10:17,806
我们会用它来模糊掉

2127
01:10:17,806 --> 01:10:18,696
背景中的物体

2128
01:10:19,526 --> 01:10:21,026
但最酷的是在

2129
01:10:21,026 --> 01:10:22,966
iOS 11 里  我们把

2130
01:10:22,966 --> 01:10:24,526
深度图存储成拍摄的一部分

2131
01:10:24,526 --> 01:10:26,656
而且我们还要让你

2132
01:10:26,656 --> 01:10:29,586
和你的 app 能够访问

2133
01:10:29,586 --> 01:10:30,386
照片和深度图

2134
01:10:30,386 --> 01:10:32,406
你可以加载它

2135
01:10:32,406 --> 01:10:34,466
使用它完成你自己的

2136
01:10:34,726 --> 01:10:35,486
创造性效果

2137
01:10:35,486 --> 01:10:36,826
我来给你们展示

2138
01:10:36,826 --> 01:10:37,666
几个例子

2139
01:10:37,976 --> 01:10:40,696
我可以拿出这张照片

2140
01:10:40,696 --> 01:10:42,286
我决定把背景

2141
01:10:42,286 --> 01:10:44,356
变成单色的

2142
01:10:44,896 --> 01:10:46,306
这样就突出主题

2143
01:10:46,306 --> 01:10:47,466
我需要使用更加艺术化的

2144
01:10:47,466 --> 01:10:48,196
效果

2145
01:10:48,456 --> 01:10:49,696
也许我可以把这个替换成

2146
01:10:49,696 --> 01:10:51,096
带模糊效果的南瓜田

2147
01:10:53,376 --> 01:10:54,846
你们可以想出

2148
01:10:54,846 --> 01:10:55,486
更具创意的效果

2149
01:10:55,486 --> 01:10:56,246
实际上  这些不过是

2150
01:10:56,246 --> 01:10:56,876
一些示例

2151
01:10:57,226 --> 01:10:58,796
可能性是无穷无尽的

2152
01:11:00,196 --> 01:11:02,506
这是静态图像的景深

2153
01:11:03,296 --> 01:11:05,246
我们还让你们能够使用

2154
01:11:05,246 --> 01:11:06,986
相机 API 访问较低保真度的

2155
01:11:06,986 --> 01:11:08,756
实时 Depths 流

2156
01:11:08,946 --> 01:11:10,926
这让你能够构建

2157
01:11:10,926 --> 01:11:12,376
基于相机的应用

2158
01:11:12,376 --> 01:11:14,206
让它们以新奇的方式使用 Depths

2159
01:11:15,546 --> 01:11:17,016
Depths 是对于我们的静态图像

2160
01:11:17,016 --> 01:11:18,346
和相机捕捉 API 的

2161
01:11:18,346 --> 01:11:20,496
一个简单的扩展

2162
01:11:20,496 --> 01:11:21,916
我们期待着见到

2163
01:11:21,916 --> 01:11:23,236
你们在这些新 API 之上

2164
01:11:23,236 --> 01:11:24,316
构建出的东西

2165
01:11:24,516 --> 01:11:25,526
非常非常期待

2166
01:11:26,256 --> 01:11:27,126
接下来  对

2167
01:11:27,586 --> 01:11:29,836
就是这样

2168
01:11:30,516 --> 01:11:34,236
[ 掌声 ]

2169
01:11:34,736 --> 01:11:36,006
接下来  我们来说说新的

2170
01:11:36,006 --> 01:11:36,896
影像 API

2171
01:11:36,896 --> 01:11:38,546
当然  计算机影像

2172
01:11:38,546 --> 01:11:39,716
和机器学习早已

2173
01:11:39,716 --> 01:11:41,716
成为了许多 Apple 产品

2174
01:11:41,716 --> 01:11:42,476
特性的基础

2175
01:11:42,476 --> 01:11:43,356
你们今天上午已经了解过了

2176
01:11:43,866 --> 01:11:45,226
也在 Store 里见过

2177
01:11:45,336 --> 01:11:47,176
使用计算机影像的 app 了

2178
01:11:47,696 --> 01:11:48,896
其中一个是热狗探测器 app

2179
01:11:48,896 --> 01:11:50,316
HBO 的剧集《硅谷》

2180
01:11:50,316 --> 01:11:51,876
里面提到过它

2181
01:11:51,876 --> 01:11:54,416
但当然  这些 app

2182
01:11:54,416 --> 01:11:56,336
全都使用计算机影像

2183
01:11:56,336 --> 01:11:57,396
把计算机影像

2184
01:11:57,396 --> 01:11:57,876
用在自己身上

2185
01:11:58,306 --> 01:11:59,626
我们今年要做的

2186
01:11:59,626 --> 01:12:00,856
是让我们所有的

2187
01:12:00,856 --> 01:12:02,756
内置功能都能够

2188
01:12:02,756 --> 01:12:04,376
为你们所用

2189
01:12:05,166 --> 01:12:06,836
你们可以做的有

2190
01:12:06,836 --> 01:12:07,886
面部特征点检测

2191
01:12:08,816 --> 01:12:09,746
我们已经见到过的矩形检测

2192
01:12:11,096 --> 01:12:15,206
文本  这个是

2193
01:12:15,206 --> 01:12:16,346
条形码检测

2194
01:12:16,926 --> 01:12:18,206
还有对象追踪

2195
01:12:18,206 --> 01:12:19,636
还有很多很多别的东西

2196
01:12:20,446 --> 01:12:22,306
其中一个就是

2197
01:12:22,306 --> 01:12:24,256
Vision 和 Core ML 的

2198
01:12:24,256 --> 01:12:24,856
整合

2199
01:12:24,976 --> 01:12:26,036
这会让你自己的

2200
01:12:26,036 --> 01:12:27,386
机器学习和

2201
01:12:27,386 --> 01:12:29,326
计算机影像模型

2202
01:12:29,326 --> 01:12:30,426
把它们作为 Vision 的

2203
01:12:30,426 --> 01:12:31,856
图像处理途径的一部分

2204
01:12:31,856 --> 01:12:33,736
来运行  这样我们就能

2205
01:12:33,736 --> 01:12:35,286
以非常新奇的方式扩展我们的

2206
01:12:35,286 --> 01:12:35,936
影像框架

2207
01:12:36,576 --> 01:12:37,756
为了给大家展示相关案例

2208
01:12:37,756 --> 01:12:38,996
我想请 Emily Kim 上台

2209
01:12:38,996 --> 01:12:41,166
请她给我们

2210
01:12:41,166 --> 01:12:43,636
展示一个很棒的演示 app

2211
01:12:43,786 --> 01:12:44,136
Emily

2212
01:12:45,516 --> 01:12:50,646
[ 掌声 ]

2213
01:12:51,146 --> 01:12:52,846
>>  嗨  我想给大家展示一个

2214
01:12:52,846 --> 01:12:53,966
演示 app 我们写这个 app

2215
01:12:53,966 --> 01:12:55,296
是为了展示 3 个 iOS 11 的

2216
01:12:55,296 --> 01:12:57,166
最新技术

2217
01:12:57,646 --> 01:13:00,196
Core ML Vision 和 Depth

2218
01:13:00,406 --> 01:13:01,526
我要请 Seb 在这个演示中

2219
01:13:01,526 --> 01:13:02,726
帮我一把

2220
01:13:02,966 --> 01:13:04,306
看上去他快要准备好了

2221
01:13:07,286 --> 01:13:07,746
好的

2222
01:13:08,066 --> 01:13:09,326
首先  我们要打开这个

2223
01:13:09,356 --> 01:13:10,066
应用

2224
01:13:10,636 --> 01:13:13,886
你们可以看到

2225
01:13:13,886 --> 01:13:15,316
这个 app 识别出 Seb

2226
01:13:15,316 --> 01:13:17,716
拿着一个钢琴键盘

2227
01:13:17,716 --> 01:13:18,786
于是就在他的嘴边

2228
01:13:18,786 --> 01:13:20,436
放了一个气泡

2229
01:13:20,436 --> 01:13:22,766
里面是一个钢琴的 emoji

2230
01:13:22,766 --> 01:13:25,456
咱们快速照张相

2231
01:13:25,456 --> 01:13:26,806
好了  这就是一张

2232
01:13:26,806 --> 01:13:28,026
Seb 拿着键盘的

2233
01:13:28,026 --> 01:13:28,586
照片

2234
01:13:29,166 --> 01:13:31,086
我不想这么说 Seb

2235
01:13:31,186 --> 01:13:32,816
但你看上去有点呆

2236
01:13:33,116 --> 01:13:35,006
我们可以试试别的吗

2237
01:13:35,146 --> 01:13:35,966
>>  好的

2238
01:13:37,076 --> 01:13:38,556
>>  我这么说可是

2239
01:13:38,556 --> 01:13:39,336
绝无冒犯之意

2240
01:13:41,826 --> 01:13:42,736
好吧

2241
01:13:42,736 --> 01:13:44,276
咱们看看你的 app

2242
01:13:44,276 --> 01:13:46,376
是否认出键盘之外的

2243
01:13:47,106 --> 01:13:47,476
东西

2244
01:13:47,476 --> 01:13:49,396
我们会回来的

2245
01:13:50,316 --> 01:13:50,736
好的

2246
01:13:50,736 --> 01:13:51,746
我们现在看到 Seb

2247
01:13:51,746 --> 01:13:52,556
拿着一把吉他

2248
01:13:52,656 --> 01:13:54,376
app 知道这一点

2249
01:13:54,376 --> 01:13:55,816
于是它就把一个吉他 emoji

2250
01:13:55,816 --> 01:13:56,766
放在了他嘴边的气泡里

2251
01:13:57,006 --> 01:13:58,426
咱们再照张相

2252
01:14:00,396 --> 01:14:01,916
哇  Seb 你看上去

2253
01:14:01,916 --> 01:14:02,696
比刚才酷多了

2254
01:14:03,416 --> 01:14:03,866
你有一些酷酷的气质

2255
01:14:04,016 --> 01:14:05,016
[ 笑声 ]

2256
01:14:05,516 --> 01:14:11,006
[ 掌声 ]

2257
01:14:11,506 --> 01:14:12,596
是的  如果你注意到了

2258
01:14:12,636 --> 01:14:14,486
他被加上了很酷的摇滚明星墨镜

2259
01:14:14,546 --> 01:14:16,296
后面还多了一些欢呼的粉丝

2260
01:14:16,296 --> 01:14:19,366
在我们跳转到

2261
01:14:19,366 --> 01:14:20,676
Xcode 上看看

2262
01:14:20,676 --> 01:14:21,716
写一个让 Seb 都能变酷的 app

2263
01:14:21,716 --> 01:14:23,026
有多么简单之前

2264
01:14:23,076 --> 01:14:24,646
咱们先为 Seb 鼓掌

2265
01:14:24,646 --> 01:14:25,706
感谢他的

2266
01:14:25,706 --> 01:14:26,336
大度精神

2267
01:14:27,516 --> 01:14:32,806
[ 掌声 ]

2268
01:14:33,306 --> 01:14:34,096
好的

2269
01:14:34,356 --> 01:14:35,436
这是个标准的

2270
01:14:35,436 --> 01:14:36,746
UIKit 和 AVFoundation

2271
01:14:36,746 --> 01:14:37,906
应用  所以我就不多去

2272
01:14:37,906 --> 01:14:39,016
讲它的细节了

2273
01:14:39,596 --> 01:14:41,136
我想主要讲一讲

2274
01:14:41,136 --> 01:14:42,306
你们看到的三个新地方

2275
01:14:42,306 --> 01:14:44,966
对象分类

2276
01:14:44,966 --> 01:14:46,946
面部特征点识别  和景深

2277
01:14:47,076 --> 01:14:48,166
首先  我们先来看看

2278
01:14:48,166 --> 01:14:49,276
对象分类

2279
01:14:50,086 --> 01:14:51,536
借助 Core ML 的力量

2280
01:14:51,536 --> 01:14:52,856
你可以把经过训练的

2281
01:14:52,856 --> 01:14:54,026
机器学习模型整合到

2282
01:14:54,026 --> 01:14:54,796
你的 app 里

2283
01:14:54,796 --> 01:14:55,866
你们很多人可能会去

2284
01:14:55,866 --> 01:14:56,846
使用你们自己的

2285
01:14:57,096 --> 01:14:58,216
但我们还是想给你们展示一下

2286
01:14:58,216 --> 01:14:59,966
这有多么容易

2287
01:14:59,966 --> 01:15:01,066
所以我们只是拿来一个现成的

2288
01:15:01,066 --> 01:15:02,206
模型  并把它放到我们的

2289
01:15:02,256 --> 01:15:02,626
项目里

2290
01:15:02,876 --> 01:15:03,626
超级简单

2291
01:15:04,836 --> 01:15:06,106
你们可以看到

2292
01:15:06,106 --> 01:15:07,386
我们只需要把这个文件模型

2293
01:15:07,386 --> 01:15:09,756
加载到 Core ML 里

2294
01:15:09,756 --> 01:15:11,076
再传到 Vision 上面

2295
01:15:11,076 --> 01:15:12,226
就能把它运行到图像上

2296
01:15:13,506 --> 01:15:14,996
相机预览的各帧出现时

2297
01:15:14,996 --> 01:15:16,606
我们只需要建立一个

2298
01:15:16,606 --> 01:15:18,496
Core ML 请求  让它

2299
01:15:18,496 --> 01:15:19,466
在每一帧上运行就可以了

2300
01:15:19,946 --> 01:15:21,536
一旦我们识别出了某个对象

2301
01:15:21,606 --> 01:15:23,336
比如那把吉他

2302
01:15:23,336 --> 01:15:24,426
这个请求的返回的结果

2303
01:15:24,426 --> 01:15:25,666
就会提示它在场景中

2304
01:15:25,666 --> 01:15:27,246
发现了一把吉他

2305
01:15:27,246 --> 01:15:28,236
然后我们就可以

2306
01:15:28,236 --> 01:15:29,656
把那个吉他 emoji 放在气泡里了

2307
01:15:30,706 --> 01:15:32,006
大家记得  在刚才的演示中

2308
01:15:32,006 --> 01:15:33,466
气泡是放在 Seb

2309
01:15:33,466 --> 01:15:34,756
的嘴角旁边的

2310
01:15:35,426 --> 01:15:36,676
那么我们是怎么知道

2311
01:15:36,676 --> 01:15:37,966
该把气泡放在哪里的呢

2312
01:15:38,256 --> 01:15:39,236
我们来看一看面部

2313
01:15:39,266 --> 01:15:40,136
特征点识别器

2314
01:15:41,246 --> 01:15:42,876
你可以利用 Vision

2315
01:15:42,876 --> 01:15:44,066
找到面部特征点

2316
01:15:44,066 --> 01:15:45,566
包括你的两只眼睛

2317
01:15:46,016 --> 01:15:47,316
鼻子  还有我们最感兴趣的地方

2318
01:15:47,316 --> 01:15:48,506
也就是嘴巴

2319
01:15:49,246 --> 01:15:52,486
我们只需要再次建立

2320
01:15:52,556 --> 01:15:54,466
一个面部特征点请求

2321
01:15:54,466 --> 01:15:55,426
然后在相机发来的

2322
01:15:55,426 --> 01:15:56,546
帧上面运行

2323
01:15:57,306 --> 01:15:58,646
请求返回并表示

2324
01:15:58,646 --> 01:15:59,716
它在面部找到了

2325
01:15:59,716 --> 01:16:02,156
特征点  然后我们就只需要

2326
01:16:02,156 --> 01:16:03,896
去问  嘴巴在哪里

2327
01:16:03,896 --> 01:16:04,976
然后就能把气泡放在合适位置

2328
01:16:04,976 --> 01:16:06,056
让它看上去

2329
01:16:06,056 --> 01:16:06,966
就好像从 Seb 的嘴巴里出来一样

2330
01:16:08,086 --> 01:16:09,426
我们还使用面部特征点

2331
01:16:09,426 --> 01:16:10,916
找到 Seb 的每只眼球

2332
01:16:10,956 --> 01:16:11,676
以此确定要把

2333
01:16:11,676 --> 01:16:13,166
那张吉他酷照中的墨镜

2334
01:16:13,166 --> 01:16:14,126
放在他脸上的什么地方

2335
01:16:15,066 --> 01:16:16,896
同样是在那张照片里

2336
01:16:16,896 --> 01:16:17,906
大家记得  我们换掉了背景

2337
01:16:17,906 --> 01:16:18,916
让他站到了一群

2338
01:16:18,916 --> 01:16:20,176
粉丝的前面

2339
01:16:20,426 --> 01:16:21,806
我们利用景深做到这一点

2340
01:16:21,806 --> 01:16:22,776
我们来深入看一下

2341
01:16:26,156 --> 01:16:28,186
现在在你用相机

2342
01:16:28,266 --> 01:16:29,666
拍摄图像后  很容易能得到

2343
01:16:29,666 --> 01:16:31,316
景深数据

2344
01:16:31,316 --> 01:16:32,366
你们中拍摄图像后需要

2345
01:16:32,366 --> 01:16:34,786
提取景深信息

2346
01:16:34,786 --> 01:16:36,366
我们写了一个

2347
01:16:36,366 --> 01:16:37,736
定制的内核

2348
01:16:37,736 --> 01:16:39,116
把景深信息

2349
01:16:39,116 --> 01:16:41,486
使用在拍摄的图像上

2350
01:16:41,486 --> 01:16:43,276
把 Seb 传送到摇滚巨星的世界去

2351
01:16:44,486 --> 01:16:46,026
我希望大家已经明白

2352
01:16:46,026 --> 01:16:47,716
在你们的 app 上使用

2353
01:16:47,716 --> 01:16:49,926
Core ML Vision 和 Depth

2354
01:16:49,926 --> 01:16:50,606
是多容易了

2355
01:16:50,896 --> 01:16:52,936
交还给你 Seb

2356
01:16:53,516 --> 01:16:57,756
[ 掌声 ]

2357
01:16:58,256 --> 01:16:59,986
>>  我必须得说

2358
01:16:59,986 --> 01:17:01,596
在那几分钟里

2359
01:17:02,186 --> 01:17:03,396
摇滚巨星的世界

2360
01:17:03,396 --> 01:17:04,276
感觉真爽

2361
01:17:04,956 --> 01:17:07,056
谢谢 Emily

2362
01:17:07,056 --> 01:17:07,726
很棒的演示

2363
01:17:07,726 --> 01:17:09,306
让我们再来深入看看

2364
01:17:09,306 --> 01:17:09,846
Core ML

2365
01:17:10,336 --> 01:17:11,636
Core ML 实际上是

2366
01:17:11,636 --> 01:17:12,946
帮助你在你的 app 里

2367
01:17:12,946 --> 01:17:14,416
建立新的体验

2368
01:17:14,416 --> 01:17:15,786
让你很容易利用

2369
01:17:15,786 --> 01:17:16,406
机器学习模型

2370
01:17:17,296 --> 01:17:19,206
这样你的应用就可以

2371
01:17:19,206 --> 01:17:20,306
利用特定领域的

2372
01:17:20,306 --> 01:17:20,896
框架了

2373
01:17:21,036 --> 01:17:21,836
我们已经看到了 Vision

2374
01:17:21,836 --> 01:17:22,866
还有自然语言

2375
01:17:22,866 --> 01:17:23,586
处理

2376
01:17:23,876 --> 01:17:25,506
或者直接使用

2377
01:17:25,506 --> 01:17:26,476
机器学习框架

2378
01:17:26,966 --> 01:17:28,256
所有这些都得到

2379
01:17:28,256 --> 01:17:29,936
Accelerate 和 Metal Shaders 的助力

2380
01:17:30,156 --> 01:17:31,366
真的会给你

2381
01:17:31,366 --> 01:17:32,336
最好的性能

2382
01:17:33,406 --> 01:17:34,946
Core ML 本身就提供

2383
01:17:34,946 --> 01:17:36,496
丰富的原语

2384
01:17:36,566 --> 01:17:37,576
来把当前最新的机器学习

2385
01:17:37,576 --> 01:17:39,266
模型整合到你的 app 中

2386
01:17:40,166 --> 01:17:40,986
我们今天上午已经了解过了

2387
01:17:41,806 --> 01:17:42,926
除了支持广泛的

2388
01:17:42,926 --> 01:17:44,546
超过 30 层的深度学习模型

2389
01:17:44,546 --> 01:17:46,666
它还支持

2390
01:17:46,716 --> 01:17:47,586
标准机器学习模型

2391
01:17:47,586 --> 01:17:48,946
比如树状集成

2392
01:17:48,946 --> 01:17:51,416
SVM 和广义线性模型等等

2393
01:17:51,526 --> 01:17:52,676
这样的目的是

2394
01:17:52,676 --> 01:17:54,626
让你能够把它用在

2395
01:17:54,626 --> 01:17:55,956
很多类型的应用上

2396
01:17:55,956 --> 01:17:57,276
包括手写识别

2397
01:17:57,646 --> 01:17:58,966
图像分类

2398
01:17:58,966 --> 01:18:00,956
音乐标签

2399
01:18:00,956 --> 01:18:02,416
手写识别

2400
01:18:02,416 --> 01:18:03,106
等等很多类型的应用

2401
01:18:03,106 --> 01:18:04,186
其他的域也有很多能

2402
01:18:04,186 --> 01:18:05,236
为你所用

2403
01:18:05,406 --> 01:18:06,436
你们要如何获得这些模型呢

2404
01:18:06,946 --> 01:18:08,576
我们让你们能够通过

2405
01:18:08,576 --> 01:18:10,376
Turi Caffe 和 Keras 等工具

2406
01:18:10,466 --> 01:18:12,426
访问机器学习群落

2407
01:18:12,426 --> 01:18:13,926
Keras 是 TensorFlow 的一个

2408
01:18:13,926 --> 01:18:15,466
流行的图书馆

2409
01:18:16,086 --> 01:18:17,076
作为开发者

2410
01:18:17,076 --> 01:18:18,156
你们的工作流是怎样的呢

2411
01:18:18,756 --> 01:18:20,326
比如你用 Caffe

2412
01:18:20,326 --> 01:18:22,216
训练你自己的模型

2413
01:18:22,216 --> 01:18:24,326
或者也许像 Emily 那样

2414
01:18:24,326 --> 01:18:25,346
从网上选择一个

2415
01:18:25,346 --> 01:18:26,336
预先训练过的模型

2416
01:18:26,676 --> 01:18:28,326
然后在 Converter 工具中

2417
01:18:28,326 --> 01:18:29,586
运行那个模型

2418
01:18:29,586 --> 01:18:31,076
那个 Converter 工具

2419
01:18:31,076 --> 01:18:33,586
产生一个可在 Core ML 兼容的

2420
01:18:33,586 --> 01:18:34,096
格式

2421
01:18:34,416 --> 01:18:36,106
然后把它拖拽到

2422
01:18:36,106 --> 01:18:37,886
Xcode 里  然后就可以轻松地

2423
01:18:37,886 --> 01:18:39,556
开始在你的应用里使用它了

2424
01:18:40,156 --> 01:18:41,526
我们还开放了

2425
01:18:41,526 --> 01:18:43,236
Core ML Converter 工具的源代码

2426
01:18:43,236 --> 01:18:45,006
这样在未来它就能

2427
01:18:45,006 --> 01:18:46,666
更广泛地被使用了

2428
01:18:47,616 --> 01:18:48,616
我们还注重性能表现

2429
01:18:48,616 --> 01:18:50,126
因此它在设备上

2430
01:18:50,126 --> 01:18:50,816
运行良好

2431
01:18:51,786 --> 01:18:53,326
我们做的包括

2432
01:18:53,326 --> 01:18:54,746
图形优化以及

2433
01:18:54,746 --> 01:18:56,046
自动将多个操作融合到一起

2434
01:18:57,136 --> 01:18:58,286
我们还自动分析

2435
01:18:58,286 --> 01:18:59,916
你的神经网络

2436
01:18:59,916 --> 01:19:01,566
以便更好地利用

2437
01:19:01,566 --> 01:19:02,196
硬件加速

2438
01:19:03,106 --> 01:19:04,336
把所有这些加在一起

2439
01:19:04,406 --> 01:19:06,246
Core ML 会真的让你能够

2440
01:19:06,246 --> 01:19:07,556
轻松地利用机器学习的力量

2441
01:19:07,556 --> 01:19:09,096
制作出真正智能的

2442
01:19:09,096 --> 01:19:10,596
应用

2443
01:19:11,356 --> 01:19:13,186
它使用简便

2444
01:19:13,186 --> 01:19:14,686
在我们所有的平台上

2445
01:19:14,686 --> 01:19:16,446
性能良好  效率很高

2446
01:19:16,446 --> 01:19:17,906
它真的能够让你把你的

2447
01:19:17,906 --> 01:19:19,486
下一代智能 app

2448
01:19:19,486 --> 01:19:21,286
用在数以亿计的

2449
01:19:21,286 --> 01:19:22,996
利用 Core ML 的设备上

2450
01:19:23,416 --> 01:19:24,766
我们已经迫不及待地想

2451
01:19:24,766 --> 01:19:25,986
看到你们使用它

2452
01:19:25,986 --> 01:19:28,376
以及我们今天讲到的

2453
01:19:28,376 --> 01:19:30,046
众多其他 API 创造出的成果

2454
01:19:30,936 --> 01:19:32,636
接下来  我想请

2455
01:19:32,636 --> 01:19:34,706
Jeremy Sandmel 上台

2456
01:19:34,706 --> 01:19:36,216
来讲一讲 Metal 和graphics

2457
01:19:36,646 --> 01:19:37,006
Jeremy

2458
01:19:37,006 --> 01:19:37,426
>> 谢谢 Seb

2459
01:19:41,146 --> 01:19:43,146
[ 掌声 ]

2460
01:19:43,276 --> 01:19:43,646
谢谢 Seb

2461
01:19:45,216 --> 01:19:46,646
我们开发了Metal

2462
01:19:46,646 --> 01:19:48,706
它驱动我们的 iOS

2463
01:19:48,706 --> 01:19:50,286
是 macOS 和 tvOS 产品上

2464
01:19:50,286 --> 01:19:53,386
性能超强的 GPU 最高效的方式

2465
01:19:55,456 --> 01:19:56,656
推出它之后

2466
01:19:56,896 --> 01:19:58,226
我们极大地扩展了

2467
01:19:58,226 --> 01:19:59,646
Metal 支持先进的

2468
01:19:59,646 --> 01:20:01,446
渲染  制图  以及其他

2469
01:20:01,506 --> 01:20:03,386
开发者呼声最高的计算特性

2470
01:20:04,016 --> 01:20:06,026
其结果是非常惊人的

2471
01:20:07,366 --> 01:20:09,356
在 iOS App Store 里有超过

2472
01:20:09,456 --> 01:20:11,076
143000 个开发者的

2473
01:20:11,076 --> 01:20:12,356
app 它们可以直接调用

2474
01:20:12,706 --> 01:20:13,926
Metal API

2475
01:20:14,086 --> 01:20:16,876
但我们同时也在

2476
01:20:16,876 --> 01:20:18,096
Metal 上构建着自己的系统框架

2477
01:20:18,896 --> 01:20:19,666
你们今天已经了解过

2478
01:20:19,666 --> 01:20:20,176
其中一些了

2479
01:20:20,646 --> 01:20:21,596
比如  如果你在用

2480
01:20:21,596 --> 01:20:23,226
UIKit 绘制用户界面

2481
01:20:23,536 --> 01:20:25,456
或者用 MapKit 绘制地图

2482
01:20:25,456 --> 01:20:26,226
那么你其实就在使用 Metal

2483
01:20:26,826 --> 01:20:29,466
实际上  在 App Store 中

2484
01:20:29,596 --> 01:20:31,546
有超过170万个 app

2485
01:20:31,666 --> 01:20:33,186
通过 Apple 系统框架使用 Metal

2486
01:20:33,386 --> 01:20:34,506
并且自动从

2487
01:20:34,506 --> 01:20:35,826
Metal 的性能和

2488
01:20:35,826 --> 01:20:37,416
功效中获益

2489
01:20:38,646 --> 01:20:40,216
开发者把 Metal 用在了

2490
01:20:40,216 --> 01:20:42,276
非常了不起的地方

2491
01:20:42,276 --> 01:20:43,756
比如 Serif Labs

2492
01:20:43,756 --> 01:20:45,296
就在 iPad 上的新

2493
01:20:45,296 --> 01:20:47,206
Affinity Photo 中的图像和照片编辑中

2494
01:20:47,206 --> 01:20:47,806
用到了它

2495
01:20:49,166 --> 01:20:50,936
还有 MAXON 即将发布的

2496
01:20:50,936 --> 01:20:53,906
Cinema 4D 就采用了

2497
01:20:53,906 --> 01:20:55,446
AMD的 Metal 加速的 ProRender 技术

2498
01:20:55,486 --> 01:20:56,606
进行专业 3D 建模和渲染

2499
01:20:57,886 --> 01:20:59,416
还有精彩的科幻冒险游戏

2500
01:20:59,416 --> 01:21:01,666
“Obduction” 制作者是 Cyan 公司

2501
01:21:01,666 --> 01:21:03,356
也就是游戏 “Myst” 的制作者

2502
01:21:04,466 --> 01:21:07,216
还有 Feral Interactive 公司

2503
01:21:07,216 --> 01:21:08,436
制作的精彩的赛车游戏

2504
01:21:08,436 --> 01:21:08,946
“F1 2016”

2505
01:21:09,876 --> 01:21:11,956
实际上 Feral 的 Ian Bullock

2506
01:21:11,956 --> 01:21:13,936
说过 Metal 更丰富的

2507
01:21:13,936 --> 01:21:15,526
特性和更低的系统开销

2508
01:21:15,526 --> 01:21:16,906
让他们能够把最新的游戏

2509
01:21:16,906 --> 01:21:18,186
带入 Mac 其所达到的

2510
01:21:18,646 --> 01:21:19,736
帧率和效果是

2511
01:21:19,796 --> 01:21:21,056
以前不可能实现的

2512
01:21:22,046 --> 01:21:24,886
2013 年起  Metal 就得到了

2513
01:21:24,886 --> 01:21:27,016
iOS 设备的广泛支持

2514
01:21:27,126 --> 01:21:30,396
在 Mac 设备上更早  2012 年就这样了

2515
01:21:30,396 --> 01:21:32,526
这意味着

2516
01:21:32,526 --> 01:21:35,286
现在有超过 9 亿个产品

2517
01:21:35,366 --> 01:21:37,566
支持 Metal 包括 macOS

2518
01:21:37,896 --> 01:21:39,036
iOS 和 tvOS 等系统

2519
01:21:39,126 --> 01:21:40,566
这真的很惊人

2520
01:21:40,566 --> 01:21:42,256
因此我们今天

2521
01:21:42,256 --> 01:21:43,536
非常激动  因为我们要发布

2522
01:21:43,536 --> 01:21:45,356
Metal 的下一代 Metal 2 了

2523
01:21:46,846 --> 01:21:48,506
Metal 2 有6大关键

2524
01:21:48,716 --> 01:21:50,056
提升  今天我们要

2525
01:21:50,056 --> 01:21:51,116
一一为大家讲解

2526
01:21:51,736 --> 01:21:53,976
首先是 GPU 驱动的

2527
01:21:54,086 --> 01:21:54,456
渲染

2528
01:21:55,006 --> 01:21:57,626
这意味着我们会继续

2529
01:21:57,626 --> 01:21:59,076
减少 CPU 要求的

2530
01:21:59,076 --> 01:22:01,056
工作量

2531
01:22:01,056 --> 01:22:02,516
以便执行你的 GPU 命令

2532
01:22:02,916 --> 01:22:03,946
你也许记得

2533
01:22:03,946 --> 01:22:06,156
OpenGL 的系统开销

2534
01:22:06,156 --> 01:22:07,616
可能会占据你 app 的

2535
01:22:07,616 --> 01:22:09,816
每帧渲染时间中的大部分

2536
01:22:10,266 --> 01:22:11,786
这会严重限制

2537
01:22:11,786 --> 01:22:12,956
你们的应用的性能

2538
01:22:13,436 --> 01:22:14,836
而 Metal 会大幅减少

2539
01:22:14,896 --> 01:22:17,096
CPU 时间  把时间还给

2540
01:22:17,226 --> 01:22:18,066
你的应用

2541
01:22:18,976 --> 01:22:20,406
有了 Metal 2 我们会在这方面

2542
01:22:20,406 --> 01:22:20,966
更进一步

2543
01:22:21,396 --> 01:22:22,676
我们已经推出了一些

2544
01:22:22,736 --> 01:22:24,286
新特性  尽可能地

2545
01:22:24,286 --> 01:22:26,206
减轻 CPU 的负担

2546
01:22:26,206 --> 01:22:27,966
让 GPU 去更高效地

2547
01:22:27,966 --> 01:22:29,266
计划它自己的工作

2548
01:22:30,426 --> 01:22:31,656
其中一个特性叫做

2549
01:22:31,656 --> 01:22:32,876
Metal 参数缓冲

2550
01:22:33,146 --> 01:22:33,726
稍微讲一下背景

2551
01:22:33,726 --> 01:22:35,796
Metal 渲染通道

2552
01:22:35,796 --> 01:22:37,876
是由图形状态和

2553
01:22:37,876 --> 01:22:39,386
对资源的引用构成的

2554
01:22:39,386 --> 01:22:40,826
比如纹理和缓冲器

2555
01:22:41,296 --> 01:22:42,096
这些资源在以前

2556
01:22:42,096 --> 01:22:43,016
在每次 draw call 时

2557
01:22:43,016 --> 01:22:45,646
都需要单独被指明

2558
01:22:46,936 --> 01:22:48,766
有了 Metal 2 你就可以

2559
01:22:48,766 --> 01:22:50,326
在 app 初始化时

2560
01:22:50,326 --> 01:22:52,446
把你的资源分配到

2561
01:22:52,446 --> 01:22:53,996
参数缓冲区

2562
01:22:53,996 --> 01:22:55,646
然后你可以快速在

2563
01:22:55,646 --> 01:22:57,446
根据每次 draw call

2564
01:22:57,446 --> 01:22:58,786
已经设置好的资源缓冲区之间切换

2565
01:22:58,786 --> 01:23:00,566
这会极大地提高

2566
01:23:00,566 --> 01:23:01,166
效率

2567
01:23:01,746 --> 01:23:03,516
实际上  你用到越多的资源

2568
01:23:03,516 --> 01:23:04,796
你的渲染越复杂

2569
01:23:04,796 --> 01:23:05,996
节省的时间

2570
01:23:05,996 --> 01:23:06,806
就会越多

2571
01:23:06,806 --> 01:23:08,486
在这个用到 Metal

2572
01:23:08,486 --> 01:23:10,296
参数缓冲区的例子中

2573
01:23:10,296 --> 01:23:11,916
我们减少了 draw call 所需的

2574
01:23:11,916 --> 01:23:18,266
CPU 时间  多达十倍

2575
01:23:18,386 --> 01:23:20,386
接下来 Metal 2

2576
01:23:20,386 --> 01:23:22,306
在遍布我们各种产品的

2577
01:23:22,336 --> 01:23:23,886
标准特性上  迈出了一大步

2578
01:23:24,826 --> 01:23:25,956
我们在强调

2579
01:23:25,956 --> 01:23:27,456
各平台兼容性的同时

2580
01:23:27,456 --> 01:23:29,386
仍然为开发者提供了

2581
01:23:29,386 --> 01:23:30,906
访问硬件特性

2582
01:23:30,906 --> 01:23:32,236
以获得优化性能

2583
01:23:32,316 --> 01:23:33,246
的机会

2584
01:23:34,746 --> 01:23:36,036
我们把 macOS 的关键特性

2585
01:23:36,036 --> 01:23:38,466
带到了 iOS 上  反过来也一样

2586
01:23:39,396 --> 01:23:41,316
其中一个例子就是

2587
01:23:41,316 --> 01:23:42,306
Metal Resource Heaps

2588
01:23:42,956 --> 01:23:44,046
它可以提供

2589
01:23:44,046 --> 01:23:45,226
更高效的办法来管理我们的

2590
01:23:45,226 --> 01:23:46,566
Metal 纹理和缓冲区

2591
01:23:46,806 --> 01:23:48,496
而不必要求你

2592
01:23:48,496 --> 01:23:49,996
懂得每一个独立的 GPU

2593
01:23:49,996 --> 01:23:51,866
是如何管理和分配

2594
01:23:51,866 --> 01:23:52,146
内存的

2595
01:23:53,476 --> 01:23:55,116
此前  每一个 Metal

2596
01:23:55,176 --> 01:23:56,026
纹理都需要操作系统

2597
01:23:56,126 --> 01:23:57,466
单独分配

2598
01:23:57,466 --> 01:23:58,616
一个独立的内存

2599
01:23:58,996 --> 01:24:00,126
这是很容易使用

2600
01:24:00,126 --> 01:24:01,396
很容易理解

2601
01:24:01,396 --> 01:24:02,416
但可能会很昂贵

2602
01:24:03,356 --> 01:24:04,326
有了 Metal Heaps

2603
01:24:04,326 --> 01:24:05,836
你可以分配一个单独的内存缓冲

2604
01:24:06,556 --> 01:24:08,566
然后在里面存储多个纹理

2605
01:24:09,676 --> 01:24:11,046
你还可以非常快地

2606
01:24:11,136 --> 01:24:12,976
重新分配

2607
01:24:12,976 --> 01:24:15,496
并为新的纹理重新解读

2608
01:24:15,496 --> 01:24:16,046
已有的内存

2609
01:24:17,896 --> 01:24:19,846
有趣的是 Metal Heaps

2610
01:24:19,846 --> 01:24:21,506
允许你重新使用

2611
01:24:21,506 --> 01:24:22,756
你暂时不需要的纹理中

2612
01:24:22,756 --> 01:24:24,326
已经被分配的内存

2613
01:24:24,506 --> 01:24:25,856
这可以帮你节省

2614
01:24:25,856 --> 01:24:26,996
大量的每帧内存

2615
01:24:27,586 --> 01:24:29,466
这非常简单

2616
01:24:29,666 --> 01:24:30,726
而且不会牺牲任何

2617
01:24:30,726 --> 01:24:31,216
性能

2618
01:24:32,576 --> 01:24:34,246
Metal 不仅适用于

2619
01:24:34,246 --> 01:24:34,666
图形

2620
01:24:34,776 --> 01:24:36,006
Metal Performance Shaders Library

2621
01:24:36,186 --> 01:24:37,486
提供了一整套优化的

2622
01:24:37,486 --> 01:24:39,946
图像处理  线性代数

2623
01:24:39,946 --> 01:24:41,366
以及其他计算操作方法

2624
01:24:43,296 --> 01:24:46,136
Metal 2 扩展了这种支持

2625
01:24:46,636 --> 01:24:48,366
以加速机器学习

2626
01:24:50,206 --> 01:24:51,326
我们为卷积码神经网络

2627
01:24:51,326 --> 01:24:52,726
加入了很多

2628
01:24:52,726 --> 01:24:54,666
GPU 加速的机器学习

2629
01:24:54,666 --> 01:24:56,676
原语和新的图像 API

2630
01:24:57,236 --> 01:24:58,326
所有这些都可以高效地

2631
01:24:58,326 --> 01:24:59,646
整合到你们的 Metal

2632
01:24:59,776 --> 01:25:03,026
图形和计算代码中去

2633
01:25:03,236 --> 01:25:04,296
机器学习内核

2634
01:25:04,296 --> 01:25:06,506
比如 LSTMs 卷积码和

2635
01:25:06,506 --> 01:25:07,806
神经元也包括在内

2636
01:25:07,806 --> 01:25:09,586
还有扩展的矩阵数学操作

2637
01:25:10,616 --> 01:25:12,586
最重要的是 MPS 也

2638
01:25:12,586 --> 01:25:14,026
让每个人能够使用

2639
01:25:14,026 --> 01:25:15,786
Seb 刚才提到的

2640
01:25:15,836 --> 01:25:17,266
强力的  新的 CoreML 框架

2641
01:25:17,266 --> 01:25:19,126
来获得 GPU 的全部性能

2642
01:25:19,126 --> 01:25:19,846
以供自动机器学习

2643
01:25:21,406 --> 01:25:24,876
接下来  我们很想说一说

2644
01:25:24,876 --> 01:25:26,466
Metal 2 里的虚拟现实

2645
01:25:27,576 --> 01:25:29,036
有了 Metal 2 和 macOS 的 High

2646
01:25:29,136 --> 01:25:30,896
Sierra  我们会让 Mac

2647
01:25:30,896 --> 01:25:32,276
第一次具有

2648
01:25:32,646 --> 01:25:34,016
VR 内容开发功能

2649
01:25:34,046 --> 01:25:36,276
包括 360 度视频编辑

2650
01:25:36,276 --> 01:25:38,106
和 3D 内容制作

2651
01:25:39,306 --> 01:25:40,246
我们还添加了对

2652
01:25:40,246 --> 01:25:42,056
头戴显示

2653
01:25:42,056 --> 01:25:43,316
低延迟立体渲染

2654
01:25:43,316 --> 01:25:44,766
的支持  以及强大

2655
01:25:44,766 --> 01:25:46,446
的新开发工具  优化

2656
01:25:46,446 --> 01:25:47,446
VR app 的性能

2657
01:25:48,466 --> 01:25:49,846
我们很高兴

2658
01:25:49,846 --> 01:25:50,936
能与 Valve 一起

2659
01:25:50,936 --> 01:25:52,156
密切合作  他们已经宣布

2660
01:25:52,156 --> 01:25:53,136
他们要把全部的

2661
01:25:53,136 --> 01:25:56,086
SteamVR runtime 和 SDK 带到

2662
01:25:56,086 --> 01:25:57,966
Mac 上 beta 版本今天就可以

2663
01:25:58,196 --> 01:25:58,736
获得

2664
01:25:59,496 --> 01:25:59,586
没错

2665
01:26:01,516 --> 01:26:04,696
[ 掌声 ]

2666
01:26:05,196 --> 01:26:06,386
也包括 HTC Vive

2667
01:26:06,386 --> 01:26:07,846
头戴设备和手柄

2668
01:26:09,026 --> 01:26:10,296
大家今天上午了解过了

2669
01:26:10,546 --> 01:26:11,906
我们也和

2670
01:26:11,906 --> 01:26:13,536
Epic Games 合作了

2671
01:26:13,536 --> 01:26:15,116
他们也宣布今年

2672
01:26:15,116 --> 01:26:16,556
晚些时候发行的虚幻引擎

2673
01:26:16,556 --> 01:26:18,346
将支持 macOS VR

2674
01:26:18,346 --> 01:26:19,806
9月份就可以在 GitHub 上面

2675
01:26:19,926 --> 01:26:21,056
提早访问

2676
01:26:21,966 --> 01:26:23,316
包括支持 Epic 的

2677
01:26:23,316 --> 01:26:25,486
沉浸式 VR Mode Editor

2678
01:26:25,486 --> 01:26:27,236
大家上午见到过了

2679
01:26:27,236 --> 01:26:28,516
你可以身临其境地

2680
01:26:28,686 --> 01:26:30,186
创造 VR 环境

2681
01:26:31,496 --> 01:26:33,266
我们也很高兴能与

2682
01:26:33,266 --> 01:26:34,346
Unity 进行合作

2683
01:26:34,346 --> 01:26:35,816
他们同样宣布将

2684
01:26:35,856 --> 01:26:37,206
把 macOS VR 支持

2685
01:26:37,206 --> 01:26:38,916
加入他们超强的引擎

2686
01:26:38,916 --> 01:26:40,286
以及很多最流行游戏

2687
01:26:40,286 --> 01:26:41,416
背后的编辑环境

2688
01:26:42,316 --> 01:26:43,506
还让开发者

2689
01:26:43,506 --> 01:26:45,196
I-Illusions 使用 Unity

2690
01:26:45,196 --> 01:26:47,996
令人欲罢不能的

2691
01:26:48,056 --> 01:26:49,996
VR 太空游戏 Space Pirates

2692
01:26:49,996 --> 01:26:51,336
Trainer 在未来几天内

2693
01:26:51,336 --> 01:26:52,616
Mac 上会支持

2694
01:26:54,086 --> 01:26:55,516
现在说一下性能

2695
01:26:56,146 --> 01:26:57,336
性能对于构建

2696
01:26:57,336 --> 01:26:58,806
出色的 VR app 来说至关重要

2697
01:26:59,246 --> 01:27:00,546
很多开发者都知道

2698
01:27:00,546 --> 01:27:01,496
要把他们的应用

2699
01:27:01,496 --> 01:27:03,566
优化到符合

2700
01:27:03,566 --> 01:27:05,846
每秒60帧的帧率

2701
01:27:05,846 --> 01:27:06,736
这意味着

2702
01:27:06,736 --> 01:27:08,786
你在每帧可以有

2703
01:27:08,786 --> 01:27:11,116
足足 16.7 毫秒的时间

2704
01:27:11,116 --> 01:27:12,156
供你的 app

2705
01:27:12,156 --> 01:27:12,486
渲染

2706
01:27:13,376 --> 01:27:14,786
但是  要制造出

2707
01:27:14,786 --> 01:27:16,796
沉浸式的 VR 体验

2708
01:27:16,856 --> 01:27:18,906
你必须渲染出立体的

2709
01:27:18,906 --> 01:27:20,816
两幅视图  帧率要达到 90 帧每秒

2710
01:27:20,976 --> 01:27:22,326
这就意味着每帧的时间

2711
01:27:22,326 --> 01:27:23,706
只有 11 毫秒了

2712
01:27:24,776 --> 01:27:25,776
但实际上  你甚至

2713
01:27:25,776 --> 01:27:26,956
无法全用上这 11 毫秒

2714
01:27:26,956 --> 01:27:28,186
因为还有 VR compositor

2715
01:27:28,186 --> 01:27:30,236
它要使用 GPU

2716
01:27:30,236 --> 01:27:32,136
叠加左右眼图像

2717
01:27:32,136 --> 01:27:33,846
补偿 HMD

2718
01:27:33,846 --> 01:27:35,266
镜片的扭曲失真

2719
01:27:35,316 --> 01:27:36,596
还要补偿头部运动

2720
01:27:37,276 --> 01:27:38,536
这就只留给你

2721
01:27:38,536 --> 01:27:39,886
大约每帧 10 毫秒的时间了

2722
01:27:40,236 --> 01:27:41,186
换句话说  你需要

2723
01:27:41,186 --> 01:27:43,166
让你的 VR app 达到

2724
01:27:43,396 --> 01:27:44,946
每帧 100 秒的帧率

2725
01:27:46,056 --> 01:27:47,426
这是个极具挑战性的工作

2726
01:27:47,556 --> 01:27:49,786
但是 Metal 2 提供了一些

2727
01:27:49,786 --> 01:27:51,326
非常强大的新工具

2728
01:27:51,326 --> 01:27:53,386
优化你的 VR app 的

2729
01:27:53,386 --> 01:27:53,786
性能

2730
01:27:54,196 --> 01:27:55,516
我们在 Metal system trace 里

2731
01:27:55,516 --> 01:27:57,006
内置了对于 SteamVR 的 compositor

2732
01:27:57,006 --> 01:27:58,246
跟踪点的支持

2733
01:27:59,806 --> 01:28:02,046
这会让你能够看到

2734
01:28:02,046 --> 01:28:04,016
GPU 时间都去了哪里

2735
01:28:04,016 --> 01:28:05,686
以及你的帧到达屏幕的

2736
01:28:05,686 --> 01:28:06,386
精确时刻

2737
01:28:07,676 --> 01:28:09,486
有了 Metal 2

2738
01:28:09,636 --> 01:28:11,106
和即将于今天发布的

2739
01:28:11,106 --> 01:28:11,776
新 iMac 里的

2740
01:28:11,776 --> 01:28:14,026
强大的新 GPU

2741
01:28:14,026 --> 01:28:17,006
我们让你们的 Mac 桌面

2742
01:28:17,586 --> 01:28:18,576
VR 内容开发大有用武之地

2743
01:28:18,676 --> 01:28:20,346
很多专业的

2744
01:28:20,346 --> 01:28:22,416
内容生产者都很喜欢

2745
01:28:22,416 --> 01:28:23,706
MacBook Pro 带来的移动办公便利

2746
01:28:24,306 --> 01:28:25,746
但大量的 VR 开发

2747
01:28:25,746 --> 01:28:27,996
需要强劲的 GPU

2748
01:28:27,996 --> 01:28:29,186
它很难能被装在

2749
01:28:29,186 --> 01:28:30,126
最轻最薄的笔记本上

2750
01:28:31,036 --> 01:28:33,016
因此 Metal 2 会

2751
01:28:33,016 --> 01:28:34,496
为你们的 MacBook Pro

2752
01:28:34,496 --> 01:28:36,966
和 macOS High Sierra 外接 GPU

2753
01:28:36,966 --> 01:28:37,866
提供一流支持

2754
01:28:38,936 --> 01:28:39,836
是的  谢谢 [ 掌声 ]

2755
01:28:42,326 --> 01:28:44,236
你们可以非常轻松地

2756
01:28:44,276 --> 01:28:45,786
用外接 GPU 给你们的 app 提供支持了

2757
01:28:46,006 --> 01:28:47,826
只需要几行代码

2758
01:28:47,826 --> 01:28:49,266
你要记录外接 GPU

2759
01:28:49,266 --> 01:28:50,646
设备连接回调函数

2760
01:28:50,646 --> 01:28:52,396
并指明

2761
01:28:52,396 --> 01:28:54,206
你的系统中的哪些 GPU

2762
01:28:54,206 --> 01:28:54,706
是可移除的

2763
01:28:56,116 --> 01:28:57,336
这样就两全其美了

2764
01:28:57,336 --> 01:28:59,316
可以用强劲的 GPU

2765
01:28:59,316 --> 01:29:00,406
在我们最便携的 Mac 设备上

2766
01:29:00,406 --> 01:29:03,186
构建沉浸式 VR app 了

2767
01:29:03,186 --> 01:29:05,246
我们对此非常兴奋

2768
01:29:06,016 --> 01:29:07,176
为帮你们尽快上手

2769
01:29:07,176 --> 01:29:08,476
我们会在开发者计划中

2770
01:29:08,476 --> 01:29:10,046
提供一个外部 GPU

2771
01:29:10,046 --> 01:29:10,886
Developer kit

2772
01:29:11,636 --> 01:29:13,136
里面包括你在 MacBook Pro 上

2773
01:29:13,136 --> 01:29:14,536
进行 VR 内容开发

2774
01:29:14,536 --> 01:29:16,416
所需要的一切

2775
01:29:16,416 --> 01:29:18,296
还包括 HTC Vive

2776
01:29:18,496 --> 01:29:19,796
头戴显示的优惠

2777
01:29:19,836 --> 01:29:21,556
今天就可以在

2778
01:29:21,556 --> 01:29:24,896
developer.apple.com 上获得

2779
01:29:25,116 --> 01:29:27,366
最后要说的是 Metal 2

2780
01:29:27,366 --> 01:29:29,326
让我们有了

2781
01:29:29,326 --> 01:29:30,806
最先进的图像开发

2782
01:29:30,806 --> 01:29:32,536
优化工具

2783
01:29:33,496 --> 01:29:34,796
我们添加了呼声最高的

2784
01:29:34,796 --> 01:29:36,656
工具和特性

2785
01:29:36,656 --> 01:29:38,396
包括快速 debug 分析和

2786
01:29:38,396 --> 01:29:40,136
优化你的 GPU

2787
01:29:40,136 --> 01:29:40,946
性能瓶颈

2788
01:29:40,946 --> 01:29:43,066
所有这些都直接

2789
01:29:43,066 --> 01:29:45,206
内置在 Xcode 和 Instruments 里

2790
01:29:46,196 --> 01:29:47,886
我们添加了强有力的新

2791
01:29:47,966 --> 01:29:49,706
GPU 硬件性能

2792
01:29:49,706 --> 01:29:50,916
和软件性能计数器

2793
01:29:50,916 --> 01:29:52,186
让你们深入了解

2794
01:29:52,186 --> 01:29:55,016
GPU 的操作和自动

2795
01:29:55,066 --> 01:29:56,256
瓶颈检测

2796
01:29:56,256 --> 01:29:58,026
让你直达性能问题的

2797
01:29:58,026 --> 01:29:59,106
核心源头

2798
01:29:59,586 --> 01:30:01,076
非常强大

2799
01:30:01,076 --> 01:30:03,086
接下来要为大家展示

2800
01:30:03,086 --> 01:30:05,066
Metal 2 开发工具的应用

2801
01:30:05,066 --> 01:30:06,186
我想请 Eric Sunnel

2802
01:30:06,426 --> 01:30:06,926
上台

2803
01:30:07,176 --> 01:30:07,296
Eric

2804
01:30:07,616 --> 01:30:07,846
>>  Jeremy

2805
01:30:10,846 --> 01:30:11,326
谢谢 Jeremy

2806
01:30:12,096 --> 01:30:12,666
大家好

2807
01:30:12,826 --> 01:30:13,626
今天我想给你们展示

2808
01:30:13,626 --> 01:30:14,556
一些 Metal 的新特性

2809
01:30:14,556 --> 01:30:17,456
比如 Xcode 里的 GPU 资料

2810
01:30:17,456 --> 01:30:19,606
计数器工具

2811
01:30:20,136 --> 01:30:21,736
屏幕上是一个 Metal 应用

2812
01:30:21,736 --> 01:30:22,866
正在渲染数以千计的

2813
01:30:22,866 --> 01:30:24,116
小行星

2814
01:30:24,556 --> 01:30:26,456
每一个都是独立的 draw call

2815
01:30:26,456 --> 01:30:27,386
需要注意的是

2816
01:30:27,386 --> 01:30:28,346
每一个 draw call

2817
01:30:28,346 --> 01:30:29,796
都在使用一些

2818
01:30:30,146 --> 01:30:31,386
独一无二的 Metal 资源

2819
01:30:31,386 --> 01:30:32,176
都是随机选择的

2820
01:30:32,806 --> 01:30:33,626
现在我要做的是

2821
01:30:33,626 --> 01:30:34,796
向场景中再添加一些

2822
01:30:34,796 --> 01:30:35,316
小行星

2823
01:30:35,316 --> 01:30:38,056
好的  现在情况不如

2824
01:30:38,056 --> 01:30:40,276
我预想的顺利

2825
01:30:40,276 --> 01:30:41,386
我们退出全屏

2826
01:30:42,536 --> 01:30:45,386
做一个 GPU 捕捉

2827
01:30:45,636 --> 01:30:46,876
看看是否能更好地理解

2828
01:30:46,946 --> 01:30:47,916
发生了什么

2829
01:30:48,506 --> 01:30:49,426
它不仅是做了一个 GPU

2830
01:30:49,516 --> 01:30:51,106
捕捉  并分析我们所有的

2831
01:30:51,106 --> 01:30:52,636
着色器  它还捕捉了

2832
01:30:52,636 --> 01:30:53,936
所有的硬件性能

2833
01:30:53,936 --> 01:30:55,826
计数器

2834
01:30:56,666 --> 01:30:57,746
它实际上在每个 draw call

2835
01:30:57,746 --> 01:30:58,046
都这样做一次

2836
01:30:58,046 --> 01:30:59,866
它可以很快就把这

2837
01:30:59,866 --> 01:31:00,236
视觉化

2838
01:31:01,466 --> 01:31:02,096
好了  现在在左边

2839
01:31:02,096 --> 01:31:02,886
让我更改一下

2840
01:31:02,886 --> 01:31:05,246
系统编辑器

2841
01:31:05,246 --> 01:31:06,836
在左手边

2842
01:31:06,836 --> 01:31:08,776
我可以访问一份 GPU 报告

2843
01:31:09,166 --> 01:31:11,056
它在标准编辑器里

2844
01:31:11,056 --> 01:31:12,706
总结出了所有的

2845
01:31:12,706 --> 01:31:13,676
在所有 draw call 的时间线上的

2846
01:31:13,676 --> 01:31:14,736
性能计数器

2847
01:31:15,276 --> 01:31:16,166
而在右手边

2848
01:31:16,166 --> 01:31:17,086
我也有所有的

2849
01:31:17,236 --> 01:31:18,346
详细的性能计数器

2850
01:31:18,346 --> 01:31:20,276
如果我选择了一个特定的

2851
01:31:20,276 --> 01:31:21,966
draw call 比如这个吧

2852
01:31:21,966 --> 01:31:22,706
所有的右边的

2853
01:31:22,706 --> 01:31:23,856
信息都会更新

2854
01:31:23,856 --> 01:31:24,726
显示出我们捕捉的

2855
01:31:24,726 --> 01:31:25,606
详细的性能计数器

2856
01:31:26,106 --> 01:31:28,526
如果我在 vertices 行上面悬停

2857
01:31:28,526 --> 01:31:29,916
我就能够了解

2858
01:31:29,956 --> 01:31:30,946
那个 vertice 的 draw call

2859
01:31:30,946 --> 01:31:32,666
提交到场景的

2860
01:31:32,666 --> 01:31:33,666
总数是多少

2861
01:31:33,786 --> 01:31:34,786
差不多有 8000

2862
01:31:34,786 --> 01:31:35,436
看上去挺高的

2863
01:31:36,056 --> 01:31:37,356
如果我去查看存储的像素

2864
01:31:37,356 --> 01:31:38,686
在那个 draw call 上

2865
01:31:38,686 --> 01:31:40,626
我只存储了大约 11 个像素

2866
01:31:40,626 --> 01:31:42,136
比起来就低多了

2867
01:31:43,356 --> 01:31:44,176
如果我们看右边的上部

2868
01:31:44,176 --> 01:31:45,676
我们能够看到

2869
01:31:45,676 --> 01:31:46,906
Xcode 提供的一些

2870
01:31:46,906 --> 01:31:47,456
建议

2871
01:31:47,896 --> 01:31:49,486
最上面的这个

2872
01:31:49,486 --> 01:31:50,786
每三角形像素比  是很低的

2873
01:31:51,436 --> 01:31:52,356
看上去没什么问题

2874
01:31:52,786 --> 01:31:54,136
如果我们打开这个

2875
01:31:54,136 --> 01:31:55,396
就能得到一些 Xcode 的建议

2876
01:31:56,406 --> 01:31:57,416
我们可以看到这里它说

2877
01:31:57,416 --> 01:31:58,706
考虑减少三角形的数量

2878
01:31:58,706 --> 01:32:00,236
并考虑减少

2879
01:32:00,236 --> 01:32:01,336
顶点着色点的工作

2880
01:32:01,906 --> 01:32:03,046
如果我们点击顶部

2881
01:32:03,046 --> 01:32:04,216
点击这里的链接

2882
01:32:04,366 --> 01:32:05,206
它会让我们看到

2883
01:32:05,206 --> 01:32:06,436
这个 draw call 的所有捆绑

2884
01:32:06,436 --> 01:32:06,826
资源

2885
01:32:07,436 --> 01:32:08,496
我们能看到

2886
01:32:08,496 --> 01:32:09,846
我们实际上是加载了

2887
01:32:09,846 --> 01:32:10,856
小行星的高精度模型

2888
01:32:10,856 --> 01:32:12,246
这在这个场景下没什么意义

2889
01:32:13,026 --> 01:32:14,086
所以我们要

2890
01:32:14,086 --> 01:32:15,726
改写一个源代码

2891
01:32:16,476 --> 01:32:17,476
退出编辑器

2892
01:32:18,466 --> 01:32:18,876
好了

2893
01:32:18,876 --> 01:32:20,606
我们把这个改成

2894
01:32:20,606 --> 01:32:22,506
我之前准备的

2895
01:32:22,506 --> 01:32:23,146
降阶模型

2896
01:32:23,956 --> 01:32:24,276
好了

2897
01:32:24,986 --> 01:32:25,966
现在  我们在这个项目里

2898
01:32:25,966 --> 01:32:26,576
再做一个改变

2899
01:32:26,576 --> 01:32:27,796
看看我们是否能让参数缓冲区

2900
01:32:27,796 --> 01:32:28,496
起作用

2901
01:32:29,076 --> 01:32:30,136
这里是 for 循环

2902
01:32:30,136 --> 01:32:31,636
它在做每个小行星的

2903
01:32:31,636 --> 01:32:33,126
draw call

2904
01:32:34,056 --> 01:32:35,446
在每个 draw call 之上

2905
01:32:35,446 --> 01:32:37,236
我设定了一系列资源

2906
01:32:37,706 --> 01:32:38,816
有了参数缓冲

2907
01:32:38,816 --> 01:32:41,476
我就能删除这个代码

2908
01:32:41,476 --> 01:32:42,806
换以插入一个调用

2909
01:32:42,806 --> 01:32:44,066
预先捆绑参数缓冲

2910
01:32:44,696 --> 01:32:47,526
允许 GPU 制作

2911
01:32:47,526 --> 01:32:49,216
动态选择  决定

2912
01:32:49,216 --> 01:32:50,346
使用哪些资源

2913
01:32:50,916 --> 01:32:52,316
做好了这两个简单的更改后

2914
01:32:52,316 --> 01:32:53,396
我们运行一下

2915
01:32:53,396 --> 01:32:54,836
看看怎么样了

2916
01:32:59,616 --> 01:33:00,096
好的

2917
01:33:00,096 --> 01:33:02,696
好的  看上去不错

2918
01:33:02,906 --> 01:33:03,716
我们再加一些

2919
01:33:03,716 --> 01:33:04,896
好的  看上去好多了

2920
01:33:04,926 --> 01:33:06,026
我想看的就是这个

2921
01:33:06,256 --> 01:33:07,596
好  就是这样

2922
01:33:07,836 --> 01:33:09,726
有了 Metal 2 的新特性

2923
01:33:09,726 --> 01:33:11,176
我希望你们能够更加深入

2924
01:33:11,176 --> 01:33:12,476
了解你们的应用把时间

2925
01:33:12,476 --> 01:33:14,326
都花在哪里了  我们还会

2926
01:33:14,326 --> 01:33:15,486
从关键路径上提供更多

2927
01:33:15,486 --> 01:33:15,756
代码

2928
01:33:15,756 --> 01:33:16,746
非常感谢

2929
01:33:17,116 --> 01:33:17,676
轮到你了 Jeremy

2930
01:33:18,516 --> 01:33:23,586
[ 掌声 ]

2931
01:33:24,086 --> 01:33:25,036
>>  好的  谢谢 Eric

2932
01:33:25,596 --> 01:33:27,856
这就是 Metal 2 GPU 驱动的

2933
01:33:27,856 --> 01:33:29,676
缓冲  一体化特性平台

2934
01:33:29,736 --> 01:33:31,796
机器学习加速

2935
01:33:31,796 --> 01:33:34,406
支持在 Mac 上进行 VR 内容开发

2936
01:33:34,406 --> 01:33:36,086
支持外接 GPU

2937
01:33:36,716 --> 01:33:38,206
和我们的

2938
01:33:38,206 --> 01:33:40,826
最新最先进的

2939
01:33:40,826 --> 01:33:42,526
开发者优化工具

2940
01:33:42,946 --> 01:33:44,126
我们迫不及待地想看到

2941
01:33:44,126 --> 01:33:45,786
你们接下来用 Metal 制作的东西

2942
01:33:46,226 --> 01:33:47,036
非常感谢

2943
01:33:47,606 --> 01:33:48,876
现在  我想请上来

2944
01:33:48,876 --> 01:33:50,996
AR&VR 技术开发

2945
01:33:50,996 --> 01:33:52,656
副总裁 Mike

2946
01:33:52,656 --> 01:33:53,146
Rockwell

2947
01:33:54,516 --> 01:33:56,546
[ 掌声 ]

2948
01:33:57,046 --> 01:33:57,706
>>  谢谢 Jeremy

2949
01:33:59,146 --> 01:34:01,156
我非常期待和你们

2950
01:34:01,156 --> 01:34:03,606
分享 ARKit 这是 Apple 的

2951
01:34:03,606 --> 01:34:05,846
新框架  它能在

2952
01:34:05,846 --> 01:34:07,516
iOS 上制作增强现实

2953
01:34:07,516 --> 01:34:08,496
应用

2954
01:34:09,806 --> 01:34:11,576
我们制作 ARKit 的

2955
01:34:11,576 --> 01:34:13,596
目标之一就是确保

2956
01:34:13,596 --> 01:34:15,146
我们能够从一开始就支持

2957
01:34:15,146 --> 01:34:16,836
广泛类型的设备

2958
01:34:17,006 --> 01:34:18,466
我们不想要求

2959
01:34:18,466 --> 01:34:20,396
特定的硬件

2960
01:34:20,476 --> 01:34:21,996
我很高兴地说  我们实现了这一点

2961
01:34:23,216 --> 01:34:27,856
ARKit 在 iPhone 6s 及升级的设备

2962
01:34:27,856 --> 01:34:29,596
iPad Pro 及升级的设备上都可以运行

2963
01:34:30,016 --> 01:34:31,296
这意味着它

2964
01:34:31,296 --> 01:34:33,596
从第一天开始就能在

2965
01:34:33,936 --> 01:34:34,986
数亿设备上运行

2966
01:34:35,656 --> 01:34:38,396
这让 iOS 成为了

2967
01:34:38,396 --> 01:34:39,966
全世界最大的 AP 平台

2968
01:34:41,176 --> 01:34:42,696
那么要制作出色的 AR

2969
01:34:42,696 --> 01:34:43,776
你们需要做什么呢

2970
01:34:44,526 --> 01:34:46,056
你们首先要知道的

2971
01:34:46,276 --> 01:34:48,346
就是相机在空间的哪里

2972
01:34:48,586 --> 01:34:49,426
它又在看哪里

2973
01:34:50,156 --> 01:34:51,776
我们使用了一个名为

2974
01:34:51,776 --> 01:34:53,466
视觉惯性里程计的技术实现这一点

2975
01:34:53,866 --> 01:34:54,866
我们看看它是怎么完成的

2976
01:34:56,276 --> 01:34:57,616
我们有场景

2977
01:34:57,616 --> 01:34:58,286
还有相机

2978
01:34:58,806 --> 01:34:59,816
相机在看世界

2979
01:35:01,126 --> 01:35:03,466
我们在世界中确定

2980
01:35:03,466 --> 01:35:06,476
特性要点  然后一帧一帧地

2981
01:35:06,476 --> 01:35:08,776
追踪它们

2982
01:35:08,966 --> 01:35:10,506
从那里  我们能够

2983
01:35:10,616 --> 01:35:13,256
反算出相机的位置

2984
01:35:13,346 --> 01:35:14,636
并制造一个

2985
01:35:14,636 --> 01:35:16,506
坐标系  然后

2986
01:35:16,506 --> 01:35:18,306
以 60 帧每秒的帧率

2987
01:35:18,796 --> 01:35:20,226
实时给出那个位置

2988
01:35:21,706 --> 01:35:23,326
如果要以每秒 60 帧

2989
01:35:23,376 --> 01:35:24,956
做那个计算

2990
01:35:24,956 --> 01:35:26,556
它会占据很大的

2991
01:35:26,556 --> 01:35:27,366
CPU 马力

2992
01:35:27,366 --> 01:35:30,216
我们没有这样做  而是把

2993
01:35:30,216 --> 01:35:31,946
加速计和陀螺仪的数据

2994
01:35:32,506 --> 01:35:35,226
与那个追踪信息融合

2995
01:35:35,226 --> 01:35:36,676
这样我们就能够

2996
01:35:36,676 --> 01:35:37,806
大幅减轻计算负担了

2997
01:35:38,876 --> 01:35:40,416
实际上  要获得这个信息

2998
01:35:40,416 --> 01:35:42,376
只需要用到一个 CPU 的

2999
01:35:42,376 --> 01:35:43,386
极小一部分

3000
01:35:44,496 --> 01:35:46,226
这会让 GPU 可以为你所用

3001
01:35:46,226 --> 01:35:48,376
完成出色的 3D 对象的

3002
01:35:48,546 --> 01:35:49,526
渲染

3003
01:35:51,416 --> 01:35:53,086
此外  你还需要

3004
01:35:53,086 --> 01:35:54,666
理解场景

3005
01:35:54,926 --> 01:35:56,246
那里有什么

3006
01:35:56,246 --> 01:35:57,266
这样你才能把东西放进去

3007
01:35:57,266 --> 01:36:00,506
让它们整合  并很自然

3008
01:36:01,536 --> 01:36:03,406
我们用之前跟踪的

3009
01:36:03,406 --> 01:36:05,436
特征要点去识别

3010
01:36:05,436 --> 01:36:06,936
场景中的主平面

3011
01:36:07,636 --> 01:36:09,136
我们寻找共面的东西

3012
01:36:09,706 --> 01:36:11,536
然后我们找到在场景中的

3013
01:36:11,536 --> 01:36:13,356
这些平面的范围

3014
01:36:13,726 --> 01:36:15,236
你就可以整合对象了

3015
01:36:15,236 --> 01:36:16,226
并让这个过程变得

3016
01:36:16,226 --> 01:36:17,096
完全自然

3017
01:36:17,096 --> 01:36:18,676
所以举例来说  我可以

3018
01:36:18,676 --> 01:36:20,966
把那个花瓶放在桌面上

3019
01:36:20,966 --> 01:36:22,436
看上去好像本来就在场景里

3020
01:36:23,066 --> 01:36:25,226
如果你不知道那张桌子的尺寸

3021
01:36:25,226 --> 01:36:26,956
你的花瓶就可能

3022
01:36:26,956 --> 01:36:28,506
变得非常巨大

3023
01:36:29,046 --> 01:36:30,626
所以在识别平面之外

3024
01:36:30,626 --> 01:36:32,026
我们还要保证

3025
01:36:32,026 --> 01:36:33,496
坐标系是精确的

3026
01:36:33,946 --> 01:36:35,656
实际上  误差在

3027
01:36:35,766 --> 01:36:38,326
5% 之内  这样你的对象

3028
01:36:38,506 --> 01:36:39,776
才会让人感觉它本身就在场景里

3029
01:36:42,396 --> 01:36:44,616
要让对象

3030
01:36:44,616 --> 01:36:45,776
在场景中感觉无违和

3031
01:36:45,776 --> 01:36:47,206
你要做的最后一件事

3032
01:36:47,206 --> 01:36:48,746
是让光线精准

3033
01:36:49,136 --> 01:36:51,516
所以我们提供了

3034
01:36:51,516 --> 01:36:53,246
精确的光线估算

3035
01:36:53,246 --> 01:36:54,516
所以在场景变暗时

3036
01:36:54,516 --> 01:36:55,636
你也可以同步把对象变暗

3037
01:36:55,836 --> 01:36:58,046
如果没有这个

3038
01:36:58,046 --> 01:36:59,396
物体就会在场景中发光

3039
01:36:59,396 --> 01:37:00,546
那就不自然了

3040
01:37:02,296 --> 01:37:04,036
我们看一看

3041
01:37:04,036 --> 01:37:05,966
你要如何访问这个超强的

3042
01:37:05,966 --> 01:37:06,486
框架

3043
01:37:06,876 --> 01:37:08,026
真的很简单

3044
01:37:08,836 --> 01:37:11,286
所有这些都可以从 ARKit 中得到

3045
01:37:11,696 --> 01:37:16,116
你只需要建立一个

3046
01:37:16,116 --> 01:37:18,926
会话配置

3047
01:37:18,926 --> 01:37:20,136
包括你是否想要平面估算

3048
01:37:20,136 --> 01:37:21,906
是否想要光线探测

3049
01:37:21,906 --> 01:37:23,216
等等内容

3050
01:37:23,646 --> 01:37:24,796
然后你可以开始 AR 会话

3051
01:37:26,846 --> 01:37:28,586
开始后  你可以从

3052
01:37:28,586 --> 01:37:30,826
AR 会话委托中

3053
01:37:30,826 --> 01:37:32,696
获取帧  或者

3054
01:37:32,696 --> 01:37:33,806
以 AR 会话属性的方式

3055
01:37:33,806 --> 01:37:35,496
访问它们

3056
01:37:36,216 --> 01:37:37,276
每一帧都包含

3057
01:37:37,276 --> 01:37:38,606
时间印记

3058
01:37:38,606 --> 01:37:40,806
捕捉的图像

3059
01:37:40,806 --> 01:37:43,446
相机方向与位置

3060
01:37:43,906 --> 01:37:45,176
场景主平面

3061
01:37:45,176 --> 01:37:46,006
和光线探测等

3062
01:37:47,346 --> 01:37:48,166
现在你的场景

3063
01:37:48,166 --> 01:37:50,206
设置完毕  你可以开始渲染了

3064
01:37:51,186 --> 01:37:53,796
ARKit 支持

3065
01:37:53,796 --> 01:37:54,926
渲染的多重选项

3066
01:37:55,966 --> 01:37:59,206
你可以使用刚才 Jeremy

3067
01:37:59,206 --> 01:38:00,396
说过的 Metal 2

3068
01:38:00,396 --> 01:38:02,126
它是一个非常强的

3069
01:38:02,126 --> 01:38:03,866
访问 GPU 的底层引擎

3070
01:38:04,336 --> 01:38:05,436
但你可能想要

3071
01:38:05,436 --> 01:38:06,616
使用高层框架

3072
01:38:06,616 --> 01:38:07,646
因为你的抽象化会用到它

3073
01:38:08,656 --> 01:38:11,846
所以我们优化了 SceneKit

3074
01:38:11,846 --> 01:38:13,596
和 SpriteKit 让它们和

3075
01:38:13,596 --> 01:38:15,616
ARKit 一起工作  非常高效

3076
01:38:16,766 --> 01:38:18,666
此外  我们在过去几个月里

3077
01:38:18,666 --> 01:38:20,166
与大型 3D 引擎

3078
01:38:20,166 --> 01:38:21,936
供应商合作

3079
01:38:21,936 --> 01:38:23,296
确保他们的

3080
01:38:23,296 --> 01:38:25,436
引擎针对 ARKit 优化过了

3081
01:38:27,296 --> 01:38:29,046
我非常高兴地宣布

3082
01:38:29,086 --> 01:38:30,796
Unity 本周将

3083
01:38:30,796 --> 01:38:32,876
发布一个开源插件

3084
01:38:32,876 --> 01:38:34,816
就像 ARKit 一样

3085
01:38:34,816 --> 01:38:36,056
非常易用

3086
01:38:36,896 --> 01:38:39,896
此外  Epic

3087
01:38:39,896 --> 01:38:42,196
也将在虚幻引擎中提供支持

3088
01:38:42,196 --> 01:38:44,296
在今天的开发者预览中可以看到

3089
01:38:44,296 --> 01:38:45,616
他们会在今年的晚些时候

3090
01:38:45,616 --> 01:38:46,516
正式发布

3091
01:38:47,606 --> 01:38:48,626
这就是一个预览

3092
01:38:48,626 --> 01:38:51,086
看一看 ARKit

3093
01:38:51,266 --> 01:38:53,086
我想请乐高公司的 Martin

3094
01:38:53,086 --> 01:38:55,286
Sanders 上台

3095
01:38:55,286 --> 01:38:56,986
向我们演示

3096
01:38:56,986 --> 01:38:57,966
他们创造出来的

3097
01:38:57,966 --> 01:38:58,436
有趣的东西

3098
01:38:58,726 --> 01:38:59,196
谢谢

3099
01:39:00,516 --> 01:39:04,166
[ 掌声 ]

3100
01:39:04,666 --> 01:39:05,216
>>  大家好

3101
01:39:05,646 --> 01:39:06,436
很高兴来这里

3102
01:39:07,146 --> 01:39:09,606
在乐高  我们用 ARKit

3103
01:39:09,606 --> 01:39:11,256
开发了一些有趣的

3104
01:39:11,256 --> 01:39:13,506
体验  让你们的乐高

3105
01:39:13,506 --> 01:39:15,566
玩具在真实世界中

3106
01:39:15,566 --> 01:39:16,616
获得生命

3107
01:39:17,516 --> 01:39:18,786
一切都始于

3108
01:39:18,786 --> 01:39:20,386
自动平面检测

3109
01:39:20,926 --> 01:39:22,526
这个直升机移动时

3110
01:39:22,526 --> 01:39:24,106
会给我们一个

3111
01:39:24,106 --> 01:39:25,826
表面  我们知道

3112
01:39:25,826 --> 01:39:26,866
要在这个表面上开始搭建

3113
01:39:27,166 --> 01:39:28,786
我们先从最近的

3114
01:39:28,916 --> 01:39:31,846
“乐高蝙蝠侠大电影”里

3115
01:39:32,076 --> 01:39:33,576
找些东西添加进去吧

3116
01:39:34,006 --> 01:39:35,956
这里我们有阿克哈姆疯人院

3117
01:39:36,106 --> 01:39:38,316
有真实的阴影

3118
01:39:38,466 --> 01:39:40,286
和动态灯光

3119
01:39:40,286 --> 01:39:41,406
真的让它栩栩如生

3120
01:39:41,956 --> 01:39:43,786
在此基础上

3121
01:39:43,786 --> 01:39:45,626
我们再加上动画和效果

3122
01:39:45,686 --> 01:39:47,316
就会真的再加上

3123
01:39:47,406 --> 01:39:48,856
一种魔法与生命的感觉

3124
01:39:49,586 --> 01:39:51,526
有了尺寸估算

3125
01:39:51,526 --> 01:39:53,046
我们加进来的玩具

3126
01:39:53,046 --> 01:39:54,616
都是一比一的

3127
01:39:54,616 --> 01:39:55,776
我们会知道它们和乐高玩具

3128
01:39:55,776 --> 01:39:56,426
是一样的大小

3129
01:39:57,656 --> 01:39:58,946
这看上去是个很酷的

3130
01:39:58,946 --> 01:40:00,446
哥谭镇场景

3131
01:40:00,446 --> 01:40:01,426
但总觉得

3132
01:40:01,486 --> 01:40:02,636
缺点什么  不是吗

3133
01:40:03,236 --> 01:40:05,256
所以我们要继续添加

3134
01:40:05,256 --> 01:40:07,376
独一无二的乐高蝙蝠车

3135
01:40:08,526 --> 01:40:09,786
还有那个男人

3136
01:40:09,786 --> 01:40:11,556
披风斗士  乐高蝙蝠侠  当然

3137
01:40:12,476 --> 01:40:14,326
这真是个超酷的

3138
01:40:14,326 --> 01:40:14,846
模型

3139
01:40:14,916 --> 01:40:15,866
毫无疑问

3140
01:40:15,916 --> 01:40:17,406
但我们可以更进一步

3141
01:40:18,086 --> 01:40:19,956
我们可以开始调查

3142
01:40:19,956 --> 01:40:21,546
模型是怎么搭建的

3143
01:40:21,796 --> 01:40:23,696
用这个视图来看一看

3144
01:40:24,586 --> 01:40:26,176
蝙蝠侠似乎不太高兴

3145
01:40:26,176 --> 01:40:27,546
所以我们还是先

3146
01:40:27,546 --> 01:40:28,666
把它拼回去吧  我想

3147
01:40:31,166 --> 01:40:33,826
我们还能放大

3148
01:40:33,826 --> 01:40:34,806
我们的模型

3149
01:40:34,846 --> 01:40:35,966
想像一下  你钻到

3150
01:40:35,966 --> 01:40:37,306
你的乐高模型内部

3151
01:40:37,306 --> 01:40:39,276
从全新的角度

3152
01:40:39,276 --> 01:40:40,416
观察探索它们

3153
01:40:40,416 --> 01:40:42,026
有了这么大的蝙蝠车

3154
01:40:42,106 --> 01:40:44,026
谁又不想

3155
01:40:44,026 --> 01:40:45,686
钻进去一探究竟

3156
01:40:45,686 --> 01:40:48,206
看看那些超酷的装备

3157
01:40:48,436 --> 01:40:49,236
和驾驶舱呢

3158
01:40:50,316 --> 01:40:51,846
[掌声]  甚至还能

3159
01:40:51,846 --> 01:40:53,286
从里面看到外面的朋友

3160
01:40:53,536 --> 01:40:53,896
什么都行

3161
01:40:53,976 --> 01:40:55,896
来张自拍

3162
01:40:55,896 --> 01:40:56,646
非常有趣

3163
01:40:57,536 --> 01:40:59,706
随着我们的乐高套装

3164
01:40:59,706 --> 01:41:01,596
获得了生命与动态

3165
01:41:01,596 --> 01:41:03,046
我们甚至可以开始扮演

3166
01:41:03,046 --> 01:41:04,096
电影制作者的角色了

3167
01:41:04,676 --> 01:41:06,536
想象一下  随着我们的进入  把这些场景

3168
01:41:06,536 --> 01:41:08,076
和精彩镜头都捕捉下来

3169
01:41:11,516 --> 01:41:13,886
[ 音乐 ]

3170
01:41:14,386 --> 01:41:14,886
无时无刻

3171
01:41:17,116 --> 01:41:19,766
在乐高  我们研究

3172
01:41:19,766 --> 01:41:21,026
增强现实已经有

3173
01:41:21,096 --> 01:41:21,646
好几年了

3174
01:41:21,646 --> 01:41:22,176
对吧

3175
01:41:22,486 --> 01:41:23,426
这个镜头是不是很赞

3176
01:41:26,501 --> 01:41:28,501
[ 掌声 ]

3177
01:41:28,986 --> 01:41:30,456
我们有很多的创意

3178
01:41:30,456 --> 01:41:31,696
但知道现在

3179
01:41:31,696 --> 01:41:33,546
有了 ARKit 的

3180
01:41:33,546 --> 01:41:35,146
强大功能与便捷性

3181
01:41:35,146 --> 01:41:36,576
我们才终于把创意变成了现实

3182
01:41:37,066 --> 01:41:38,676
所以在今年晚些时候

3183
01:41:38,746 --> 01:41:39,546
我们非常期待能够

3184
01:41:39,546 --> 01:41:40,236
把这些体验

3185
01:41:40,236 --> 01:41:42,406
在 App Store 中

3186
01:41:42,406 --> 01:41:44,086
带给你们和每一个人

3187
01:41:44,466 --> 01:41:45,376
非常感谢

3188
01:41:46,516 --> 01:41:51,556
[ 掌声 ]

3189
01:41:52,056 --> 01:41:52,356
>>  好的

3190
01:41:52,456 --> 01:41:53,346
谢谢

3191
01:41:53,346 --> 01:41:56,306
真是精彩的演示

3192
01:41:56,496 --> 01:41:57,986
如果你想了解

3193
01:41:57,986 --> 01:41:59,356
更多关于如何

3194
01:41:59,356 --> 01:42:01,196
在自己的 app 中利用 AR 的创意

3195
01:42:01,196 --> 01:42:02,356
我建议你们走到

3196
01:42:02,356 --> 01:42:04,006
动手体验区  现在已经开放了

3197
01:42:04,006 --> 01:42:05,406
一直会开到

3198
01:42:05,406 --> 01:42:06,106
今晚 7 点

3199
01:42:06,456 --> 01:42:07,536
你们会找到更多的

3200
01:42:07,596 --> 01:42:08,906
演示  来自我们在 AR 领域的

3201
01:42:08,906 --> 01:42:10,196
合作伙伴

3202
01:42:11,256 --> 01:42:12,276
这就是我们这个

3203
01:42:12,276 --> 01:42:13,226
演讲的全部内容

3204
01:42:13,586 --> 01:42:14,936
有一大批新的

3205
01:42:14,936 --> 01:42:16,956
技术和 API

3206
01:42:16,956 --> 01:42:18,026
你们都应该体验一下

3207
01:42:18,026 --> 01:42:20,376
我们让全新类型的

3208
01:42:20,376 --> 01:42:22,066
应用变得可能

3209
01:42:22,066 --> 01:42:23,146
我们为你们提供了

3210
01:42:23,146 --> 01:42:24,326
前沿技术的开发基石

3211
01:42:24,326 --> 01:42:25,576
如机器学习

3212
01:42:25,576 --> 01:42:27,076
和增强现实

3213
01:42:27,526 --> 01:42:28,936
所以请更深入了解

3214
01:42:28,936 --> 01:42:30,166
我们怎么利用它们

3215
01:42:30,166 --> 01:42:31,366
创造更加伟大的 app

3216
01:42:33,636 --> 01:42:35,736
我们所有操作系统

3217
01:42:35,736 --> 01:42:37,126
和开发者工具的

3218
01:42:37,186 --> 01:42:38,786
开发者预览

3219
01:42:38,786 --> 01:42:40,026
今天下午在 WWDC

3220
01:42:40,026 --> 01:42:41,746
Attendee Portal 就可以下载了

3221
01:42:41,746 --> 01:42:43,146
你们可以立刻

3222
01:42:43,146 --> 01:42:44,456
得到它们

3223
01:42:44,456 --> 01:42:45,576
并了解我们发布的东西

3224
01:42:46,786 --> 01:42:47,766
是的  当然

3225
01:42:47,816 --> 01:42:49,006
大会的很多演讲

3226
01:42:49,006 --> 01:42:50,056
会更加深入地

3227
01:42:50,056 --> 01:42:52,466
讲解这些主题

3228
01:42:52,466 --> 01:42:53,586
我建议你们好好利用

3229
01:42:53,586 --> 01:42:55,076
我们组织的很多实验室

3230
01:42:55,416 --> 01:42:56,706
你们可以在现场

3231
01:42:56,706 --> 01:42:57,866
见到 Apple 工程师

3232
01:42:57,866 --> 01:42:58,546
答疑解惑

3233
01:42:58,766 --> 01:43:00,516
我希望大家享受这次

3234
01:43:00,516 --> 01:43:01,546
盛会  我们本周

3235
01:43:01,546 --> 01:43:02,256
还会再见

